{
    "genesis_time": "2024-02-08T00:17:23.342520258Z",
    "chain_id": "xian-testnet-13",
    "initial_height": "40139",
    "consensus_params": {
        "block": {
            "max_bytes": "22020096",
            "max_gas": "-1",
            "time_iota_ms": "1000"
        },
        "evidence": {
            "max_age_num_blocks": "100000",
            "max_age_duration": "172800000000000",
            "max_bytes": "1048576"
        },
        "validator": {
            "pub_key_types": [
                "ed25519"
            ]
        },
        "version": {}
    },
    "validators": [
        {
            "address": "098F6EDD410E40638747DD39BF7301C74E4691B0",
            "pub_key": {
              "type": "tendermint/PubKeyEd25519",
              "value": "E8qaYtEMvCjVVAjgqF0x9cBZ/ju0kxZTjh0DBk8/LI4="
            },
            "power": "10",
            "name": ""
        }
    ],
    "app_hash": "",
    "abci_genesis": {
        "hash": "30383266323061623336663066303637363537643436623032356338373330346434636631643564646232393266316437656635623862623666666530666330",
        "number": 40139,
        "origin": {
            "signature": "",
            "sender": ""
        },
        "genesis": [
            {
                "key": "con_abc.__code__",
                "value": "__balances = Hash(default_value=decimal('0.0'), contract='con_abc', name=\n    'balances')\n__t_balances = Hash(default_value=decimal('0.0'), contract='con_abc', name=\n    't_balances')\n__metadata = Hash(contract='con_abc', name='metadata')\n__excluded = Hash(default_value=False, contract='con_abc', name='excluded')\n__r_total = Variable(contract='con_abc', name='r_total')\n__t_total = Variable(contract='con_abc', name='t_total')\n__approved = Hash(default_value=decimal('0.0'), contract='con_abc', name=\n    'approved')\nBURN_BPS = decimal('200.0')\nREFLECTION_BPS = decimal('300.0')\nTOTAL_BPS = decimal('10000.0')\nBURN_ADDRESS = '0' * 64\n\n\ndef ____():\n    initial_supply = decimal('100000000.0')\n    r_initial = initial_supply * decimal('1e+18')\n    __balances[ctx.caller] = r_initial\n    __r_total.set(r_initial)\n    __t_total.set(initial_supply)\n    __excluded[ctx.this] = True\n    __excluded[BURN_ADDRESS] = True\n    __t_balances[BURN_ADDRESS] = decimal('0.0')\n    __metadata['token_name'] = 'REFLECT TOKEN'\n    __metadata['token_symbol'] = 'RFT'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_abc')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can change metadata!'\n    __metadata[key] = value\n\n\n@__export('con_abc')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    from_excluded = __excluded[ctx.caller]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() / __t_total.get()\n    if not from_excluded:\n        assert __balances[ctx.caller\n            ] >= amount * rate, 'Not enough coins to send!'\n        r_amount = amount * rate\n    else:\n        assert __t_balances[ctx.caller] >= amount, 'Not enough coins to send!'\n        r_amount = amount * rate\n    burn_amount = amount * BURN_BPS / TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS / TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[ctx.caller] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[ctx.caller] -= amount\n            __balances[to] += transfer_amount * rate\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[ctx.caller] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[ctx.caller] -= r_amount\n        __balances[to] += transfer_amount * rate\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) * rate)\n    return f'Transferred {amount}'\n\n\n@__export('con_abc')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    __approved[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_abc')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __approved[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved!'\n    from_excluded = __excluded[main_account]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() / __t_total.get()\n    if not from_excluded:\n        assert __balances[main_account] >= amount * rate, 'Not enough coins!'\n        r_amount = amount * rate\n    else:\n        assert __t_balances[main_account] >= amount, 'Not enough coins!'\n        r_amount = amount * rate\n    burn_amount = amount * BURN_BPS / TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS / TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    __approved[main_account, ctx.caller] -= amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[main_account] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[main_account] -= amount\n            __balances[to] += transfer_amount * rate\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[main_account] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[main_account] -= r_amount\n        __balances[to] += transfer_amount * rate\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) * rate)\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_abc')\ndef balance_of(address: str):\n    if __excluded[address]:\n        return __t_balances[address]\n    return __balances[address] * __t_total.get() / __r_total.get()\n\n\n@__export('con_abc')\ndef allowance(owner: str, spender: str):\n    return __approved[owner, spender]\n\n\n@__export('con_abc')\ndef get_total_supply():\n    return __t_total.get()\n\n\n@__export('con_abc')\ndef exclude_from_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can exclude!'\n    assert not __excluded[address], 'Address already excluded!'\n    __excluded[address] = True\n    t_amount = balance_of(address)\n    __balances[address] = decimal('0.0')\n    __t_balances[address] = t_amount\n\n\n@__export('con_abc')\ndef include_in_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can include!'\n    assert __excluded[address], 'Address not excluded!'\n    t_amount = __t_balances[address]\n    rate = __r_total.get() / __t_total.get()\n    __excluded[address] = False\n    __t_balances[address] = decimal('0.0')\n    __balances[address] = t_amount * rate\n"
            },
            {
                "key": "con_abc.__developer__",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_abc.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        6,
                        23,
                        52,
                        47,
                        0
                    ]
                }
            },
            {
                "key": "con_abc.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a6a",
                "value": {
                    "__fixed__": "94999974349996522999.556539949361195554455946912575"
                }
            },
            {
                "key": "con_abc.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a7a",
                "value": {
                    "__fixed__": "94999977199996351999.416319906611185057789609246245"
                }
            },
            {
                "key": "con_abc.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a8a",
                "value": {
                    "__fixed__": "7.6E+20"
                }
            },
            {
                "key": "con_abc.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": {
                    "__fixed__": "99999000000051000007500001.0812001516080204081625724644"
                }
            },
            {
                "key": "con_abc.excluded:0000000000000000000000000000000000000000000000000000000000000000",
                "value": true
            },
            {
                "key": "con_abc.excluded:submission",
                "value": true
            },
            {
                "key": "con_abc.metadata:operator",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_abc.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_abc.metadata:token_name",
                "value": "REFLECT TOKEN"
            },
            {
                "key": "con_abc.metadata:token_symbol",
                "value": "RFT"
            },
            {
                "key": "con_abc.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_abc.r_total",
                "value": {
                    "__fixed__": "99999950000002550000375000.05406000758040102040812862322"
                }
            },
            {
                "key": "con_abc.t_balances:0000000000000000000000000000000000000000000000000000000000000000",
                "value": {
                    "__fixed__": "2E+1"
                }
            },
            {
                "key": "con_abc.t_total",
                "value": {
                    "__fixed__": "9.999998E+7"
                }
            },
            {
                "key": "con_addliquidity.LPBalances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_addliquidity.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stakeone",
                    "con_staketwo"
                ]
            },
            {
                "key": "con_addliquidity.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_addliquidity.LiquidityPools:token_a",
                "value": 100
            },
            {
                "key": "con_addliquidity.LiquidityPools:token_b",
                "value": 100
            },
            {
                "key": "con_addliquidity.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_addliquidity.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_addliquidity', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_addliquidity', name=\n    'LPBalances')\n__SwapFeePct = Variable(contract='con_addliquidity', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stakeone',\n        'con_staketwo']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_addliquidity')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    balances_of_token_a = importlib.import_module(token_contract_a)\n    balances_of_token_b = importlib.import_module(token_contract_b)\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert balances_of_token_a.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert balances_of_token_b.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    balances_of_token_a.transfer_from(amount=token_a_amount, to=ctx.this,\n        main_account=ctx.signer)\n    balances_of_token_a.transfer_from(amount=token_b_amount, to=ctx.this,\n        main_account=ctx.signer)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_addliquidity')\ndef get_lp_balance(account: str):\n    return __LPBalances[account]\n"
            },
            {
                "key": "con_addliquidity.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_addliquidity.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        11,
                        13,
                        6,
                        16,
                        0
                    ]
                }
            },
            {
                "key": "con_as.__code__",
                "value": "def ____():\n    for i in range(10):\n        importlib.import_module('currency')\n\n\n@__export('con_as')\ndef test():\n    return 'Hello, World!'\n"
            },
            {
                "key": "con_as.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_as.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        5,
                        10,
                        51,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_as2.__code__",
                "value": "def ____():\n    for i in range(40):\n        importlib.import_module('currency')\n\n\n@__export('con_as2')\ndef test():\n    return 'Hello, World!'\n"
            },
            {
                "key": "con_as2.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_as2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        5,
                        10,
                        54,
                        7,
                        0
                    ]
                }
            },
            {
                "key": "con_as4.__code__",
                "value": "def ____():\n    for i in range(40):\n        importlib.import_module('con_pixel_frames_master_v0_1')\n\n\n@__export('con_as4')\ndef test():\n    return 'Hello, World!'\n"
            },
            {
                "key": "con_as4.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_as4.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        5,
                        10,
                        54,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_asdasdsad.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_asdasdsad', name='balances')\n__metadata = Hash(contract='con_asdasdsad', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_asdasdsad', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_asdasdsad', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 123\n    __metadata['token_name'] = 'asdasdsad'\n    __metadata['token_symbol'] = 'sfa'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 123\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_asdasdsad')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_asdasdsad')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_asdasdsad')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_asdasdsad')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_asdasdsad')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_asdasdsad.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_asdasdsad.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        26,
                        16,
                        51,
                        25,
                        0
                    ]
                }
            },
            {
                "key": "con_asdasdsad.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": 123
            },
            {
                "key": "con_asdasdsad.metadata:operator",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_asdasdsad.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_asdasdsad.metadata:token_name",
                "value": "asdasdsad"
            },
            {
                "key": "con_asdasdsad.metadata:token_symbol",
                "value": "sfa"
            },
            {
                "key": "con_asdasdsad.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_asdasdsad.metadata:total_supply",
                "value": 123
            },
            {
                "key": "con_asds.__code__",
                "value": "def ____():\n    return ctx.this\n\n\n@__export('con_asds')\ndef test():\n    return ctx.this, ctx.caller, ctx.signer, ctx.entry\n"
            },
            {
                "key": "con_asds.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_asds.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        1,
                        10,
                        54,
                        29,
                        0
                    ]
                }
            },
            {
                "key": "con_bag.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_bag', name='balances')\n__metadata = Hash(contract='con_bag', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_bag', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_bag', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'DIRET'\n    __metadata['token_symbol'] = 'DIRET'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_bag')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_bag')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_bag')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_bag')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_bag')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_bag.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_bag.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        15,
                        19,
                        47,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_bag.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b",
                "value": 990000000
            },
            {
                "key": "con_bag.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_phased_test",
                "value": 10000000
            },
            {
                "key": "con_bag.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_phased_test1",
                "value": 0
            },
            {
                "key": "con_bag.balances:con_phased_test1",
                "value": 10000000
            },
            {
                "key": "con_bag.metadata:operator",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_bag.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_bag.metadata:token_name",
                "value": "DIRET"
            },
            {
                "key": "con_bag.metadata:token_symbol",
                "value": "DIRET"
            },
            {
                "key": "con_bag.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_bag.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_big2.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_big2', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_big2', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_big2', name='balances')\n__metadata = Hash(contract='con_big2', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 300000000000000000000000000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_big2')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_big2')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_big2')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_big2')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_big2')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_big2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_big2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        10,
                        20,
                        15,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_big2.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_big2.balances:holder",
                "value": {
                    "__fixed__": "1E+29"
                }
            },
            {
                "key": "con_big2.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_big2.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_big2.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_big2.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_big2.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_bigtoken.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_bigtoken', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_bigtoken', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_bigtoken', name='balances')\n__metadata = Hash(contract='con_bigtoken', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 55000000000000000000000000000\n    __balances['holder2'] = 99999999999999999999999999999\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_bigtoken')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_bigtoken')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_bigtoken')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_bigtoken')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_bigtoken')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_bigtoken.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_bigtoken.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        10,
                        20,
                        11,
                        17,
                        0
                    ]
                }
            },
            {
                "key": "con_bigtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_bigtoken.balances:holder2",
                "value": {
                    "__fixed__": "1E+29"
                }
            },
            {
                "key": "con_bigtoken.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_bigtoken.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_bigtoken.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_bigtoken.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_bigtoken.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_bigtoken2.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_bigtoken2', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_bigtoken2', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_bigtoken2', name='balances')\n__metadata = Hash(contract='con_bigtoken2', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 99999999999999999999999999999999999999999999999999\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_bigtoken2')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_bigtoken2')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_bigtoken2')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_bigtoken2')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_bigtoken2')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_bigtoken2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_bigtoken2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        5,
                        18,
                        50,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_bigtoken2.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "99999999999999999998910719715.999999968377538753310987705078"
                }
            },
            {
                "key": "con_bigtoken2.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex22",
                "value": {
                    "__fixed__": "13165974945580062.6"
                }
            },
            {
                "key": "con_bigtoken2.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex2test",
                "value": {
                    "__fixed__": "99999999999999999999998998980.000199697009030819862726968603"
                }
            },
            {
                "key": "con_bigtoken2.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f1",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "con_bigtoken2.balances:con_dex_pairs",
                "value": {
                    "__fixed__": "1000.000000031622461246689012294922"
                }
            },
            {
                "key": "con_bigtoken2.balances:con_dex_pairs2",
                "value": {
                    "__fixed__": "1089279284"
                }
            },
            {
                "key": "con_bigtoken2.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_bigtoken2.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_bigtoken2.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_bigtoken2.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_bigtoken2.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_bigtoken3.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_bigtoken3', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_bigtoken3', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_bigtoken3', name='balances')\n__metadata = Hash(contract='con_bigtoken3', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = decimal('1e+50')\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_bigtoken3')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_bigtoken3')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_bigtoken3')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_bigtoken3')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_bigtoken3')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_bigtoken3.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_bigtoken3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        5,
                        18,
                        50,
                        32,
                        0
                    ]
                }
            },
            {
                "key": "con_bigtoken3.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "1E+29"
                }
            },
            {
                "key": "con_bigtoken3.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_bigtoken3.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_bigtoken3.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_bigtoken3.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_bigtoken3.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_bla.__code__",
                "value": "__balances = Hash(default_value=decimal('0'), contract='con_bla', name=\n    'balances')\n__t_balances = Hash(default_value=decimal('0'), contract='con_bla', name=\n    't_balances')\n__metadata = Hash(contract='con_bla', name='metadata')\n__excluded = Hash(default_value=False, contract='con_bla', name='excluded')\n__r_total = Variable(contract='con_bla', name='r_total')\n__t_total = Variable(contract='con_bla', name='t_total')\n__approved = Hash(default_value=decimal('0'), contract='con_bla', name=\n    'approved')\nBURN_BPS = decimal('200')\nREFLECTION_BPS = decimal('300')\nTOTAL_BPS = decimal('10000')\nBURN_ADDRESS = '0' * 64\n\n\ndef ____(initial_supply: int):\n    initial_supply = decimal(initial_supply)\n    r_initial = initial_supply * decimal('1000000000000000000')\n    __balances[ctx.caller] = r_initial\n    __r_total.set(r_initial)\n    __t_total.set(initial_supply)\n    __excluded[ctx.this] = True\n    __excluded[BURN_ADDRESS] = True\n    __t_balances[BURN_ADDRESS] = decimal('0')\n    __metadata['token_name'] = 'REFLECT TOKEN'\n    __metadata['token_symbol'] = 'RFT'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_bla')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can change metadata!'\n    __metadata[key] = value\n\n\n@__export('con_bla')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    amount = decimal(amount)\n    from_excluded = __excluded[ctx.caller]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() / __t_total.get()\n    if not from_excluded:\n        assert __balances[ctx.caller\n            ] >= amount * rate, 'Not enough coins to send!'\n        r_amount = amount * rate\n    else:\n        assert __t_balances[ctx.caller] >= amount, 'Not enough coins to send!'\n        r_amount = amount * rate\n    burn_amount = amount * BURN_BPS / TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS / TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[ctx.caller] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[ctx.caller] -= amount\n            __balances[to] += transfer_amount * rate\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[ctx.caller] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[ctx.caller] -= r_amount\n        __balances[to] += transfer_amount * rate\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) * rate)\n    return f'Transferred {amount}'\n\n\n@__export('con_bla')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    amount = decimal(amount)\n    __approved[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_bla')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __approved[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved!'\n    amount = decimal(amount)\n    from_excluded = __excluded[main_account]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() / __t_total.get()\n    if not from_excluded:\n        assert __balances[main_account] >= amount * rate, 'Not enough coins!'\n        r_amount = amount * rate\n    else:\n        assert __t_balances[main_account] >= amount, 'Not enough coins!'\n        r_amount = amount * rate\n    burn_amount = amount * BURN_BPS / TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS / TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    __approved[main_account, ctx.caller] -= amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[main_account] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[main_account] -= amount\n            __balances[to] += transfer_amount * rate\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[main_account] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[main_account] -= r_amount\n        __balances[to] += transfer_amount * rate\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) * rate)\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_bla')\ndef balance_of(address: str):\n    if __excluded[address]:\n        return __t_balances[address]\n    return __balances[address] * __t_total.get() / __r_total.get()\n\n\n@__export('con_bla')\ndef allowance(owner: str, spender: str):\n    return __approved[owner, spender]\n\n\n@__export('con_bla')\ndef get_total_supply():\n    return __t_total.get()\n\n\n@__export('con_bla')\ndef exclude_from_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can exclude!'\n    assert not __excluded[address], 'Address already excluded!'\n    __excluded[address] = True\n    t_amount = balance_of(address)\n    __balances[address] = decimal('0')\n    __t_balances[address] = t_amount\n\n\n@__export('con_bla')\ndef include_in_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can include!'\n    assert __excluded[address], 'Address not excluded!'\n    t_amount = __t_balances[address]\n    rate = __r_total.get() / __t_total.get()\n    __excluded[address] = False\n    __t_balances[address] = decimal('0')\n    __balances[address] = t_amount * rate\n"
            },
            {
                "key": "con_bla.__developer__",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_bla.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        7,
                        0,
                        1,
                        24,
                        0
                    ]
                }
            },
            {
                "key": "con_bla.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a8a",
                "value": {
                    "__fixed__": "4.75E+20"
                }
            },
            {
                "key": "con_bla.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": {
                    "__fixed__": "9.99995E+25"
                }
            },
            {
                "key": "con_bla.excluded:0000000000000000000000000000000000000000000000000000000000000000",
                "value": true
            },
            {
                "key": "con_bla.excluded:submission",
                "value": true
            },
            {
                "key": "con_bla.metadata:operator",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_bla.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_bla.metadata:token_name",
                "value": "REFLECT TOKEN"
            },
            {
                "key": "con_bla.metadata:token_symbol",
                "value": "RFT"
            },
            {
                "key": "con_bla.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_bla.r_total",
                "value": {
                    "__fixed__": "9.9999975E+25"
                }
            },
            {
                "key": "con_bla.t_balances:0000000000000000000000000000000000000000000000000000000000000000",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_bla.t_total",
                "value": {
                    "__fixed__": "9.999999E+7"
                }
            },
            {
                "key": "con_bn.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_bn')\ndef bn():\n    big_number = int(\n        '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'\n         * \n        999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        )\n    return big_number\n"
            },
            {
                "key": "con_bn.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_bn.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        7,
                        14,
                        3,
                        40,
                        0
                    ]
                }
            },
            {
                "key": "con_bn2.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_bn2')\ndef bn(num_str: str, num_int: int):\n    big_number = int(num_str * num_int)\n    return big_number\n"
            },
            {
                "key": "con_bn2.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_bn2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        7,
                        14,
                        4,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_bridge.__code__",
                "value": "__nonces = Hash(default_value=0, contract='con_bridge', name='nonces')\n__proofs = Hash(contract='con_bridge', name='proofs')\n__metadata = Hash(contract='con_bridge', name='metadata')\n__supported_tokens = Hash(default_value=False, contract='con_bridge', name=\n    'supported_tokens')\n__token_decimals = Hash(default_value=18, contract='con_bridge', name=\n    'token_decimals')\n__bridge_address = Variable(contract='con_bridge', name='bridge_address')\nHEX_BYTES = 64\n\n\ndef __left_pad(s):\n    while len(s) < HEX_BYTES:\n        s = f'0{s}'\n    return s[:HEX_BYTES]\n\n\ndef __pack_eth_address(address):\n    assert address.startswith('0x'), 'Invalid Ethereum address format'\n    return __left_pad(address[2:])\n\n\ndef __pack_amount(amount, decimals):\n    i = int(amount * 10 ** decimals)\n    return __left_pad(hex(i)[2:])\n\n\ndef __pack_int(i):\n    return __left_pad(hex(int(i))[2:])\n\n\ndef ____():\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_bridge')\ndef set_bridge(eth_contract: str):\n    assert ctx.caller == __metadata['operator'], 'Only the operator can call!'\n    __bridge_address.set(eth_contract)\n\n\n@__export('con_bridge')\ndef set_operator(operator: str):\n    assert ctx.caller == __metadata['operator'], 'Only the operator can call!'\n    __metadata['operator'] = operator\n\n\n@__export('con_bridge')\ndef add_supported_token(token_contract: str, decimals: int):\n    \"\"\" Adds a new token to the bridge system. \"\"\"\n    assert ctx.caller == __metadata['operator'], 'Only the operator can call!'\n    __supported_tokens[token_contract] = True\n    __token_decimals[token_contract] = decimals\n\n\n@__export('con_bridge')\ndef remove_supported_token(token_contract: str):\n    \"\"\" Removes a token from the bridge system. \"\"\"\n    assert ctx.caller == __metadata['operator'], 'Only the operator can call!'\n    __supported_tokens[token_contract] = False\n\n\n@__export('con_bridge')\ndef deposit(token_contract: str, amount: float, ethereum_address: str):\n    \"\"\" Locks tokens on this chain and emits data for an off-chain relayer to process. \"\"\"\n    assert __supported_tokens[token_contract], 'Token not supported!'\n    importlib.import_module(token_contract).transfer_from(amount=amount, to\n        =ctx.this, main_account=ctx.caller)\n    packed_token = __pack_eth_address(token_contract)\n    packed_amount = __pack_amount(amount, __token_decimals[token_contract])\n    packed_nonce = __pack_int(__nonces[ethereum_address] + 1)\n    packed_address = __pack_eth_address(ethereum_address)\n    packed_bridge = __pack_eth_address(__bridge_address.get())\n    __nonces[ethereum_address] += 1\n    abi = (packed_token + packed_amount + packed_nonce + packed_address +\n        packed_bridge)\n    return abi\n\n\n@__export('con_bridge')\ndef withdraw(token_contract: str, amount: float, to: str, signature: str):\n    \"\"\" Releases tokens when a valid withdrawal is processed from Ethereum. \"\"\"\n    assert ctx.caller == __metadata['operator'], 'Only the operator can call!'\n    assert __supported_tokens[token_contract], 'Token not supported!'\n    assert __proofs[signature] is None, 'Signature already used'\n    __proofs[signature] = True\n    importlib.import_module(token_contract).transfer(amount=amount, to=to)\n"
            },
            {
                "key": "con_bridge.__developer__",
                "value": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05"
            },
            {
                "key": "con_bridge.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        16,
                        16,
                        22,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_bridge.metadata:operator",
                "value": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05"
            },
            {
                "key": "con_bridge.supported_tokens:currency",
                "value": true
            },
            {
                "key": "con_bridge.token_decimals:currency",
                "value": 18
            },
            {
                "key": "con_bridge_x.__code__",
                "value": "I = importlib\ntoken_interface = [I.Func('transfer', args=('amount', 'to')), I.Func('mint',\n    args=('amount', 'to')), I.Func('allowance', args=('Owner', 'spender')),\n    I.Func('approve', args=('amount', 'to')), I.Func('transfer_from', args=\n    ('amount', 'to', 'main_account'))]\n__supported_tokens = Hash(contract='con_bridge_x', name='supported_tokens')\n__nonces = Hash(default_value=0, contract='con_bridge_x', name='nonces')\n__owner = Variable(contract='con_bridge_x', name='owner')\n__proofs = Hash(contract='con_bridge_x', name='proofs')\n__log = Variable(contract='con_bridge_x', name='log')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n\n\ndef __left_pad(s: str):\n    while len(s) < 64:\n        s = f'0{s}'\n    if len(s) > 64:\n        s = s[:64]\n    return s\n\n\ndef __unpack_uint256(uint: str, decimals: int):\n    i = int(uint, 16)\n    reduced_i = i / 10 ** decimals\n    return reduced_i\n\n\ndef __pack_amount(amount: float, decimals: int):\n    i = int(amount * 10 ** decimals)\n    h = hex(i)[2:]\n    return __left_pad(h)\n\n\ndef __pack_eth_address(address: str):\n    assert address.startswith('0x'), 'Invalid Ethereum prefix'\n    a = address[2:]\n    assert len(a) == 40, 'Invalid address length'\n    int(a, 16)\n    return __left_pad(a)\n\n\ndef __pack_int(i: int):\n    i = int(i)\n    h = hex(i)[2:]\n    return __left_pad(h)\n\n\n@__export('con_bridge_x')\ndef mint(ethereum_contract: str, amount: str, lamden_wallet: str):\n    assert ctx.caller == __owner.get(\n        ), f'Only owner can call! Current caller is {ctx.caller}, owner should be {__owner.get()}'\n    assert __supported_tokens[ethereum_contract\n        ] is not None, 'Invalid Ethereum Token!'\n    decimals = __supported_tokens[ethereum_contract, 'decimals']\n    assert decimals is not None, 'Unexpected decimal error'\n    unpacked_amount = __unpack_uint256(amount, decimals)\n    token = I.import_module(__supported_tokens[ethereum_contract])\n    assert I.enforce_interface(token, token_interface\n        ), 'Invalid token interface!'\n    token.mint(amount=unpacked_amount, to=lamden_wallet)\n\n\n@__export('con_bridge_x')\ndef burn(ethereum_contract: str, ethereum_address: str, lamden_address: str,\n    amount: float):\n    assert ctx.caller == __owner.get(), 'Only owner can call!'\n    assert __supported_tokens[ethereum_contract\n        ] is not None, 'Invalid Ethereum Token!'\n    token = I.import_module(__supported_tokens[ethereum_contract])\n    assert I.enforce_interface(token, token_interface\n        ), 'Invalid token interface!'\n    token.transfer_from(amount=amount, to=ctx.this, main_account=lamden_address\n        )\n    packed_token = __pack_eth_address(ethereum_contract)\n    packed_amount = __pack_amount(amount, __supported_tokens[\n        ethereum_contract, 'decimals'])\n    packed_nonce = __pack_int(__nonces[ethereum_address] + 1)\n    packed_address = __pack_eth_address(ethereum_address)\n    __nonces[ethereum_address] += 1\n    abi = packed_token + packed_amount + packed_nonce + packed_address\n    return abi\n\n\n@__export('con_bridge_x')\ndef add_token(ethereum_contract: str, lamden_contract: str, decimals: int):\n    assert __supported_tokens[ethereum_contract\n        ] is None, 'Token already supported'\n    assert ctx.caller == __owner.get(), 'Only owner can call!'\n    token = I.import_module(lamden_contract)\n    assert I.enforce_interface(token, token_interface\n        ), 'Invalid token interface!'\n    __supported_tokens[ethereum_contract] = lamden_contract\n    __supported_tokens[ethereum_contract, 'decimals'] = decimals\n\n\n@__export('con_bridge_x')\ndef post_proof(hashed_abi: str, signed_abi: str):\n    assert ctx.caller == __owner.get(), 'Only owner can call!'\n    __proofs[hashed_abi] = signed_abi\n"
            },
            {
                "key": "con_bridge_x.__developer__",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_bridge_x.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        20,
                        7,
                        24,
                        47,
                        0
                    ]
                }
            },
            {
                "key": "con_bridge_x.owner",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_busd.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_busd', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_busd', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_busd', name='balances')\n__metadata = Hash(contract='con_busd', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 9999999999\n    __metadata['token_name'] = 'Binance-Peg BUSD Token'\n    __metadata['token_symbol'] = 'BUSD'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_busd')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_busd')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_busd')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_busd')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_busd')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_busd.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_busd.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        9,
                        2,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_busd.balances:1a59bfc58681b4d6b94c6d5bbe2177a33ffe015c773b51d2d420a1e5b8684276",
                "value": 1
            },
            {
                "key": "con_busd.balances:20c91ffb518aafdee0e227dc7b8866c51f097292c829d77b82eda081a329fa34",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_busd.balances:2bc83443f9322c2efed1d2266daba228eb8b1f935fa815e0a67907515b052e07",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_busd.balances:303d423efa797d047247c69a51006fdc6726ab7346ccd54f9b7bc86101eb47db",
                "value": 1
            },
            {
                "key": "con_busd.balances:4477e8c8a2d73b76afdd5699f0d9b5076cd38598553934f7363b7fc492c71caa",
                "value": 1
            },
            {
                "key": "con_busd.balances:73020e63cef76c3b4728bbf9c8df52eec50c1ac0511df83b131446563203a0e0",
                "value": 1
            },
            {
                "key": "con_busd.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": {
                    "__fixed__": "9999999978"
                }
            },
            {
                "key": "con_busd.balances:800db1f09811a7711f54489186a436f69ecaec06ed8237e2b85d659a32576c06",
                "value": 1
            },
            {
                "key": "con_busd.balances:a7e9b7f48fe2e706e01dc58426a2259ba7e66771ffc1745dcffab2fc007ac348",
                "value": 1
            },
            {
                "key": "con_busd.balances:b76c285cac0b9c2a686885815c697195ddabbcef312a13546a410651e03e7d2a",
                "value": 1
            },
            {
                "key": "con_busd.balances:d99d356fe2d208d401c0fa6c0b48c1cc5d56d3a75aae1234d0fa5b94b1eca690",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_busd.balances:dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                "value": 9
            },
            {
                "key": "con_busd.balances:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": {
                    "__fixed__": "4"
                }
            },
            {
                "key": "con_busd.balances:f4057859a460266df1363e13dcca1603a68bed0dbd0392437c206bfa6ad917c4",
                "value": 1
            },
            {
                "key": "con_busd.balances:f4d0d7bee54dbd6b7c01ef726781e1ed501a0842937f943a7228c4214fef5d5f",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_busd.metadata:operator",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_busd.metadata:token_name",
                "value": "Binance-Peg BUSD Token"
            },
            {
                "key": "con_busd.metadata:token_symbol",
                "value": "BUSD"
            },
            {
                "key": "con_counter.__code__",
                "value": "__counter = Variable(contract='con_counter', name='counter')\n__address_to_counter = Hash(default_value=0, contract='con_counter', name=\n    'address_to_counter')\n__owner = Variable(contract='con_counter', name='owner')\n__stopped = Variable(contract='con_counter', name='stopped')\n\n\ndef ____():\n    __counter.set(0)\n    __owner.set(ctx.caller)\n    __stopped.set(False)\n\n\n@__export('con_counter')\ndef increment_counter():\n    assert not __stopped.get(), 'Contract is stopped'\n    assert 'con_' not in ctx.caller, 'Contracts cannot call this function'\n    __counter.set(__counter.get() + 1)\n    __address_to_counter[ctx.caller] = __address_to_counter[ctx.caller] + 1\n    return __counter.get()\n\n\n@__export('con_counter')\ndef get_counter():\n    return __counter.get()\n\n\n@__export('con_counter')\ndef get_address_counter(address: str):\n    return __address_to_counter[address]\n\n\n@__export('con_counter')\ndef stop():\n    assert ctx.caller == __owner.get(), 'Only the owner can stop the contract'\n    __stopped.set(True)\n    return True\n\n\n@__export('con_counter')\ndef start():\n    assert ctx.caller == __owner.get(), 'Only the owner can start the contract'\n    __stopped.set(False)\n    return True\n\n\n@__export('con_counter')\ndef reset():\n    assert ctx.caller == __owner.get(), 'Only the owner can reset the contract'\n    __counter.set(0)\n    __address_to_counter.clear()\n    return True\n"
            },
            {
                "key": "con_counter.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_counter.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        17,
                        8,
                        20,
                        14,
                        0
                    ]
                }
            },
            {
                "key": "con_counter.address_to_counter:1e9043a943ec2985200029add5d031cbcc012ca8dc0b8ab6e7694bb475924c9b",
                "value": 1
            },
            {
                "key": "con_counter.address_to_counter:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 3
            },
            {
                "key": "con_counter.address_to_counter:3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                "value": 1
            },
            {
                "key": "con_counter.address_to_counter:5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4",
                "value": 8
            },
            {
                "key": "con_counter.address_to_counter:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": 1
            },
            {
                "key": "con_counter.address_to_counter:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": 3
            },
            {
                "key": "con_counter.address_to_counter:8ce11ec41a14ba8a3545b3214f5913bb129bd686b392d496359fc98f89da490a",
                "value": 8
            },
            {
                "key": "con_counter.address_to_counter:c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4",
                "value": 1
            },
            {
                "key": "con_counter.address_to_counter:d64910b048759a11123441851c3e19f2e9019a338cc2a6b2633b0078a673c4ee",
                "value": 3
            },
            {
                "key": "con_counter.address_to_counter:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": 3
            },
            {
                "key": "con_counter.address_to_counter:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": 3
            },
            {
                "key": "con_counter.counter",
                "value": 35
            },
            {
                "key": "con_counter.owner",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_counter.stopped",
                "value": false
            },
            {
                "key": "con_crosstoken.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_crosstoken', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_crosstoken', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_crosstoken', name='balances')\n__metadata = Hash(contract='con_crosstoken', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Cross Token'\n    __metadata['token_symbol'] = 'CT'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_crosstoken')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_crosstoken')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_crosstoken')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_crosstoken')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_crosstoken')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_crosstoken.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_crosstoken.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        4,
                        19,
                        31,
                        33,
                        0
                    ]
                }
            },
            {
                "key": "con_crosstoken.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": 1000000
            },
            {
                "key": "con_crosstoken.metadata:operator",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_crosstoken.metadata:token_name",
                "value": "Cross Token"
            },
            {
                "key": "con_crosstoken.metadata:token_symbol",
                "value": "CT"
            },
            {
                "key": "con_dafuq.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_dafuq', name='balances')\n__metadata = Hash(contract='con_dafuq', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_dafuq')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_dafuq.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        23,
                        10,
                        47,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_dafuq.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_dafuq.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_dafuq.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_dafuq.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_dafuq.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_dafuq1.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_dafuq1', name='balances')\n__metadata = Hash(contract='con_dafuq1', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_dafuq1')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_dafuq1.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        23,
                        14,
                        37,
                        19,
                        0
                    ]
                }
            },
            {
                "key": "con_dafuq1.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_dafuq1.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq1.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_dafuq1.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_dafuq1.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_dafuq1.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_dafuq1123.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_dafuq1123', name='balances')\n__metadata = Hash(contract='con_dafuq1123', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_dafuq1123')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_dafuq1123.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq1123.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        23,
                        14,
                        57,
                        55,
                        0
                    ]
                }
            },
            {
                "key": "con_dafuq1123.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_dafuq1123.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq1123.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_dafuq1123.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_dafuq1123.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_dafuq1123.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_dao.ProposalCount",
                "value": 0
            },
            {
                "key": "con_dao.__code__",
                "value": "__Proposals = Hash(default_value=None, contract='con_dao', name='Proposals')\n__Ballots = Hash(default_value=False, contract='con_dao', name='Ballots')\n__BallotCount = Hash(default_value=0, contract='con_dao', name='BallotCount')\n__ProposalCount = Variable(contract='con_dao', name='ProposalCount')\n__ProcessedBallots = Hash(default_value=0, contract='con_dao', name=\n    'ProcessedBallots')\n__VerifiedBallots = Hash(default_value=0, contract='con_dao', name=\n    'VerifiedBallots')\n__LPWeight = Hash(default_value=0, contract='con_dao', name='LPWeight')\n__metadata = Hash(default_value=None, contract='con_dao', name='metadata')\nI = importlib\n\n\ndef ____():\n    __metadata['operator'] = ctx.caller\n    __metadata['fee_currency'] = 'con_rswp_lst001'\n    __metadata['fee_amount'] = 27272\n    __metadata['token_contract'] = 'con_rswp_lst001'\n    __metadata['v_token_contracts'] = ['con_staking_rswp_rswp_interop_v2']\n    __metadata['lp_v_token_contracts'] = ['con_liq_mining_rswp_rswp']\n    __metadata['dex_contract'] = 'con_rocketswap_official_v1_1'\n    __metadata['min_description_length'] = 10\n    __metadata['min_title_length'] = 10\n    __ProposalCount.set(0)\n\n\n@__export('con_dao')\ndef create_proposal(title: str, description: str, date_decision: datetime.\n    datetime, choices: list):\n    assert len(title) > __metadata['min_title_length'\n        ], 'Title must be more than 10 characters long.'\n    assert len(description) > __metadata['min_description_length'\n        ], 'Description length must be more than 100 characters long.'\n    assert date_decision > now, 'the decision date must take place in the future.'\n    assert len(choices) > 1, 'you must specify at least 2 choices.'\n    for choice in choices:\n        assert len(choice) > 0, 'choice cannot be an empty string.'\n    I.import_module(__metadata['fee_currency']).transfer_from(amount=\n        __metadata['fee_amount'], to=__metadata['operator'], main_account=\n        ctx.signer)\n    proposal_idx = __ProposalCount.get() + 1\n    __ProposalCount.set(proposal_idx)\n    __Proposals[proposal_idx] = {'title': title, 'description': description,\n        'date_decision': date_decision, 'choices': choices, 'state': 'open'}\n    token_contract_name = __metadata['token_contract']\n    if __LPWeight[proposal_idx, token_contract_name] is 0:\n        __set_lp_token_value(proposal_idx, token_contract_name)\n    return proposal_idx\n\n\n@__export('con_dao')\ndef count_ballots(proposal_idx: int, batch_size: int=100):\n    \"\"\"checks\"\"\"\n    assert now > __Proposals[proposal_idx]['date_decision'\n        ], 'It is not possible to count the ballots for this proposal yet'\n    assert __Proposals[proposal_idx]['state'\n        ] is not 'concluded', 'The ballots for this proposal have already been counted'\n    assert __Ballots[proposal_idx, 'counted'\n        ] is not True, 'this ballot has been counted.'\n    \"\"\"check if this proposal has a stored lp token weight, if no, calculate how much the LP weight is worth\"\"\"\n    start_idx = __ProcessedBallots[proposal_idx] + 1\n    current_ballot_idx = 0\n    \"\"\"count the ballots\"\"\"\n    for i in range(0, batch_size):\n        current_ballot_idx = start_idx + i\n        voter_vk = __Ballots[proposal_idx, 'forwards_index',\n            current_ballot_idx, 'user_vk']\n        __ProcessedBallots[proposal_idx, current_ballot_idx, 'choice'\n            ] = __Ballots[proposal_idx, 'forwards_index',\n            current_ballot_idx, 'choice']\n        __ProcessedBallots[proposal_idx, current_ballot_idx, 'user_vk'\n            ] = voter_vk\n        __ProcessedBallots[proposal_idx, current_ballot_idx, 'weight'\n            ] = get_vk_weight(voter_vk, proposal_idx)\n        if current_ballot_idx == __BallotCount[proposal_idx]:\n            __Ballots[proposal_idx, 'counted'] = True\n            __ProcessedBallots[proposal_idx] = current_ballot_idx\n            return\n    __ProcessedBallots[proposal_idx] = current_ballot_idx\n\n\n@__export('con_dao')\ndef verify_ballots(proposal_idx: int, batch_size: int=100):\n    \"\"\"checks\"\"\"\n    assert __Ballots[proposal_idx, 'counted'\n        ] is True, 'ballots must be counted before verifying them'\n    assert __Ballots[proposal_idx, 'verified'\n        ] is not True, 'the ballots for this proposal have already been verified'\n    assert __Proposals[proposal_idx]['state'\n        ] is not 'concluded', 'this proposal has been concluded'\n    start_idx = __VerifiedBallots[proposal_idx] + 1\n    current_ballot_idx = 0\n    for i in range(0, batch_size):\n        current_ballot_idx = start_idx + i\n        voter_vk = __ProcessedBallots[proposal_idx, current_ballot_idx,\n            'user_vk']\n        choice = __ProcessedBallots[proposal_idx, current_ballot_idx, 'choice']\n        processed_weight = __ProcessedBallots[proposal_idx,\n            current_ballot_idx, 'weight']\n        current_weight = get_vk_weight(voter_vk, proposal_idx)\n        if current_weight >= processed_weight - processed_weight * decimal(\n            '0.05'):\n            __VerifiedBallots[proposal_idx, choice] += current_weight\n        if current_ballot_idx == __BallotCount[proposal_idx]:\n            choices_len = len(__Proposals[proposal_idx]['choices'])\n            __Ballots[proposal_idx, 'verified'] = True\n            __Proposals[proposal_idx]['state'] = 'concluded'\n            __Proposals[proposal_idx]['results'] = {}\n            for c in range(0, choices_len):\n                __Proposals[proposal_idx]['results'][str(c)\n                    ] = __VerifiedBallots[proposal_idx, c]\n            __Proposals[proposal_idx] = __Proposals[proposal_idx]\n            __VerifiedBallots[proposal_idx] = current_ballot_idx\n            return\n    __VerifiedBallots[proposal_idx] = current_ballot_idx\n\n\n@__export('con_dao')\ndef cast_ballot(proposal_idx: int, choice_idx: int):\n    voter = ctx.signer\n    ballot_idx = __BallotCount[proposal_idx] + 1\n    \"\"\"checks\"\"\"\n    assert __Proposals[proposal_idx] is not False\n    assert choice_idx >= 0 and choice_idx < len(__Proposals[proposal_idx][\n        'choices']), 'you must select a valid choice.'\n    assert now < __Proposals[proposal_idx]['date_decision'\n        ], 'It is too late to cast a ballot for this proposal.'\n    assert __Ballots[proposal_idx, 'backwards_index', voter\n        ] is False, 'you have already cast a ballot !'\n    \"\"\"record ballot\"\"\"\n    __Ballots[proposal_idx, 'forwards_index', ballot_idx, 'choice'\n        ] = choice_idx\n    __Ballots[proposal_idx, 'forwards_index', ballot_idx, 'user_vk'] = voter\n    __Ballots[proposal_idx, 'backwards_index', voter] = ballot_idx\n    __BallotCount[proposal_idx] = ballot_idx\n\n\n@__export('con_dao')\ndef get_vk_weight(vk: str, proposal_idx: int):\n    \"\"\"\n    Get the rswp value of any tokens, vtokens and LP tokens for rswp pairs (staked or not). \n    \"\"\"\n    token_contract_name = __metadata['token_contract']\n    user_token_total = 0\n    user_token_total += get_token_value(vk, token_contract_name)\n    user_token_total += get_staked_token_value(vk)\n    user_token_total += get_rocketfuel_value(vk, token_contract_name)\n    user_token_total += get_lp_value(vk, proposal_idx, token_contract_name)\n    user_token_total += get_staked_lp_value(vk, proposal_idx,\n        token_contract_name)\n    return user_token_total\n\n\n@__export('con_dao')\ndef get_token_value(vk: str, token_contract_name: str):\n    return ForeignHash(foreign_contract=token_contract_name, foreign_name=\n        'balances')[vk]\n\n\n@__export('con_dao')\ndef get_staked_token_value(vk: str):\n    \"\"\"iterate through v token contracts and get user balance.\"\"\"\n    vk_balance = 0\n    for contract in __metadata['v_token_contracts']:\n        vk_balance += ForeignHash(foreign_contract=contract, foreign_name=\n            'balances')[vk]\n    return vk_balance\n\n\n@__export('con_dao')\ndef get_rocketfuel_value(vk: str, token_contract_name: str):\n    \"\"\"\n    get value of RSWP staked in rocket fuel\n    \"\"\"\n    dex_contract_name = __metadata['dex_contract']\n    __dex_staked_amount = ForeignHash(foreign_contract=dex_contract_name,\n        foreign_name='staked_amount', contract='con_dao', name=\n        'dex_staked_amount')\n    return __dex_staked_amount[vk, token_contract_name] or 0\n\n\n@__export('con_dao')\ndef get_lp_value(vk: str, proposal_idx: int, token_contract_name: str):\n    \"\"\"\n    get lp value from the dex contract\n    \"\"\"\n    dex_contract_name = __metadata['dex_contract']\n    __dex_lp_points = ForeignHash(foreign_contract=dex_contract_name,\n        foreign_name='lp_points', contract='con_dao', name='dex_lp_points')\n    user_lp = __dex_lp_points[token_contract_name, vk] or 0\n    return user_lp * __LPWeight[proposal_idx, token_contract_name]\n\n\n@__export('con_dao')\ndef get_staked_lp_value(vk: str, proposal_idx: int, token_contract_name: str):\n    lp_count = 0\n    staking_contract_names = __metadata['lp_v_token_contracts']\n    lp_token_value = __LPWeight[proposal_idx, token_contract_name]\n    for contract in staking_contract_names:\n        __balances = ForeignHash(foreign_contract=contract, foreign_name=\n            'balances', contract='con_dao', name='balances')\n        vk_balance = __balances[vk] or 0\n        lp_count += vk_balance\n    return lp_count * __LPWeight[proposal_idx, token_contract_name]\n\n\ndef __set_lp_token_value(proposal_idx: int, token_contract_name: str):\n    \"\"\"\n    import the dex contract, get the reserves value for the TAU-RSWP pair, take the RSWP value of the LP and multiply it by 2\n    \"\"\"\n    dex_contract_name = __metadata['dex_contract']\n    __dex_reserves = ForeignHash(foreign_contract=dex_contract_name,\n        foreign_name='reserves', contract='con_dao', name='dex_reserves')\n    __dex_lp_points = ForeignHash(foreign_contract=dex_contract_name,\n        foreign_name='lp_points', contract='con_dao', name='dex_lp_points')\n    reserves = __dex_reserves[token_contract_name]\n    total_lp = __dex_lp_points[token_contract_name]\n    token_per_lp = reserves[1] / total_lp\n    __LPWeight[proposal_idx, token_contract_name] = token_per_lp * 2\n\n\ndef __assert_operator():\n    assert ctx.caller == __metadata['operator'\n        ], 'You are not the listed operator for this contract.'\n\n\n@__export('con_dao')\ndef change_meta(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n"
            },
            {
                "key": "con_dao.__developer__",
                "value": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e"
            },
            {
                "key": "con_dao.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        10,
                        21,
                        48,
                        10,
                        0
                    ]
                }
            },
            {
                "key": "con_dao.metadata:dex_contract",
                "value": "con_rocketswap_official_v1_1"
            },
            {
                "key": "con_dao.metadata:fee_amount",
                "value": 27272
            },
            {
                "key": "con_dao.metadata:fee_currency",
                "value": "con_rswp_lst001"
            },
            {
                "key": "con_dao.metadata:lp_v_token_contracts",
                "value": [
                    "con_liq_mining_rswp_rswp"
                ]
            },
            {
                "key": "con_dao.metadata:min_description_length",
                "value": 10
            },
            {
                "key": "con_dao.metadata:min_title_length",
                "value": 10
            },
            {
                "key": "con_dao.metadata:operator",
                "value": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e"
            },
            {
                "key": "con_dao.metadata:token_contract",
                "value": "con_rswp_lst001"
            },
            {
                "key": "con_dao.metadata:v_token_contracts",
                "value": [
                    "con_staking_rswp_rswp_interop_v2"
                ]
            },
            {
                "key": "con_daq.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_daq', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_daq', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_daq', name='balances')\n__metadata = Hash(contract='con_daq', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_daq')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_daq')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_daq')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_daq')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_daq')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_daq.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_daq.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        13,
                        17,
                        23,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_daq.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_daq.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_daq.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_daq.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_daq.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_daq.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_dato.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_dato', name='balances')\n__metadata = Hash(contract='con_dato', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_dato', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_dato', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'DAPP TOKEN'\n    __metadata['token_symbol'] = 'DATO'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_dato')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_dato')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_dato')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_dato')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_dato')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_dato.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_dato.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        3,
                        26,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_dato.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b",
                "value": {
                    "__fixed__": "0.04"
                }
            },
            {
                "key": "con_dato.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_econ_dato",
                "value": 10000000
            },
            {
                "key": "con_dato.balances:74ecefbea782e737d2de34f935955087665bec75ab7dd1f04c4a9e0e5aa597b7",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "con_dato.balances:c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4",
                "value": {
                    "__fixed__": "989000000.04"
                }
            },
            {
                "key": "con_dato.balances:c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4:con_hotsale_dato",
                "value": 0
            },
            {
                "key": "con_dato.balances:c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4:con_test_sale7",
                "value": 0
            },
            {
                "key": "con_dato.balances:c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4:con_testlast_sale",
                "value": 9000000
            },
            {
                "key": "con_dato.balances:con_hotsale_dato",
                "value": {
                    "__fixed__": "9999999.87"
                }
            },
            {
                "key": "con_dato.balances:con_test_sale7",
                "value": 0
            },
            {
                "key": "con_dato.balances:con_testlast_sale",
                "value": 1000000
            },
            {
                "key": "con_dato.metadata:operator",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_dato.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_dato.metadata:token_name",
                "value": "DAPP TOKEN"
            },
            {
                "key": "con_dato.metadata:token_symbol",
                "value": "DATO"
            },
            {
                "key": "con_dato.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_dato.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_dex22.__code__",
                "value": "DEX_PAIRS = 'con_dex_pairs2'\nMAX_ROUTE = 32\n__toks_to_pair = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name=\n    'toks_to_pair', contract='con_dex22', name='toks_to_pair')\n__pairsmap = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name='pairs',\n    contract='con_dex22', name='pairsmap')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef __PAIRS():\n    return importlib.import_module(DEX_PAIRS)\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    t.transfer_from(value, to, src)\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, '__DEXNAME: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    pairs = __PAIRS()\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == None:\n        desired_pair = pairs.createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = pairs.getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dex22')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: datetime.datetime):\n    assert now < deadline, '__DEXNAME: EXPIRED'\n    pairs = __PAIRS()\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFrom(tokenA, ctx.caller, DEX_PAIRS, amountA)\n    __safeTransferFrom(tokenB, ctx.caller, DEX_PAIRS, amountB)\n    pairs.sync2(pair)\n    liquidity = pairs.mint(pair, to)\n    return amountA, amountB, liquidity\n\n\n@__export('con_dex22')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: datetime.datetime):\n    assert now < deadline, '__DEXNAME: EXPIRED'\n    pairs = __PAIRS()\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != None, \"Pair doesn't exist!\"\n    pairs.liqTransfer_from(desired_pair, liquidity, DEX_PAIRS, ctx.caller)\n    pairs.sync2(desired_pair)\n    amountA, amountB = pairs.burn(desired_pair, to)\n    assert amountA >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n    assert amountB >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n    return amountA, amountB\n\n\n@__export('con_dex22')\ndef getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * decimal('0.997')\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn + amountInWithFee\n    return numerator / denominator\n\n\n@__export('con_dex22')\ndef swapExactTokenForToken(amountIn: float, amountOutMin: float, pair: int,\n    src: str, to: str, deadline: datetime.datetime):\n    assert now < deadline, '__DEXNAME: EXPIRED'\n    pairs = __PAIRS()\n    reserve0, reserve1, ignore = pairs.getReserves(pair)\n    order = src == __pairsmap[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, '__DEXNAMEe: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFrom(src, ctx.caller, DEX_PAIRS, amountIn)\n    pairs.sync2(pair)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    pairs.swap(pair, out0, out1, to)\n"
            },
            {
                "key": "con_dex22.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex22.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        17,
                        21,
                        33,
                        25,
                        0
                    ]
                }
            },
            {
                "key": "con_dex2test.__code__",
                "value": "DEX_PAIRS = 'con_dex_pairs'\nMAX_ROUTE = 32\n__toks_to_pair = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name=\n    'toks_to_pair', contract='con_dex2test', name='toks_to_pair')\n__pairsmap = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name='pairs',\n    contract='con_dex2test', name='pairsmap')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef __PAIRS():\n    return importlib.import_module(DEX_PAIRS)\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    t.transfer_from(value, to, src)\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, '__DEXNAME: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    pairs = __PAIRS()\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == None:\n        desired_pair = pairs.createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = pairs.getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dex2test')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: datetime.datetime):\n    assert now < deadline, '__DEXNAME: EXPIRED'\n    pairs = __PAIRS()\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFrom(tokenA, ctx.caller, DEX_PAIRS, amountA)\n    __safeTransferFrom(tokenB, ctx.caller, DEX_PAIRS, amountB)\n    pairs.sync2(pair)\n    liquidity = pairs.mint(pair, to)\n    return amountA, amountB, liquidity\n\n\n@__export('con_dex2test')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: datetime.datetime):\n    assert now < deadline, '__DEXNAME: EXPIRED'\n    pairs = __PAIRS()\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != None, \"Pair doesn't exist!\"\n    pairs.liqTransfer_from(desired_pair, liquidity, DEX_PAIRS, ctx.caller)\n    pairs.sync2(desired_pair)\n    amountA, amountB = pairs.burn(desired_pair, to)\n    assert amountA >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n    assert amountB >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n    return amountA, amountB\n\n\n@__export('con_dex2test')\ndef getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * decimal('0.997')\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn + amountInWithFee\n    return numerator / denominator\n\n\n@__export('con_dex2test')\ndef swapExactTokenForToken(amountIn: float, amountOutMin: float, pair: int,\n    src: str, to: str, deadline: datetime.datetime):\n    assert now < deadline, '__DEXNAME: EXPIRED'\n    pairs = __PAIRS()\n    reserve0, reserve1, ignore = pairs.getReserves(pair)\n    order = src == __pairsmap[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, '__DEXNAMEe: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFrom(src, ctx.caller, DEX_PAIRS, amountIn)\n    pairs.sync2(pair)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    pairs.swap(pair, out0, out1, to)\n"
            },
            {
                "key": "con_dex2test.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex2test.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        43,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_helper_test.__code__",
                "value": "@__export('con_dex_helper_test')\ndef toksinfo(contracts: list):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='metadata',\n            contract='con_dex_helper_test', name='phash')\n        rv.append([__phash['token_symbol'], __phash['token_name']])\n    return rv\n\n\n@__export('con_dex_helper_test')\ndef toksbals(contracts: list, who: str):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='balances',\n            contract='con_dex_helper_test', name='phash')\n        v = __phash[who]\n        rv.append(str(v) if v is not None else '0.0')\n    return rv\n"
            },
            {
                "key": "con_dex_helper_test.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_helper_test.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        17,
                        25,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAXIMUM_BALANCE = decimal('100000000000000.0')\n__toks_to_pair = Hash(default_value=None, contract='con_dex_pairs', name=\n    'toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dex_pairs', name='pairs')\n__pairs_num = Variable(contract='con_dex_pairs', name='pairs_num')\n__feeTo = Variable(contract='con_dex_pairs', name='feeTo')\n__owner = Variable(contract='con_dex_pairs', name='owner')\n__balances = Hash(default_value=0, contract='con_dex_pairs', name='balances')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n\n\n@__export('con_dex_pairs')\ndef createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, '__DEXNAME: IDENTICAL_ADDRESSES'\n    assert __toks_to_pair[tokenA, tokenB] == None, '__DEXNAME: PAIR_EXISTS'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = 0\n    __pairs[p_num, 'reserve1'] = 0\n    __pairs[p_num, 'balance0'] = 0\n    __pairs[p_num, 'balance1'] = 0\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = 0\n    __pairs[p_num, 'kLast'] = 0\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    return p_num\n\n\n@__export('con_dex_pairs')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dex_pairs')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\n@__export('con_dex_pairs')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] += amount\n\n\n@__export('con_dex_pairs')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'Invalid value!'\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dex_pairs', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'Negative pair balance1!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\ndef __safeTransferFromPairToPair(pair: int, token: str, to: int, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'Invalid value!'\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        __pairs[pair, 'balance0'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'No token in TO'\n        new_balance = __pairs[pair, 'balance0']\n        assert new_balance >= 0, 'Negative balance!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        __pairs[pair, 'balance1'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'No token in TO'\n        new_balance = __pairs[pair, 'balance1']\n        assert new_balance >= 0, 'Negative balance!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\n@__export('con_dex_pairs')\ndef sync(pair: int):\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    __hashA = ForeignHash(foreign_contract=tokenA, foreign_name='balances',\n        contract='con_dex_pairs', name='hashA')\n    balA = __hashA[ctx.this]\n    if balA == None:\n        balA = 0\n    tB = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tB, token_interface)\n    __hashB = ForeignHash(foreign_contract=tokenB, foreign_name='balances',\n        contract='con_dex_pairs', name='hashB')\n    balB = __hashB[ctx.this]\n    if balB == None:\n        balB = 0\n    __balances[tokenA] = balA\n    __balances[tokenB] = balB\n\n\n@__export('con_dex_pairs')\ndef sync2(pair: int):\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    __hashA = ForeignHash(foreign_contract=tokenA, foreign_name='balances',\n        contract='con_dex_pairs', name='hashA')\n    balA = __hashA[ctx.this]\n    if balA == None:\n        balA = 0\n    tB = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tB, token_interface)\n    __hashB = ForeignHash(foreign_contract=tokenB, foreign_name='balances',\n        contract='con_dex_pairs', name='hashB')\n    balB = __hashB[ctx.this]\n    if balB == None:\n        balB = 0\n    incA = balA - __balances[tokenA]\n    assert incA >= 0, '__DEXNAME: token0_neg'\n    incB = balB - __balances[tokenB]\n    assert incB >= 0, '__DEXNAME: token1_neg'\n    __pairs[pair, 'balance0'] += incA\n    __pairs[pair, 'balance1'] += incB\n    assert __pairs[pair, 'balance0'] <= MAXIMUM_BALANCE, 'TokenA OVERFLOW'\n    assert __pairs[pair, 'balance1'] <= MAXIMUM_BALANCE, 'TokenB OVERFLOW'\n\n\n@__export('con_dex_pairs')\ndef getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    assert balance0 <= MAXIMUM_BALANCE and balance1 <= MAXIMUM_BALANCE, '__DEXNAME: BALANCE OVERFLOW'\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo.get() != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __internal_mint(pair, __feeTo.get(), liquidity)\n    elif kLast != 0:\n        __pairs[pair, 'kLast'] = 0\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\n@__export('con_dex_pairs')\ndef burn(pair: int, to: str):\n    reserve0, reserve1, ignore = getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\n@__export('con_dex_pairs')\ndef mint(pair: int, to: str):\n    reserve0, reserve1, ignore = getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return liquidity\n\n\n@__export('con_dex_pairs')\ndef swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert amount0Out > 0 or amount1Out > 0, '__DEXNAME: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, '__DEXNAME: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, '__DEXNAME: K'\n    __internal_update(pair, balance0, balance1)\n    sync(pair)\n\n\n@__export('con_dex_pairs')\ndef swapToPair(pair: int, amount0Out: float, amount1Out: float, to: int):\n    assert amount0Out > 0 or amount1Out > 0, '__DEXNAME: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    if amount0Out > 0:\n        __safeTransferFromPairToPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPairToPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT {} {}'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, '__DEXNAME: K'\n    __internal_update(pair, balance0, balance1)\n"
            },
            {
                "key": "con_dex_pairs.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        41,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs.balances:con_bigtoken2",
                "value": {
                    "__fixed__": "1000.000000031622461246689012294922"
                }
            },
            {
                "key": "con_dex_pairs.balances:con_testtoken",
                "value": {
                    "__fixed__": "41.800633596611738895164383427412"
                }
            },
            {
                "key": "con_dex_pairs.balances:currency",
                "value": {
                    "__fixed__": "47.102000000230291939558750930651"
                }
            },
            {
                "key": "con_dex_pairs.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs.pairs:1:balance0",
                "value": {
                    "__fixed__": "41.800633593449429620125096621332"
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:balance1",
                "value": {
                    "__fixed__": "46.102000000230291939558750930651"
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "43.423143767690791851861558771169"
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex2test",
                "value": {
                    "__fixed__": "3507.376054626790649917316581534309"
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:balances:con_dex_pairs",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        12,
                        4,
                        35,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        45,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:kLast",
                "value": {
                    "__fixed__": "1916.520344673045781189154003108443"
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:reserve0",
                "value": {
                    "__fixed__": "41.800633593449429620125096621332"
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:reserve1",
                "value": {
                    "__fixed__": "46.102000000230291939558750930651"
                }
            },
            {
                "key": "con_dex_pairs.pairs:1:token0",
                "value": "con_testtoken"
            },
            {
                "key": "con_dex_pairs.pairs:1:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs.pairs:1:totalSupply",
                "value": {
                    "__fixed__": "43.423143777690791851861558771169"
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:balance0",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:balance1",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "31.622776591683793319988935444327"
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        7,
                        15,
                        23,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        7,
                        15,
                        23,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:kLast",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:reserve0",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:reserve1",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dex_pairs.pairs:2:token0",
                "value": "con_bigtoken2"
            },
            {
                "key": "con_dex_pairs.pairs:2:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs.pairs:2:totalSupply",
                "value": {
                    "__fixed__": "31.622776601683793319988935444327"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:balance0",
                "value": {
                    "__fixed__": "3.1622461246689012294922E-8"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:balance1",
                "value": {
                    "__fixed__": "3.16230927503928680608E-9"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex2test",
                "value": {
                    "__fixed__": "31623.409136263104641599906991002421"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:balances:con_dex_pairs",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        7,
                        17,
                        16,
                        12,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        7,
                        16,
                        9,
                        23,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:kLast",
                "value": {
                    "__fixed__": "1.00000002499975E-16"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:reserve0",
                "value": {
                    "__fixed__": "3.1622461246689012294922E-8"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:reserve1",
                "value": {
                    "__fixed__": "3.16230927503928680608E-9"
                }
            },
            {
                "key": "con_dex_pairs.pairs:3:token0",
                "value": "con_bigtoken2"
            },
            {
                "key": "con_dex_pairs.pairs:3:token1",
                "value": "con_testtoken"
            },
            {
                "key": "con_dex_pairs.pairs:3:totalSupply",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs.pairs_num",
                "value": 3
            },
            {
                "key": "con_dex_pairs.toks_to_pair:con_bigtoken2:con_testtoken",
                "value": 3
            },
            {
                "key": "con_dex_pairs.toks_to_pair:con_bigtoken2:currency",
                "value": 2
            },
            {
                "key": "con_dex_pairs.toks_to_pair:con_testtoken:currency",
                "value": 1
            },
            {
                "key": "con_dex_pairs2.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAXIMUM_BALANCE = decimal('100000000000000.0')\n__PairCreated = LogEvent(event='PairCreated', params={'token0': {'type':\n    str, 'idx': True}, 'token1': {'type': str, 'idx': True}, 'pair': {\n    'type': int}}, contract='con_dex_pairs2', name='PairCreated')\n__Mint = LogEvent(event='Mint', params={'pair': {'type': int, 'idx': True},\n    'amount0': {'type': (int, float, decimal)}, 'amount1': {'type': (int,\n    float, decimal)}, 'to': {'type': str, 'idx': True}}, contract=\n    'con_dex_pairs2', name='Mint')\n__Burn = LogEvent(event='Burn', params={'pair': {'type': int, 'idx': True},\n    'amount0': {'type': (int, float, decimal)}, 'amount1': {'type': (int,\n    float, decimal)}, 'to': {'type': str, 'idx': True}}, contract=\n    'con_dex_pairs2', name='Burn')\n__Swap = LogEvent(event='Swap', params={'pair': {'type': int, 'idx': True},\n    'amount0In': {'type': (int, float, decimal)}, 'amount1In': {'type': (\n    int, float, decimal)}, 'amount0Out': {'type': (int, float, decimal)},\n    'amount1Out': {'type': (int, float, decimal)}, 'to': {'type': (str, int\n    ), 'idx': True}}, contract='con_dex_pairs2', name='Swap')\n__Sync = LogEvent(event='Sync', params={'pair': {'type': int, 'idx': True},\n    'reserve0': {'type': (int, float, decimal)}, 'reserve1': {'type': (int,\n    float, decimal)}}, contract='con_dex_pairs2', name='Sync')\n__toks_to_pair = Hash(default_value=None, contract='con_dex_pairs2', name=\n    'toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dex_pairs2', name='pairs')\n__pairs_num = Variable(contract='con_dex_pairs2', name='pairs_num')\n__feeTo = Variable(contract='con_dex_pairs2', name='feeTo')\n__owner = Variable(contract='con_dex_pairs2', name='owner')\n__balances = Hash(default_value=decimal('0.0'), contract='con_dex_pairs2',\n    name='balances')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n\n\n@__export('con_dex_pairs2')\ndef createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, '__DEXNAME: IDENTICAL_ADDRESSES'\n    assert tokenA < tokenB, '__DEXNAME: BAD_ORDER'\n    assert __toks_to_pair[tokenA, tokenB] == None, '__DEXNAME: PAIR_EXISTS'\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface\n        ), '__DEXNAME: NO_TOKA'\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface\n        ), '__DEXNAME: NO_TOKB'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = decimal('0.0')\n    __pairs[p_num, 'reserve1'] = decimal('0.0')\n    __pairs[p_num, 'balance0'] = decimal('0.0')\n    __pairs[p_num, 'balance1'] = decimal('0.0')\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = decimal('0.0')\n    __pairs[p_num, 'kLast'] = decimal('0.0')\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    __PairCreated({'token0': tokenA, 'token1': tokenB, 'pair': p_num})\n    return p_num\n\n\n@__export('con_dex_pairs2')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dex_pairs2')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\n@__export('con_dex_pairs2')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] = amount\n\n\n@__export('con_dex_pairs2')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'Invalid value!'\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dex_pairs2', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'Negative pair balance1!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\ndef __safeTransferFromPairToPair(pair: int, token: str, to: int, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'Invalid value!'\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        prev_balance = __pairs[pair, 'balance0']\n        __pairs[pair, 'balance0'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'No token in TO'\n        new_balance = __pairs[pair, 'balance0']\n        assert new_balance >= 0, 'Negative balance!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        prev_balance = __pairs[pair, 'balance1']\n        __pairs[pair, 'balance1'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'No token in TO'\n        new_balance = __pairs[pair, 'balance1']\n        assert new_balance >= 0, 'Negative balance!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\n@__export('con_dex_pairs2')\ndef sync(pair: int):\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    __hashA = ForeignHash(foreign_contract=tokenA, foreign_name='balances',\n        contract='con_dex_pairs2', name='hashA')\n    balA = __hashA[ctx.this]\n    if balA == None:\n        balA = decimal('0.0')\n    tB = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tB, token_interface)\n    __hashB = ForeignHash(foreign_contract=tokenB, foreign_name='balances',\n        contract='con_dex_pairs2', name='hashB')\n    balB = __hashB[ctx.this]\n    if balB == None:\n        balB = decimal('0.0')\n    __balances[tokenA] = balA\n    __balances[tokenB] = balB\n\n\n@__export('con_dex_pairs2')\ndef sync2(pair: int):\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    __hashA = ForeignHash(foreign_contract=tokenA, foreign_name='balances',\n        contract='con_dex_pairs2', name='hashA')\n    balA = __hashA[ctx.this]\n    if balA == None:\n        balA = decimal('0.0')\n    tB = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tB, token_interface)\n    __hashB = ForeignHash(foreign_contract=tokenB, foreign_name='balances',\n        contract='con_dex_pairs2', name='hashB')\n    balB = __hashB[ctx.this]\n    if balB == None:\n        balB = decimal('0.0')\n    incA = balA - __balances[tokenA]\n    assert incA >= 0, '__DEXNAME: token0_neg'\n    incB = balB - __balances[tokenB]\n    assert incB >= 0, '__DEXNAME: token1_neg'\n    __pairs[pair, 'balance0'] += incA\n    __pairs[pair, 'balance1'] += incB\n    assert __pairs[pair, 'balance0'] <= MAXIMUM_BALANCE, 'TokenA OVERFLOW'\n    assert __pairs[pair, 'balance1'] <= MAXIMUM_BALANCE, 'TokenB OVERFLOW'\n\n\n@__export('con_dex_pairs2')\ndef getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    assert balance0 <= MAXIMUM_BALANCE and balance1 <= MAXIMUM_BALANCE, '__DEXNAME: BALANCE OVERFLOW'\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n    __Sync({'pair': pair, 'reserve0': balance0, 'reserve1': balance1})\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo.get() != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __internal_mint(pair, __feeTo.get(), liquidity)\n    elif kLast != 0:\n        __pairs[pair, 'kLast'] = decimal('0.0')\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\n@__export('con_dex_pairs2')\ndef burn(pair: int, to: str):\n    reserve0, reserve1, ignore = getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    __Burn({'pair': pair, 'amount0': amount0, 'amount1': amount1, 'to': to})\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\n@__export('con_dex_pairs2')\ndef mint(pair: int, to: str):\n    reserve0, reserve1, ignore = getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    __Mint({'pair': pair, 'amount0': amount0, 'amount1': amount1, 'to': to})\n    return liquidity\n\n\n@__export('con_dex_pairs2')\ndef swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert amount0Out > 0 or amount1Out > 0, '__DEXNAME: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, '__DEXNAME: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, '__DEXNAME: K'\n    __internal_update(pair, balance0, balance1)\n    sync(pair)\n    __Swap({'pair': pair, 'amount0In': amount0In, 'amount1In': amount1In,\n        'amount0Out': amount0Out, 'amount1Out': amount1Out, 'to': to})\n\n\n@__export('con_dex_pairs2')\ndef swapToPair(pair: int, amount0Out: float, amount1Out: float, to: int):\n    assert amount0Out > 0 or amount1Out > 0, '__DEXNAME: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    if amount0Out > 0:\n        __safeTransferFromPairToPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPairToPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, '__DEXNAME: K'\n    __internal_update(pair, balance0, balance1)\n    __Swap({'pair': pair, 'amount0In': amount0In, 'amount1In': amount1In,\n        'amount0Out': amount0Out, 'amount1Out': amount1Out, 'to': to})\n"
            },
            {
                "key": "con_dex_pairs2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        17,
                        19,
                        51,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs2.balances:con_bigtoken2",
                "value": {
                    "__fixed__": "1089279284"
                }
            },
            {
                "key": "con_dex_pairs2.balances:con_logevent_test_token",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_dex_pairs2.balances:con_test_1",
                "value": {
                    "__fixed__": "6"
                }
            },
            {
                "key": "con_dex_pairs2.balances:con_test_2",
                "value": {
                    "__fixed__": "1.502253380070105157736604907362"
                }
            },
            {
                "key": "con_dex_pairs2.balances:con_testtoken",
                "value": {
                    "__fixed__": "898525781.04525609903334815360498515117"
                }
            },
            {
                "key": "con_dex_pairs2.balances:currency",
                "value": {
                    "__fixed__": "112"
                }
            },
            {
                "key": "con_dex_pairs2.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs2.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs2.pairs:1:balance0",
                "value": {
                    "__fixed__": "8.337691103385709723481308325324"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:1:balance1",
                "value": {
                    "__fixed__": "12"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "9.999999989999999999999999999999"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:1:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:1:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        29,
                        18,
                        38,
                        48,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs2.pairs:1:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        17,
                        21,
                        44,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs2.pairs:1:kLast",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:1:reserve0",
                "value": {
                    "__fixed__": "8.337691103385709723481308325324"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:1:reserve1",
                "value": {
                    "__fixed__": "12"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:1:token0",
                "value": "con_testtoken"
            },
            {
                "key": "con_dex_pairs2.pairs:1:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs2.pairs:1:totalSupply",
                "value": {
                    "__fixed__": "9.999999999999999999999999999999"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:balance0",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:balance1",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": {
                    "__fixed__": "316.227766006837933199889354443271"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        18,
                        11,
                        33,
                        3,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        18,
                        11,
                        33,
                        3,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:kLast",
                "value": {
                    "__fixed__": "1E+5"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:reserve0",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:reserve1",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:2:token0",
                "value": "con_logevent_test_token"
            },
            {
                "key": "con_dex_pairs2.pairs:2:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs2.pairs:2:totalSupply",
                "value": {
                    "__fixed__": "316.227766016837933199889354443271"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:balance0",
                "value": {
                    "__fixed__": "1089279284"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:balance1",
                "value": {
                    "__fixed__": "898525772.707564995647638430123676825846"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "989179283.99999999"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:blockTimestampLast",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        26,
                        16,
                        52,
                        26,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        18,
                        13,
                        7,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:kLast",
                "value": {
                    "__fixed__": "978475655894752656"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:reserve0",
                "value": {
                    "__fixed__": "1089279284"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:reserve1",
                "value": {
                    "__fixed__": "898525772.707564995647638430123676825846"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:3:token0",
                "value": "con_bigtoken2"
            },
            {
                "key": "con_dex_pairs2.pairs:3:token1",
                "value": "con_testtoken"
            },
            {
                "key": "con_dex_pairs2.pairs:3:totalSupply",
                "value": {
                    "__fixed__": "989179284"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:balance0",
                "value": {
                    "__fixed__": "6"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:balance1",
                "value": {
                    "__fixed__": "1.502253380070105157736604907362"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "2.99999999"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        18,
                        13,
                        29,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        18,
                        13,
                        28,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:kLast",
                "value": {
                    "__fixed__": "9"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:reserve0",
                "value": {
                    "__fixed__": "6"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:reserve1",
                "value": {
                    "__fixed__": "1.502253380070105157736604907362"
                }
            },
            {
                "key": "con_dex_pairs2.pairs:4:token0",
                "value": "con_test_1"
            },
            {
                "key": "con_dex_pairs2.pairs:4:token1",
                "value": "con_test_2"
            },
            {
                "key": "con_dex_pairs2.pairs:4:totalSupply",
                "value": {
                    "__fixed__": "3"
                }
            },
            {
                "key": "con_dex_pairs2.pairs_num",
                "value": 4
            },
            {
                "key": "con_dex_pairs2.toks_to_pair:con_bigtoken2:con_testtoken",
                "value": 3
            },
            {
                "key": "con_dex_pairs2.toks_to_pair:con_logevent_test_token:currency",
                "value": 2
            },
            {
                "key": "con_dex_pairs2.toks_to_pair:con_test_1:con_test_2",
                "value": 4
            },
            {
                "key": "con_dex_pairs2.toks_to_pair:con_testtoken:currency",
                "value": 1
            },
            {
                "key": "con_dex_pairs_n.LOCK",
                "value": false
            },
            {
                "key": "con_dex_pairs_n.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAXIMUM_BALANCE = decimal('100000000000000.0')\n__PairCreated = LogEvent(event='PairCreated', params={'token0': {'type':\n    str, 'idx': True}, 'token1': {'type': str, 'idx': True}, 'pair': {\n    'type': int}}, contract='con_dex_pairs_n', name='PairCreated')\n__Mint = LogEvent(event='Mint', params={'pair': {'type': int, 'idx': True},\n    'amount0': {'type': (int, float, decimal)}, 'amount1': {'type': (int,\n    float, decimal)}, 'to': {'type': str, 'idx': True}}, contract=\n    'con_dex_pairs_n', name='Mint')\n__Burn = LogEvent(event='Burn', params={'pair': {'type': int, 'idx': True},\n    'amount0': {'type': (int, float, decimal)}, 'amount1': {'type': (int,\n    float, decimal)}, 'to': {'type': str, 'idx': True}}, contract=\n    'con_dex_pairs_n', name='Burn')\n__Swap = LogEvent(event='Swap', params={'pair': {'type': int, 'idx': True},\n    'amount0In': {'type': (int, float, decimal)}, 'amount1In': {'type': (\n    int, float, decimal)}, 'amount0Out': {'type': (int, float, decimal)},\n    'amount1Out': {'type': (int, float, decimal)}, 'to': {'type': (str, int\n    ), 'idx': True}}, contract='con_dex_pairs_n', name='Swap')\n__Sync = LogEvent(event='Sync', params={'pair': {'type': int, 'idx': True},\n    'reserve0': {'type': (int, float, decimal)}, 'reserve1': {'type': (int,\n    float, decimal)}}, contract='con_dex_pairs_n', name='Sync')\n__TransferLiq = LogEvent(event='TransferLiq', params={'pair': {'type': int,\n    'idx': True}, 'from': {'type': str, 'idx': True}, 'to': {'type': str,\n    'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_dex_pairs_n', name='TransferLiq')\n__ApproveLiq = LogEvent(event='ApproveLiq', params={'pair': {'type': int,\n    'idx': True}, 'from': {'type': str, 'idx': True}, 'to': {'type': str,\n    'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_dex_pairs_n', name='ApproveLiq')\n__toks_to_pair = Hash(default_value=None, contract='con_dex_pairs_n', name=\n    'toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dex_pairs_n', name='pairs')\n__pairs_num = Variable(contract='con_dex_pairs_n', name='pairs_num')\n__feeTo = Variable(contract='con_dex_pairs_n', name='feeTo')\n__owner = Variable(contract='con_dex_pairs_n', name='owner')\n__balances = Hash(default_value=decimal('0.0'), contract='con_dex_pairs_n',\n    name='balances')\n__LOCK = Variable(contract='con_dex_pairs_n', name='LOCK')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n    __LOCK.set(False)\n\n\n@__export('con_dex_pairs_n')\ndef enableFee(en: bool):\n    assert ctx.caller == __owner.get(), 'SNAKX: FORBIDDEN'\n    if en:\n        __feeTo.set(__owner.get())\n    else:\n        __feeTo.set(False)\n\n\n@__export('con_dex_pairs_n')\ndef createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, 'SNAKX: IDENTICAL_ADDRESSES'\n    assert tokenA < tokenB, 'SNAKX: BAD_ORDER'\n    assert __toks_to_pair[tokenA, tokenB] == None, 'SNAKX: PAIR_EXISTS'\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface), 'SNAKX: NO_TOKA'\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface), 'SNAKX: NO_TOKB'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = decimal('0.0')\n    __pairs[p_num, 'reserve1'] = decimal('0.0')\n    __pairs[p_num, 'balance0'] = decimal('0.0')\n    __pairs[p_num, 'balance1'] = decimal('0.0')\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = decimal('0.0')\n    __pairs[p_num, 'kLast'] = decimal('0.0')\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    __PairCreated({'token0': tokenA, 'token1': tokenB, 'pair': p_num})\n    return p_num\n\n\n@__export('con_dex_pairs_n')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dex_pairs_n')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n    __TransferLiq({'pair': pair, 'from': ctx.caller, 'to': to, 'amount':\n        amount})\n\n\n@__export('con_dex_pairs_n')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] = amount\n    __ApproveLiq({'pair': pair, 'from': ctx.caller, 'to': to, 'amount': amount}\n        )\n\n\n@__export('con_dex_pairs_n')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n    __TransferLiq({'pair': pair, 'from': main_account, 'to': to, 'amount':\n        amount})\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'p2a Invalid value!'\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    prev_balance = t.balance_of(ctx.this)\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'\n            ] >= value, 'p2a Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = t.balance_of(ctx.this)\n        assert new_balance >= 0, 'p2a Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'p2a Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'\n            ] >= value, 'p2a Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = t.balance_of(ctx.this)\n        assert new_balance >= 0, 'p2a Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'p2a Negative pair balance1!'\n        return True\n    assert False, 'p2a Wrong token!'\n    return False\n\n\ndef __safeTransferFromPairToPair(pair: int, token: str, to: int, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'p2p Invalid value!'\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'\n            ] >= value, 'p2p Not enough coins to send!'\n        __pairs[pair, 'balance0'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'p2p No token in TO'\n        new_balance = __pairs[pair, 'balance0']\n        assert new_balance >= 0, 'p2p Negative balance!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'\n            ] >= value, 'p2p Not enough coins to send!'\n        __pairs[pair, 'balance1'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'p2p No token in TO'\n        new_balance = __pairs[pair, 'balance1']\n        assert new_balance >= 0, 'p2p Negative balance!'\n        return True\n    assert False, 'p2p Wrong token!'\n    return False\n\n\ndef __sync(pair: int):\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    balA = tA.balance_of(ctx.this)\n    if balA == None:\n        balA = decimal('0.0')\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface)\n    balB = tB.balance_of(ctx.this)\n    if balB == None:\n        balB = decimal('0.0')\n    __balances[tokenA] = balA\n    __balances[tokenB] = balB\n\n\n@__export('con_dex_pairs_n')\ndef sync2(pair: int):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    balA = tA.balance_of(ctx.this)\n    if balA == None:\n        balA = decimal('0.0')\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface)\n    balB = tB.balance_of(ctx.this)\n    if balB == None:\n        balB = decimal('0.0')\n    incA = balA - __balances[tokenA]\n    assert incA >= 0, 'SNAKX: token0_neg'\n    incB = balB - __balances[tokenB]\n    assert incB >= 0, 'SNAKX: token1_neg'\n    __pairs[pair, 'balance0'] += incA\n    __pairs[pair, 'balance1'] += incB\n    assert __pairs[pair, 'balance0'\n        ] <= MAXIMUM_BALANCE, 'SNAKX: TokenA OVERFLOW'\n    assert __pairs[pair, 'balance1'\n        ] <= MAXIMUM_BALANCE, 'SNAKX: TokenB OVERFLOW'\n    __balances[tokenA] = balA\n    __balances[tokenB] = balB\n    __LOCK.set(False)\n\n\n@__export('con_dex_pairs_n')\ndef getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\n@__export('con_dex_pairs_n')\ndef getSurplus(pair: int):\n    return __pairs[pair, 'balance0'] - __pairs[pair, 'reserve0'], __pairs[\n        pair, 'balance1'] - __pairs[pair, 'reserve1']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    assert balance0 <= MAXIMUM_BALANCE and balance1 <= MAXIMUM_BALANCE, 'SNAKX: BALANCE OVERFLOW'\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n    __Sync({'pair': pair, 'reserve0': balance0, 'reserve1': balance1})\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo.get() != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __internal_mint(pair, __feeTo.get(), liquidity)\n    elif kLast != 0:\n        __pairs[pair, 'kLast'] = decimal('0.0')\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\n@__export('con_dex_pairs_n')\ndef burn(pair: int, to: str):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    reserve0, reserve1, ignore = getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    __sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    __Burn({'pair': pair, 'amount0': amount0, 'amount1': amount1, 'to': to})\n    __LOCK.set(False)\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\n@__export('con_dex_pairs_n')\ndef mint(pair: int, to: str):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    reserve0, reserve1, ignore = getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    __sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    __Mint({'pair': pair, 'amount0': amount0, 'amount1': amount1, 'to': to})\n    __LOCK.set(False)\n    return liquidity\n\n\n@__export('con_dex_pairs_n')\ndef swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    assert amount0Out > 0 or amount1Out > 0, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, 'SNAKX: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'SNAKX: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, 'SNAKX: K'\n    __internal_update(pair, balance0, balance1)\n    __sync(pair)\n    __Swap({'pair': pair, 'amount0In': amount0In, 'amount1In': amount1In,\n        'amount0Out': amount0Out, 'amount1Out': amount1Out, 'to': to})\n    __LOCK.set(False)\n\n\n@__export('con_dex_pairs_n')\ndef swapToPair(pair: int, amount0Out: float, amount1Out: float, to: int):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    assert amount0Out > 0 or amount1Out > 0, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    if amount0Out > 0:\n        __safeTransferFromPairToPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPairToPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'SNAKX: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, 'SNAKX: K'\n    __internal_update(pair, balance0, balance1)\n    __Swap({'pair': pair, 'amount0In': amount0In, 'amount1In': amount1In,\n        'amount0Out': amount0Out, 'amount1Out': amount1Out, 'to': to})\n    __LOCK.set(False)\n"
            },
            {
                "key": "con_dex_pairs_n.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs_n.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        7,
                        21,
                        7,
                        59,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.balances:con_staketoken",
                "value": {
                    "__fixed__": "990.225298563510267560022697705302"
                }
            },
            {
                "key": "con_dex_pairs_n.balances:con_test",
                "value": {
                    "__fixed__": "2.614259447083000423328E-9"
                }
            },
            {
                "key": "con_dex_pairs_n.balances:con_toktest",
                "value": {
                    "__fixed__": "3.409743552038E-18"
                }
            },
            {
                "key": "con_dex_pairs_n.balances:con_toktest2",
                "value": {
                    "__fixed__": "57.308508984673759618606825618951"
                }
            },
            {
                "key": "con_dex_pairs_n.balances:con_usdc",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dex_pairs_n.balances:con_xns_token",
                "value": {
                    "__fixed__": "940.316408147070456084112330076899"
                }
            },
            {
                "key": "con_dex_pairs_n.balances:currency",
                "value": {
                    "__fixed__": "1391.954812477973657006472248124721"
                }
            },
            {
                "key": "con_dex_pairs_n.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs_n.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs_n.pairs:1:balance0",
                "value": {
                    "__fixed__": "3.409743552038E-18"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:balance1",
                "value": {
                    "__fixed__": "65.409297817364933951483901479444"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:balances:0e1d9bb3404f8160c362505c1a9b3a71d66e2cea69a4ec0e01da1b6ce64df4db",
                "value": {
                    "__fixed__": "4.70267499630118525711E-9"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:balances:0e1d9bb3404f8160c362505c1a9b3a71d66e2cea69a4ec0e01da1b6ce64df4db:con_dex_router_n",
                "value": {
                    "__fixed__": "58.3"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "8.355257616903199909E-12"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex_router_n",
                "value": {
                    "__fixed__": "1.000476432947242537278E-9"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:blockTimestampLast",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        14,
                        1,
                        33,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:creationTime",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        7,
                        21,
                        9,
                        40,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:kLast",
                "value": {
                    "__fixed__": "2.23028931476093E-16"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:reserve0",
                "value": {
                    "__fixed__": "3.409743552038E-18"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:reserve1",
                "value": {
                    "__fixed__": "65.409297817364933951483901479444"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:1:token0",
                "value": "con_toktest"
            },
            {
                "key": "con_dex_pairs_n.pairs:1:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs_n.pairs:1:totalSupply",
                "value": {
                    "__fixed__": "1.4711030253918088457019E-8"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:balance0",
                "value": {
                    "__fixed__": "57.308508984673759618606825618951"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:balance1",
                "value": {
                    "__fixed__": "273.73385791770134583308486305908"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:balances:3336f3561b99e2cf89f2278d08d360e8e4ab92caae1ce5bb36ac03fa57e55062",
                "value": {
                    "__fixed__": "22.932930163520130075793983078148"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:balances:3336f3561b99e2cf89f2278d08d360e8e4ab92caae1ce5bb36ac03fa57e55062:con_dex_router_n",
                "value": {
                    "__fixed__": "0.67449794598588617869982303171"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "0.020429143249607271058607876665"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "__fixed__": "2.183566241120602189039707466252"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e",
                "value": {
                    "__fixed__": "99.999999989999999999999999999999"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:blockTimestampLast",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        20,
                        13,
                        13,
                        5,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:creationTime",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        11,
                        19,
                        57,
                        36,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:kLast",
                "value": {
                    "__fixed__": "15687.279255885997930014640291021035"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:reserve0",
                "value": {
                    "__fixed__": "57.308508984673759618606825618951"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:reserve1",
                "value": {
                    "__fixed__": "273.73385791770134583308486305908"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:2:token0",
                "value": "con_toktest2"
            },
            {
                "key": "con_dex_pairs_n.pairs:2:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs_n.pairs:2:totalSupply",
                "value": {
                    "__fixed__": "125.136925547890339535892298421064"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:balance0",
                "value": {
                    "__fixed__": "2.614259447083000423328E-9"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:balance1",
                "value": {
                    "__fixed__": "10.000104238264591774703614826484"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "0.000161401208815969590127563431"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e:con_dex_router_n",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:blockTimestampLast",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        12,
                        19,
                        48,
                        47,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:creationTime",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        12,
                        14,
                        8,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:kLast",
                "value": {
                    "__fixed__": "2.6064439193285470805007E-8"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:reserve0",
                "value": {
                    "__fixed__": "2.614259447083000423328E-9"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:reserve1",
                "value": {
                    "__fixed__": "10.000104238264591774703614826484"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:3:token0",
                "value": "con_test"
            },
            {
                "key": "con_dex_pairs_n.pairs:3:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs_n.pairs:3:totalSupply",
                "value": {
                    "__fixed__": "0.000161411208815969590127563431"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:balance0",
                "value": {
                    "__fixed__": "940.316408147070456084112330076899"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:balance1",
                "value": {
                    "__fixed__": "31.910537582091962938849899949252"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "__fixed__": "173.205080746887729352744634150587"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:blockTimestampLast",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        23,
                        13,
                        50,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:creationTime",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        16,
                        13,
                        3,
                        48,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:kLast",
                "value": {
                    "__fixed__": "3E+4"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:reserve0",
                "value": {
                    "__fixed__": "940.316408147070456084112330076899"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:reserve1",
                "value": {
                    "__fixed__": "31.910537582091962938849899949252"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:4:token0",
                "value": "con_xns_token"
            },
            {
                "key": "con_dex_pairs_n.pairs:4:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs_n.pairs:4:totalSupply",
                "value": {
                    "__fixed__": "173.205080756887729352744634150587"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balance0",
                "value": {
                    "__fixed__": "990.225298563510267560022697705302"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balance1",
                "value": {
                    "__fixed__": "1009.901014922550822508349968810461"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "0.002481593559999945873563242849"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex_router_n",
                "value": {
                    "__fixed__": "0.999999998999999999999999999999"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_staking_2",
                "value": {
                    "__fixed__": "0.999999998999999999999999999999"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "__fixed__": "0.9999999999999999999999999999"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05:con_staking_2",
                "value": {
                    "__fixed__": "99.9"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:balances:con_staking_2",
                "value": {
                    "__fixed__": "999"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:blockTimestampLast",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        23,
                        13,
                        13,
                        50,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:creationTime",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        18,
                        21,
                        29,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:kLast",
                "value": {
                    "__fixed__": "1000029.534021274926266621044458628713"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:reserve0",
                "value": {
                    "__fixed__": "990.225298563510267560022697705302"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:reserve1",
                "value": {
                    "__fixed__": "1009.901014922550822508349968810461"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:5:token0",
                "value": "con_staketoken"
            },
            {
                "key": "con_dex_pairs_n.pairs:5:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs_n.pairs:5:totalSupply",
                "value": {
                    "__fixed__": "1000.002481603559999945873563242749"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:balance0",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:balance1",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "0.99999999"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:blockTimestampLast",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        22,
                        15,
                        59,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:creationTime",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        22,
                        15,
                        59,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:kLast",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:reserve0",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:reserve1",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs:6:token0",
                "value": "con_usdc"
            },
            {
                "key": "con_dex_pairs_n.pairs:6:token1",
                "value": "currency"
            },
            {
                "key": "con_dex_pairs_n.pairs:6:totalSupply",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dex_pairs_n.pairs_num",
                "value": 6
            },
            {
                "key": "con_dex_pairs_n.toks_to_pair:con_staketoken:currency",
                "value": 5
            },
            {
                "key": "con_dex_pairs_n.toks_to_pair:con_test:currency",
                "value": 3
            },
            {
                "key": "con_dex_pairs_n.toks_to_pair:con_toktest2:currency",
                "value": 2
            },
            {
                "key": "con_dex_pairs_n.toks_to_pair:con_toktest:currency",
                "value": 1
            },
            {
                "key": "con_dex_pairs_n.toks_to_pair:con_usdc:currency",
                "value": 6
            },
            {
                "key": "con_dex_pairs_n.toks_to_pair:con_xns_token:currency",
                "value": 4
            },
            {
                "key": "con_dex_pairs_p.LOCK",
                "value": false
            },
            {
                "key": "con_dex_pairs_p.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAXIMUM_BALANCE = decimal('100000000000000.0')\n__PairCreated = LogEvent(event='PairCreated', params={'token0': {'type':\n    str, 'idx': True}, 'token1': {'type': str, 'idx': True}, 'pair': {\n    'type': int}}, contract='con_dex_pairs_p', name='PairCreated')\n__Mint = LogEvent(event='Mint', params={'pair': {'type': int, 'idx': True},\n    'amount0': {'type': (int, float, decimal)}, 'amount1': {'type': (int,\n    float, decimal)}, 'to': {'type': str, 'idx': True}}, contract=\n    'con_dex_pairs_p', name='Mint')\n__Burn = LogEvent(event='Burn', params={'pair': {'type': int, 'idx': True},\n    'amount0': {'type': (int, float, decimal)}, 'amount1': {'type': (int,\n    float, decimal)}, 'to': {'type': str, 'idx': True}}, contract=\n    'con_dex_pairs_p', name='Burn')\n__Swap = LogEvent(event='Swap', params={'pair': {'type': int, 'idx': True},\n    'amount0In': {'type': (int, float, decimal)}, 'amount1In': {'type': (\n    int, float, decimal)}, 'amount0Out': {'type': (int, float, decimal)},\n    'amount1Out': {'type': (int, float, decimal)}, 'to': {'type': (str, int\n    ), 'idx': True}}, contract='con_dex_pairs_p', name='Swap')\n__Sync = LogEvent(event='Sync', params={'pair': {'type': int, 'idx': True},\n    'reserve0': {'type': (int, float, decimal)}, 'reserve1': {'type': (int,\n    float, decimal)}}, contract='con_dex_pairs_p', name='Sync')\n__TransferLiq = LogEvent(event='TransferLiq', params={'pair': {'type': int,\n    'idx': True}, 'from': {'type': str, 'idx': True}, 'to': {'type': str,\n    'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_dex_pairs_p', name='TransferLiq')\n__ApproveLiq = LogEvent(event='ApproveLiq', params={'pair': {'type': int,\n    'idx': True}, 'from': {'type': str, 'idx': True}, 'to': {'type': str,\n    'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_dex_pairs_p', name='ApproveLiq')\n__toks_to_pair = Hash(default_value=None, contract='con_dex_pairs_p', name=\n    'toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dex_pairs_p', name='pairs')\n__pairs_num = Variable(contract='con_dex_pairs_p', name='pairs_num')\n__feeTo = Variable(contract='con_dex_pairs_p', name='feeTo')\n__owner = Variable(contract='con_dex_pairs_p', name='owner')\n__balances = Hash(default_value=decimal('0.0'), contract='con_dex_pairs_p',\n    name='balances')\n__LOCK = Variable(contract='con_dex_pairs_p', name='LOCK')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('account',))]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n    __LOCK.set(False)\n\n\n@__export('con_dex_pairs_p')\ndef enableFee(en: bool):\n    assert ctx.caller == __owner.get(), 'SNAKX: FORBIDDEN'\n    if en:\n        __feeTo.set(__owner.get())\n    else:\n        __feeTo.set(False)\n\n\n@__export('con_dex_pairs_p')\ndef createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, 'SNAKX: IDENTICAL_ADDRESSES'\n    assert tokenA < tokenB, 'SNAKX: BAD_ORDER'\n    assert __toks_to_pair[tokenA, tokenB] == None, 'SNAKX: PAIR_EXISTS'\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface), 'SNAKX: NO_TOKA'\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface), 'SNAKX: NO_TOKB'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = decimal('0.0')\n    __pairs[p_num, 'reserve1'] = decimal('0.0')\n    __pairs[p_num, 'balance0'] = decimal('0.0')\n    __pairs[p_num, 'balance1'] = decimal('0.0')\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = decimal('0.0')\n    __pairs[p_num, 'kLast'] = decimal('0.0')\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    __PairCreated({'token0': tokenA, 'token1': tokenB, 'pair': p_num})\n    return p_num\n\n\n@__export('con_dex_pairs_p')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dex_pairs_p')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n    __TransferLiq({'pair': pair, 'from': ctx.caller, 'to': to, 'amount':\n        amount})\n\n\n@__export('con_dex_pairs_p')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] = amount\n    __ApproveLiq({'pair': pair, 'from': ctx.caller, 'to': to, 'amount': amount}\n        )\n\n\n@__export('con_dex_pairs_p')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n    __TransferLiq({'pair': pair, 'from': main_account, 'to': to, 'amount':\n        amount})\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'p2a Invalid value!'\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    prev_balance = t.balance_of(ctx.this)\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'\n            ] >= value, 'p2a Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = t.balance_of(ctx.this)\n        assert new_balance >= 0, 'p2a Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'p2a Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'\n            ] >= value, 'p2a Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = t.balance_of(ctx.this)\n        assert new_balance >= 0, 'p2a Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'p2a Negative pair balance1!'\n        return True\n    assert False, 'p2a Wrong token!'\n    return False\n\n\ndef __safeTransferFromPairToPair(pair: int, token: str, to: int, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'p2p Invalid value!'\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'\n            ] >= value, 'p2p Not enough coins to send!'\n        __pairs[pair, 'balance0'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'p2p No token in TO'\n        new_balance = __pairs[pair, 'balance0']\n        assert new_balance >= 0, 'p2p Negative balance!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'\n            ] >= value, 'p2p Not enough coins to send!'\n        __pairs[pair, 'balance1'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'p2p No token in TO'\n        new_balance = __pairs[pair, 'balance1']\n        assert new_balance >= 0, 'p2p Negative balance!'\n        return True\n    assert False, 'p2p Wrong token!'\n    return False\n\n\ndef __sync(pair: int):\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    balA = tA.balance_of(ctx.this)\n    if balA == None:\n        balA = decimal('0.0')\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface)\n    balB = tB.balance_of(ctx.this)\n    if balB == None:\n        balB = decimal('0.0')\n    __balances[tokenA] = balA\n    __balances[tokenB] = balB\n\n\n@__export('con_dex_pairs_p')\ndef sync2(pair: int):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    balA = tA.balance_of(ctx.this)\n    if balA == None:\n        balA = decimal('0.0')\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface)\n    balB = tB.balance_of(ctx.this)\n    if balB == None:\n        balB = decimal('0.0')\n    incA = balA - __balances[tokenA]\n    assert incA >= 0, 'SNAKX: token0_neg'\n    incB = balB - __balances[tokenB]\n    assert incB >= 0, 'SNAKX: token1_neg'\n    __pairs[pair, 'balance0'] += incA\n    __pairs[pair, 'balance1'] += incB\n    assert __pairs[pair, 'balance0'\n        ] <= MAXIMUM_BALANCE, 'SNAKX: TokenA OVERFLOW'\n    assert __pairs[pair, 'balance1'\n        ] <= MAXIMUM_BALANCE, 'SNAKX: TokenB OVERFLOW'\n    __balances[tokenA] = balA\n    __balances[tokenB] = balB\n    __LOCK.set(False)\n\n\n@__export('con_dex_pairs_p')\ndef getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\n@__export('con_dex_pairs_p')\ndef getSurplus(pair: int):\n    return __pairs[pair, 'balance0'] - __pairs[pair, 'reserve0'], __pairs[\n        pair, 'balance1'] - __pairs[pair, 'reserve1']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    assert balance0 <= MAXIMUM_BALANCE and balance1 <= MAXIMUM_BALANCE, 'SNAKX: BALANCE OVERFLOW'\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n    __Sync({'pair': pair, 'reserve0': balance0, 'reserve1': balance1})\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo.get() != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __internal_mint(pair, __feeTo.get(), liquidity)\n    elif kLast != 0:\n        __pairs[pair, 'kLast'] = decimal('0.0')\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\n@__export('con_dex_pairs_p')\ndef burn(pair: int, to: str):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    reserve0, reserve1, ignore = getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    __sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    __Burn({'pair': pair, 'amount0': amount0, 'amount1': amount1, 'to': to})\n    __LOCK.set(False)\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\n@__export('con_dex_pairs_p')\ndef mint(pair: int, to: str):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    reserve0, reserve1, ignore = getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    __sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    __Mint({'pair': pair, 'amount0': amount0, 'amount1': amount1, 'to': to})\n    __LOCK.set(False)\n    return liquidity\n\n\n@__export('con_dex_pairs_p')\ndef swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    assert amount0Out > 0 or amount1Out > 0, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, 'SNAKX: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'SNAKX: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, 'SNAKX: K'\n    __internal_update(pair, balance0, balance1)\n    __sync(pair)\n    __Swap({'pair': pair, 'amount0In': amount0In, 'amount1In': amount1In,\n        'amount0Out': amount0Out, 'amount1Out': amount1Out, 'to': to})\n    __LOCK.set(False)\n\n\n@__export('con_dex_pairs_p')\ndef swapToPair(pair: int, amount0Out: float, amount1Out: float, to: int):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    assert amount0Out > 0 or amount1Out > 0, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    if amount0Out > 0:\n        __safeTransferFromPairToPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPairToPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'SNAKX: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, 'SNAKX: K'\n    __internal_update(pair, balance0, balance1)\n    __Swap({'pair': pair, 'amount0In': amount0In, 'amount1In': amount1In,\n        'amount0Out': amount0Out, 'amount1Out': amount1Out, 'to': to})\n    __LOCK.set(False)\n"
            },
            {
                "key": "con_dex_pairs_p.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs_p.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        7,
                        11,
                        36,
                        33,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_p.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs_p.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs_p.pairs_num",
                "value": 0
            },
            {
                "key": "con_dex_pairs_pi.LOCK",
                "value": false
            },
            {
                "key": "con_dex_pairs_pi.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAXIMUM_BALANCE = decimal('100000000000000.0')\n__PairCreated = LogEvent(event='PairCreated', params={'token0': {'type':\n    str, 'idx': True}, 'token1': {'type': str, 'idx': True}, 'pair': {\n    'type': int}}, contract='con_dex_pairs_pi', name='PairCreated')\n__Mint = LogEvent(event='Mint', params={'pair': {'type': int, 'idx': True},\n    'amount0': {'type': (int, float, decimal)}, 'amount1': {'type': (int,\n    float, decimal)}, 'to': {'type': str, 'idx': True}}, contract=\n    'con_dex_pairs_pi', name='Mint')\n__Burn = LogEvent(event='Burn', params={'pair': {'type': int, 'idx': True},\n    'amount0': {'type': (int, float, decimal)}, 'amount1': {'type': (int,\n    float, decimal)}, 'to': {'type': str, 'idx': True}}, contract=\n    'con_dex_pairs_pi', name='Burn')\n__Swap = LogEvent(event='Swap', params={'pair': {'type': int, 'idx': True},\n    'amount0In': {'type': (int, float, decimal)}, 'amount1In': {'type': (\n    int, float, decimal)}, 'amount0Out': {'type': (int, float, decimal)},\n    'amount1Out': {'type': (int, float, decimal)}, 'to': {'type': (str, int\n    ), 'idx': True}}, contract='con_dex_pairs_pi', name='Swap')\n__Sync = LogEvent(event='Sync', params={'pair': {'type': int, 'idx': True},\n    'reserve0': {'type': (int, float, decimal)}, 'reserve1': {'type': (int,\n    float, decimal)}}, contract='con_dex_pairs_pi', name='Sync')\n__TransferLiq = LogEvent(event='TransferLiq', params={'pair': {'type': int,\n    'idx': True}, 'from': {'type': str, 'idx': True}, 'to': {'type': str,\n    'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_dex_pairs_pi', name='TransferLiq')\n__ApproveLiq = LogEvent(event='ApproveLiq', params={'pair': {'type': int,\n    'idx': True}, 'from': {'type': str, 'idx': True}, 'to': {'type': str,\n    'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_dex_pairs_pi', name='ApproveLiq')\n__toks_to_pair = Hash(default_value=None, contract='con_dex_pairs_pi', name\n    ='toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dex_pairs_pi', name='pairs')\n__pairs_num = Variable(contract='con_dex_pairs_pi', name='pairs_num')\n__feeTo = Variable(contract='con_dex_pairs_pi', name='feeTo')\n__owner = Variable(contract='con_dex_pairs_pi', name='owner')\n__balances = Hash(default_value=decimal('0.0'), contract='con_dex_pairs_pi',\n    name='balances')\n__LOCK = Variable(contract='con_dex_pairs_pi', name='LOCK')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('account',))]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n    __LOCK.set(False)\n\n\n@__export('con_dex_pairs_pi')\ndef enableFee(en: bool):\n    assert ctx.caller == __owner.get(), 'SNAKX: FORBIDDEN'\n    if en:\n        __feeTo.set(__owner.get())\n    else:\n        __feeTo.set(False)\n\n\n@__export('con_dex_pairs_pi')\ndef createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, 'SNAKX: IDENTICAL_ADDRESSES'\n    assert tokenA < tokenB, 'SNAKX: BAD_ORDER'\n    assert __toks_to_pair[tokenA, tokenB] == None, 'SNAKX: PAIR_EXISTS'\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface), 'SNAKX: NO_TOKA'\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface), 'SNAKX: NO_TOKB'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = decimal('0.0')\n    __pairs[p_num, 'reserve1'] = decimal('0.0')\n    __pairs[p_num, 'balance0'] = decimal('0.0')\n    __pairs[p_num, 'balance1'] = decimal('0.0')\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = decimal('0.0')\n    __pairs[p_num, 'kLast'] = decimal('0.0')\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    __PairCreated({'token0': tokenA, 'token1': tokenB, 'pair': p_num})\n    return p_num\n\n\n@__export('con_dex_pairs_pi')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dex_pairs_pi')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n    __TransferLiq({'pair': pair, 'from': ctx.caller, 'to': to, 'amount':\n        amount})\n\n\n@__export('con_dex_pairs_pi')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] = amount\n    __ApproveLiq({'pair': pair, 'from': ctx.caller, 'to': to, 'amount': amount}\n        )\n\n\n@__export('con_dex_pairs_pi')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n    __TransferLiq({'pair': pair, 'from': main_account, 'to': to, 'amount':\n        amount})\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'p2a Invalid value!'\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    prev_balance = t.balance_of(ctx.this)\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'\n            ] >= value, 'p2a Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = t.balance_of(ctx.this)\n        assert new_balance >= 0, 'p2a Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'p2a Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'\n            ] >= value, 'p2a Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = t.balance_of(ctx.this)\n        assert new_balance >= 0, 'p2a Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'p2a Negative pair balance1!'\n        return True\n    assert False, 'p2a Wrong token!'\n    return False\n\n\ndef __safeTransferFromPairToPair(pair: int, token: str, to: int, value: float):\n    assert value >= 0 and value <= MAXIMUM_BALANCE, 'p2p Invalid value!'\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'\n            ] >= value, 'p2p Not enough coins to send!'\n        __pairs[pair, 'balance0'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'p2p No token in TO'\n        new_balance = __pairs[pair, 'balance0']\n        assert new_balance >= 0, 'p2p Negative balance!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'\n            ] >= value, 'p2p Not enough coins to send!'\n        __pairs[pair, 'balance1'] -= value\n        if __pairs[to, 'token0'] == token:\n            __pairs[to, 'balance0'] += value\n        elif __pairs[to, 'token1'] == token:\n            __pairs[to, 'balance1'] += value\n        else:\n            assert False, 'p2p No token in TO'\n        new_balance = __pairs[pair, 'balance1']\n        assert new_balance >= 0, 'p2p Negative balance!'\n        return True\n    assert False, 'p2p Wrong token!'\n    return False\n\n\ndef __sync(pair: int):\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    balA = tA.balance_of(ctx.this)\n    if balA == None:\n        balA = decimal('0.0')\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface)\n    balB = tB.balance_of(ctx.this)\n    if balB == None:\n        balB = decimal('0.0')\n    __balances[tokenA] = balA\n    __balances[tokenB] = balB\n\n\n@__export('con_dex_pairs_pi')\ndef sync2(pair: int):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    tokenA = __pairs[pair, 'token0']\n    tokenB = __pairs[pair, 'token1']\n    tA = importlib.import_module(tokenA)\n    assert importlib.enforce_interface(tA, token_interface)\n    balA = tA.balance_of(ctx.this)\n    if balA == None:\n        balA = decimal('0.0')\n    tB = importlib.import_module(tokenB)\n    assert importlib.enforce_interface(tB, token_interface)\n    balB = tB.balance_of(ctx.this)\n    if balB == None:\n        balB = decimal('0.0')\n    incA = balA - __balances[tokenA]\n    assert incA >= 0, 'SNAKX: token0_neg'\n    incB = balB - __balances[tokenB]\n    assert incB >= 0, 'SNAKX: token1_neg'\n    __pairs[pair, 'balance0'] += incA\n    __pairs[pair, 'balance1'] += incB\n    assert __pairs[pair, 'balance0'\n        ] <= MAXIMUM_BALANCE, 'SNAKX: TokenA OVERFLOW'\n    assert __pairs[pair, 'balance1'\n        ] <= MAXIMUM_BALANCE, 'SNAKX: TokenB OVERFLOW'\n    __balances[tokenA] = balA\n    __balances[tokenB] = balB\n    __LOCK.set(False)\n\n\n@__export('con_dex_pairs_pi')\ndef getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\n@__export('con_dex_pairs_pi')\ndef getSurplus(pair: int):\n    return __pairs[pair, 'balance0'] - __pairs[pair, 'reserve0'], __pairs[\n        pair, 'balance1'] - __pairs[pair, 'reserve1']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    assert balance0 <= MAXIMUM_BALANCE and balance1 <= MAXIMUM_BALANCE, 'SNAKX: BALANCE OVERFLOW'\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n    __Sync({'pair': pair, 'reserve0': balance0, 'reserve1': balance1})\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo.get() != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __internal_mint(pair, __feeTo.get(), liquidity)\n    elif kLast != 0:\n        __pairs[pair, 'kLast'] = decimal('0.0')\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\n@__export('con_dex_pairs_pi')\ndef burn(pair: int, to: str):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    reserve0, reserve1, ignore = getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    __sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    __Burn({'pair': pair, 'amount0': amount0, 'amount1': amount1, 'to': to})\n    __LOCK.set(False)\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\n@__export('con_dex_pairs_pi')\ndef mint(pair: int, to: str):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    reserve0, reserve1, ignore = getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    __sync(pair)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    __Mint({'pair': pair, 'amount0': amount0, 'amount1': amount1, 'to': to})\n    __LOCK.set(False)\n    return liquidity\n\n\n@__export('con_dex_pairs_pi')\ndef swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    assert amount0Out > 0 or amount1Out > 0, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, 'SNAKX: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'SNAKX: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, 'SNAKX: K'\n    __internal_update(pair, balance0, balance1)\n    __sync(pair)\n    __Swap({'pair': pair, 'amount0In': amount0In, 'amount1In': amount1In,\n        'amount0Out': amount0Out, 'amount1Out': amount1Out, 'to': to})\n    __LOCK.set(False)\n\n\n@__export('con_dex_pairs_pi')\ndef swapToPair(pair: int, amount0Out: float, amount1Out: float, to: int):\n    assert not __LOCK.get(), 'SNAKX: LOCKED'\n    __LOCK.set(True)\n    assert amount0Out > 0 or amount1Out > 0, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    if amount0Out > 0:\n        __safeTransferFromPairToPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPairToPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'SNAKX: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 - amount0In * decimal('0.003')\n    balance1Adjusted = balance1 - amount1In * decimal('0.003')\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1, 'SNAKX: K'\n    __internal_update(pair, balance0, balance1)\n    __Swap({'pair': pair, 'amount0In': amount0In, 'amount1In': amount1In,\n        'amount0Out': amount0Out, 'amount1Out': amount1Out, 'to': to})\n    __LOCK.set(False)\n"
            },
            {
                "key": "con_dex_pairs_pi.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs_pi.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        7,
                        21,
                        1,
                        6,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_pairs_pi.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs_pi.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_pairs_pi.pairs_num",
                "value": 0
            },
            {
                "key": "con_dex_router_n.__code__",
                "value": "DEX_PAIRS = 'con_dex_pairs_n'\n__toks_to_pair = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name=\n    'toks_to_pair', contract='con_dex_router_n', name='toks_to_pair')\n__pairsmap = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name='pairs',\n    contract='con_dex_router_n', name='pairsmap')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n\n\ndef __PAIRS():\n    return importlib.import_module(DEX_PAIRS)\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    t.transfer_from(value, to, src)\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, 'SNAKX: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    pairs = __PAIRS()\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == None:\n        desired_pair = pairs.createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = pairs.getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, 'SNAKX: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, 'SNAKX: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dex_router_n')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: datetime.datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFrom(tokenA, ctx.caller, DEX_PAIRS, amountA)\n    __safeTransferFrom(tokenB, ctx.caller, DEX_PAIRS, amountB)\n    pairs.sync2(pair)\n    liquidity = pairs.mint(pair, to)\n    return amountA, amountB, liquidity\n\n\n@__export('con_dex_router_n')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: datetime.datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != None, 'SNAKX: NO_PAIR'\n    pairs.liqTransfer_from(desired_pair, liquidity, DEX_PAIRS, ctx.caller)\n    pairs.sync2(desired_pair)\n    amountA, amountB = pairs.burn(desired_pair, to)\n    assert amountA >= amountAMin, 'SNAKX: INSUFFICIENT_A_AMOUNT'\n    assert amountB >= amountBMin, 'SNAKX: INSUFFICIENT_B_AMOUNT'\n    return amountA, amountB\n\n\n@__export('con_dex_router_n')\ndef getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, 'SNAKX: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * decimal('0.997')\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn + amountInWithFee\n    return numerator / denominator\n\n\n@__export('con_dex_router_n')\ndef getAmountsOut(amountIn: float, src: str, path: list):\n    assert len(path) >= 1, 'SNAKX: INVALID_PATH'\n    pairs = __PAIRS()\n    amounts = [amountIn]\n    for x in range(0, len(path)):\n        tok0 = __pairsmap[path[x], 'token0']\n        order = src == tok0\n        reserveIn, reserveOut, ignore = pairs.getReserves(path[x])\n        if not order:\n            reserveIn, reserveOut = reserveOut, reserveIn\n        src = __pairsmap[path[x], 'token1'] if order else tok0\n        amounts.append(getAmountOut(amounts[x], reserveIn, reserveOut))\n    return amounts\n\n\n@__export('con_dex_router_n')\ndef swapExactTokenForToken(amountIn: float, amountOutMin: float, pair: int,\n    src: str, to: str, deadline: datetime.datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    reserve0, reserve1, ignore = pairs.getReserves(pair)\n    order = src == __pairsmap[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFrom(src, ctx.caller, DEX_PAIRS, amountIn)\n    pairs.sync2(pair)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    pairs.swap(pair, out0, out1, to)\n\n\n@__export('con_dex_router_n')\ndef swapExactTokenForTokenSupportingFeeOnTransferTokens(amountIn: float,\n    amountOutMin: float, pair: int, src: str, to: str, deadline: datetime.\n    datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    TOK0 = __pairsmap[pair, 'token0']\n    order = src == TOK0\n    t = importlib.import_module(TOK0 if not order else __pairsmap[pair,\n        'token1'])\n    assert importlib.enforce_interface(t, token_interface)\n    balanceBefore = t.balance_of(to)\n    __safeTransferFrom(src, ctx.caller, DEX_PAIRS, amountIn)\n    pairs.sync2(pair)\n    reserve0, reserve1, ignore = pairs.getReserves(pair)\n    sur0, sur1 = pairs.getSurplus(pair)\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = getAmountOut(sur0 if order else sur1, reserve0, reserve1)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    pairs.swap(pair, out0, out1, to)\n    assert t.balance_of(to\n        ) - balanceBefore >= amountOutMin, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n\n\ndef __internal_swap(amounts: list[float], src: str, path: list[int], to: str):\n    assert len(amounts) == len(path) + 1, 'SNAKX: INVALID_LENGTHS'\n    pairs = __PAIRS()\n    for x in range(0, len(path) - 1):\n        tok0 = __pairsmap[path[x], 'token0']\n        order = src == tok0\n        out0 = 0 if order else amounts[x + 1]\n        out1 = amounts[x + 1] if order else 0\n        src = __pairsmap[path[x], 'token1'] if order else tok0\n        pairs.swapToPair(path[x], out0, out1, path[x + 1])\n    tok0 = __pairsmap[path[-1], 'token0']\n    order = src == tok0\n    out0 = 0 if order else amounts[-1]\n    out1 = amounts[-1] if order else 0\n    pairs.swap(path[-1], out0, out1, to)\n\n\n@__export('con_dex_router_n')\ndef swapExactTokensForTokens(amountIn: float, amountOutMin: float, path:\n    list, src: str, to: str, deadline: datetime.datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    amounts = getAmountsOut(amountIn, src, path)\n    assert amounts[-1] >= amountOutMin, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFrom(src, ctx.caller, DEX_PAIRS, amountIn)\n    pairs.sync2(path[0])\n    __internal_swap(amounts, src, path, to)\n"
            },
            {
                "key": "con_dex_router_n.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_router_n.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        7,
                        21,
                        8,
                        30,
                        0
                    ]
                }
            },
            {
                "key": "con_dex_router_p.__code__",
                "value": "DEX_PAIRS = 'con_dex_pairs_p'\n__toks_to_pair = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name=\n    'toks_to_pair', contract='con_dex_router_p', name='toks_to_pair')\n__pairsmap = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name='pairs',\n    contract='con_dex_router_p', name='pairsmap')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('account',))]\n\n\ndef __PAIRS():\n    return importlib.import_module(DEX_PAIRS)\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    t.transfer_from(value, to, src)\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, 'SNAKX: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    pairs = __PAIRS()\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == None:\n        desired_pair = pairs.createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = pairs.getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, 'SNAKX: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, 'SNAKX: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dex_router_p')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: datetime.datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFrom(tokenA, ctx.caller, DEX_PAIRS, amountA)\n    __safeTransferFrom(tokenB, ctx.caller, DEX_PAIRS, amountB)\n    pairs.sync2(pair)\n    liquidity = pairs.mint(pair, to)\n    return amountA, amountB, liquidity\n\n\n@__export('con_dex_router_p')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: datetime.datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != None, 'SNAKX: NO_PAIR'\n    pairs.liqTransfer_from(desired_pair, liquidity, DEX_PAIRS, ctx.caller)\n    pairs.sync2(desired_pair)\n    amountA, amountB = pairs.burn(desired_pair, to)\n    assert amountA >= amountAMin, 'SNAKX: INSUFFICIENT_A_AMOUNT'\n    assert amountB >= amountBMin, 'SNAKX: INSUFFICIENT_B_AMOUNT'\n    return amountA, amountB\n\n\n@__export('con_dex_router_p')\ndef getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, 'SNAKX: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, 'SNAKX: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * decimal('0.997')\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn + amountInWithFee\n    return numerator / denominator\n\n\n@__export('con_dex_router_p')\ndef getAmountsOut(amountIn: float, src: str, path: list):\n    assert len(path) >= 1, 'SNAKX: INVALID_PATH'\n    pairs = __PAIRS()\n    amounts = [amountIn]\n    for x in range(0, len(path)):\n        tok0 = __pairsmap[path[x], 'token0']\n        order = src == tok0\n        reserveIn, reserveOut, ignore = pairs.getReserves(path[x])\n        if not order:\n            reserveIn, reserveOut = reserveOut, reserveIn\n        src = __pairsmap[path[x], 'token1'] if order else tok0\n        amounts.append(getAmountOut(amounts[x], reserveIn, reserveOut))\n    return amounts\n\n\n@__export('con_dex_router_p')\ndef swapExactTokenForToken(amountIn: float, amountOutMin: float, pair: int,\n    src: str, to: str, deadline: datetime.datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    reserve0, reserve1, ignore = pairs.getReserves(pair)\n    order = src == __pairsmap[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFrom(src, ctx.caller, DEX_PAIRS, amountIn)\n    pairs.sync2(pair)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    pairs.swap(pair, out0, out1, to)\n\n\n@__export('con_dex_router_p')\ndef swapExactTokenForTokenSupportingFeeOnTransferTokens(amountIn: float,\n    amountOutMin: float, pair: int, src: str, to: str, deadline: datetime.\n    datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    TOK0 = __pairsmap[pair, 'token0']\n    order = src == TOK0\n    t = importlib.import_module(TOK0 if not order else __pairsmap[pair,\n        'token1'])\n    assert importlib.enforce_interface(t, token_interface)\n    balanceBefore = t.balance_of(to)\n    __safeTransferFrom(src, ctx.caller, DEX_PAIRS, amountIn)\n    pairs.sync2(pair)\n    reserve0, reserve1, ignore = pairs.getReserves(pair)\n    sur0, sur1 = pairs.getSurplus(pair)\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = getAmountOut(sur0 if order else sur1, reserve0, reserve1)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    pairs.swap(pair, out0, out1, to)\n    assert t.balance_of(to\n        ) - balanceBefore >= amountOutMin, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n\n\ndef __internal_swap(amounts: list[float], src: str, path: list[int], to: str):\n    assert len(amounts) == len(path) + 1, 'SNAKX: INVALID_LENGTHS'\n    pairs = __PAIRS()\n    for x in range(0, len(path) - 1):\n        tok0 = __pairsmap[path[x], 'token0']\n        order = src == tok0\n        out0 = 0 if order else amounts[x + 1]\n        out1 = amounts[x + 1] if order else 0\n        src = __pairsmap[path[x], 'token1'] if order else tok0\n        pairs.swapToPair(path[x], out0, out1, path[x + 1])\n    tok0 = __pairsmap[path[-1], 'token0']\n    order = src == tok0\n    out0 = 0 if order else amounts[-1]\n    out1 = amounts[-1] if order else 0\n    pairs.swap(path[-1], out0, out1, to)\n\n\n@__export('con_dex_router_p')\ndef swapExactTokensForTokens(amountIn: float, amountOutMin: float, path:\n    list, src: str, to: str, deadline: datetime.datetime):\n    assert now < deadline, 'SNAKX: EXPIRED'\n    pairs = __PAIRS()\n    amounts = getAmountsOut(amountIn, src, path)\n    assert amounts[-1] >= amountOutMin, 'SNAKX: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFrom(src, ctx.caller, DEX_PAIRS, amountIn)\n    pairs.sync2(path[0])\n    __internal_swap(amounts, src, path, to)\n"
            },
            {
                "key": "con_dex_router_p.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dex_router_p.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        7,
                        19,
                        5,
                        17,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon.LiquidityPools:allowed_token_contracts",
                "value": [
                    "currency",
                    "con_basic_token"
                ]
            },
            {
                "key": "con_dexcon.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon', name='LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['currency',\n        'con_basic_token']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    token_a = importlib.import_module(token_contract_a)\n    token_b = importlib.import_module(token_contract_b)\n    token_a.transfer_from(amount=token_a_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer_from(amount=token_b_amount, to=ctx.this, main_account=\n        ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert input_token in __LiquidityPools and output_token in __LiquidityPools, 'Invalid tokens.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_tokens'] = tokens\n"
            },
            {
                "key": "con_dexcon.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        7,
                        14,
                        30,
                        43,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon001.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stk7",
                    "con_stk8"
                ]
            },
            {
                "key": "con_dexcon001.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon001.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon001.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon001.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon001.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon001', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon001', name=\n    'LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon001', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stk7', 'con_stk8']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon001')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon001', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon001', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds for Token A'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds for Token B'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    current_approval_a = __balances_of_token_a[ctx.caller, ctx.this]\n    if current_approval_a < token_a_amount:\n        importlib.import_module(token_contract_a).approve(amount=\n            token_a_amount, to=ctx.this)\n    current_approval_b = __balances_of_token_b[ctx.caller, ctx.this]\n    if current_approval_b < token_b_amount:\n        importlib.import_module(token_contract_b).approve(amount=\n            token_b_amount, to=ctx.this)\n    importlib.import_module(token_contract_a).transfer_from(amount=\n        token_a_amount, to=ctx.this, main_account=ctx.caller)\n    importlib.import_module(token_contract_b).transfer_from(amount=\n        token_b_amount, to=ctx.this, main_account=ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon001')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon001', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon001')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon001')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_token_contracts'] = tokens\n"
            },
            {
                "key": "con_dexcon001.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon001.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        11,
                        49,
                        5,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon011.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stk7",
                    "con_stk8"
                ]
            },
            {
                "key": "con_dexcon011.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon011.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon011.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon011.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon011.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon011', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon011', name=\n    'LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon011', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stk7', 'con_stk8']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon011')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon011', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon011', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds for Token A'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds for Token B'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    current_approval_a = __balances_of_token_a[ctx.caller, ctx.this]\n    if current_approval_a < token_a_amount:\n        importlib.import_module(token_contract_a).approve(amount=\n            token_a_amount, to=ctx.this)\n    current_approval_b = __balances_of_token_b[ctx.caller, ctx.this]\n    if current_approval_b < token_b_amount:\n        importlib.import_module(token_contract_b).approve(amount=\n            token_b_amount, to=ctx.this)\n    importlib.import_module(token_contract_a).transfer_from(amount=\n        token_a_amount, to=ctx.this, main_account=ctx.caller)\n    importlib.import_module(token_contract_b).transfer_from(amount=\n        token_b_amount, to=ctx.this, main_account=ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon011')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon011', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon011')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon011')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_token_contracts'] = tokens\n"
            },
            {
                "key": "con_dexcon011.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon011.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        0,
                        56,
                        50,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon02.__code__",
                "value": "import currency\nI = importlib\ntoken_interface = [I.Func('transfer', args=('amount', 'to')), I.Func(\n    'approve', args=('amount', 'to')), I.Func('transfer_from', args=(\n    'amount', 'to', 'main_account'))]\n__pairs = Hash(contract='con_dexcon02', name='pairs')\n__prices = Hash(default_value=0, contract='con_dexcon02', name='prices')\n__lp_points = Hash(default_value=0, contract='con_dexcon02', name='lp_points')\n__reserves = Hash(default_value=[0, 0], contract='con_dexcon02', name=\n    'reserves')\n__staked_amount = Hash(default_value=0, contract='con_dexcon02', name=\n    'staked_amount')\n__discount = Hash(default_value=1, contract='con_dexcon02', name='discount')\n__state = Hash(contract='con_dexcon02', name='state')\n\n\ndef ____():\n    __state['FEE_PERCENTAGE'] = decimal('0.3') / 100\n    __state['TOKEN_CONTRACT'] = 'con_amm'\n    __state['TOKEN_DISCOUNT'] = decimal('0.75')\n    __state['BURN_PERCENTAGE'] = decimal('0.8')\n    __state['BURN_ADDRESS'] = '0x0'\n    __state['LOG_ACCURACY'] = decimal('1000000000.0')\n    __state['MULTIPLIER'] = decimal('0.05')\n    __state['DISCOUNT_FLOOR'] = decimal('0.0')\n    __state['OWNER'] = ctx.caller\n\n\n@__export('con_dexcon02')\ndef create_market(contract: str, currency_amount: float=0, token_amount:\n    float=0):\n    assert __pairs[contract] is None, 'Market already exists!'\n    assert currency_amount > 0 and token_amount > 0, 'Must provide currency amount and token amount!'\n    token = I.import_module(contract)\n    assert I.enforce_interface(token, token_interface\n        ), 'Invalid token interface!'\n    currency.transfer_from(amount=currency_amount, to=ctx.this,\n        main_account=ctx.caller)\n    token.transfer_from(amount=token_amount, to=ctx.this, main_account=ctx.\n        caller)\n    __prices[contract] = currency_amount / token_amount\n    __pairs[contract] = True\n    __lp_points[contract, ctx.caller] = 100\n    __lp_points[contract] = 100\n    __reserves[contract] = [currency_amount, token_amount]\n    return True\n\n\n@__export('con_dexcon02')\ndef liquidity_balance_of(contract: str, account: str):\n    return __lp_points[contract, account]\n\n\n@__export('con_dexcon02')\ndef add_liquidity(contract: str, currency_amount: float=0):\n    assert __pairs[contract] is True, 'Market does not exist!'\n    assert currency_amount > 0\n    token = I.import_module(contract)\n    assert I.enforce_interface(token, token_interface\n        ), 'Invalid token interface!'\n    token_amount = currency_amount / __prices[contract]\n    currency.transfer_from(amount=currency_amount, to=ctx.this,\n        main_account=ctx.caller)\n    token.transfer_from(amount=token_amount, to=ctx.this, main_account=ctx.\n        caller)\n    total_lp_points = __lp_points[contract]\n    currency_reserve, token_reserve = __reserves[contract]\n    points_per_currency = total_lp_points / currency_reserve\n    lp_to_mint = points_per_currency * currency_amount\n    __lp_points[contract, ctx.caller] += lp_to_mint\n    __lp_points[contract] += lp_to_mint\n    __reserves[contract] = [currency_reserve + currency_amount, \n        token_reserve + token_amount]\n    return lp_to_mint\n\n\n@__export('con_dexcon02')\ndef remove_liquidity(contract: str, amount: float=0):\n    assert __pairs[contract] is True, 'Market does not exist!'\n    assert amount > 0, 'Must be a positive LP point amount!'\n    assert __lp_points[contract, ctx.caller\n        ] >= amount, 'Not enough LP points to remove!'\n    token = I.import_module(contract)\n    assert I.enforce_interface(token, token_interface\n        ), 'Invalid token interface!'\n    lp_percentage = amount / __lp_points[contract]\n    currency_reserve, token_reserve = __reserves[contract]\n    currency_amount = currency_reserve * lp_percentage\n    token_amount = token_reserve * lp_percentage\n    currency.transfer(to=ctx.caller, amount=currency_amount)\n    token.transfer(to=ctx.caller, amount=token_amount)\n    __lp_points[contract, ctx.caller] -= amount\n    __lp_points[contract] -= amount\n    assert __lp_points[contract] > 1, 'Not enough remaining liquidity!'\n    new_currency_reserve = currency_reserve - currency_amount\n    new_token_reserve = token_reserve - token_amount\n    assert new_currency_reserve > 0 and new_token_reserve > 0, 'Not enough remaining liquidity!'\n    __reserves[contract] = [new_currency_reserve, new_token_reserve]\n    return currency_amount, token_amount\n\n\n@__export('con_dexcon02')\ndef transfer_liquidity(contract: str, to: str, amount: float):\n    assert amount > 0, 'Must be a positive LP point amount!'\n    assert __lp_points[contract, ctx.caller\n        ] >= amount, 'Not enough LP points to transfer!'\n    __lp_points[contract, ctx.caller] -= amount\n    __lp_points[contract, to] += amount\n\n\n@__export('con_dexcon02')\ndef approve_liquidity(contract: str, to: str, amount: float):\n    assert amount > 0, 'Cannot send negative balances!'\n    __lp_points[contract, ctx.caller, to] += amount\n\n\n@__export('con_dexcon02')\ndef transfer_liquidity_from(contract: str, to: str, main_account: str,\n    amount: float):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __lp_points[contract, main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __lp_points[main_account, ctx.caller], amount)\n    assert __lp_points[contract, main_account\n        ] >= amount, 'Not enough coins to send!'\n    __lp_points[contract, main_account, ctx.caller] -= amount\n    __lp_points[contract, main_account] -= amount\n    __lp_points[contract, to] += amount\n"
            },
            {
                "key": "con_dexcon02.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon02.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        11,
                        30,
                        56,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon02.state:BURN_ADDRESS",
                "value": "0x0"
            },
            {
                "key": "con_dexcon02.state:BURN_PERCENTAGE",
                "value": {
                    "__fixed__": "0.8"
                }
            },
            {
                "key": "con_dexcon02.state:DISCOUNT_FLOOR",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_dexcon02.state:FEE_PERCENTAGE",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon02.state:LOG_ACCURACY",
                "value": {
                    "__fixed__": "1E+9"
                }
            },
            {
                "key": "con_dexcon02.state:MULTIPLIER",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "con_dexcon02.state:OWNER",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon02.state:TOKEN_CONTRACT",
                "value": "con_amm"
            },
            {
                "key": "con_dexcon02.state:TOKEN_DISCOUNT",
                "value": {
                    "__fixed__": "0.75"
                }
            },
            {
                "key": "con_dexcon1.LiquidityPools:allowed_token_contracts",
                "value": [
                    "currency",
                    "con_basic_token"
                ]
            },
            {
                "key": "con_dexcon1.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon1.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon1.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon1.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon1.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon1', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon1', name='LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon1', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['currency',\n        'con_basic_token']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon1')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon1', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon1', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    token_a = importlib.import_module(token_contract_a)\n    token_b = importlib.import_module(token_contract_b)\n    token_a.transfer_from(amount=token_a_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer_from(amount=token_b_amount, to=ctx.this, main_account=\n        ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon1')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon1', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools.get(input_token\n        ) is not None, 'Invalid input token.'\n    assert __LiquidityPools.get(output_token\n        ) is not None, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon1')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon1')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_tokens'] = tokens\n"
            },
            {
                "key": "con_dexcon1.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        16,
                        3,
                        7,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon2.LiquidityPools:allowed_token_contracts",
                "value": [
                    "currency",
                    "con_basic_token"
                ]
            },
            {
                "key": "con_dexcon2.LiquidityPools:allowed_tokens",
                "value": [
                    "con_stk2",
                    "con_stk3"
                ]
            },
            {
                "key": "con_dexcon2.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon2.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon2.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon2.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon2.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon2', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon2', name='LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon2', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['currency',\n        'con_basic_token']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon2')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon2', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon2', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    token_a = importlib.import_module(token_contract_a)\n    token_b = importlib.import_module(token_contract_b)\n    token_a.transfer_from(amount=token_a_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer_from(amount=token_b_amount, to=ctx.this, main_account=\n        ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon2')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon2', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon2')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon2')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_tokens'] = tokens\n"
            },
            {
                "key": "con_dexcon2.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        16,
                        15,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon3.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stk2",
                    "con_stk3"
                ]
            },
            {
                "key": "con_dexcon3.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon3.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon3.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon3.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon3.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon3', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon3', name='LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon3', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['currency',\n        'con_basic_token']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon3')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon3', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon3', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    token_a = importlib.import_module(token_contract_a)\n    token_b = importlib.import_module(token_contract_b)\n    token_a.transfer_from(amount=token_a_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer_from(amount=token_b_amount, to=ctx.this, main_account=\n        ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon3')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon3', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon3')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon3')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_token_contracts'] = tokens\n"
            },
            {
                "key": "con_dexcon3.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        16,
                        40,
                        19,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon4.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stk2",
                    "con_stk3"
                ]
            },
            {
                "key": "con_dexcon4.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon4.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon4.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon4.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon4.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon4', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon4', name='LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon4', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['currency',\n        'con_basic_token']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon4')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon4', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon4', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    token_a = importlib.import_module(token_contract_a)\n    token_b = importlib.import_module(token_contract_b)\n    token_a.approve(amount=token_a_amount, to=ctx.caller)\n    token_b.approve(amount=token_b_amount, to=ctx.caller)\n    token_a.transfer_from(amount=token_a_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer_from(amount=token_b_amount, to=ctx.this, main_account=\n        ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon4')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon4', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon4')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon4')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_token_contracts'] = tokens\n"
            },
            {
                "key": "con_dexcon4.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon4.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        16,
                        44,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon5.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stk2",
                    "con_stk3"
                ]
            },
            {
                "key": "con_dexcon5.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon5.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon5.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon5.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon5.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon5', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon5', name='LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon5', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stk2', 'con_stk3']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon5')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon5', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon5', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    token_a = importlib.import_module(token_contract_a)\n    token_b = importlib.import_module(token_contract_b)\n    token_a.approve(amount=token_a_amount, to=ctx.caller)\n    token_b.approve(amount=token_b_amount, to=ctx.caller)\n    token_a.transfer_from(amount=token_a_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer_from(amount=token_b_amount, to=ctx.this, main_account=\n        ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon5')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon5', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon5')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon5')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_token_contracts'] = tokens\n"
            },
            {
                "key": "con_dexcon5.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon5.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        17,
                        8,
                        14,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon6.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stk7",
                    "con_stk8"
                ]
            },
            {
                "key": "con_dexcon6.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon6.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon6.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon6.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon6.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon6', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon6', name='LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon6', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stk2', 'con_stk3']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon6')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon6', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon6', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token not allowed'\n    token_a = importlib.import_module(token_contract_a)\n    token_b = importlib.import_module(token_contract_b)\n    current_approval_a = token_a.balances[user, ctx.this]\n    if current_approval_a < token_a_amount:\n        token_a.approve(amount=token_a_amount, to=ctx.this)\n    current_approval_b = token_b.balances[user, ctx.this]\n    if current_approval_b < token_b_amount:\n        token_b.approve(amount=token_b_amount, to=ctx.this)\n    token_a.transfer_from(amount=token_a_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer_from(amount=token_b_amount, to=ctx.this, main_account=\n        ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon6')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon6', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon6')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon6')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_token_contracts'] = tokens\n"
            },
            {
                "key": "con_dexcon6.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon6.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        17,
                        21,
                        14,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon7.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stk7",
                    "con_stk8"
                ]
            },
            {
                "key": "con_dexcon7.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon7.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon7.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon7.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon7.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon7', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon7', name='LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon7', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stk7', 'con_stk8']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon7')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon7', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon7', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds for Token A'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds for Token B'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    current_approval_a = __balances_of_token_a[ctx.caller, ctx.this]\n    if current_approval_a < token_a_amount:\n        importlib.import_module(token_contract_a).approve(amount=\n            token_a_amount, to=ctx.this)\n    current_approval_b = __balances_of_token_b[ctx.caller, ctx.this]\n    if current_approval_b < token_b_amount:\n        importlib.import_module(token_contract_b).approve(amount=\n            token_b_amount, to=ctx.this)\n    importlib.import_module(token_contract_a).transfer_from(amount=\n        token_a_amount, to=ctx.this, main_account=ctx.caller)\n    importlib.import_module(token_contract_b).transfer_from(amount=\n        token_b_amount, to=ctx.this, main_account=ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon7')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon7', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon7')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon7')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_token_contracts'] = tokens\n"
            },
            {
                "key": "con_dexcon7.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon7.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        18,
                        39,
                        56,
                        0
                    ]
                }
            },
            {
                "key": "con_dexcon8.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stk7",
                    "con_stk8"
                ]
            },
            {
                "key": "con_dexcon8.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon8.LiquidityPools:token_a",
                "value": 0
            },
            {
                "key": "con_dexcon8.LiquidityPools:token_b",
                "value": 0
            },
            {
                "key": "con_dexcon8.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_dexcon8.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_dexcon8', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_dexcon8', name='LPBalances')\n__SwapFeePct = Variable(contract='con_dexcon8', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stk7', 'con_stk8']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_dexcon8')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    __balances_of_token_a = ForeignHash(foreign_contract=token_contract_a,\n        foreign_name='balances', contract='con_dexcon8', name=\n        'balances_of_token_a')\n    __balances_of_token_b = ForeignHash(foreign_contract=token_contract_b,\n        foreign_name='balances', contract='con_dexcon8', name=\n        'balances_of_token_b')\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= token_a_amount, 'Insufficient Funds for Token A'\n    assert __balances_of_token_b[ctx.caller\n        ] >= token_b_amount, 'Insufficient Funds for Token B'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    assert token_a_reserve is not None and isinstance(token_a_reserve, (int,\n        float)), 'Token A reserve must be a valid number.'\n    assert token_b_reserve is not None and isinstance(token_b_reserve, (int,\n        float)), 'Token B reserve must be a valid number.'\n    current_approval_a = __balances_of_token_a[ctx.caller, ctx.this]\n    if current_approval_a < token_a_amount:\n        importlib.import_module(token_contract_a).approve(amount=\n            token_a_amount, to=ctx.this)\n    current_approval_b = __balances_of_token_b[ctx.caller, ctx.this]\n    if current_approval_b < token_b_amount:\n        importlib.import_module(token_contract_b).approve(amount=\n            token_b_amount, to=ctx.this)\n    importlib.import_module(token_contract_a).transfer_from(amount=\n        token_a_amount, to=ctx.this, main_account=ctx.caller)\n    importlib.import_module(token_contract_b).transfer_from(amount=\n        token_b_amount, to=ctx.this, main_account=ctx.caller)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_dexcon8')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    __balances_of_token_a = ForeignHash(foreign_contract=input_contract,\n        foreign_name='balances', contract='con_dexcon8', name=\n        'balances_of_token_a')\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert __balances_of_token_a[ctx.caller\n        ] >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    token_a = importlib.import_module(input_contract)\n    token_b = importlib.import_module(output_contract)\n    token_a.transfer_from(amount=input_amount, to=ctx.this, main_account=\n        ctx.caller)\n    token_b.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_dexcon8')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_dexcon8')\ndef change_allowed_token_contracts(tokens: list):\n    assert ctx.caller == __LiquidityPools['owner'\n        ], 'Only the owner can change the allowed token contracts'\n    __LiquidityPools['allowed_token_contracts'] = tokens\n"
            },
            {
                "key": "con_dexcon8.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_dexcon8.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        19,
                        1,
                        14,
                        0
                    ]
                }
            },
            {
                "key": "con_dexhelper2.__code__",
                "value": "@__export('con_dexhelper2')\ndef toksinfo(contracts: list):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='metadata',\n            contract='con_dexhelper2', name='phash')\n        rv.append([str(__phash['token_symbol'])[:25].replace('\"', '').\n            replace(\"'\", ''), str(__phash['token_name'])[:55]].replace('\"',\n            '').replace(\"'\", ''))\n    return rv\n\n\n@__export('con_dexhelper2')\ndef toksbals(contracts: list, who: str):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='balances',\n            contract='con_dexhelper2', name='phash')\n        v = __phash[who]\n        rv.append(str(v) if v is not None else '0.0')\n    return rv\n\n\n@__export('con_dexhelper2')\ndef findpath(dexpairs: str, tok0: str, tok1: str):\n    __t2p = ForeignHash(foreign_contract=dexpairs, foreign_name=\n        'toks_to_pair', contract='con_dexhelper2', name='t2p')\n    p1 = __t2p[tok0, tok1]\n    if p1 is not None:\n        return [p1]\n    else:\n        p1 = __t2p[tok0, 'currency'], p2 = __t2p[tok1, 'currency']\n        if p1 is not None and p2 is not None:\n            return [p1, p2]\n    return []\n"
            },
            {
                "key": "con_dexhelper2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dexhelper2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        21,
                        13,
                        12,
                        0
                    ]
                }
            },
            {
                "key": "con_dexhelper_test2.__code__",
                "value": "@__export('con_dexhelper_test2')\ndef toksinfo(contracts: list):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='metadata',\n            contract='con_dexhelper_test2', name='phash')\n        rv.append([str(__phash['token_symbol'])[:25].replace('\"', '').\n            replace(\"'\", ''), str(__phash['token_name'])[:55].replace('\"',\n            '').replace(\"'\", '')])\n    return rv\n\n\n@__export('con_dexhelper_test2')\ndef toksbals(contracts: list, who: str):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='balances',\n            contract='con_dexhelper_test2', name='phash')\n        v = __phash[who]\n        rv.append(str(v) if v is not None else '0.0')\n    return rv\n\n\n@__export('con_dexhelper_test2')\ndef findpath(dexpairs: str, tok0: str, tok1: str):\n    __t2p = ForeignHash(foreign_contract=dexpairs, foreign_name=\n        'toks_to_pair', contract='con_dexhelper_test2', name='t2p')\n    p1 = __t2p[tok0, tok1]\n    if p1 is not None:\n        return [p1]\n    else:\n        p1 = __t2p[tok0, 'currency'], p2 = __t2p[tok1, 'currency']\n        if p1 is not None and p2 is not None:\n            return [p1, p2]\n    return []\n"
            },
            {
                "key": "con_dexhelper_test2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dexhelper_test2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        21,
                        14,
                        11,
                        0
                    ]
                }
            },
            {
                "key": "con_dexhelper_test3.__code__",
                "value": "@__export('con_dexhelper_test3')\ndef toksinfo(contracts: list):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='metadata',\n            contract='con_dexhelper_test3', name='phash')\n        rv.append([str(__phash['token_symbol'])[:25].replace('\"', '').\n            replace(\"'\", ''), str(__phash['token_name'])[:55].replace('\"',\n            '').replace(\"'\", '')])\n    return rv\n\n\n@__export('con_dexhelper_test3')\ndef toksbals(contracts: list, who: str):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='balances',\n            contract='con_dexhelper_test3', name='phash')\n        v = __phash[who]\n        rv.append(str(v) if v is not None else '0.0')\n    return rv\n\n\n@__export('con_dexhelper_test3')\ndef findpath(dexpairs: str, tok0: str, tok1: str):\n    __t2p = ForeignHash(foreign_contract=dexpairs, foreign_name=\n        'toks_to_pair', contract='con_dexhelper_test3', name='t2p')\n    __pairs = ForeignHash(foreign_contract=dexpairs, foreign_name='pairs',\n        contract='con_dexhelper_test3', name='pairs')\n    p1 = __t2p[tok0, tok1]\n    if p1 is not None:\n        return [[p1, str(__pairs[p1, 'reserve0']), str(__pairs[p1,\n            'reserve1'])]]\n    else:\n        p1 = __t2p[tok0, 'currency'], p2 = __t2p[tok1, 'currency']\n        if p1 is not None and p2 is not None:\n            return [[p1, str(__pairs[p1, 'reserve0']), str(__pairs[p1,\n                'reserve1'])], [p2, str(__pairs[p2, 'reserve0']), str(\n                __pairs[p2, 'reserve1'])]]\n    return []\n"
            },
            {
                "key": "con_dexhelper_test3.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dexhelper_test3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        21,
                        19,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_dexhelper_test4.__code__",
                "value": "@__export('con_dexhelper_test4')\ndef toksinfo(contracts: list):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='metadata',\n            contract='con_dexhelper_test4', name='phash')\n        rv.append([str(__phash['token_symbol'])[:25].replace('\"', '').\n            replace(\"'\", ''), str(__phash['token_name'])[:55].replace('\"',\n            '').replace(\"'\", '')])\n    return rv\n\n\n@__export('con_dexhelper_test4')\ndef toksbals(contracts: list, who: str):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='balances',\n            contract='con_dexhelper_test4', name='phash')\n        v = __phash[who]\n        rv.append(str(v) if v is not None else '0.0')\n    return rv\n\n\n@__export('con_dexhelper_test4')\ndef findpath(dexpairs: str, tok0: str, tok1: str):\n    __t2p = ForeignHash(foreign_contract=dexpairs, foreign_name=\n        'toks_to_pair', contract='con_dexhelper_test4', name='t2p')\n    __pairs = ForeignHash(foreign_contract=dexpairs, foreign_name='pairs',\n        contract='con_dexhelper_test4', name='pairs')\n    p1 = __t2p[tok0, tok1]\n    if p1 is not None:\n        return [[p1, str(__pairs[p1, 'reserve0']), str(__pairs[p1,\n            'reserve1'])]]\n    else:\n        p1 = __t2p[tok0, 'currency']\n        p2 = __t2p[tok1, 'currency']\n        if p1 is not None and p2 is not None:\n            return [[p1, str(__pairs[p1, 'reserve0']), str(__pairs[p1,\n                'reserve1'])], [p2, str(__pairs[p2, 'reserve0']), str(\n                __pairs[p2, 'reserve1'])]]\n    return []\n"
            },
            {
                "key": "con_dexhelper_test4.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dexhelper_test4.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        21,
                        26,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_dexhelper_test5.__code__",
                "value": "@__export('con_dexhelper_test5')\ndef toksinfo(contracts: list):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='metadata',\n            contract='con_dexhelper_test5', name='phash')\n        rv.append([str(__phash['token_symbol'])[:25].replace('\"', '').\n            replace(\"'\", ''), str(__phash['token_name'])[:55].replace('\"',\n            '').replace(\"'\", '')])\n    return rv\n\n\n@__export('con_dexhelper_test5')\ndef toksbals(contracts: list, who: str):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='balances',\n            contract='con_dexhelper_test5', name='phash')\n        v = __phash[who]\n        rv.append(str(v) if v is not None else '0.0')\n    return rv\n\n\n@__export('con_dexhelper_test5')\ndef findpath(dexpairs: str, tok0: str, tok1: str):\n    __t2p = ForeignHash(foreign_contract=dexpairs, foreign_name=\n        'toks_to_pair', contract='con_dexhelper_test5', name='t2p')\n    __pairs = ForeignHash(foreign_contract=dexpairs, foreign_name='pairs',\n        contract='con_dexhelper_test5', name='pairs')\n    p1 = __t2p[tok0, tok1]\n    if p1 is not None:\n        r0 = str(__pairs[p1, 'reserve0'])\n        r1 = str(__pairs[p1, 'reserve1'])\n        order = __pairs[p1, 'token0'] == tok0\n        return [[p1, r0 if order else r1, r1 if order else r0]]\n    else:\n        p1 = __t2p[tok0, 'currency']\n        p2 = __t2p[tok1, 'currency']\n        if p1 is not None and p2 is not None:\n            return [[p1, str(__pairs[p1, 'reserve0']), str(__pairs[p1,\n                'reserve1'])], [p2, str(__pairs[p2, 'reserve0']), str(\n                __pairs[p2, 'reserve1'])]]\n    return []\n"
            },
            {
                "key": "con_dexhelper_test5.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dexhelper_test5.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        21,
                        31,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_dexhelper_test_6.__code__",
                "value": "token_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n\n\ndef __rmbrack(s: str):\n    return s.replace('\"', '').replace(\"'\", '')\n\n\n@__export('con_dexhelper_test_6')\ndef toksinfo(contracts: list):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='metadata',\n            contract='con_dexhelper_test_6', name='phash')\n        rv.append([__rmbrack(str(__phash['token_symbol'])[:25]), __rmbrack(\n            str(__phash['token_name'])[:55])])\n    return rv\n\n\n@__export('con_dexhelper_test_6')\ndef singletoken(contract: str, who: str):\n    tok = importlib.import_module(contract)\n    assert importlib.enforce_interface(tok, token_interface), 'NOTOKEN'\n    __phash = ForeignHash(foreign_contract=contract, foreign_name=\n        'metadata', contract='con_dexhelper_test_6', name='phash')\n    rv = [__rmbrack(str(__phash['token_symbol'])[:25]), __rmbrack(str(\n        __phash['token_name'])[:55]), str(tok.balance_of(contract))]\n    return rv\n\n\n@__export('con_dexhelper_test_6')\ndef toksbals(contracts: list, who: str):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='balances',\n            contract='con_dexhelper_test_6', name='phash')\n        v = __phash[who]\n        rv.append(str(v) if v is not None else '0.0')\n    return rv\n\n\n@__export('con_dexhelper_test_6')\ndef findpath(dexpairs: str, tok0: str, tok1: str):\n    __t2p = ForeignHash(foreign_contract=dexpairs, foreign_name=\n        'toks_to_pair', contract='con_dexhelper_test_6', name='t2p')\n    __pairs = ForeignHash(foreign_contract=dexpairs, foreign_name='pairs',\n        contract='con_dexhelper_test_6', name='pairs')\n    p1 = __t2p[tok0, tok1]\n    if p1 is not None:\n        r0 = str(__pairs[p1, 'reserve0'])\n        r1 = str(__pairs[p1, 'reserve1'])\n        order = __pairs[p1, 'token0'] == tok0\n        return [[p1, r0 if order else r1, r1 if order else r0]]\n    else:\n        p1 = __t2p[tok0, 'currency']\n        p2 = __t2p[tok1, 'currency']\n        if p1 is not None and p2 is not None:\n            return [[p1, str(__pairs[p1, 'reserve0']), str(__pairs[p1,\n                'reserve1'])], [p2, str(__pairs[p2, 'reserve0']), str(\n                __pairs[p2, 'reserve1'])]]\n    return []\n"
            },
            {
                "key": "con_dexhelper_test_6.__developer__",
                "value": "9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e"
            },
            {
                "key": "con_dexhelper_test_6.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        22,
                        19,
                        17,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_dexhelper_test_7.__code__",
                "value": "token_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n\n\ndef __rmbrack(s: str):\n    return s.replace('\"', '').replace(\"'\", '')\n\n\n@__export('con_dexhelper_test_7')\ndef toksinfo(contracts: list):\n    rv = []\n    for t in contracts:\n        __phash = ForeignHash(foreign_contract=t, foreign_name='metadata',\n            contract='con_dexhelper_test_7', name='phash')\n        rv.append([__rmbrack(str(__phash['token_symbol'])[:25]), __rmbrack(\n            str(__phash['token_name'])[:55])])\n    return rv\n\n\n@__export('con_dexhelper_test_7')\ndef singletoken(contract: str, who: str):\n    tok = importlib.import_module(contract)\n    assert importlib.enforce_interface(tok, token_interface), 'NOTOKEN'\n    __phash = ForeignHash(foreign_contract=contract, foreign_name=\n        'metadata', contract='con_dexhelper_test_7', name='phash')\n    rv = [__rmbrack(str(__phash['token_symbol'])[:25]), __rmbrack(str(\n        __phash['token_name'])[:55]), str(tok.balance_of(who))]\n    return rv\n\n\n@__export('con_dexhelper_test_7')\ndef toksbals(contracts: list, who: str):\n    rv = []\n    for t in contracts:\n        tok = importlib.import_module(t)\n        if not importlib.enforce_interface(tok, token_interface):\n            rv.append('0.0')\n            continue\n        rv.append(str(tok.balance_of(who)))\n    return rv\n\n\n@__export('con_dexhelper_test_7')\ndef findpath(dexpairs: str, tok0: str, tok1: str):\n    __t2p = ForeignHash(foreign_contract=dexpairs, foreign_name=\n        'toks_to_pair', contract='con_dexhelper_test_7', name='t2p')\n    __pairs = ForeignHash(foreign_contract=dexpairs, foreign_name='pairs',\n        contract='con_dexhelper_test_7', name='pairs')\n    p1 = __t2p[tok0, tok1]\n    if p1 is not None:\n        r0 = str(__pairs[p1, 'reserve0'])\n        r1 = str(__pairs[p1, 'reserve1'])\n        order = __pairs[p1, 'token0'] == tok0\n        return [[p1, r0 if order else r1, r1 if order else r0]]\n    else:\n        p1 = __t2p[tok0, 'currency']\n        p2 = __t2p[tok1, 'currency']\n        if p1 is not None and p2 is not None:\n            return [[p1, str(__pairs[p1, 'reserve0']), str(__pairs[p1,\n                'reserve1'])], [p2, str(__pairs[p2, 'reserve0']), str(\n                __pairs[p2, 'reserve1'])]]\n    return []\n"
            },
            {
                "key": "con_dexhelper_test_7.__developer__",
                "value": "9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e"
            },
            {
                "key": "con_dexhelper_test_7.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        22,
                        23,
                        41,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_001.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAX_ROUTE = 8\n__toks_to_pair = Hash(default_value=False, contract='con_dextest_001', name\n    ='toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dextest_001', name='pairs')\n__pairs_num = Variable(contract='con_dextest_001', name='pairs_num')\n__feeTo = Variable(contract='con_dextest_001', name='feeTo')\n__owner = Variable(contract='con_dextest_001', name='owner')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n\n\n@__export('con_dextest_001')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dextest_001')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\n@__export('con_dextest_001')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] += amount\n\n\n@__export('con_dextest_001')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface\n        ), 'Bad token interface!'\n    t.transfer_from(value, to, src)\n\n\ndef __safeTransferFromToPair(pair: int, token: str, src: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface\n        ), 'Bad token interface!'\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_001', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        return True\n    elif token == __pairs[pair, 'token1']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        return True\n    assert False, 'Wrong token!'\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface\n        ), 'Bad token interface!'\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_001', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'Negative pair balance1!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, '__DEXNAME: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, '__DEXNAME: IDENTICAL_ADDRESSES'\n    assert __toks_to_pair[tokenA, tokenB] == False, '__DEXNAME: PAIR_EXISTS'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = 0\n    __pairs[p_num, 'reserve1'] = 0\n    __pairs[p_num, 'balance0'] = 0\n    __pairs[p_num, 'balance1'] = 0\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = 0\n    __pairs[p_num, 'kLast'] = 0\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    return p_num\n\n\ndef __getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeto = __feeTo.get()\n    feeOn = feeto != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __mint(pair, feeto.get(), liquidity)\n        elif kLast != 0:\n            __pairs[pair, 'kLast'] = 0\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\ndef __burn(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\ndef __mint(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return liquidity\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == False:\n        desired_pair = __createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = __getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dextest_001')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: int):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFromToPair(pair, tokenA, ctx.caller, amountA)\n    __safeTransferFromToPair(pair, tokenB, ctx.caller, amountB)\n    liquidity = __mint(pair, to)\n    return amountA, amountB, liquidity\n\n\n@__export('con_dextest_001')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: int):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != False, \"Pair doesn't exist!\"\n    liqTransfer(desired_pair, liquidity, ctx.this)\n    amountA, amountB = __burn(desired_pair, to)\n    assert amountA >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n    assert amountB >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n    return amountA, amountB\n\n\ndef __getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * 997\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn * 1000 + amountInWithFee\n    return numerator / denominator\n\n\ndef __swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert amount0Out > 0 or amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = __getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, 'UniswapV2: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 * 1000 - amount0In * 3\n    balance1Adjusted = balance1 * 1000 - amount1In * 3\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1 * 1000 ** 2 or abs(\n        balance0Adjusted * balance1Adjusted - reserve0 * reserve1 * 1000 ** 2\n        ) < decimal('1e-16'), 'UniswapV2: K'\n    __internal_update(pair, balance0, balance1)\n\n\n@__export('con_dextest_001')\ndef swapExactTokensForTokens(amountIn: float, amountOutMin: float, pair:\n    int, src: str, to: str, deadline: int):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    order = src == __pairs[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = __getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, '__DEXNAMEe: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFromToPair(pair, src, ctx.caller, amountIn)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    return __swap(pair, out0, out1, to)\n"
            },
            {
                "key": "con_dextest_001.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_001.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        11,
                        6,
                        52,
                        30,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_001.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_001.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_001.pairs:1:balance0",
                "value": {
                    "__fixed__": "90933891060.289169773574611257615713376376"
                }
            },
            {
                "key": "con_dextest_001.pairs:1:balance1",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "con_dextest_001.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "316227.766015246794369801211930197176"
                }
            },
            {
                "key": "con_dextest_001.pairs:1:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dextest_001.pairs:1:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        13,
                        19,
                        24,
                        11,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_001.pairs:1:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        13,
                        19,
                        24,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_001.pairs:1:kLast",
                "value": 99999999999
            },
            {
                "key": "con_dextest_001.pairs:1:reserve0",
                "value": {
                    "__fixed__": "90933891060.289169773574611257615713376376"
                }
            },
            {
                "key": "con_dextest_001.pairs:1:reserve1",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "con_dextest_001.pairs:1:token0",
                "value": "con_testtoken"
            },
            {
                "key": "con_dextest_001.pairs:1:token1",
                "value": "currency"
            },
            {
                "key": "con_dextest_001.pairs:1:totalSupply",
                "value": {
                    "__fixed__": "316227.766015256794369801211930197176"
                }
            },
            {
                "key": "con_dextest_001.pairs_num",
                "value": 1
            },
            {
                "key": "con_dextest_001.toks_to_pair:con_testtoken:currency",
                "value": 1
            },
            {
                "key": "con_dextest_002.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAX_ROUTE = 8\n__toks_to_pair = Hash(default_value=False, contract='con_dextest_002', name\n    ='toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dextest_002', name='pairs')\n__pairs_num = Variable(contract='con_dextest_002', name='pairs_num')\n__feeTo = Variable(contract='con_dextest_002', name='feeTo')\n__owner = Variable(contract='con_dextest_002', name='owner')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n\n\n@__export('con_dextest_002')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dextest_002')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\n@__export('con_dextest_002')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] += amount\n\n\n@__export('con_dextest_002')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    t.transfer_from(value, to, src)\n\n\ndef __safeTransferFromToPair(pair: int, token: str, src: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_002', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        return True\n    elif token == __pairs[pair, 'token1']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        return True\n    assert False, 'Wrong token!'\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_002', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'Negative pair balance1!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, '__DEXNAME: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, '__DEXNAME: IDENTICAL_ADDRESSES'\n    assert __toks_to_pair[tokenA, tokenB] == False, '__DEXNAME: PAIR_EXISTS'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = 0\n    __pairs[p_num, 'reserve1'] = 0\n    __pairs[p_num, 'balance0'] = 0\n    __pairs[p_num, 'balance1'] = 0\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = 0\n    __pairs[p_num, 'kLast'] = 0\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    return p_num\n\n\ndef __getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __mint(pair, __feeTo.get(), liquidity)\n        elif kLast != 0:\n            __pairs[pair, 'kLast'] = 0\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\ndef __burn(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\ndef __mint(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return liquidity\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == False:\n        desired_pair = __createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = __getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dextest_002')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: int):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFromToPair(pair, tokenA, ctx.caller, amountA)\n    __safeTransferFromToPair(pair, tokenB, ctx.caller, amountB)\n    liquidity = __mint(pair, to)\n    return amountA, amountB, liquidity\n\n\n@__export('con_dextest_002')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: int):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != False, \"Pair doesn't exist!\"\n    liqTransfer(desired_pair, liquidity, ctx.this)\n    amountA, amountB = __burn(desired_pair, to)\n    assert amountA >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n    assert amountB >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n    return amountA, amountB\n\n\ndef __getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * 997\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn * 1000 + amountInWithFee\n    return numerator / denominator\n\n\ndef __swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert amount0Out > 0 or amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = __getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, 'UniswapV2: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 * 1000 - amount0In * 3\n    balance1Adjusted = balance1 * 1000 - amount1In * 3\n    return (amount0In * 3, amount0Out * 3, amount0Out, amount1Out, reserve0,\n        reserve1, balance0, balance1, balance0Adjusted, balance1Adjusted, \n        balance0Adjusted * balance1Adjusted, reserve0 * reserve1)\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1 * 1000 ** 2 or abs(\n        balance0Adjusted * balance1Adjusted - reserve0 * reserve1 * 1000 ** 2\n        ) < decimal('1e-16'), 'UniswapV2: K'\n    __internal_update(pair, balance0, balance1)\n\n\n@__export('con_dextest_002')\ndef swapExactTokensForTokens(amountIn: float, amountOutMin: float, pair:\n    int, src: str, to: str, deadline: int):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    order = src == __pairs[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = __getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, '__DEXNAMEe: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFromToPair(pair, src, ctx.caller, amountIn)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    return __swap(pair, out0, out1, to)\n"
            },
            {
                "key": "con_dextest_002.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_002.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        13,
                        19,
                        40,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_002.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_002.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_002.pairs:1:balance0",
                "value": {
                    "__fixed__": "9093389106118.941529508047649358916068018551"
                }
            },
            {
                "key": "con_dextest_002.pairs:1:balance1",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "con_dextest_002.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "3162277.660168211218115885121513271513"
                }
            },
            {
                "key": "con_dextest_002.pairs:1:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dextest_002.pairs:1:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        13,
                        19,
                        45,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_002.pairs:1:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        13,
                        19,
                        45,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_002.pairs:1:kLast",
                "value": 9999999999999
            },
            {
                "key": "con_dextest_002.pairs:1:reserve0",
                "value": 9999999999999
            },
            {
                "key": "con_dextest_002.pairs:1:reserve1",
                "value": 1
            },
            {
                "key": "con_dextest_002.pairs:1:token0",
                "value": "con_testtoken"
            },
            {
                "key": "con_dextest_002.pairs:1:token1",
                "value": "currency"
            },
            {
                "key": "con_dextest_002.pairs:1:totalSupply",
                "value": {
                    "__fixed__": "3162277.660168221218115885121513271513"
                }
            },
            {
                "key": "con_dextest_002.pairs_num",
                "value": 1
            },
            {
                "key": "con_dextest_002.toks_to_pair:con_testtoken:currency",
                "value": 1
            },
            {
                "key": "con_dextest_003.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAX_ROUTE = 8\n__toks_to_pair = Hash(default_value=False, contract='con_dextest_003', name\n    ='toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dextest_003', name='pairs')\n__pairs_num = Variable(contract='con_dextest_003', name='pairs_num')\n__feeTo = Variable(contract='con_dextest_003', name='feeTo')\n__owner = Variable(contract='con_dextest_003', name='owner')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n\n\n@__export('con_dextest_003')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dextest_003')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\n@__export('con_dextest_003')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] += amount\n\n\n@__export('con_dextest_003')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    t.transfer_from(value, to, src)\n\n\ndef __safeTransferFromToPair(pair: int, token: str, src: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_003', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        return True\n    elif token == __pairs[pair, 'token1']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        return True\n    assert False, 'Wrong token!'\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_003', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'Negative pair balance1!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, '__DEXNAME: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, '__DEXNAME: IDENTICAL_ADDRESSES'\n    assert __toks_to_pair[tokenA, tokenB] == False, '__DEXNAME: PAIR_EXISTS'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = 0\n    __pairs[p_num, 'reserve1'] = 0\n    __pairs[p_num, 'balance0'] = 0\n    __pairs[p_num, 'balance1'] = 0\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = 0\n    __pairs[p_num, 'kLast'] = 0\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    return p_num\n\n\ndef __getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __mint(pair, __feeTo.get(), liquidity)\n        elif kLast != 0:\n            __pairs[pair, 'kLast'] = 0\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\ndef __burn(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\ndef __mint(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return liquidity\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == False:\n        desired_pair = __createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = __getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dextest_003')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: int):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFromToPair(pair, tokenA, ctx.caller, amountA)\n    __safeTransferFromToPair(pair, tokenB, ctx.caller, amountB)\n    liquidity = __mint(pair, to)\n    return amountA, amountB, liquidity\n\n\n@__export('con_dextest_003')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: int):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != False, \"Pair doesn't exist!\"\n    liqTransfer(desired_pair, liquidity, ctx.this)\n    amountA, amountB = __burn(desired_pair, to)\n    assert amountA >= amountAMin, f'__DEXNAME: INSUFFICIENT_A_AMOUNT {amountA}'\n    assert amountB >= amountBMin, f'__DEXNAME: INSUFFICIENT_B_AMOUNT {amountB}'\n    return amountA, amountB\n\n\ndef __getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * 997\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn * 1000 + amountInWithFee\n    return numerator / denominator\n\n\ndef __swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert amount0Out > 0 or amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = __getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, 'UniswapV2: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 * 1000 - amount0In * 3\n    balance1Adjusted = balance1 * 1000 - amount1In * 3\n    return (amount0In * 3, amount0Out * 3, amount0Out, amount1Out, reserve0,\n        reserve1, balance0, balance1, balance0Adjusted, balance1Adjusted, \n        balance0Adjusted * balance1Adjusted, reserve0 * reserve1)\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1 * 1000 ** 2 or abs(\n        balance0Adjusted * balance1Adjusted - reserve0 * reserve1 * 1000 ** 2\n        ) < decimal('1e-16'), 'UniswapV2: K'\n    __internal_update(pair, balance0, balance1)\n\n\n@__export('con_dextest_003')\ndef swapExactTokensForTokens(amountIn: float, amountOutMin: float, pair:\n    int, src: str, to: str, deadline: int):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    order = src == __pairs[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = __getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, '__DEXNAMEe: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFromToPair(pair, src, ctx.caller, amountIn)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    return __swap(pair, out0, out1, to)\n"
            },
            {
                "key": "con_dextest_003.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_003.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        13,
                        19,
                        47,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_003.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_003.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_003.pairs:1:balance0",
                "value": {
                    "__fixed__": "109.579070046566934739187634467823"
                }
            },
            {
                "key": "con_dextest_003.pairs:1:balance1",
                "value": {
                    "__fixed__": "0.001000011496015569361148261145"
                }
            },
            {
                "key": "con_dextest_003.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "0.330487201053987389668947217084"
                }
            },
            {
                "key": "con_dextest_003.pairs:1:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dextest_003.pairs:1:balances:con_dextest_003",
                "value": 0
            },
            {
                "key": "con_dextest_003.pairs:1:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        14,
                        19,
                        42,
                        3,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_003.pairs:1:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        13,
                        19,
                        52,
                        3,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_003.pairs:1:kLast",
                "value": {
                    "__fixed__": "0.109251592559122565384297439076"
                }
            },
            {
                "key": "con_dextest_003.pairs:1:reserve0",
                "value": {
                    "__fixed__": "9503431.15838297780810322887888717735"
                }
            },
            {
                "key": "con_dextest_003.pairs:1:reserve1",
                "value": {
                    "__fixed__": "1.1496015569361148261145E-8"
                }
            },
            {
                "key": "con_dextest_003.pairs:1:token0",
                "value": "con_testtoken"
            },
            {
                "key": "con_dextest_003.pairs:1:token1",
                "value": "currency"
            },
            {
                "key": "con_dextest_003.pairs:1:totalSupply",
                "value": {
                    "__fixed__": "0.330487211053987389668947217084"
                }
            },
            {
                "key": "con_dextest_003.pairs_num",
                "value": 1
            },
            {
                "key": "con_dextest_003.toks_to_pair:con_testtoken:currency",
                "value": 1
            },
            {
                "key": "con_dextest_004.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAX_ROUTE = 8\n__toks_to_pair = Hash(default_value=False, contract='con_dextest_004', name\n    ='toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dextest_004', name='pairs')\n__pairs_num = Variable(contract='con_dextest_004', name='pairs_num')\n__feeTo = Variable(contract='con_dextest_004', name='feeTo')\n__owner = Variable(contract='con_dextest_004', name='owner')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n\n\n@__export('con_dextest_004')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dextest_004')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\n@__export('con_dextest_004')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] += amount\n\n\n@__export('con_dextest_004')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    t.transfer_from(value, to, src)\n\n\ndef __safeTransferFromToPair(pair: int, token: str, src: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_004', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        return True\n    elif token == __pairs[pair, 'token1']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        return True\n    assert False, 'Wrong token!'\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_004', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'Negative pair balance1!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, '__DEXNAME: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, '__DEXNAME: IDENTICAL_ADDRESSES'\n    assert __toks_to_pair[tokenA, tokenB] == False, '__DEXNAME: PAIR_EXISTS'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = 0\n    __pairs[p_num, 'reserve1'] = 0\n    __pairs[p_num, 'balance0'] = 0\n    __pairs[p_num, 'balance1'] = 0\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = 0\n    __pairs[p_num, 'kLast'] = 0\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    return p_num\n\n\ndef __getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo.get() != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __mint(pair, __feeTo.get(), liquidity)\n    elif kLast != 0:\n        __pairs[pair, 'kLast'] = 0\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\ndef __burn(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\ndef __mint(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return liquidity\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == False:\n        desired_pair = __createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = __getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dextest_004')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: int):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFromToPair(pair, tokenA, ctx.caller, amountA)\n    __safeTransferFromToPair(pair, tokenB, ctx.caller, amountB)\n    liquidity = __mint(pair, to)\n    assert __pairs[pair, 'balance0'] == __pairs[pair, 'reserve0'], '0: bnr'\n    assert __pairs[pair, 'balance1'] == __pairs[pair, 'reserve1'], '1: bnr'\n    return amountA, amountB, liquidity\n\n\n@__export('con_dextest_004')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: int):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != False, \"Pair doesn't exist!\"\n    liqTransfer(desired_pair, liquidity, ctx.this)\n    amountA, amountB = __burn(desired_pair, to)\n    assert amountA >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n    assert amountB >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n    assert __pairs[desired_pair, 'balance0'] == __pairs[desired_pair,\n        'reserve0'], '0: bnr'\n    assert __pairs[desired_pair, 'balance1'] == __pairs[desired_pair,\n        'reserve1'], '1: bnr'\n    return amountA, amountB\n\n\ndef __getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * 997\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn * 1000 + amountInWithFee\n    return numerator / denominator\n\n\ndef __swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert amount0Out > 0 or amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = __getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, 'UniswapV2: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 * 1000 - amount0In * 3\n    balance1Adjusted = balance1 * 1000 - amount1In * 3\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1 * 1000 ** 2 or abs(\n        balance0Adjusted * balance1Adjusted - reserve0 * reserve1 * 1000 ** 2\n        ) < decimal('1e-16'), 'UniswapV2: K'\n    __internal_update(pair, balance0, balance1)\n\n\n@__export('con_dextest_004')\ndef swapExactTokensForTokens(amountIn: float, amountOutMin: float, pair:\n    int, src: str, to: str, deadline: int):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    order = src == __pairs[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = __getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, '__DEXNAMEe: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFromToPair(pair, src, ctx.caller, amountIn)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    __swap(pair, out0, out1, to)\n    assert __pairs[pair, 'balance0'] == __pairs[pair, 'reserve0'], '0: bnr'\n    assert __pairs[pair, 'balance1'] == __pairs[pair, 'reserve1'], '1: bnr'\n"
            },
            {
                "key": "con_dextest_004.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_004.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        14,
                        20,
                        10,
                        28,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_004.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_004.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_004.pairs:1:balance0",
                "value": {
                    "__fixed__": "99012841965601.948572729883065833638622929394"
                }
            },
            {
                "key": "con_dextest_004.pairs:1:balance1",
                "value": {
                    "__fixed__": "1.01"
                }
            },
            {
                "key": "con_dextest_004.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "9999999.999999939999999999999874999999"
                }
            },
            {
                "key": "con_dextest_004.pairs:1:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dextest_004.pairs:1:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        16,
                        14,
                        46,
                        57,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_004.pairs:1:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        16,
                        14,
                        46,
                        48,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_004.pairs:1:kLast",
                "value": 99999999999999
            },
            {
                "key": "con_dextest_004.pairs:1:reserve0",
                "value": {
                    "__fixed__": "99012841965601.948572729883065833638622929394"
                }
            },
            {
                "key": "con_dextest_004.pairs:1:reserve1",
                "value": {
                    "__fixed__": "1.01"
                }
            },
            {
                "key": "con_dextest_004.pairs:1:token0",
                "value": "con_testtoken"
            },
            {
                "key": "con_dextest_004.pairs:1:token1",
                "value": "currency"
            },
            {
                "key": "con_dextest_004.pairs:1:totalSupply",
                "value": {
                    "__fixed__": "9999999.999999949999999999999874999999"
                }
            },
            {
                "key": "con_dextest_004.pairs_num",
                "value": 1
            },
            {
                "key": "con_dextest_004.toks_to_pair:con_testtoken:currency",
                "value": 1
            },
            {
                "key": "con_dextest_005.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAX_ROUTE = 8\n__toks_to_pair = Hash(default_value=False, contract='con_dextest_005', name\n    ='toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dextest_005', name='pairs')\n__pairs_num = Variable(contract='con_dextest_005', name='pairs_num')\n__feeTo = Variable(contract='con_dextest_005', name='feeTo')\n__owner = Variable(contract='con_dextest_005', name='owner')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n\n\n@__export('con_dextest_005')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dextest_005')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\n@__export('con_dextest_005')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] += amount\n\n\n@__export('con_dextest_005')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    t.transfer_from(value, to, src)\n\n\ndef __safeTransferFromToPair(pair: int, token: str, src: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_005', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        return True\n    elif token == __pairs[pair, 'token1']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        return True\n    assert False, 'Wrong token!'\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_005', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'Negative pair balance1!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, '__DEXNAME: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, '__DEXNAME: IDENTICAL_ADDRESSES'\n    assert __toks_to_pair[tokenA, tokenB] == False, '__DEXNAME: PAIR_EXISTS'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = 0\n    __pairs[p_num, 'reserve1'] = 0\n    __pairs[p_num, 'balance0'] = 0\n    __pairs[p_num, 'balance1'] = 0\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = 0\n    __pairs[p_num, 'kLast'] = 0\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    return p_num\n\n\ndef __getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo.get() != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __internal_mint(pair, __feeTo.get(), liquidity)\n    elif kLast != 0:\n        __pairs[pair, 'kLast'] = 0\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\ndef __burn(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\ndef __mint(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return liquidity\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == False:\n        desired_pair = __createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = __getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dextest_005')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: int):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFromToPair(pair, tokenA, ctx.caller, amountA)\n    __safeTransferFromToPair(pair, tokenB, ctx.caller, amountB)\n    liquidity = __mint(pair, to)\n    assert __pairs[pair, 'balance0'] == __pairs[pair, 'reserve0'], '0: bnr'\n    assert __pairs[pair, 'balance1'] == __pairs[pair, 'reserve1'], '1: bnr'\n    return amountA, amountB, liquidity\n\n\n@__export('con_dextest_005')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: int):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != False, \"Pair doesn't exist!\"\n    liqTransfer(desired_pair, liquidity, ctx.this)\n    amountA, amountB = __burn(desired_pair, to)\n    assert amountA >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n    assert amountB >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n    assert __pairs[desired_pair, 'balance0'] == __pairs[desired_pair,\n        'reserve0'], '0: bnr'\n    assert __pairs[desired_pair, 'balance1'] == __pairs[desired_pair,\n        'reserve1'], '1: bnr'\n    return amountA, amountB\n\n\ndef __getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * 997\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn * 1000 + amountInWithFee\n    return numerator / denominator\n\n\ndef __swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert amount0Out > 0 or amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = __getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, 'UniswapV2: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 * 1000 - amount0In * 3\n    balance1Adjusted = balance1 * 1000 - amount1In * 3\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1 * 1000 ** 2 or abs(\n        balance0Adjusted * balance1Adjusted - reserve0 * reserve1 * 1000 ** 2\n        ) < decimal('1e-16'), 'UniswapV2: K'\n    __internal_update(pair, balance0, balance1)\n\n\n@__export('con_dextest_005')\ndef swapExactTokensForTokens(amountIn: float, amountOutMin: float, pair:\n    int, src: str, to: str, deadline: int):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    order = src == __pairs[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = __getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, '__DEXNAMEe: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFromToPair(pair, src, ctx.caller, amountIn)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    __swap(pair, out0, out1, to)\n    assert __pairs[pair, 'balance0'] == __pairs[pair, 'reserve0'], '0: bnr'\n    assert __pairs[pair, 'balance1'] == __pairs[pair, 'reserve1'], '1: bnr'\n"
            },
            {
                "key": "con_dextest_005.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_005.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        16,
                        14,
                        50,
                        50,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_005.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_005.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_005.pairs:1:balance0",
                "value": {
                    "__fixed__": "1.000000061523096809293425810305"
                }
            },
            {
                "key": "con_dextest_005.pairs:1:balance1",
                "value": {
                    "__fixed__": "6.171458316281627620543E-8"
                }
            },
            {
                "key": "con_dextest_005.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "0.000246996040793644953739169876"
                }
            },
            {
                "key": "con_dextest_005.pairs:1:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dextest_005.pairs:1:balances:con_dextest_005",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_dextest_005.pairs:1:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        16,
                        19,
                        58,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_005.pairs:1:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        16,
                        14,
                        53,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_005.pairs:1:kLast",
                "value": {
                    "__fixed__": "6.116646760700919292278E-8"
                }
            },
            {
                "key": "con_dextest_005.pairs:1:reserve0",
                "value": {
                    "__fixed__": "1.000000061523096809293425810305"
                }
            },
            {
                "key": "con_dextest_005.pairs:1:reserve1",
                "value": {
                    "__fixed__": "6.171458316281627620543E-8"
                }
            },
            {
                "key": "con_dextest_005.pairs:1:token0",
                "value": "con_testtoken"
            },
            {
                "key": "con_dextest_005.pairs:1:token1",
                "value": "currency"
            },
            {
                "key": "con_dextest_005.pairs:1:totalSupply",
                "value": {
                    "__fixed__": "0.000247006040793644953739169876"
                }
            },
            {
                "key": "con_dextest_005.pairs_num",
                "value": 1
            },
            {
                "key": "con_dextest_005.toks_to_pair:con_testtoken:currency",
                "value": 1
            },
            {
                "key": "con_dextest_006.__code__",
                "value": "MINIMUM_LIQUIDITY = decimal('1e-08')\nMAX_ROUTE = 8\n__toks_to_pair = Hash(default_value=False, contract='con_dextest_006', name\n    ='toks_to_pair')\n__pairs = Hash(default_value=0, contract='con_dextest_006', name='pairs')\n__pairs_num = Variable(contract='con_dextest_006', name='pairs_num')\n__feeTo = Variable(contract='con_dextest_006', name='feeTo')\n__owner = Variable(contract='con_dextest_006', name='owner')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Var('balances', Hash)]\n\n\ndef ____():\n    __pairs_num.set(0)\n    __owner.set(ctx.signer)\n    __feeTo.set(ctx.signer)\n\n\n@__export('con_dextest_006')\ndef pairFor(tokenA: str, tokenB: str):\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    return __toks_to_pair[tokenA, tokenB]\n\n\n@__export('con_dextest_006')\ndef liqTransfer(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', ctx.caller\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', ctx.caller] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\n@__export('con_dextest_006')\ndef liqApprove(pair: int, amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __pairs[pair, 'balances', ctx.caller, to] += amount\n\n\n@__export('con_dextest_006')\ndef liqTransfer_from(pair: int, amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __pairs[pair, 'balances', main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __pairs[pair, 'balances', main_account, ctx.caller], amount)\n    assert __pairs[pair, 'balances', main_account\n        ] >= amount, 'Not enough coins to send!'\n    __pairs[pair, 'balances', main_account, ctx.caller] -= amount\n    __pairs[pair, 'balances', main_account] -= amount\n    __pairs[pair, 'balances', to] += amount\n\n\ndef __safeTransferFrom(token: str, src: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    t.transfer_from(value, to, src)\n\n\ndef __safeTransferFromToPair(pair: int, token: str, src: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_006', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        return True\n    elif token == __pairs[pair, 'token1']:\n        t.transfer_from(value, ctx.this, src)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= prev_balance, 'Negative income!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        return True\n    assert False, 'Wrong token!'\n\n\ndef __safeTransferFromPair(pair: int, token: str, to: str, value: float):\n    t = importlib.import_module(token)\n    assert importlib.enforce_interface(t, token_interface)\n    __tok_balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_dextest_006', name='tok_balances')\n    prev_balance = __tok_balances[ctx.this]\n    if prev_balance == None:\n        prev_balance = 0\n    if token == __pairs[pair, 'token0']:\n        assert __pairs[pair, 'balance0'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance0'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance0'] >= 0, 'Negative pair balance0!'\n        return True\n    elif token == __pairs[pair, 'token1']:\n        assert __pairs[pair, 'balance1'] >= value, 'Not enough coins to send!'\n        t.transfer(value, to)\n        new_balance = __tok_balances[ctx.this]\n        assert new_balance >= 0, 'Negative balance!'\n        __pairs[pair, 'balance1'] += new_balance - prev_balance\n        assert __pairs[pair, 'balance1'] >= 0, 'Negative pair balance1!'\n        return True\n    assert False, 'Wrong token!'\n    return False\n\n\ndef __quote(amountA: float, reserveA: float, reserveB: float):\n    assert amountA > 0, '__DEXNAME: INSUFFICIENT_AMOUNT'\n    assert reserveA > 0 and reserveB > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    return amountA * reserveB / reserveA\n\n\ndef __createPair(tokenA: str, tokenB: str):\n    assert tokenA != tokenB, '__DEXNAME: IDENTICAL_ADDRESSES'\n    assert __toks_to_pair[tokenA, tokenB] == False, '__DEXNAME: PAIR_EXISTS'\n    p_num = __pairs_num.get() + 1\n    __pairs_num.set(p_num)\n    __pairs[p_num, 'token0'] = tokenA\n    __pairs[p_num, 'token1'] = tokenB\n    __pairs[p_num, 'reserve0'] = 0\n    __pairs[p_num, 'reserve1'] = 0\n    __pairs[p_num, 'balance0'] = 0\n    __pairs[p_num, 'balance1'] = 0\n    __pairs[p_num, 'blockTimestampLast'] = now\n    __pairs[p_num, 'totalSupply'] = 0\n    __pairs[p_num, 'kLast'] = 0\n    __pairs[p_num, 'creationTime'] = now\n    __toks_to_pair[tokenA, tokenB] = p_num\n    return p_num\n\n\ndef __getReserves(pair: int):\n    return __pairs[pair, 'reserve0'], __pairs[pair, 'reserve1'], __pairs[\n        pair, 'blockTimestampLast']\n\n\ndef __internal_update(pair: int, balance0: float, balance1: float):\n    __pairs[pair, 'reserve0'] = balance0\n    __pairs[pair, 'reserve1'] = balance1\n    __pairs[pair, 'blockTimestampLast'] = now\n\n\ndef __internal_mintFee(pair: int, reserve0: float, reserve1: float):\n    feeOn = __feeTo.get() != False\n    kLast = __pairs[pair, 'kLast']\n    if feeOn:\n        if kLast != 0:\n            rootK = (reserve0 * reserve1) ** decimal('0.5')\n            rootKLast = kLast ** decimal('0.5')\n            if rootK > rootKLast:\n                numerator = __pairs[pair, 'totalSupply'] * (rootK - rootKLast)\n                denominator = rootK * 5 + rootKLast\n                liquidity = numerator / denominator\n                if liquidity > 0:\n                    __internal_mint(pair, __feeTo.get(), liquidity)\n    elif kLast != 0:\n        __pairs[pair, 'kLast'] = 0\n    return feeOn\n\n\ndef __internal_burn(pair: int, src: str, value: float):\n    __pairs[pair, 'totalSupply'] -= value\n    assert __pairs[pair, 'totalSupply'] >= 0, 'Negative supply!'\n    __pairs[pair, 'balances', src] -= value\n    assert __pairs[pair, 'balances', src] >= 0, 'Negative balance!'\n\n\ndef __burn(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    liquidity = __pairs[pair, 'balances', ctx.this]\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    amount0 = liquidity * balance0 / totalSupply\n    amount1 = liquidity * balance1 / totalSupply\n    assert amount0 > 0 and amount1 > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY_BURNED'\n    __internal_burn(pair, ctx.this, liquidity)\n    __safeTransferFromPair(pair, token0, to, amount0)\n    __safeTransferFromPair(pair, token1, to, amount1)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return amount0, amount1\n\n\ndef __internal_mint(pair: int, to: str, value: float):\n    __pairs[pair, 'totalSupply'] += value\n    __pairs[pair, 'balances', to] += value\n\n\ndef __mint(pair: int, to: str):\n    reserve0, reserve1, ignore = __getReserves(pair)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0 = balance0 - reserve0\n    amount1 = balance1 - reserve1\n    feeOn = __internal_mintFee(pair, reserve0, reserve1)\n    totalSupply = __pairs[pair, 'totalSupply']\n    liquidity = 0\n    if totalSupply == 0:\n        liquidity = (amount0 * amount1) ** decimal('0.5') - MINIMUM_LIQUIDITY\n        __internal_mint(pair, 'DEAD', MINIMUM_LIQUIDITY)\n    else:\n        liquidity = min(amount0 * totalSupply / reserve0, amount1 *\n            totalSupply / reserve1)\n    assert liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED'\n    __internal_mint(pair, to, liquidity)\n    __internal_update(pair, balance0, balance1)\n    if feeOn:\n        __pairs[pair, 'kLast'] = balance0 * balance1\n    return liquidity\n\n\ndef __internal_addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float):\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    if desired_pair == False:\n        desired_pair = __createPair(tokenA, tokenB)\n    reserveA, reserveB, ignore = __getReserves(desired_pair)\n    if reserveA == 0 and reserveB == 0:\n        return amountADesired, amountBDesired\n    else:\n        amountBOptimal = __quote(amountADesired, reserveA, reserveB)\n        if amountBOptimal <= amountBDesired:\n            assert amountBOptimal >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n            return amountADesired, amountBOptimal\n        else:\n            amountAOptimal = __quote(amountBDesired, reserveB, reserveA)\n            assert amountAOptimal <= amountADesired\n            assert amountAOptimal >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n            return amountAOptimal, amountBDesired\n\n\n@__export('con_dextest_006')\ndef addLiquidity(tokenA: str, tokenB: str, amountADesired: float,\n    amountBDesired: float, amountAMin: float, amountBMin: float, to: str,\n    deadline: datetime.datetime):\n    assert now < deadline, '__DEXNAME: EXPIRED'\n    if tokenB < tokenA:\n        tokenA, tokenB = tokenB, tokenA\n    amountA, amountB = __internal_addLiquidity(tokenA, tokenB,\n        amountADesired, amountBDesired, amountAMin, amountBMin)\n    pair = __toks_to_pair[tokenA, tokenB]\n    __safeTransferFromToPair(pair, tokenA, ctx.caller, amountA)\n    __safeTransferFromToPair(pair, tokenB, ctx.caller, amountB)\n    liquidity = __mint(pair, to)\n    assert __pairs[pair, 'balance0'] == __pairs[pair, 'reserve0'], '0: bnr'\n    assert __pairs[pair, 'balance1'] == __pairs[pair, 'reserve1'], '1: bnr'\n    return amountA, amountB, liquidity\n\n\n@__export('con_dextest_006')\ndef removeLiquidity(tokenA: str, tokenB: str, liquidity: float, amountAMin:\n    float, amountBMin: float, to: str, deadline: datetime.datetime):\n    assert now < deadline, '__DEXNAME: EXPIRED'\n    desired_pair = __toks_to_pair[tokenA, tokenB]\n    assert desired_pair != False, \"Pair doesn't exist!\"\n    liqTransfer(desired_pair, liquidity, ctx.this)\n    amountA, amountB = __burn(desired_pair, to)\n    assert amountA >= amountAMin, '__DEXNAME: INSUFFICIENT_A_AMOUNT'\n    assert amountB >= amountBMin, '__DEXNAME: INSUFFICIENT_B_AMOUNT'\n    assert __pairs[desired_pair, 'balance0'] == __pairs[desired_pair,\n        'reserve0'], '0: bnr'\n    assert __pairs[desired_pair, 'balance1'] == __pairs[desired_pair,\n        'reserve1'], '1: bnr'\n    return amountA, amountB\n\n\ndef __getAmountOut(amountIn: float, reserveIn: float, reserveOut: float):\n    assert amountIn > 0, '__DEXNAME: INSUFFICIENT_INPUT_AMOUNT'\n    assert reserveIn > 0 and reserveOut > 0, '__DEXNAME: INSUFFICIENT_LIQUIDITY'\n    amountInWithFee = amountIn * 997\n    numerator = amountInWithFee * reserveOut\n    denominator = reserveIn * 1000 + amountInWithFee\n    return numerator / denominator\n\n\ndef __swap(pair: int, amount0Out: float, amount1Out: float, to: str):\n    assert amount0Out > 0 or amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'\n    reserve0, reserve1, ignore = __getReserves(pair)\n    assert amount0Out < reserve0 and amount1Out < reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY'\n    token0 = __pairs[pair, 'token0']\n    token1 = __pairs[pair, 'token1']\n    assert to != token0 and to != token1, 'UniswapV2: INVALID_TO'\n    if amount0Out > 0:\n        __safeTransferFromPair(pair, token0, to, amount0Out)\n    if amount1Out > 0:\n        __safeTransferFromPair(pair, token1, to, amount1Out)\n    balance0 = __pairs[pair, 'balance0']\n    balance1 = __pairs[pair, 'balance1']\n    amount0In = balance0 - (reserve0 - amount0Out\n        ) if balance0 > reserve0 - amount0Out else 0\n    amount1In = balance1 - (reserve1 - amount1Out\n        ) if balance1 > reserve1 - amount1Out else 0\n    assert amount0In > 0 or amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT'\n    balance0Adjusted = balance0 * 1000 - amount0In * 3\n    balance1Adjusted = balance1 * 1000 - amount1In * 3\n    assert balance0Adjusted * balance1Adjusted >= reserve0 * reserve1 * 1000 ** 2 or abs(\n        balance0Adjusted * balance1Adjusted - reserve0 * reserve1 * 1000 ** 2\n        ) < decimal('1e-16'), 'UniswapV2: K'\n    __internal_update(pair, balance0, balance1)\n\n\n@__export('con_dextest_006')\ndef swapExactTokensForTokens(amountIn: float, amountOutMin: float, pair:\n    int, src: str, to: str, deadline: datetime.datetime):\n    assert now < deadline, '__DEXNAME: EXPIRED'\n    reserve0, reserve1, ignore = __getReserves(pair)\n    order = src == __pairs[pair, 'token0']\n    if not order:\n        reserve0, reserve1 = reserve1, reserve0\n    amount = __getAmountOut(amountIn, reserve0, reserve1)\n    assert amount >= amountOutMin, '__DEXNAMEe: INSUFFICIENT_OUTPUT_AMOUNT'\n    __safeTransferFromToPair(pair, src, ctx.caller, amountIn)\n    out0 = 0 if order else amount\n    out1 = amount if order else 0\n    __swap(pair, out0, out1, to)\n    assert __pairs[pair, 'balance0'] == __pairs[pair, 'reserve0'], '0: bnr'\n    assert __pairs[pair, 'balance1'] == __pairs[pair, 'reserve1'], '1: bnr'\n"
            },
            {
                "key": "con_dextest_006.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_006.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        21,
                        20,
                        34,
                        26,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_006.feeTo",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_006.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_dextest_006.pairs:1:balance0",
                "value": {
                    "__fixed__": "54145.635431733981989220366367171338"
                }
            },
            {
                "key": "con_dextest_006.pairs:1:balance1",
                "value": {
                    "__fixed__": "1.85"
                }
            },
            {
                "key": "con_dextest_006.pairs:1:balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "316.226184864054982170653977443338"
                }
            },
            {
                "key": "con_dextest_006.pairs:1:balances:DEAD",
                "value": {
                    "__fixed__": "1E-8"
                }
            },
            {
                "key": "con_dextest_006.pairs:1:blockTimestampLast",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        21,
                        22,
                        0,
                        11,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_006.pairs:1:creationTime",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        21,
                        21,
                        33,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_dextest_006.pairs:1:kLast",
                "value": 99999
            },
            {
                "key": "con_dextest_006.pairs:1:reserve0",
                "value": {
                    "__fixed__": "54145.635431733981989220366367171338"
                }
            },
            {
                "key": "con_dextest_006.pairs:1:reserve1",
                "value": {
                    "__fixed__": "1.85"
                }
            },
            {
                "key": "con_dextest_006.pairs:1:token0",
                "value": "con_testtoken"
            },
            {
                "key": "con_dextest_006.pairs:1:token1",
                "value": "currency"
            },
            {
                "key": "con_dextest_006.pairs:1:totalSupply",
                "value": {
                    "__fixed__": "316.226184874054982170653977443338"
                }
            },
            {
                "key": "con_dextest_006.pairs_num",
                "value": 1
            },
            {
                "key": "con_dextest_006.toks_to_pair:con_testtoken:currency",
                "value": 1
            },
            {
                "key": "con_dice.__code__",
                "value": "import currency\n__owner = Variable(contract='con_dice', name='owner')\n__cost = Variable(contract='con_dice', name='cost')\n__reward = Variable(contract='con_dice', name='reward')\n\n\ndef ____():\n    \"\"\"\n    Constructor that initializes the contract, sets the owner, cost, and reward.\n    \"\"\"\n    __owner.set(ctx.caller)\n    __cost.set(decimal('1.0'))\n    __reward.set(decimal('2.0'))\n\n\n@__export('con_dice')\ndef transfer_if_greater(num1: int, num2: int, recipient: str):\n    \"\"\"\n    Compares two numbers and performs a transfer if `num2` is greater than `num1`.\n    Deducts `cost` from the player and rewards `reward` tokens if the player wins.\n\n    Args:\n        num1 (int): The first number to compare.\n        num2 (int): The second number to compare.\n        recipient (str): The wallet address to send tokens to if `num2 > num1`.\n    \"\"\"\n    assert isinstance(num1, int) and isinstance(num2, int\n        ), 'Both num1 and num2 must be integers.'\n    assert isinstance(recipient, str\n        ), 'Recipient must be a valid wallet address.'\n    currency.transfer_from(amount=__cost.get(), to=ctx.this, main_account=\n        ctx.caller)\n    if num2 > num1:\n        assert currency.balance_of(ctx.this) >= __reward.get(\n            ), 'Contract has insufficient balance to pay the reward.'\n        currency.transfer(amount=__reward.get(), to=recipient)\n        return f'Player wins! Transferred {__reward.get()} to {recipient}.'\n    else:\n        return (\n            f'Player loses! {__cost.get()} tokens were added to the contract.')\n\n\n@__export('con_dice')\ndef balance():\n    \"\"\"\n    Returns the current balance of the contract. Only the owner can use this function.\n    \"\"\"\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    return currency.balance_of(ctx.this)\n\n\n@__export('con_dice')\ndef withdraw(amount: float):\n    \"\"\"\n    Withdraws a specified amount from the contract to the owner's wallet. Only the owner can use this function.\n\n    Args:\n        amount (float): The amount to withdraw.\n    \"\"\"\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert amount > 0, 'Amount must be greater than zero.'\n    contract_balance = currency.balance_of(ctx.this)\n    assert amount <= contract_balance, 'Insufficient contract balance.'\n    currency.transfer(amount=amount, to=__owner.get())\n    return f\"Successfully withdrew {amount} to the owner's wallet.\"\n\n\n@__export('con_dice')\ndef change_cost(new_cost: float):\n    \"\"\"\n    Updates the cost (tokens deducted per game). Only the owner can use this function.\n\n    Args:\n        new_cost (float): The new cost to set.\n    \"\"\"\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_cost > 0, 'Cost must be greater than zero.'\n    __cost.set(new_cost)\n    return f'Cost updated to {new_cost}.'\n\n\n@__export('con_dice')\ndef change_reward(new_reward: float):\n    \"\"\"\n    Updates the reward (tokens rewarded for winning). Only the owner can use this function.\n\n    Args:\n        new_reward (float): The new reward to set.\n    \"\"\"\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_reward > 0, 'Reward must be greater than zero.'\n    __reward.set(new_reward)\n    return f'Reward updated to {new_reward}.'\n"
            },
            {
                "key": "con_dice.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        26,
                        13,
                        25,
                        24,
                        0
                    ]
                }
            },
            {
                "key": "con_dice.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dice.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice.reward",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_dice2.__code__",
                "value": "import currency\n__owner = Variable(contract='con_dice2', name='owner')\n__cost = Variable(contract='con_dice2', name='cost')\n__reward = Variable(contract='con_dice2', name='reward')\n__bet_counter = Variable(contract='con_dice2', name='bet_counter')\n__bets = Hash(default_value=None, contract='con_dice2', name='bets')\n__commission_rate = Variable(contract='con_dice2', name='commission_rate')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __cost.set(decimal('1.0'))\n    __reward.set(decimal('2.0'))\n    __bet_counter.set(0)\n    __commission_rate.set(decimal('0.05'))\n\n\n@__export('con_dice2')\ndef transfer_if_greater(num1: int, num2: int, recipient: str):\n    assert isinstance(num1, int) and isinstance(num2, int\n        ), 'Both num1 and num2 must be integers.'\n    assert isinstance(recipient, str\n        ), 'Recipient must be a valid wallet address.'\n    currency.transfer_from(amount=__cost.get(), to=ctx.this, main_account=\n        ctx.caller)\n    if num2 > num1:\n        assert currency.balance_of(ctx.this) >= __reward.get(\n            ), 'Contract has insufficient balance to pay the reward.'\n        currency.transfer(amount=__reward.get(), to=recipient)\n        return f'Player wins! Transferred {__reward.get()} to {recipient}.'\n    else:\n        return (\n            f'Player loses! {__cost.get()} tokens were added to the contract.')\n\n\n@__export('con_dice2')\ndef place_bet(name: str, address: str, amount: float) ->str:\n    assert amount > 0, 'Bet amount must be greater than zero.'\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=address)\n    bet_id = __get_next_bet_id()\n    __bets[bet_id] = {'name': name, 'address': address, 'amount': amount}\n    return f'Bet placed with ID {bet_id}.'\n\n\ndef __get_next_bet_id():\n    current_id = __bet_counter.get()\n    next_id = current_id + 1\n    __bet_counter.set(next_id)\n    return next_id\n\n\n@__export('con_dice2')\ndef get_bets():\n    bet_list = []\n    current_id = __bet_counter.get()\n    for bet_id in range(1, current_id + 1):\n        bet = __bets[bet_id]\n        if bet is not None:\n            bet_list.append({'bet_id': bet_id, 'name': bet['name'],\n                'address': bet['address'], 'amount': bet['amount']})\n    return bet_list\n\n\n@__export('con_dice2')\ndef accept_bet(bet_id: int, opponent_address: str, num1: int, num2: int):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    assert 'opponent_address' not in bet, 'Bet has already been accepted and resolved.'\n    assert opponent_address != bet['address'\n        ], 'Opponent cannot be the same as the bettor.'\n    amount = bet['amount']\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=\n        opponent_address)\n    bet['opponent_address'] = opponent_address\n    bettor_address = bet['address']\n    total_amount = amount * 2\n    commission = total_amount * __commission_rate.get()\n    payout = total_amount - commission\n    if num2 > num1:\n        winner = opponent_address\n    else:\n        winner = bettor_address\n    currency.transfer(amount=payout, to=winner)\n    __bets[bet_id] = None\n    return (\n        f'Bet accepted and resolved. Winner is {winner}. Total amount {payout} transferred after {commission} commission.'\n        )\n\n\n@__export('con_dice2')\ndef remove_bet(bet_id: int):\n    assert ctx.caller == __owner.get(), 'Only the owner can remove bets.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    bettor_address = bet['address']\n    amount = bet['amount']\n    currency.transfer(amount=amount, to=bettor_address)\n    if 'opponent_address' in bet:\n        opponent_address = bet['opponent_address']\n        currency.transfer(amount=amount, to=opponent_address)\n    __bets[bet_id] = None\n    return f'Bet ID {bet_id} has been removed and funds refunded.'\n\n\n@__export('con_dice2')\ndef change_commission_rate(new_rate: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert 0 <= new_rate <= 1, 'Commission rate must be between 0 and 1.'\n    __commission_rate.set(new_rate)\n    return f'Commission rate updated to {new_rate * 100}%.'\n\n\n@__export('con_dice2')\ndef balance():\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    return currency.balance_of(ctx.this)\n\n\n@__export('con_dice2')\ndef withdraw(amount: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert amount > 0, 'Amount must be greater than zero.'\n    contract_balance = currency.balance_of(ctx.this)\n    assert amount <= contract_balance, 'Insufficient contract balance.'\n    currency.transfer(amount=amount, to=__owner.get())\n    return f\"Successfully withdrew {amount} to the owner's wallet.\"\n\n\n@__export('con_dice2')\ndef change_cost(new_cost: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_cost > 0, 'Cost must be greater than zero.'\n    __cost.set(new_cost)\n    return f'Cost updated to {new_cost}.'\n\n\n@__export('con_dice2')\ndef change_reward(new_reward: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_reward > 0, 'Reward must be greater than zero.'\n    __reward.set(new_reward)\n    return f'Reward updated to {new_reward}.'\n"
            },
            {
                "key": "con_dice2.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        5,
                        19,
                        57,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_dice2.bet_counter",
                "value": 19
            },
            {
                "key": "con_dice2.bets:10",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "2"
                    }
                }
            },
            {
                "key": "con_dice2.bets:11",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "2"
                    }
                }
            },
            {
                "key": "con_dice2.bets:12",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice2.bets:13",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice2.bets:14",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice2.bets:15",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "11"
                    }
                }
            },
            {
                "key": "con_dice2.bets:16",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice2.bets:17",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice2.bets:18",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice2.bets:19",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice2.bets:2",
                "value": {
                    "name": "revo",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": 1
                }
            },
            {
                "key": "con_dice2.bets:3",
                "value": {
                    "name": "revo",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "2"
                    }
                }
            },
            {
                "key": "con_dice2.bets:4",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "5"
                    }
                }
            },
            {
                "key": "con_dice2.bets:5",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "3"
                    }
                }
            },
            {
                "key": "con_dice2.bets:6",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "2"
                    }
                }
            },
            {
                "key": "con_dice2.bets:7",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice2.bets:8",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice2.bets:9",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "2"
                    }
                }
            },
            {
                "key": "con_dice2.commission_rate",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "con_dice2.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dice2.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice2.reward",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_dice3.__code__",
                "value": "import currency\n__owner = Variable(contract='con_dice3', name='owner')\n__cost = Variable(contract='con_dice3', name='cost')\n__reward = Variable(contract='con_dice3', name='reward')\n__bet_counter = Variable(contract='con_dice3', name='bet_counter')\n__bets = Hash(default_value=None, contract='con_dice3', name='bets')\n__commission_rate = Variable(contract='con_dice3', name='commission_rate')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __cost.set(decimal('1.0'))\n    __reward.set(decimal('2.0'))\n    __bet_counter.set(0)\n    __commission_rate.set(decimal('0.05'))\n\n\n@__export('con_dice3')\ndef transfer_if_greater(num1: int, num2: int, recipient: str):\n    assert isinstance(num1, int) and isinstance(num2, int\n        ), 'Both num1 and num2 must be integers.'\n    assert isinstance(recipient, str\n        ), 'Recipient must be a valid wallet address.'\n    currency.transfer_from(amount=__cost.get(), to=ctx.this, main_account=\n        ctx.caller)\n    if num2 > num1:\n        assert currency.balance_of(ctx.this) >= __reward.get(\n            ), 'Contract has insufficient balance to pay the reward.'\n        currency.transfer(amount=__reward.get(), to=recipient)\n        return f'Player wins! Transferred {__reward.get()} to {recipient}.'\n    else:\n        return (\n            f'Player loses! {__cost.get()} tokens were added to the contract.')\n\n\n@__export('con_dice3')\ndef place_bet(name: str, address: str, amount: float) ->str:\n    assert amount > 0, 'Bet amount must be greater than zero.'\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=address)\n    bet_id = __get_next_bet_id()\n    __bets[bet_id] = {'name': name, 'address': address, 'amount': amount}\n    return f'Bet placed with ID {bet_id}.'\n\n\ndef __get_next_bet_id():\n    current_id = __bet_counter.get()\n    next_id = current_id + 1\n    __bet_counter.set(next_id)\n    return next_id\n\n\n@__export('con_dice3')\ndef get_bets():\n    bet_list = []\n    current_id = __bet_counter.get()\n    for bet_id in range(1, current_id + 1):\n        bet = __bets[bet_id]\n        if bet is not None:\n            bet_list.append({'bet_id': bet_id, 'name': bet['name'],\n                'amount': bet['amount']})\n    return bet_list\n\n\n@__export('con_dice3')\ndef accept_bet(bet_id: int, opponent_address: str, num1: int, num2: int):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    assert 'opponent_address' not in bet, 'Bet has already been accepted and resolved.'\n    assert opponent_address != bet['address'\n        ], 'Opponent cannot be the same as the bettor.'\n    amount = bet['amount']\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=\n        opponent_address)\n    bet['opponent_address'] = opponent_address\n    bettor_address = bet['address']\n    total_amount = amount * 2\n    commission = total_amount * __commission_rate.get()\n    payout = total_amount - commission\n    if num2 > num1:\n        winner = opponent_address\n    else:\n        winner = bettor_address\n    currency.transfer(amount=payout, to=winner)\n    __bets[bet_id] = None\n    return (\n        f'Bet accepted and resolved. Winner is {winner}. Total amount {payout} transferred after {commission} commission.'\n        )\n\n\n@__export('con_dice3')\ndef remove_bet(bet_id: int):\n    assert ctx.caller == __owner.get(), 'Only the owner can remove bets.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    bettor_address = bet['address']\n    amount = bet['amount']\n    currency.transfer(amount=amount, to=bettor_address)\n    if 'opponent_address' in bet:\n        opponent_address = bet['opponent_address']\n        currency.transfer(amount=amount, to=opponent_address)\n    __bets[bet_id] = None\n    return f'Bet ID {bet_id} has been removed and funds refunded.'\n\n\n@__export('con_dice3')\ndef change_commission_rate(new_rate: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert 0 <= new_rate <= 1, 'Commission rate must be between 0 and 1.'\n    __commission_rate.set(new_rate)\n    return f'Commission rate updated to {new_rate * 100}%.'\n\n\n@__export('con_dice3')\ndef balance():\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    return currency.balance_of(ctx.this)\n\n\n@__export('con_dice3')\ndef withdraw(amount: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert amount > 0, 'Amount must be greater than zero.'\n    contract_balance = currency.balance_of(ctx.this)\n    assert amount <= contract_balance, 'Insufficient contract balance.'\n    currency.transfer(amount=amount, to=__owner.get())\n    return f\"Successfully withdrew {amount} to the owner's wallet.\"\n\n\n@__export('con_dice3')\ndef change_cost(new_cost: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_cost > 0, 'Cost must be greater than zero.'\n    __cost.set(new_cost)\n    return f'Cost updated to {new_cost}.'\n\n\n@__export('con_dice3')\ndef change_reward(new_reward: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_reward > 0, 'Reward must be greater than zero.'\n    __reward.set(new_reward)\n    return f'Reward updated to {new_reward}.'\n"
            },
            {
                "key": "con_dice3.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        6,
                        1,
                        37,
                        50,
                        0
                    ]
                }
            },
            {
                "key": "con_dice3.bet_counter",
                "value": 10
            },
            {
                "key": "con_dice3.bets:10",
                "value": {
                    "name": "Maicol",
                    "address": "f0222f00943416a8cacb2160e4af75faff36660b87e99279a045af1f4182dd1f",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice3.bets:8",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice3.bets:9",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice3.commission_rate",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "con_dice3.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dice3.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice3.reward",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_dice4.__code__",
                "value": "import currency\n__owner = Variable(contract='con_dice4', name='owner')\n__cost = Variable(contract='con_dice4', name='cost')\n__reward = Variable(contract='con_dice4', name='reward')\n__bet_counter = Variable(contract='con_dice4', name='bet_counter')\n__bets = Hash(default_value=None, contract='con_dice4', name='bets')\n__commission_rate = Variable(contract='con_dice4', name='commission_rate')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __cost.set(decimal('1.0'))\n    __reward.set(decimal('2.0'))\n    __bet_counter.set(0)\n    __commission_rate.set(decimal('0.05'))\n\n\n@__export('con_dice4')\ndef transfer_if_greater(num1: int, num2: int, recipient: str):\n    assert isinstance(num1, int) and isinstance(num2, int\n        ), 'Both num1 and num2 must be integers.'\n    assert isinstance(recipient, str\n        ), 'Recipient must be a valid wallet address.'\n    currency.transfer_from(amount=__cost.get(), to=ctx.this, main_account=\n        ctx.caller)\n    if num2 > num1:\n        assert currency.balance_of(ctx.this) >= __reward.get(\n            ), 'Contract has insufficient balance to pay the reward.'\n        currency.transfer(amount=__reward.get(), to=recipient)\n        return f'Player wins! Transferred {__reward.get()} to {recipient}.'\n    else:\n        return (\n            f'Player loses! {__cost.get()} tokens were added to the contract.')\n\n\n@__export('con_dice4')\ndef place_bet(name: str, address: str, amount: float) ->str:\n    assert amount > 0, 'Bet amount must be greater than zero.'\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=address)\n    bet_id = __get_next_bet_id()\n    __bets[bet_id] = {'name': name, 'address': address, 'amount': amount}\n    return f'Bet placed with ID {bet_id}.'\n\n\ndef __get_next_bet_id():\n    current_id = __bet_counter.get()\n    next_id = current_id + 1\n    __bet_counter.set(next_id)\n    return next_id\n\n\n@__export('con_dice4')\ndef get_bets():\n    bet_list = []\n    current_id = __bet_counter.get()\n    for bet_id in range(1, current_id + 1):\n        bet = __bets[bet_id]\n        if bet is not None:\n            bet_list.append({'bet_id': bet_id, 'name': bet['name'],\n                'amount': bet['amount']})\n    return bet_list\n\n\n@__export('con_dice4')\ndef accept_bet(bet_id: int, opponent_address: str, num1: int, num2: int):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    assert 'opponent_address' not in bet, 'Bet has already been accepted and resolved.'\n    assert opponent_address != bet['address'\n        ], 'Opponent cannot be the same as the bettor.'\n    amount = bet['amount']\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=\n        opponent_address)\n    bet['name'] = opponent_address\n    bettor_address = bet['name']\n    total_amount = amount * 2\n    commission = total_amount * __commission_rate.get()\n    payout = total_amount - commission\n    if num2 > num1:\n        winner = opponent_address\n    else:\n        winner = bettor_address\n    currency.transfer(amount=payout, to=winner)\n    __bets[bet_id] = None\n    return (\n        f'Bet accepted and resolved. Winner is {winner}. Total amount {payout} transferred after {commission} commission.'\n        )\n\n\n@__export('con_dice4')\ndef remove_bet(bet_id: int):\n    assert ctx.caller == __owner.get(), 'Only the owner can remove bets.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    bettor_address = bet['address']\n    amount = bet['amount']\n    currency.transfer(amount=amount, to=bettor_address)\n    if 'opponent_address' in bet:\n        opponent_address = bet['opponent_address']\n        currency.transfer(amount=amount, to=opponent_address)\n    __bets[bet_id] = None\n    return f'Bet ID {bet_id} has been removed and funds refunded.'\n\n\n@__export('con_dice4')\ndef get_bet(bet_id: int):\n    \"\"\"\n    Retrieve details of a specific bet by its ID.\n    \"\"\"\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    return {'bet_id': bet_id, 'name': bet['name'], 'address': bet['address'\n        ], 'amount': bet['amount']}\n\n\n@__export('con_dice4')\ndef change_commission_rate(new_rate: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert 0 <= new_rate <= 1, 'Commission rate must be between 0 and 1.'\n    __commission_rate.set(new_rate)\n    return f'Commission rate updated to {new_rate * 100}%.'\n\n\n@__export('con_dice4')\ndef balance():\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    return currency.balance_of(ctx.this)\n\n\n@__export('con_dice4')\ndef withdraw(amount: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert amount > 0, 'Amount must be greater than zero.'\n    contract_balance = currency.balance_of(ctx.this)\n    assert amount <= contract_balance, 'Insufficient contract balance.'\n    currency.transfer(amount=amount, to=__owner.get())\n    return f\"Successfully withdrew {amount} to the owner's wallet.\"\n\n\n@__export('con_dice4')\ndef change_cost(new_cost: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_cost > 0, 'Cost must be greater than zero.'\n    __cost.set(new_cost)\n    return f'Cost updated to {new_cost}.'\n\n\n@__export('con_dice4')\ndef change_reward(new_reward: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_reward > 0, 'Reward must be greater than zero.'\n    __reward.set(new_reward)\n    return f'Reward updated to {new_reward}.'\n"
            },
            {
                "key": "con_dice4.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice4.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        6,
                        3,
                        6,
                        10,
                        0
                    ]
                }
            },
            {
                "key": "con_dice4.bet_counter",
                "value": 2
            },
            {
                "key": "con_dice4.bets:2",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice4.commission_rate",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "con_dice4.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dice4.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice4.reward",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_dice5.__code__",
                "value": "import currency\n__owner = Variable(contract='con_dice5', name='owner')\n__cost = Variable(contract='con_dice5', name='cost')\n__reward = Variable(contract='con_dice5', name='reward')\n__bet_counter = Variable(contract='con_dice5', name='bet_counter')\n__bets = Hash(default_value=None, contract='con_dice5', name='bets')\n__commission_rate = Variable(contract='con_dice5', name='commission_rate')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __cost.set(decimal('1.0'))\n    __reward.set(decimal('2.0'))\n    __bet_counter.set(0)\n    __commission_rate.set(decimal('0.05'))\n\n\n@__export('con_dice5')\ndef transfer_if_greater(num1: int, num2: int, recipient: str):\n    assert isinstance(num1, int) and isinstance(num2, int\n        ), 'Both num1 and num2 must be integers.'\n    assert isinstance(recipient, str\n        ), 'Recipient must be a valid wallet address.'\n    currency.transfer_from(amount=__cost.get(), to=ctx.this, main_account=\n        ctx.caller)\n    if num2 > num1:\n        assert currency.balance_of(ctx.this) >= __reward.get(\n            ), 'Contract has insufficient balance to pay the reward.'\n        currency.transfer(amount=__reward.get(), to=recipient)\n        return f'Player wins! Transferred {__reward.get()} to {recipient}.'\n    else:\n        return (\n            f'Player loses! {__cost.get()} tokens were added to the contract.')\n\n\n@__export('con_dice5')\ndef place_bet(name: str, address: str, amount: float) ->str:\n    assert amount > 0, 'Bet amount must be greater than zero.'\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=address)\n    bet_id = __get_next_bet_id()\n    __bets[bet_id] = {'name': name, 'address': address, 'amount': amount}\n    return f'Bet placed with ID {bet_id}.'\n\n\ndef __get_next_bet_id():\n    current_id = __bet_counter.get()\n    next_id = current_id + 1\n    __bet_counter.set(next_id)\n    return next_id\n\n\n@__export('con_dice5')\ndef get_bets():\n    bet_list = []\n    current_id = __bet_counter.get()\n    for bet_id in range(1, current_id + 1):\n        bet = __bets[bet_id]\n        if bet is not None:\n            bet_list.append({'bet_id': bet_id, 'name': bet['name'],\n                'amount': bet['amount']})\n    return bet_list\n\n\n@__export('con_dice5')\ndef accept_bet(bet_id: int, opponent_name: str, num1: int, num2: int):\n    \"\"\"\n    Accepts a bet and resolves it by determining the winner.\n    The winner's name is returned instead of their address.\n    \"\"\"\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    assert 'opponent_name' not in bet, 'Bet has already been accepted and resolved.'\n    assert opponent_name != bet['name'\n        ], 'Opponent cannot be the same as the bettor.'\n    amount = bet['amount']\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    bettor_name = bet['name']\n    total_amount = amount * 2\n    commission = total_amount * __commission_rate.get()\n    payout = total_amount - commission\n    if num2 > num1:\n        winner = opponent_name\n    else:\n        winner = bettor_name\n    currency.transfer(amount=payout, to=ctx.caller if winner ==\n        opponent_name else bet['address'])\n    __bets[bet_id] = None\n    return (\n        f'Bet accepted and resolved. Winner is {winner}. Total amount {payout} transferred after {commission} commission.'\n        )\n\n\n@__export('con_dice5')\ndef remove_bet(bet_id: int):\n    assert ctx.caller == __owner.get(), 'Only the owner can remove bets.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    bettor_address = bet['address']\n    amount = bet['amount']\n    currency.transfer(amount=amount, to=bettor_address)\n    if 'opponent_address' in bet:\n        opponent_address = bet['opponent_address']\n        currency.transfer(amount=amount, to=opponent_address)\n    __bets[bet_id] = None\n    return f'Bet ID {bet_id} has been removed and funds refunded.'\n\n\n@__export('con_dice5')\ndef get_bet(bet_id: int):\n    \"\"\"\n    Retrieve details of a specific bet by its ID.\n    \"\"\"\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    return {'bet_id': bet_id, 'name': bet['name'], 'address': bet['address'\n        ], 'amount': bet['amount']}\n\n\n@__export('con_dice5')\ndef change_commission_rate(new_rate: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert 0 <= new_rate <= 1, 'Commission rate must be between 0 and 1.'\n    __commission_rate.set(new_rate)\n    return f'Commission rate updated to {new_rate * 100}%.'\n\n\n@__export('con_dice5')\ndef balance():\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    return currency.balance_of(ctx.this)\n\n\n@__export('con_dice5')\ndef withdraw(amount: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert amount > 0, 'Amount must be greater than zero.'\n    contract_balance = currency.balance_of(ctx.this)\n    assert amount <= contract_balance, 'Insufficient contract balance.'\n    currency.transfer(amount=amount, to=__owner.get())\n    return f\"Successfully withdrew {amount} to the owner's wallet.\"\n\n\n@__export('con_dice5')\ndef change_cost(new_cost: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_cost > 0, 'Cost must be greater than zero.'\n    __cost.set(new_cost)\n    return f'Cost updated to {new_cost}.'\n\n\n@__export('con_dice5')\ndef change_reward(new_reward: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_reward > 0, 'Reward must be greater than zero.'\n    __reward.set(new_reward)\n    return f'Reward updated to {new_reward}.'\n"
            },
            {
                "key": "con_dice5.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice5.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        6,
                        3,
                        42,
                        30,
                        0
                    ]
                }
            },
            {
                "key": "con_dice5.bet_counter",
                "value": 5
            },
            {
                "key": "con_dice5.bets:1",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice5.bets:2",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice5.bets:3",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice5.bets:4",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice5.bets:5",
                "value": {
                    "name": "@revolutionx",
                    "address": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                    "amount": {
                        "__fixed__": "1"
                    }
                }
            },
            {
                "key": "con_dice5.commission_rate",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "con_dice5.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dice5.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice5.reward",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_dice6.__code__",
                "value": "import currency\n__owner = Variable(contract='con_dice6', name='owner')\n__cost = Variable(contract='con_dice6', name='cost')\n__reward = Variable(contract='con_dice6', name='reward')\n__bet_counter = Variable(contract='con_dice6', name='bet_counter')\n__bets = Hash(default_value=None, contract='con_dice6', name='bets')\n__commission_rate = Variable(contract='con_dice6', name='commission_rate')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __cost.set(decimal('1.0'))\n    __reward.set(decimal('2.0'))\n    __bet_counter.set(0)\n    __commission_rate.set(decimal('0.05'))\n\n\n@__export('con_dice6')\ndef transfer_if_greater(num1: int, num2: int, recipient: str):\n    assert isinstance(num1, int) and isinstance(num2, int\n        ), 'Both num1 and num2 must be integers.'\n    assert isinstance(recipient, str\n        ), 'Recipient must be a valid wallet address.'\n    currency.transfer_from(amount=__cost.get(), to=ctx.this, main_account=\n        ctx.caller)\n    if num2 > num1:\n        assert currency.balance_of(ctx.this) >= __reward.get(\n            ), 'Contract has insufficient balance to pay the reward.'\n        currency.transfer(amount=__reward.get(), to=recipient)\n        return f'Player wins! Transferred {__reward.get()} to {recipient}.'\n    else:\n        return (\n            f'Player loses! {__cost.get()} tokens were added to the contract.')\n\n\n@__export('con_dice6')\ndef place_bet(name: str, address: str, amount: float) ->str:\n    assert amount > 0, 'Bet amount must be greater than zero.'\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=address)\n    bet_id = __get_next_bet_id()\n    __bets[bet_id] = {'name': name, 'address': address, 'amount': amount}\n    return f'Bet placed with ID {bet_id}.'\n\n\ndef __get_next_bet_id():\n    current_id = __bet_counter.get()\n    next_id = current_id + 1\n    __bet_counter.set(next_id)\n    return next_id\n\n\n@__export('con_dice6')\ndef get_bets():\n    bet_list = []\n    current_id = __bet_counter.get()\n    for bet_id in range(1, current_id + 1):\n        bet = __bets[bet_id]\n        if bet is not None:\n            bet_list.append({'bet_id': bet_id, 'name': bet['name'],\n                'amount': bet['amount']})\n    return bet_list\n\n\n@__export('con_dice6')\ndef accept_bet(bet_id: int, opponent_address: str, num1: int, num2: int):\n    \"\"\"\n    Accepts a bet and resolves it by determining the winner.\n    Returns the name of the bettor if they win, otherwise returns 'opponent_wins'.\n    \"\"\"\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    assert 'resolved' not in bet, 'Bet has already been accepted and resolved.'\n    assert opponent_address != bet['address'\n        ], 'Opponent cannot be the same as the bettor.'\n    bettor_name = bet['name']\n    bettor_address = bet['address']\n    amount = bet['amount']\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=\n        opponent_address)\n    total_amount = amount * 2\n    commission = total_amount * __commission_rate.get()\n    payout = total_amount - commission\n    if num2 > num1:\n        winner_address = opponent_address\n        currency.transfer(amount=payout, to=winner_address)\n        __bets[bet_id] = None\n        return 'opponent_wins'\n    else:\n        winner_address = bettor_address\n        currency.transfer(amount=payout, to=winner_address)\n        __bets[bet_id] = None\n        return bettor_name\n\n\n@__export('con_dice6')\ndef remove_bet(bet_id: int):\n    assert ctx.caller == __owner.get(), 'Only the owner can remove bets.'\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    bettor_address = bet['address']\n    amount = bet['amount']\n    currency.transfer(amount=amount, to=bettor_address)\n    if 'opponent_address' in bet:\n        opponent_address = bet['opponent_address']\n        currency.transfer(amount=amount, to=opponent_address)\n    __bets[bet_id] = None\n    return f'Bet ID {bet_id} has been removed and funds refunded.'\n\n\n@__export('con_dice6')\ndef get_bet(bet_id: int):\n    \"\"\"\n    Retrieve details of a specific bet by its ID.\n    \"\"\"\n    bet = __bets[bet_id]\n    assert bet is not None, 'Bet ID does not exist.'\n    return {'bet_id': bet_id, 'name': bet['name'], 'address': bet['address'\n        ], 'amount': bet['amount']}\n\n\n@__export('con_dice6')\ndef change_commission_rate(new_rate: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert 0 <= new_rate <= 1, 'Commission rate must be between 0 and 1.'\n    __commission_rate.set(new_rate)\n    return f'Commission rate updated to {new_rate * 100}%.'\n\n\n@__export('con_dice6')\ndef balance():\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    return currency.balance_of(ctx.this)\n\n\n@__export('con_dice6')\ndef withdraw(amount: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert amount > 0, 'Amount must be greater than zero.'\n    contract_balance = currency.balance_of(ctx.this)\n    assert amount <= contract_balance, 'Insufficient contract balance.'\n    currency.transfer(amount=amount, to=__owner.get())\n    return f\"Successfully withdrew {amount} to the owner's wallet.\"\n\n\n@__export('con_dice6')\ndef change_cost(new_cost: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_cost > 0, 'Cost must be greater than zero.'\n    __cost.set(new_cost)\n    return f'Cost updated to {new_cost}.'\n\n\n@__export('con_dice6')\ndef change_reward(new_reward: float):\n    assert ctx.caller == __owner.get(\n        ), 'Only the owner can access this function.'\n    assert new_reward > 0, 'Reward must be greater than zero.'\n    __reward.set(new_reward)\n    return f'Reward updated to {new_reward}.'\n"
            },
            {
                "key": "con_dice6.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice6.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        6,
                        3,
                        50,
                        28,
                        0
                    ]
                }
            },
            {
                "key": "con_dice6.bet_counter",
                "value": 4
            },
            {
                "key": "con_dice6.bets:3",
                "value": {
                    "name": "Maicol",
                    "address": "f0222f00943416a8cacb2160e4af75faff36660b87e99279a045af1f4182dd1f",
                    "amount": {
                        "__fixed__": "5"
                    }
                }
            },
            {
                "key": "con_dice6.commission_rate",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "con_dice6.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_dice6.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_dice6.reward",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_ec_dato.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_ec_dato', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_ec_dato', name=\n    'allowed_tokens')\n__token_symbols = Hash(default_value='', contract='con_ec_dato', name=\n    'token_symbols')\n__token_balances = Hash(default_value=0, contract='con_ec_dato', name=\n    'token_balances')\n__token_prices = Hash(default_value=decimal('0.0'), contract='con_ec_dato',\n    name='token_prices')\n__token_list = Variable(contract='con_ec_dato', name='token_list')\n__sold_tokens = Hash(default_value=decimal('0.0'), contract='con_ec_dato',\n    name='sold_tokens')\n__raised_xian = Hash(default_value=decimal('0.0'), contract='con_ec_dato',\n    name='raised_xian')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __token_list.set([])\n\n\n@__export('con_ec_dato')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    if not __allowed_tokens[token_contract]:\n        __allowed_tokens[token_contract] = True\n        __token_symbols[token_contract] = token_symbol\n        __token_balances[token_contract] = 0\n        __token_prices[token_contract] = decimal('0.01')\n        tokens = __token_list.get()\n        tokens.append(token_contract)\n        __token_list.set(tokens)\n    return {'contract': token_contract, 'symbol': token_symbol, 'price':\n        __token_prices[token_contract], 'status': 'added'}\n\n\n@__export('con_ec_dato')\ndef set_token_price(token_contract: str, price_per_xian: float):\n    assert ctx.caller == __owner.get(), 'Only owner can set token price'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    assert price_per_xian > 0, 'Price must be greater than 0'\n    __token_prices[token_contract] = price_per_xian\n\n\n@__export('con_ec_dato')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __token_balances[token_contract] += amount\n    return {'success': True, 'amount': amount, 'token': __token_symbols[\n        token_contract], 'new_balance': __token_balances[token_contract]}\n\n\n@__export('con_ec_dato')\ndef buy_token(token_contract: str, xian_amount: float):\n    assert xian_amount > 0, 'XIAN amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    price = __token_prices[token_contract]\n    assert price > 0, 'Token not for sale'\n    token_amount = xian_amount / price\n    available = __token_balances[token_contract]\n    assert available >= token_amount, 'Not enough tokens in contract'\n    xian.transfer(amount=xian_amount, to=ctx.this)\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balances[token_contract] -= token_amount\n    __sold_tokens[token_contract] += token_amount\n    __raised_xian[token_contract] += xian_amount\n    return {'token': __token_symbols[token_contract], 'xian_paid':\n        xian_amount, 'token_received': token_amount, 'total_sold':\n        __sold_tokens[token_contract], 'raised': __raised_xian[\n        token_contract], 'remaining': __token_balances[token_contract]}\n\n\n@__export('con_ec_dato')\ndef get_allowed_tokens():\n    tokens = __token_list.get()\n    result = []\n    for token in tokens:\n        result.append({'contract': token, 'symbol': __token_symbols[token],\n            'balance': __token_balances[token], 'price_per_token':\n            __token_prices[token]})\n    return result\n\n\n@__export('con_ec_dato')\ndef get_token_stats(token_contract: str):\n    return {'symbol': __token_symbols[token_contract], 'total_sold':\n        __sold_tokens[token_contract], 'raised_xian': __raised_xian[\n        token_contract], 'remaining': __token_balances[token_contract]}\n\n\n@__export('con_ec_dato')\ndef withdraw_xian(amount: float):\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_ec_dato')\ndef withdraw_xian_all():\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_ec_dato')\ndef withdraw_any_token(amount: float, token_contract: str):\n    assert __owner.get() == ctx.caller, 'Only owner can withdraw tokens'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_ec_dato.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_ec_dato.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        13,
                        6,
                        45,
                        47,
                        0
                    ]
                }
            },
            {
                "key": "con_ec_dato.allowed_tokens:con_teto_dato",
                "value": true
            },
            {
                "key": "con_ec_dato.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_ec_dato.token_balances:con_teto_dato",
                "value": 10000000
            },
            {
                "key": "con_ec_dato.token_list",
                "value": [
                    "con_teto_dato"
                ]
            },
            {
                "key": "con_ec_dato.token_prices:con_teto_dato",
                "value": 100
            },
            {
                "key": "con_ec_dato.token_symbols:con_teto_dato",
                "value": "teto"
            },
            {
                "key": "con_econ_dato.__code__",
                "value": "__presale_active = Variable(contract='con_econ_dato', name='presale_active')\n__token_price = Variable(contract='con_econ_dato', name='token_price')\n__tokens_sold = Variable(contract='con_econ_dato', name='tokens_sold')\n__presale_cap = Variable(contract='con_econ_dato', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_econ_dato', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_econ_dato', name='xian_balances')\n__token_contract = Variable(contract='con_econ_dato', name='token_contract')\n__owner = Variable(contract='con_econ_dato', name='owner')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_teto')\n    __owner.set(ctx.caller)\n\n\n@__export('con_econ_dato')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount * price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    buyer_balance = __xian_balances[ctx.caller] or 0\n    assert buyer_balance >= amount, 'Insufficient XIAN balance'\n    token = importlib.import_module(__token_contract.get())\n    contract_token_balance = ForeignHash(foreign_contract=__token_contract.\n        get(), foreign_name='balances')[ctx.this] or 0\n    assert contract_token_balance >= token_amount, 'Insufficient tokens in contract'\n    xian = importlib.import_module('currency')\n    xian.transfer(amount=amount, to=ctx.this)\n    xian.transfer(amount=amount, to=__owner.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_econ_dato')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_econ_dato')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_econ_dato')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n\n\n@__export('con_econ_dato')\ndef deposit_tokens(amount: float):\n    assert ctx.caller == __owner.get(), 'Only owner can deposit tokens'\n    assert amount > 0, 'Amount must be greater than 0'\n    token = importlib.import_module(__token_contract.get())\n    __token_balances = ForeignHash(foreign_contract=__token_contract.get(),\n        foreign_name='balances', contract='con_econ_dato', name=\n        'token_balances')\n    assert __token_balances[ctx.caller] >= amount, 'Insufficient token balance'\n    __approved = ForeignHash(foreign_contract=__token_contract.get(),\n        foreign_name='allowances', contract='con_econ_dato', name='approved')\n    assert __approved[ctx.caller, ctx.this\n        ] >= amount, 'Contract not approved to spend tokens'\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    return amount\n"
            },
            {
                "key": "con_econ_dato.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_econ_dato.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        13,
                        6,
                        43,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_econ_dato.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_econ_dato.presale_active",
                "value": true
            },
            {
                "key": "con_econ_dato.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_econ_dato.token_contract",
                "value": "con_teto"
            },
            {
                "key": "con_econ_dato.token_price",
                "value": 1000
            },
            {
                "key": "con_econ_dato.tokens_sold",
                "value": 0
            },
            {
                "key": "con_f1.__code__",
                "value": "__owner = Variable(contract='con_f1', name='owner')\n__farm_counter = Variable(contract='con_f1', name='farm_counter')\n__farms = Hash(default_value=False, contract='con_f1', name='farms')\n__deposits = Hash(default_value=False, contract='con_f1', name='deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_f1',\n    name='saved_rewards')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'deposit_token': {'type': str}, 'reward_token': {'type': str},\n    'total_rewards': {'type': (int, float, decimal)}, 'start_time': {'type':\n    str}, 'end_time': {'type': str}, 'reward_per_second': {'type': (int,\n    float, decimal)}}, contract='con_f1', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_f1', name='Deposit')\n__Withdraw = LogEvent(event='Withdraw', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_f1', name='Withdraw')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'address': {'type': str, 'idx': True},\n    'amount': {'type': (int, float, decimal)}}, contract='con_f1', name=\n    'WithdrawRewards')\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'FORBIDDEN'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm not active'\n\n\ndef __farm_not_ended(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now <= farm['end_time'], 'Farm ended'\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(0)\n\n\n@__export('con_f1')\ndef create_farm(deposit_token: str, reward_token: str, total_rewards: float,\n    start_time: datetime.datetime, end_time: datetime.datetime):\n    \"\"\"Create a new farming pool\"\"\"\n    assert total_rewards > 0, 'Total rewards must be positive'\n    assert start_time < end_time, 'Invalid time range'\n    assert now < start_time, 'Start time must be in future'\n    duration = end_time - start_time\n    duration_seconds = duration.days * 24 * 3600 + duration.seconds\n    reward_per_second = total_rewards / duration_seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    assert reward_tok.balance_of(ctx.caller\n        ) >= total_rewards, 'Insufficient reward token balance'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get()\n    __farms[farm_id] = {'creator': ctx.caller, 'deposit_token':\n        deposit_token, 'reward_token': reward_token, 'total_rewards':\n        total_rewards, 'start_time': start_time, 'end_time': end_time,\n        'reward_per_second': reward_per_second, 'total_staked': decimal(\n        '0.0'), 'cum_rpt': decimal('0.0'), 'last_update': start_time,\n        'reward_paid': decimal('0.0'), 'active': True}\n    __farm_counter.set(farm_id + 1)\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token,\n        'total_rewards': total_rewards, 'start_time': str(start_time),\n        'end_time': str(end_time), 'reward_per_second': reward_per_second})\n    return farm_id\n\n\ndef __update_farm(farm_id: int):\n    \"\"\"Update farm rewards calculation\"\"\"\n    farm = __farms[farm_id]\n    if not farm or not farm['active']:\n        return\n    current_time = min(now, farm['end_time'])\n    if farm['total_staked'] > 0 and now >= farm['start_time']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            max_available = farm['total_rewards'] - farm['reward_paid']\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                farm['cum_rpt'] += reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __harvest_rewards(farm_id: int, user: str):\n    \"\"\"Harvest pending rewards for user\"\"\"\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return\n    farm = __farms[farm_id]\n    pending_rewards = (farm['cum_rpt'] - deposit['cum_rpt']) * deposit['amount'\n        ]\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] += pending_rewards\n    deposit['cum_rpt'] = farm['cum_rpt']\n    __deposits[farm_id, user] = deposit\n\n\n@__export('con_f1')\ndef deposit(farm_id: int, amount: float):\n    \"\"\"Deposit tokens to farm\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    __farm_not_ended(farm_id)\n    farm = __farms[farm_id]\n    deposit_tok = importlib.import_module(farm['deposit_token'])\n    assert importlib.enforce_interface(deposit_tok, token_interface\n        ), 'Invalid deposit token interface'\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    current_deposit = __deposits[farm_id, ctx.caller]\n    current_amount = decimal('0.0'\n        ) if current_deposit == False else current_deposit['amount']\n    __deposits[farm_id, ctx.caller] = {'amount': current_amount + amount,\n        'cum_rpt': farm['cum_rpt']}\n    farm['total_staked'] += amount\n    __farms[farm_id] = farm\n    deposit_tok.transfer_from(amount=amount, to=ctx.this, main_account=ctx.\n        caller)\n    __Deposit({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_f1')\ndef withdraw(farm_id: int, amount: float):\n    \"\"\"Withdraw staked tokens from farm\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    deposit = __deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit found'\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit'\n    farm = __farms[farm_id]\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __deposits[farm_id, ctx.caller] = False\n    else:\n        __deposits[farm_id, ctx.caller] = {'amount': new_amount, 'cum_rpt':\n            farm['cum_rpt']}\n    farm['total_staked'] -= amount\n    __farms[farm_id] = farm\n    deposit_tok = importlib.import_module(farm['deposit_token'])\n    deposit_tok.transfer(amount=amount, to=ctx.caller)\n    __Withdraw({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_f1')\ndef withdraw_rewards(farm_id: int, amount: float):\n    \"\"\"Withdraw earned rewards\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    assert amount <= user_rewards, 'Not enough rewards'\n    __saved_rewards[farm_id, ctx.caller] -= amount\n    farm['reward_paid'] += amount\n    __farms[farm_id] = farm\n    reward_tok = importlib.import_module(farm['reward_token'])\n    reward_tok.transfer(amount=amount, to=ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'address': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_f1')\ndef get_pending_rewards(farm_id: int, user: str):\n    \"\"\"Get pending rewards for user\"\"\"\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return __saved_rewards[farm_id, user]\n    current_cum_rpt = farm['cum_rpt']\n    if farm['total_staked'] > 0 and now >= farm['start_time'] and farm['active'\n        ]:\n        current_time = min(now, farm['end_time'])\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            max_available = farm['total_rewards'] - farm['reward_paid']\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                current_cum_rpt += reward_per_token_increment\n    pending = (current_cum_rpt - deposit['cum_rpt']) * deposit['amount']\n    return __saved_rewards[farm_id, user] + pending\n\n\n@__export('con_f1')\ndef get_farm_info(farm_id: int):\n    \"\"\"Get farm information\"\"\"\n    farm = __farms[farm_id]\n    if not farm:\n        return False\n    return {'creator': farm['creator'], 'deposit_token': farm[\n        'deposit_token'], 'reward_token': farm['reward_token'],\n        'total_rewards': farm['total_rewards'], 'start_time': farm[\n        'start_time'], 'end_time': farm['end_time'], 'reward_per_second':\n        farm['reward_per_second'], 'total_staked': farm['total_staked'],\n        'reward_paid': farm['reward_paid'], 'active': farm['active']}\n\n\n@__export('con_f1')\ndef get_user_info(farm_id: int, user: str):\n    \"\"\"Get user information for specific farm\"\"\"\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return {'staked': decimal('0.0'), 'pending_rewards': decimal('0.0'),\n            'saved_rewards': __saved_rewards[farm_id, user]}\n    return {'staked': deposit['amount'], 'pending_rewards':\n        get_pending_rewards(farm_id, user), 'saved_rewards':\n        __saved_rewards[farm_id, user]}\n\n\n@__export('con_f1')\ndef emergency_withdraw_rewards(farm_id: int):\n    \"\"\"Emergency function for farm creator to withdraw remaining rewards after farm ends\"\"\"\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert ctx.caller == farm['creator'\n        ], 'Only farm creator can emergency withdraw'\n    assert now > farm['end_time'], 'Farm must be ended'\n    __update_farm(farm_id)\n    remaining_rewards = farm['total_rewards'] - farm['reward_paid']\n    if remaining_rewards > 0:\n        reward_tok = importlib.import_module(farm['reward_token'])\n        reward_tok.transfer(amount=remaining_rewards, to=ctx.caller)\n        farm['reward_paid'] = farm['total_rewards']\n        __farms[farm_id] = farm\n\n\n@__export('con_f1')\ndef get_total_farms():\n    \"\"\"Get total number of farms created\"\"\"\n    return __farm_counter.get()\n\n\n@__export('con_f1')\ndef calculate_apr(farm_id: int):\n    \"\"\"Calculate APR for farm (returns percentage)\"\"\"\n    farm = __farms[farm_id]\n    if not farm or farm['total_staked'] == 0:\n        return decimal('0.0')\n    seconds_in_year = 365 * 24 * 3600\n    annual_rewards = farm['reward_per_second'] * seconds_in_year\n    apr = annual_rewards / farm['total_staked'] * 100\n    return apr\n\n\n@__export('con_f1')\ndef deactivate_farm(farm_id: int):\n    \"\"\"Deactivate a farm (only creator can do this)\"\"\"\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert ctx.caller == farm['creator'], 'Only farm creator can deactivate'\n    __update_farm(farm_id)\n    farm['active'] = False\n    __farms[farm_id] = farm\n\n\n@__export('con_f1')\ndef get_all_farms():\n    \"\"\"Get basic info for all farms\"\"\"\n    total_farms = __farm_counter.get()\n    result = []\n    for i in range(total_farms):\n        farm = __farms[i]\n        if farm != False:\n            result.append({'farm_id': i, 'creator': farm['creator'],\n                'deposit_token': farm['deposit_token'], 'reward_token':\n                farm['reward_token'], 'total_rewards': farm['total_rewards'\n                ], 'total_staked': farm['total_staked'], 'active': farm[\n                'active'], 'start_time': farm['start_time'], 'end_time':\n                farm['end_time']})\n    return result\n"
            },
            {
                "key": "con_f1.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_f1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        10,
                        16,
                        33,
                        0
                    ]
                }
            },
            {
                "key": "con_f1.farm_counter",
                "value": 0
            },
            {
                "key": "con_f1.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_f2.__code__",
                "value": "__owner = Variable(contract='con_f2', name='owner')\n__farm_counter = Variable(contract='con_f2', name='farm_counter')\n__farms = Hash(default_value=False, contract='con_f2', name='farms')\n__deposits = Hash(default_value=False, contract='con_f2', name='deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_f2',\n    name='saved_rewards')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'deposit_token': {'type': str}, 'reward_token': {'type': str},\n    'total_rewards': {'type': (int, float, decimal)}, 'start_time': {'type':\n    str}, 'end_time': {'type': str}, 'reward_per_second': {'type': (int,\n    float, decimal)}}, contract='con_f2', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_f2', name='Deposit')\n__Withdraw = LogEvent(event='Withdraw', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_f2', name='Withdraw')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'address': {'type': str, 'idx': True},\n    'amount': {'type': (int, float, decimal)}}, contract='con_f2', name=\n    'WithdrawRewards')\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'FORBIDDEN'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm not active'\n\n\ndef __farm_not_ended(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now <= farm['end_time'], 'Farm ended'\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(0)\n\n\n@__export('con_f2')\ndef create_farm(deposit_token: str, reward_token: str, total_rewards: float,\n    duration_days: int, start_delay_hours: int=0):\n    \"\"\"Create a new farming pool with duration in days\"\"\"\n    assert total_rewards > 0, 'Total rewards must be positive'\n    assert duration_days > 0, 'Duration must be positive'\n    assert start_delay_hours >= 0, 'Start delay cannot be negative'\n    start_time = now + datetime.timedelta(hours=start_delay_hours)\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    duration_seconds = duration_days * 24 * 3600\n    reward_per_second = total_rewards / duration_seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    assert reward_tok.balance_of(ctx.caller\n        ) >= total_rewards, 'Insufficient reward token balance'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get()\n    __farms[farm_id] = {'creator': ctx.caller, 'deposit_token':\n        deposit_token, 'reward_token': reward_token, 'total_rewards':\n        total_rewards, 'start_time': start_time, 'end_time': end_time,\n        'reward_per_second': reward_per_second, 'total_staked': decimal(\n        '0.0'), 'cum_rpt': decimal('0.0'), 'last_update': start_time,\n        'reward_paid': decimal('0.0'), 'active': True}\n    __farm_counter.set(farm_id + 1)\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token,\n        'total_rewards': total_rewards, 'start_time': str(start_time),\n        'end_time': str(end_time), 'reward_per_second': reward_per_second})\n    return farm_id\n\n\n@__export('con_f2')\ndef create_farm_custom_dates(deposit_token: str, reward_token: str,\n    total_rewards: float, start_time: datetime.datetime, end_time: datetime\n    .datetime):\n    \"\"\"Create a new farming pool with custom start and end dates\"\"\"\n    assert total_rewards > 0, 'Total rewards must be positive'\n    assert start_time < end_time, 'Invalid time range'\n    assert now < start_time, 'Start time must be in future'\n    duration = end_time - start_time\n    duration_seconds = duration.days * 24 * 3600 + duration.seconds\n    reward_per_second = total_rewards / duration_seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    assert reward_tok.balance_of(ctx.caller\n        ) >= total_rewards, 'Insufficient reward token balance'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get()\n    __farms[farm_id] = {'creator': ctx.caller, 'deposit_token':\n        deposit_token, 'reward_token': reward_token, 'total_rewards':\n        total_rewards, 'start_time': start_time, 'end_time': end_time,\n        'reward_per_second': reward_per_second, 'total_staked': decimal(\n        '0.0'), 'cum_rpt': decimal('0.0'), 'last_update': start_time,\n        'reward_paid': decimal('0.0'), 'active': True}\n    __farm_counter.set(farm_id + 1)\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token,\n        'total_rewards': total_rewards, 'start_time': str(start_time),\n        'end_time': str(end_time), 'reward_per_second': reward_per_second})\n    return farm_id\n\n\ndef __update_farm(farm_id: int):\n    \"\"\"Update farm rewards calculation\"\"\"\n    farm = __farms[farm_id]\n    if not farm or not farm['active']:\n        return\n    current_time = min(now, farm['end_time'])\n    if farm['total_staked'] > 0 and now >= farm['start_time']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            max_available = farm['total_rewards'] - farm['reward_paid']\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                farm['cum_rpt'] += reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __harvest_rewards(farm_id: int, user: str):\n    \"\"\"Harvest pending rewards for user\"\"\"\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return\n    farm = __farms[farm_id]\n    pending_rewards = (farm['cum_rpt'] - deposit['cum_rpt']) * deposit['amount'\n        ]\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] += pending_rewards\n    deposit['cum_rpt'] = farm['cum_rpt']\n    __deposits[farm_id, user] = deposit\n\n\n@__export('con_f2')\ndef deposit(farm_id: int, amount: float):\n    \"\"\"Deposit tokens to farm\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    __farm_not_ended(farm_id)\n    farm = __farms[farm_id]\n    deposit_tok = importlib.import_module(farm['deposit_token'])\n    assert importlib.enforce_interface(deposit_tok, token_interface\n        ), 'Invalid deposit token interface'\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    current_deposit = __deposits[farm_id, ctx.caller]\n    current_amount = decimal('0.0'\n        ) if current_deposit == False else current_deposit['amount']\n    __deposits[farm_id, ctx.caller] = {'amount': current_amount + amount,\n        'cum_rpt': farm['cum_rpt']}\n    farm['total_staked'] += amount\n    __farms[farm_id] = farm\n    deposit_tok.transfer_from(amount=amount, to=ctx.this, main_account=ctx.\n        caller)\n    __Deposit({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_f2')\ndef withdraw(farm_id: int, amount: float):\n    \"\"\"Withdraw staked tokens from farm\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    deposit = __deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit found'\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit'\n    farm = __farms[farm_id]\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __deposits[farm_id, ctx.caller] = False\n    else:\n        __deposits[farm_id, ctx.caller] = {'amount': new_amount, 'cum_rpt':\n            farm['cum_rpt']}\n    farm['total_staked'] -= amount\n    __farms[farm_id] = farm\n    deposit_tok = importlib.import_module(farm['deposit_token'])\n    deposit_tok.transfer(amount=amount, to=ctx.caller)\n    __Withdraw({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_f2')\ndef withdraw_rewards(farm_id: int, amount: float):\n    \"\"\"Withdraw earned rewards\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    assert amount <= user_rewards, 'Not enough rewards'\n    __saved_rewards[farm_id, ctx.caller] -= amount\n    farm['reward_paid'] += amount\n    __farms[farm_id] = farm\n    reward_tok = importlib.import_module(farm['reward_token'])\n    reward_tok.transfer(amount=amount, to=ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'address': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_f2')\ndef get_pending_rewards(farm_id: int, user: str):\n    \"\"\"Get pending rewards for user\"\"\"\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return __saved_rewards[farm_id, user]\n    current_cum_rpt = farm['cum_rpt']\n    if farm['total_staked'] > 0 and now >= farm['start_time'] and farm['active'\n        ]:\n        current_time = min(now, farm['end_time'])\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            max_available = farm['total_rewards'] - farm['reward_paid']\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                current_cum_rpt += reward_per_token_increment\n    pending = (current_cum_rpt - deposit['cum_rpt']) * deposit['amount']\n    return __saved_rewards[farm_id, user] + pending\n\n\n@__export('con_f2')\ndef get_farm_info(farm_id: int):\n    \"\"\"Get farm information\"\"\"\n    farm = __farms[farm_id]\n    if not farm:\n        return False\n    return {'creator': farm['creator'], 'deposit_token': farm[\n        'deposit_token'], 'reward_token': farm['reward_token'],\n        'total_rewards': farm['total_rewards'], 'start_time': farm[\n        'start_time'], 'end_time': farm['end_time'], 'reward_per_second':\n        farm['reward_per_second'], 'total_staked': farm['total_staked'],\n        'reward_paid': farm['reward_paid'], 'active': farm['active']}\n\n\n@__export('con_f2')\ndef get_user_info(farm_id: int, user: str):\n    \"\"\"Get user information for specific farm\"\"\"\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return {'staked': decimal('0.0'), 'pending_rewards': decimal('0.0'),\n            'saved_rewards': __saved_rewards[farm_id, user]}\n    return {'staked': deposit['amount'], 'pending_rewards':\n        get_pending_rewards(farm_id, user), 'saved_rewards':\n        __saved_rewards[farm_id, user]}\n\n\n@__export('con_f2')\ndef emergency_withdraw_rewards(farm_id: int):\n    \"\"\"Emergency function for farm creator to withdraw remaining rewards after farm ends\"\"\"\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert ctx.caller == farm['creator'\n        ], 'Only farm creator can emergency withdraw'\n    assert now > farm['end_time'], 'Farm must be ended'\n    __update_farm(farm_id)\n    remaining_rewards = farm['total_rewards'] - farm['reward_paid']\n    if remaining_rewards > 0:\n        reward_tok = importlib.import_module(farm['reward_token'])\n        reward_tok.transfer(amount=remaining_rewards, to=ctx.caller)\n        farm['reward_paid'] = farm['total_rewards']\n        __farms[farm_id] = farm\n\n\n@__export('con_f2')\ndef get_total_farms():\n    \"\"\"Get total number of farms created\"\"\"\n    return __farm_counter.get()\n\n\n@__export('con_f2')\ndef calculate_apr(farm_id: int):\n    \"\"\"Calculate APR for farm (returns percentage)\"\"\"\n    farm = __farms[farm_id]\n    if not farm or farm['total_staked'] == 0:\n        return decimal('0.0')\n    seconds_in_year = 365 * 24 * 3600\n    annual_rewards = farm['reward_per_second'] * seconds_in_year\n    apr = annual_rewards / farm['total_staked'] * 100\n    return apr\n\n\n@__export('con_f2')\ndef deactivate_farm(farm_id: int):\n    \"\"\"Deactivate a farm (only creator can do this)\"\"\"\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert ctx.caller == farm['creator'], 'Only farm creator can deactivate'\n    __update_farm(farm_id)\n    farm['active'] = False\n    __farms[farm_id] = farm\n\n\n@__export('con_f2')\ndef get_all_farms():\n    \"\"\"Get basic info for all farms\"\"\"\n    total_farms = __farm_counter.get()\n    result = []\n    for i in range(total_farms):\n        farm = __farms[i]\n        if farm != False:\n            result.append({'farm_id': i, 'creator': farm['creator'],\n                'deposit_token': farm['deposit_token'], 'reward_token':\n                farm['reward_token'], 'total_rewards': farm['total_rewards'\n                ], 'total_staked': farm['total_staked'], 'active': farm[\n                'active'], 'start_time': farm['start_time'], 'end_time':\n                farm['end_time']})\n    return result\n"
            },
            {
                "key": "con_f2.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_f2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        10,
                        23,
                        57,
                        0
                    ]
                }
            },
            {
                "key": "con_f2.farm_counter",
                "value": 1
            },
            {
                "key": "con_f2.farms:0",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "deposit_token": "con_pi",
                    "reward_token": "con_pi",
                    "total_rewards": 1000,
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            10,
                            26,
                            20,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            10,
                            26,
                            20,
                            0
                        ]
                    },
                    "reward_per_second": 0.005787037037037037,
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "cum_rpt": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            10,
                            26,
                            20,
                            0
                        ]
                    },
                    "reward_paid": {
                        "__fixed__": "0"
                    },
                    "active": true
                }
            },
            {
                "key": "con_f2.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_f3.__code__",
                "value": "__owner = Variable(contract='con_f3', name='owner')\n__farm_counter = Variable(contract='con_f3', name='farm_counter')\n__farms = Hash(default_value=False, contract='con_f3', name='farms')\n__deposits = Hash(default_value=False, contract='con_f3', name='deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_f3',\n    name='saved_rewards')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'deposit_token': {'type': str}, 'reward_token': {'type': str},\n    'total_rewards': {'type': (int, float, decimal)}, 'start_time': {'type':\n    str}, 'end_time': {'type': str}, 'reward_per_second': {'type': (int,\n    float, decimal)}}, contract='con_f3', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_f3', name='Deposit')\n__Withdraw = LogEvent(event='Withdraw', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_f3', name='Withdraw')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'address': {'type': str, 'idx': True},\n    'amount': {'type': (int, float, decimal)}}, contract='con_f3', name=\n    'WithdrawRewards')\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'FORBIDDEN'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm not active'\n\n\ndef __farm_not_ended(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now <= farm['end_time'], 'Farm ended'\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(1)\n\n\n@__export('con_f3')\ndef create_farm(deposit_token: str, reward_token: str, total_rewards: float,\n    duration_days: int, start_delay_hours: int=0):\n    \"\"\"Create a new farming pool with duration in days\"\"\"\n    assert total_rewards > 0, 'Total rewards must be positive'\n    assert duration_days > 0, 'Duration must be positive'\n    assert start_delay_hours >= 0, 'Start delay cannot be negative'\n    start_time = now + datetime.timedelta(hours=start_delay_hours)\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    duration_seconds = duration_days * 24 * 3600\n    reward_per_second = total_rewards / duration_seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    assert reward_tok.balance_of(ctx.caller\n        ) >= total_rewards, 'Insufficient reward token balance'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get()\n    __farms[farm_id] = {'creator': ctx.caller, 'deposit_token':\n        deposit_token, 'reward_token': reward_token, 'total_rewards':\n        total_rewards, 'start_time': start_time, 'end_time': end_time,\n        'reward_per_second': reward_per_second, 'total_staked': decimal(\n        '0.0'), 'cum_rpt': decimal('0.0'), 'last_update': start_time,\n        'reward_paid': decimal('0.0'), 'active': True}\n    __farm_counter.set(farm_id + 1)\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token,\n        'total_rewards': total_rewards, 'start_time': str(start_time),\n        'end_time': str(end_time), 'reward_per_second': reward_per_second})\n    return farm_id\n\n\n@__export('con_f3')\ndef create_farm_custom_dates(deposit_token: str, reward_token: str,\n    total_rewards: float, start_time: datetime.datetime, end_time: datetime\n    .datetime):\n    \"\"\"Create a new farming pool with custom start and end dates\"\"\"\n    assert total_rewards > 0, 'Total rewards must be positive'\n    assert start_time < end_time, 'Invalid time range'\n    assert now < start_time, 'Start time must be in future'\n    duration = end_time - start_time\n    duration_seconds = duration.days * 24 * 3600 + duration.seconds\n    reward_per_second = total_rewards / duration_seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    assert reward_tok.balance_of(ctx.caller\n        ) >= total_rewards, 'Insufficient reward token balance'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get()\n    __farms[farm_id] = {'creator': ctx.caller, 'deposit_token':\n        deposit_token, 'reward_token': reward_token, 'total_rewards':\n        total_rewards, 'start_time': start_time, 'end_time': end_time,\n        'reward_per_second': reward_per_second, 'total_staked': decimal(\n        '0.0'), 'cum_rpt': decimal('0.0'), 'last_update': start_time,\n        'reward_paid': decimal('0.0'), 'active': True}\n    __farm_counter.set(farm_id + 1)\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token,\n        'total_rewards': total_rewards, 'start_time': str(start_time),\n        'end_time': str(end_time), 'reward_per_second': reward_per_second})\n    return farm_id\n\n\ndef __update_farm(farm_id: int):\n    \"\"\"Update farm rewards calculation\"\"\"\n    farm = __farms[farm_id]\n    if not farm or not farm['active']:\n        return\n    current_time = min(now, farm['end_time'])\n    if farm['total_staked'] > 0 and now >= farm['start_time']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            max_available = farm['total_rewards'] - farm['reward_paid']\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                farm['cum_rpt'] += reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __harvest_rewards(farm_id: int, user: str):\n    \"\"\"Harvest pending rewards for user\"\"\"\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return\n    farm = __farms[farm_id]\n    pending_rewards = (farm['cum_rpt'] - deposit['cum_rpt']) * deposit['amount'\n        ]\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] += pending_rewards\n    deposit['cum_rpt'] = farm['cum_rpt']\n    __deposits[farm_id, user] = deposit\n\n\n@__export('con_f3')\ndef deposit(farm_id: int, amount: float):\n    \"\"\"Deposit tokens to farm\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    __farm_not_ended(farm_id)\n    farm = __farms[farm_id]\n    deposit_tok = importlib.import_module(farm['deposit_token'])\n    assert importlib.enforce_interface(deposit_tok, token_interface\n        ), 'Invalid deposit token interface'\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    current_deposit = __deposits[farm_id, ctx.caller]\n    current_amount = decimal('0.0'\n        ) if current_deposit == False else current_deposit['amount']\n    __deposits[farm_id, ctx.caller] = {'amount': current_amount + amount,\n        'cum_rpt': farm['cum_rpt']}\n    farm['total_staked'] += amount\n    __farms[farm_id] = farm\n    deposit_tok.transfer_from(amount=amount, to=ctx.this, main_account=ctx.\n        caller)\n    __Deposit({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_f3')\ndef withdraw(farm_id: int, amount: float):\n    \"\"\"Withdraw staked tokens from farm\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    deposit = __deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit found'\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit'\n    farm = __farms[farm_id]\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __deposits[farm_id, ctx.caller] = False\n    else:\n        __deposits[farm_id, ctx.caller] = {'amount': new_amount, 'cum_rpt':\n            farm['cum_rpt']}\n    farm['total_staked'] -= amount\n    __farms[farm_id] = farm\n    deposit_tok = importlib.import_module(farm['deposit_token'])\n    deposit_tok.transfer(amount=amount, to=ctx.caller)\n    __Withdraw({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_f3')\ndef withdraw_rewards(farm_id: int, amount: float):\n    \"\"\"Withdraw earned rewards\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    assert amount <= user_rewards, 'Not enough rewards'\n    __saved_rewards[farm_id, ctx.caller] -= amount\n    farm['reward_paid'] += amount\n    __farms[farm_id] = farm\n    reward_tok = importlib.import_module(farm['reward_token'])\n    reward_tok.transfer(amount=amount, to=ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'address': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_f3')\ndef get_pending_rewards(farm_id: int, user: str):\n    \"\"\"Get pending rewards for user\"\"\"\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return __saved_rewards[farm_id, user]\n    current_cum_rpt = farm['cum_rpt']\n    if farm['total_staked'] > 0 and now >= farm['start_time'] and farm['active'\n        ]:\n        current_time = min(now, farm['end_time'])\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            max_available = farm['total_rewards'] - farm['reward_paid']\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                current_cum_rpt += reward_per_token_increment\n    pending = (current_cum_rpt - deposit['cum_rpt']) * deposit['amount']\n    return __saved_rewards[farm_id, user] + pending\n\n\n@__export('con_f3')\ndef get_farm_info(farm_id: int):\n    \"\"\"Get farm information\"\"\"\n    farm = __farms[farm_id]\n    if not farm:\n        return False\n    return {'creator': farm['creator'], 'deposit_token': farm[\n        'deposit_token'], 'reward_token': farm['reward_token'],\n        'total_rewards': farm['total_rewards'], 'start_time': farm[\n        'start_time'], 'end_time': farm['end_time'], 'reward_per_second':\n        farm['reward_per_second'], 'total_staked': farm['total_staked'],\n        'reward_paid': farm['reward_paid'], 'active': farm['active']}\n\n\n@__export('con_f3')\ndef get_user_info(farm_id: int, user: str):\n    \"\"\"Get user information for specific farm\"\"\"\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return {'staked': decimal('0.0'), 'pending_rewards': decimal('0.0'),\n            'saved_rewards': __saved_rewards[farm_id, user]}\n    return {'staked': deposit['amount'], 'pending_rewards':\n        get_pending_rewards(farm_id, user), 'saved_rewards':\n        __saved_rewards[farm_id, user]}\n\n\n@__export('con_f3')\ndef emergency_withdraw_rewards(farm_id: int):\n    \"\"\"Emergency function for farm creator to withdraw remaining rewards after farm ends\"\"\"\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert ctx.caller == farm['creator'\n        ], 'Only farm creator can emergency withdraw'\n    assert now > farm['end_time'], 'Farm must be ended'\n    __update_farm(farm_id)\n    remaining_rewards = farm['total_rewards'] - farm['reward_paid']\n    if remaining_rewards > 0:\n        reward_tok = importlib.import_module(farm['reward_token'])\n        reward_tok.transfer(amount=remaining_rewards, to=ctx.caller)\n        farm['reward_paid'] = farm['total_rewards']\n        __farms[farm_id] = farm\n\n\n@__export('con_f3')\ndef get_total_farms():\n    \"\"\"Get total number of farms created\"\"\"\n    return __farm_counter.get()\n\n\n@__export('con_f3')\ndef calculate_apr(farm_id: int):\n    \"\"\"Calculate APR for farm (returns percentage)\"\"\"\n    farm = __farms[farm_id]\n    if not farm or farm['total_staked'] == 0:\n        return decimal('0.0')\n    seconds_in_year = 365 * 24 * 3600\n    annual_rewards = farm['reward_per_second'] * seconds_in_year\n    apr = annual_rewards / farm['total_staked'] * 100\n    return apr\n\n\n@__export('con_f3')\ndef deactivate_farm(farm_id: int):\n    \"\"\"Deactivate a farm (only creator can do this)\"\"\"\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert ctx.caller == farm['creator'], 'Only farm creator can deactivate'\n    __update_farm(farm_id)\n    farm['active'] = False\n    __farms[farm_id] = farm\n\n\n@__export('con_f3')\ndef get_all_farms():\n    \"\"\"Get basic info for all farms\"\"\"\n    total_farms = __farm_counter.get()\n    result = []\n    for i in range(total_farms):\n        farm = __farms[i]\n        if farm != False:\n            result.append({'farm_id': i, 'creator': farm['creator'],\n                'deposit_token': farm['deposit_token'], 'reward_token':\n                farm['reward_token'], 'total_rewards': farm['total_rewards'\n                ], 'total_staked': farm['total_staked'], 'active': farm[\n                'active'], 'start_time': farm['start_time'], 'end_time':\n                farm['end_time']})\n    return result\n"
            },
            {
                "key": "con_f3.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_f3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        10,
                        35,
                        22,
                        0
                    ]
                }
            },
            {
                "key": "con_f3.deposits:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "2E+2"
                    },
                    "cum_rpt": {
                        "__fixed__": "0.2286265432098765"
                    }
                }
            },
            {
                "key": "con_f3.farm_counter",
                "value": 2
            },
            {
                "key": "con_f3.farms:1",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "deposit_token": "con_pi",
                    "reward_token": "con_pi",
                    "total_rewards": 1000,
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            10,
                            37,
                            35,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            9,
                            10,
                            37,
                            35,
                            0
                        ]
                    },
                    "reward_per_second": 0.0038580246913580245,
                    "total_staked": {
                        "__fixed__": "2E+2"
                    },
                    "cum_rpt": {
                        "__fixed__": "0.2286265432098765"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            12,
                            20,
                            18,
                            0
                        ]
                    },
                    "reward_paid": {
                        "__fixed__": "0"
                    },
                    "active": true
                }
            },
            {
                "key": "con_f3.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_f3.saved_rewards:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "22.86265432098765"
                }
            },
            {
                "key": "con_f4.__code__",
                "value": "__owner = Variable(contract='con_f4', name='owner')\n__farm_counter = Variable(contract='con_f4', name='farm_counter')\n__farms = Hash(default_value=False, contract='con_f4', name='farms')\n__deposits = Hash(default_value=False, contract='con_f4', name='deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_f4',\n    name='saved_rewards')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'deposit_token': {'type': str}, 'reward_token': {'type': str},\n    'total_rewards': {'type': (int, float)}, 'start_time': {'type': str},\n    'end_time': {'type': str}, 'reward_per_second': {'type': (int, float)}},\n    contract='con_f4', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float)}}, contract='con_f4', name='Deposit')\n__Withdraw = LogEvent(event='Withdraw', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float)}}, contract='con_f4', name='Withdraw')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'address': {'type': str, 'idx': True},\n    'amount': {'type': (int, float)}}, contract='con_f4', name=\n    'WithdrawRewards')\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'FORBIDDEN'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm not active'\n\n\ndef __farm_not_ended(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now <= farm['end_time'], 'Farm ended'\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(1)\n\n\n@__export('con_f4')\ndef create_farm(deposit_token: str, reward_token: str, total_rewards: float,\n    duration_days: int, start_delay_hours: int=0):\n    \"\"\"Create a new farming pool with duration in days\"\"\"\n    assert total_rewards > 0, 'Total rewards must be positive'\n    assert duration_days > 0, 'Duration must be positive'\n    assert start_delay_hours >= 0, 'Start delay cannot be negative'\n    start_time = now + datetime.timedelta(hours=start_delay_hours)\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    duration_seconds = duration_days * 24 * 3600\n    reward_per_second = total_rewards / duration_seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    assert reward_tok.balance_of(ctx.caller\n        ) >= total_rewards, 'Insufficient reward token balance'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get()\n    __farms[farm_id] = {'creator': ctx.caller, 'deposit_token':\n        deposit_token, 'reward_token': reward_token, 'total_rewards':\n        total_rewards, 'start_time': start_time, 'end_time': end_time,\n        'reward_per_second': reward_per_second, 'total_staked': decimal(\n        '0.0'), 'cum_rpt': decimal('0.0'), 'last_update': start_time,\n        'reward_paid': decimal('0.0'), 'active': True}\n    __farm_counter.set(farm_id + 1)\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token,\n        'total_rewards': total_rewards, 'start_time': str(start_time),\n        'end_time': str(end_time), 'reward_per_second': reward_per_second})\n    return farm_id\n\n\ndef __update_farm(farm_id: int):\n    \"\"\"Update farm rewards calculation\"\"\"\n    farm = __farms[farm_id]\n    if not farm or not farm['active']:\n        return\n    current_time = min(now, farm['end_time'])\n    if farm['total_staked'] > 0 and now >= farm['start_time']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            max_available = farm['total_rewards'] - farm['reward_paid']\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                farm['cum_rpt'] += reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __harvest_rewards(farm_id: int, user: str):\n    \"\"\"Harvest pending rewards for user\"\"\"\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return\n    farm = __farms[farm_id]\n    pending_rewards = (farm['cum_rpt'] - deposit['cum_rpt']) * deposit['amount'\n        ]\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] += pending_rewards\n\n\n@__export('con_f4')\ndef deposit(farm_id: int, amount: float):\n    \"\"\"Deposit tokens to farm\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    __farm_not_ended(farm_id)\n    farm = __farms[farm_id]\n    deposit_tok = importlib.import_module(farm['deposit_token'])\n    assert importlib.enforce_interface(deposit_tok, token_interface\n        ), 'Invalid deposit token interface'\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    current_deposit = __deposits[farm_id, ctx.caller]\n    current_amount = decimal('0.0'\n        ) if current_deposit == False else current_deposit['amount']\n    __deposits[farm_id, ctx.caller] = {'amount': current_amount + amount,\n        'cum_rpt': farm['cum_rpt']}\n    farm['total_staked'] += amount\n    __farms[farm_id] = farm\n    deposit_tok.transfer_from(amount=amount, to=ctx.this, main_account=ctx.\n        caller)\n    __Deposit({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_f4')\ndef withdraw(farm_id: int, amount: float):\n    \"\"\"Withdraw staked tokens from farm\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    deposit = __deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit found'\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit'\n    farm = __farms[farm_id]\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __deposits[farm_id, ctx.caller] = False\n    else:\n        __deposits[farm_id, ctx.caller] = {'amount': new_amount, 'cum_rpt':\n            farm['cum_rpt']}\n    farm['total_staked'] -= amount\n    __farms[farm_id] = farm\n    deposit_tok = importlib.import_module(farm['deposit_token'])\n    deposit_tok.transfer(amount=amount, to=ctx.caller)\n    __Withdraw({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_f4')\ndef withdraw_rewards(farm_id: int, amount: float):\n    \"\"\"Withdraw earned rewards\"\"\"\n    assert amount > 0, 'Invalid amount'\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    __update_farm(farm_id)\n    __harvest_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    assert amount <= user_rewards, 'Not enough rewards'\n    __saved_rewards[farm_id, ctx.caller] -= amount\n    farm['reward_paid'] += amount\n    __farms[farm_id] = farm\n    reward_tok = importlib.import_module(farm['reward_token'])\n    reward_tok.transfer(amount=amount, to=ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'address': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_f4')\ndef get_pending_rewards(farm_id: int, user: str):\n    \"\"\"Get pending rewards for user\"\"\"\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return __saved_rewards[farm_id, user]\n    current_cum_rpt = farm['cum_rpt']\n    if farm['total_staked'] > 0 and now >= farm['start_time'] and farm['active'\n        ]:\n        current_time = min(now, farm['end_time'])\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            max_available = farm['total_rewards'] - farm['reward_paid']\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                current_cum_rpt += reward_per_token_increment\n    pending = (current_cum_rpt - deposit['cum_rpt']) * deposit['amount']\n    return __saved_rewards[farm_id, user] + pending\n\n\n@__export('con_f4')\ndef get_farm_info(farm_id: int):\n    \"\"\"Get farm information\"\"\"\n    farm = __farms[farm_id]\n    if not farm:\n        return False\n    return {'creator': farm['creator'], 'deposit_token': farm[\n        'deposit_token'], 'reward_token': farm['reward_token'],\n        'total_rewards': farm['total_rewards'], 'start_time': farm[\n        'start_time'], 'end_time': farm['end_time'], 'reward_per_second':\n        farm['reward_per_second'], 'total_staked': farm['total_staked'],\n        'reward_paid': farm['reward_paid'], 'active': farm['active']}\n\n\n@__export('con_f4')\ndef get_user_info(farm_id: int, user: str):\n    \"\"\"Get user information for specific farm\"\"\"\n    deposit = __deposits[farm_id, user]\n    if deposit == False:\n        return {'staked': decimal('0.0'), 'pending_rewards': decimal('0.0'),\n            'saved_rewards': __saved_rewards[farm_id, user]}\n    return {'staked': deposit['amount'], 'pending_rewards':\n        get_pending_rewards(farm_id, user), 'saved_rewards':\n        __saved_rewards[farm_id, user]}\n\n\n@__export('con_f4')\ndef emergency_withdraw_rewards(farm_id: int):\n    \"\"\"Emergency function for farm creator to withdraw remaining rewards after farm ends\"\"\"\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert ctx.caller == farm['creator'\n        ], 'Only farm creator can emergency withdraw'\n    assert now > farm['end_time'], 'Farm must be ended'\n    __update_farm(farm_id)\n    remaining_rewards = farm['total_rewards'] - farm['reward_paid']\n    if remaining_rewards > 0:\n        reward_tok = importlib.import_module(farm['reward_token'])\n        reward_tok.transfer(amount=remaining_rewards, to=ctx.caller)\n        farm['reward_paid'] = farm['total_rewards']\n        __farms[farm_id] = farm\n\n\n@__export('con_f4')\ndef get_total_farms():\n    \"\"\"Get total number of farms created\"\"\"\n    return __farm_counter.get()\n\n\n@__export('con_f4')\ndef calculate_apr(farm_id: int):\n    \"\"\"Calculate APR for farm (returns percentage)\"\"\"\n    farm = __farms[farm_id]\n    if not farm or farm['total_staked'] == 0:\n        return decimal('0.0')\n    seconds_in_year = 365 * 24 * 3600\n    annual_rewards = farm['reward_per_second'] * seconds_in_year\n    apr = annual_rewards / farm['total_staked'] * 100\n    return apr\n\n\n@__export('con_f4')\ndef deactivate_farm(farm_id: int):\n    \"\"\"Deactivate a farm (only creator can do this)\"\"\"\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert ctx.caller == farm['creator'], 'Only farm creator can deactivate'\n    __update_farm(farm_id)\n    farm['active'] = False\n    __farms[farm_id] = farm\n\n\n@__export('con_f4')\ndef get_all_farms():\n    \"\"\"Get basic info for all farms\"\"\"\n    total_farms = __farm_counter.get()\n    result = []\n    for i in range(total_farms):\n        farm = __farms[i]\n        if farm != False:\n            result.append({'farm_id': i, 'creator': farm['creator'],\n                'deposit_token': farm['deposit_token'], 'reward_token':\n                farm['reward_token'], 'total_rewards': farm['total_rewards'\n                ], 'total_staked': farm['total_staked'], 'active': farm[\n                'active'], 'start_time': farm['start_time'], 'end_time':\n                farm['end_time']})\n    return result\n"
            },
            {
                "key": "con_f4.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_f4.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        12,
                        32,
                        14,
                        0
                    ]
                }
            },
            {
                "key": "con_f4.deposits:1:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "1.1E+3"
                    },
                    "cum_rpt": {
                        "__fixed__": "0.0292824074074074045"
                    }
                }
            },
            {
                "key": "con_f4.farm_counter",
                "value": 2
            },
            {
                "key": "con_f4.farms:1",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "deposit_token": "con_stellar",
                    "reward_token": "con_pi",
                    "total_rewards": 1000,
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            12,
                            42,
                            32,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            12,
                            42,
                            32,
                            0
                        ]
                    },
                    "reward_per_second": 0.005787037037037037,
                    "total_staked": {
                        "__fixed__": "1.2E+3"
                    },
                    "cum_rpt": {
                        "__fixed__": "0.0292824074074074045"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            12,
                            57,
                            43,
                            0
                        ]
                    },
                    "reward_paid": {
                        "__fixed__": "0"
                    },
                    "active": true
                }
            },
            {
                "key": "con_f4.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_f4.saved_rewards:1:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "__fixed__": "177.73437499999999535"
                }
            },
            {
                "key": "con_ff1.__code__",
                "value": "XWT_CONTRACT = 'con_xwt'\n__owner = Variable(contract='con_ff1', name='owner')\n__farm_counter = Variable(contract='con_ff1', name='farm_counter')\n__farm_creation_fee = Variable(contract='con_ff1', name='farm_creation_fee')\n__farms = Hash(contract='con_ff1', name='farms')\n__user_deposits = Hash(contract='con_ff1', name='user_deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_ff1',\n    name='saved_rewards')\n__cumulative_rpt = Hash(default_value=decimal('0.0'), contract='con_ff1',\n    name='cumulative_rpt')\n__rewards_paid = Hash(default_value=decimal('0.0'), contract='con_ff1',\n    name='rewards_paid')\n__farm_lost_time_rewards = Hash(default_value=decimal('0.0'), contract=\n    'con_ff1', name='farm_lost_time_rewards')\n__user_deposit_history = Hash(contract='con_ff1', name='user_deposit_history')\n__user_referrers = Hash(default_value=None, contract='con_ff1', name=\n    'user_referrers')\n__total_referral_earnings = Hash(default_value=decimal('0.0'), contract=\n    'con_ff1', name='total_referral_earnings')\n__referral_earnings_by_farm = Hash(default_value=decimal('0.0'), contract=\n    'con_ff1', name='referral_earnings_by_farm')\n__referral_count = Hash(default_value=0, contract='con_ff1', name=\n    'referral_count')\n__referral_bonus_amount = Variable(contract='con_ff1', name=\n    'referral_bonus_amount')\n__referral_commission_pool = Variable(contract='con_ff1', name=\n    'referral_commission_pool')\n__referral_commission_paid = Variable(contract='con_ff1', name=\n    'referral_commission_paid')\n__referral_rewards_saved = Hash(default_value=decimal('0.0'), contract=\n    'con_ff1', name='referral_rewards_saved')\n__xwt_pool_total = Variable(contract='con_ff1', name='xwt_pool_total')\n__saved_xwt_rewards = Hash(default_value=decimal('0.0'), contract='con_ff1',\n    name='saved_xwt_rewards')\n__cumulative_xwt_rpt = Hash(default_value=decimal('0.0'), contract=\n    'con_ff1', name='cumulative_xwt_rpt')\n__xwt_rewards_paid = Variable(contract='con_ff1', name='xwt_rewards_paid')\n__global_total_staked = Variable(contract='con_ff1', name='global_total_staked'\n    )\n__global_last_update = Variable(contract='con_ff1', name='global_last_update')\n__xwt_daily_rate = Variable(contract='con_ff1', name='xwt_daily_rate')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'staked_token': {'type': str, 'idx': True}, 'reward_token': {'type':\n    str}, 'duration_days': {'type': int}, 'reward_amount': {'type': (int,\n    float, decimal)}}, contract='con_ff1', name='FarmCreated')\n__FarmIncreased = LogEvent(event='FarmIncreased', params={'farm_id': {\n    'type': int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'additional_rewards': {'type': (int, float, decimal)}}, contract=\n    'con_ff1', name='FarmIncreased')\n__UserDeposit = LogEvent(event='UserDeposit', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_ff1', name='UserDeposit')\n__UserWithdraw = LogEvent(event='UserWithdraw', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_ff1', name='UserWithdraw')\n__RewardsClaimed = LogEvent(event='RewardsClaimed', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_ff1', name='RewardsClaimed'\n    )\n__ReferralSet = LogEvent(event='ReferralSet', params={'user': {'type': str,\n    'idx': True}, 'referrer': {'type': str, 'idx': True}}, contract=\n    'con_ff1', name='ReferralSet')\n__ReferralReward = LogEvent(event='ReferralReward', params={'referrer': {\n    'type': str, 'idx': True}, 'referred_user': {'type': str, 'idx': True},\n    'farm_id': {'type': int, 'idx': True}, 'deposit_amount': {'type': (int,\n    float, decimal)}, 'reward_amount': {'type': (int, float, decimal)},\n    'reward_token': {'type': str}}, contract='con_ff1', name='ReferralReward')\n__ReferralBonusChanged = LogEvent(event='ReferralBonusChanged', params={\n    'old_bonus': {'type': (int, float, decimal)}, 'new_bonus': {'type': (\n    int, float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': \n    True}}, contract='con_ff1', name='ReferralBonusChanged')\n__XWTDailyRateChanged = LogEvent(event='XWTDailyRateChanged', params={\n    'old_rate': {'type': (int, float, decimal)}, 'new_rate': {'type': (int,\n    float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': True}\n    }, contract='con_ff1', name='XWTDailyRateChanged')\n__ReferralCommissionDeposited = LogEvent(event=\n    'ReferralCommissionDeposited', params={'amount': {'type': (int, float,\n    decimal), 'idx': True}, 'deposited_by': {'type': str, 'idx': True},\n    'total_pool': {'type': (int, float, decimal)}}, contract='con_ff1',\n    name='ReferralCommissionDeposited')\n__LostTimeRewardsAccumulated = LogEvent(event='LostTimeRewardsAccumulated',\n    params={'farm_id': {'type': int, 'idx': True}, 'lost_time_hours': {\n    'type': (int, float, decimal)}, 'rewards_amount': {'type': (int, float,\n    decimal)}, 'total_lost_rewards': {'type': (int, float, decimal)}},\n    contract='con_ff1', name='LostTimeRewardsAccumulated')\n__LostTimeRewardsWithdrawn = LogEvent(event='LostTimeRewardsWithdrawn',\n    params={'farm_id': {'type': int, 'idx': True}, 'creator': {'type': str,\n    'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_ff1', name='LostTimeRewardsWithdrawn')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(0)\n    __farm_creation_fee.set(decimal('5000.0'))\n    __referral_bonus_amount.set(decimal('100.0'))\n    __xwt_pool_total.set(decimal('0.0'))\n    __xwt_rewards_paid.set(decimal('0.0'))\n    __global_total_staked.set(decimal('0.0'))\n    __global_last_update.set(now)\n    __xwt_daily_rate.set(decimal('0.01'))\n    __referral_commission_pool.set(decimal('0.0'))\n    __referral_commission_paid.set(decimal('0.0'))\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm, 'Farm does not exist'\n    assert farm['creator'\n        ] == ctx.caller, 'Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id], 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm is not active'\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return\n    __calculate_and_accumulate_lost_time_rewards(farm_id)\n    current_time = min(now, farm['end_time'])\n    if farm['active']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if farm['total_staked'] > 0 and time_diff_seconds > 0:\n            max_rewards_available = farm['total_rewards'] - __rewards_paid[\n                farm_id] - __farm_lost_time_rewards[farm_id]\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_rewards_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                __cumulative_rpt[farm_id] = __cumulative_rpt[farm_id\n                    ] + reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __calculate_active_total_staked():\n    active_total = decimal('0.0')\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        farm = __farms[i]\n        if farm and farm['active'] and now >= farm['start_time'\n            ] and now <= farm['end_time']:\n            active_total += farm['total_staked']\n    return active_total\n\n\ndef __update_global_xwt_rewards():\n    active_total_staked = __calculate_active_total_staked()\n    if active_total_staked > 0:\n        time_diff = now - __global_last_update.get()\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            xwt_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n            if xwt_balance > 0:\n                daily_rate = __xwt_daily_rate.get()\n                seconds_per_day = 86400\n                xwt_per_second = xwt_balance * daily_rate / seconds_per_day\n                xwt_reward_increment = (time_diff_seconds * xwt_per_second /\n                    active_total_staked)\n                __cumulative_xwt_rpt[0] = __cumulative_xwt_rpt[0\n                    ] + xwt_reward_increment\n    __global_last_update.set(now)\n\n\ndef __has_any_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            return True\n    return False\n\n\ndef __has_active_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            farm = __farms[i]\n            if farm and farm['active'] and now >= farm['start_time'\n                ] and now <= farm['end_time']:\n                return True\n    return False\n\n\ndef __calculate_referral_bonus():\n    return __referral_bonus_amount.get()\n\n\ndef __calculate_and_accumulate_lost_time_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm or not farm['active']:\n        return\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    if farm['total_staked'] == 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id\n            ] - __farm_lost_time_rewards[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_lost_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_lost_rewards > 0:\n            __farm_lost_time_rewards[farm_id] = __farm_lost_time_rewards[\n                farm_id] + actual_lost_rewards\n            __LostTimeRewardsAccumulated({'farm_id': farm_id,\n                'lost_time_hours': time_diff_seconds / decimal('3600.0'),\n                'rewards_amount': actual_lost_rewards, 'total_lost_rewards':\n                __farm_lost_time_rewards[farm_id]})\n\n\ndef __get_individual_user_deposits(farm_id: int, user: str):\n    \"\"\"Get list of individual deposits for a user in a farm\"\"\"\n    deposits = __user_deposit_history[farm_id, user]\n    return deposits if deposits else []\n\n\ndef __add_individual_deposit(farm_id: int, user: str, amount: float):\n    \"\"\"Add a new individual deposit with timestamp\"\"\"\n    current_deposits = __get_individual_user_deposits(farm_id, user)\n    new_deposit = {'amount': amount, 'timestamp': now,\n        'last_reward_per_token': __cumulative_rpt[farm_id],\n        'last_xwt_reward_per_token': __cumulative_xwt_rpt[0]}\n    current_deposits.append(new_deposit)\n    __user_deposit_history[farm_id, user] = current_deposits\n\n\ndef __calculate_user_individual_rewards(farm_id: int, user: str):\n    \"\"\"Calculate rewards for each individual deposit separately\"\"\"\n    individual_deposits = __get_individual_user_deposits(farm_id, user)\n    if not individual_deposits:\n        return decimal('0.0'), decimal('0.0')\n    total_farm_rewards = decimal('0.0')\n    total_xwt_rewards = decimal('0.0')\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    current_xwt_rpt = __cumulative_xwt_rpt[0]\n    for deposit in individual_deposits:\n        deposit_farm_rewards = (current_cumulative_rpt - deposit[\n            'last_reward_per_token']) * deposit['amount']\n        total_farm_rewards += max(decimal('0.0'), deposit_farm_rewards)\n        deposit_xwt_rewards = (current_xwt_rpt - deposit[\n            'last_xwt_reward_per_token']) * deposit['amount']\n        total_xwt_rewards += max(decimal('0.0'), deposit_xwt_rewards)\n    return total_farm_rewards, total_xwt_rewards\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    user_deposit = __user_deposits[farm_id, user]\n    if not user_deposit:\n        return\n    __update_global_xwt_rewards()\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] = __saved_rewards[farm_id, user\n            ] + pending_rewards\n    farm = __farms[farm_id]\n    farm_is_active = farm and farm['active'] and now >= farm['start_time'\n        ] and now <= farm['end_time']\n    if farm_is_active:\n        available_xwt = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        current_xwt_rpt = __cumulative_xwt_rpt[0]\n        last_xwt_rpt = user_deposit['last_xwt_reward_per_token']\n        if available_xwt > 0:\n            pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt\n                ) * user_deposit['amount']\n            if pending_xwt_rewards > 0:\n                __saved_xwt_rewards[farm_id, user] = __saved_xwt_rewards[\n                    farm_id, user] + pending_xwt_rewards\n        user_deposit['last_xwt_reward_per_token'] = current_xwt_rpt\n    user_deposit['last_reward_per_token'] = current_cumulative_rpt\n    __user_deposits[farm_id, user] = user_deposit\n\n\n@__export('con_ff1')\ndef create_farm(staked_token: str, reward_token: str, duration_days: int,\n    reward_amount: float):\n    duration_days = duration_days // 1\n    reward_amount = reward_amount + decimal('0.0')\n    assert duration_days > 0, 'Duration must be positive'\n    assert reward_amount > 0, 'Reward amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    staked_token_contract = importlib.import_module(staked_token)\n    reward_token_contract = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(staked_token_contract, token_interface\n        ), 'Invalid staked token interface'\n    assert importlib.enforce_interface(reward_token_contract, token_interface\n        ), 'Invalid reward token interface'\n    reward_token_contract.transfer_from(amount=reward_amount, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get() + 1\n    __farm_counter.set(farm_id)\n    start_time = now\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    total_seconds = duration_days * 24 * 3600\n    reward_per_second = reward_amount / total_seconds\n    farm_data = {'creator': ctx.caller, 'staked_token': staked_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'total_staked': decimal('0.0'), 'total_rewards':\n        reward_amount, 'reward_per_second': reward_per_second,\n        'last_update': start_time, 'active': True, 'verified': False,\n        'suspicious': False}\n    __farms[farm_id] = farm_data\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'staked_token': staked_token, 'reward_token': reward_token,\n        'duration_days': duration_days, 'reward_amount': reward_amount})\n    return farm_id\n\n\n@__export('con_ff1')\ndef increase_farm_rewards(farm_id: int, additional_rewards: float):\n    farm_id = farm_id // 1\n    additional_rewards = additional_rewards + decimal('0.0')\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    assert additional_rewards > 0, 'Additional rewards must be positive'\n    farm = __farms[farm_id]\n    assert farm['active'], 'Farm is not active'\n    assert now <= farm['end_time'], 'Farm has ended'\n    assert not farm['suspicious'\n        ], 'Cannot increase rewards for suspicious farm'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    reward_token_contract = importlib.import_module(farm['reward_token'])\n    reward_token_contract.transfer_from(amount=additional_rewards, to=ctx.\n        this, main_account=ctx.caller)\n    __update_farm_rewards(farm_id)\n    remaining_time = farm['end_time'] - now\n    remaining_seconds = (remaining_time.days * 24 * 3600 + remaining_time.\n        seconds)\n    if remaining_seconds > 0:\n        farm['total_rewards'] = farm['total_rewards'] + additional_rewards\n        current_remaining_rewards = farm['total_rewards'] - __rewards_paid[\n            farm_id]\n        farm['reward_per_second'\n            ] = current_remaining_rewards / remaining_seconds\n        __farms[farm_id] = farm\n    __FarmIncreased({'farm_id': farm_id, 'creator': ctx.caller,\n        'additional_rewards': additional_rewards + decimal('0.0')})\n\n\n@__export('con_ff1')\ndef deposit(farm_id: int, amount: float, referrer: str=None):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    if referrer:\n        referrer = referrer + ''\n    __farm_exists(farm_id)\n    __farm_active(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    farm = __farms[farm_id]\n    assert not farm['suspicious'], 'Cannot deposit in suspicious farm'\n    if referrer and not __user_referrers[ctx.caller]:\n        assert referrer != ctx.caller, 'Cannot refer yourself'\n        assert referrer != __owner.get(), 'Owner cannot be a referrer'\n        __user_referrers[ctx.caller] = referrer\n        __referral_count[referrer] = __referral_count[referrer] + 1\n        __ReferralSet({'user': ctx.caller, 'referrer': referrer})\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer_from(amount=amount, to=ctx.this,\n        main_account=ctx.caller)\n    is_first_deposit_in_farm = not __user_deposits[farm_id, ctx.caller]\n    current_referrer = __user_referrers[ctx.caller]\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    if current_deposit:\n        __harvest_user_rewards(farm_id, ctx.caller)\n        current_deposit = __user_deposits[farm_id, ctx.caller]\n    else:\n        current_deposit = {'amount': decimal('0.0'),\n            'last_reward_per_token': __cumulative_rpt[farm_id],\n            'last_xwt_reward_per_token': __cumulative_xwt_rpt[0]}\n    __add_individual_deposit(farm_id, ctx.caller, amount)\n    current_deposit['amount'] = current_deposit['amount'] + amount\n    if 'last_xwt_reward_per_token' not in current_deposit:\n        current_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n    __user_deposits[farm_id, ctx.caller] = current_deposit\n    farm['total_staked'] = farm['total_staked'] + amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    if not current_deposit or current_deposit.get('amount', 0) == amount:\n        __harvest_user_rewards(farm_id, ctx.caller)\n    if current_referrer and current_referrer != __owner.get(\n        ) and __has_any_deposit(current_referrer) and is_first_deposit_in_farm:\n        assert __farms[1\n            ], 'Farm 1 (XWT farm) must exist to process referral rewards'\n        referral_bonus = __calculate_referral_bonus()\n        __referral_rewards_saved[1, current_referrer\n            ] = __referral_rewards_saved[1, current_referrer] + referral_bonus\n        __total_referral_earnings[current_referrer\n            ] = __total_referral_earnings[current_referrer] + referral_bonus\n        __referral_earnings_by_farm[current_referrer, 1\n            ] = __referral_earnings_by_farm[current_referrer, 1\n            ] + referral_bonus\n        __ReferralReward({'referrer': current_referrer, 'referred_user':\n            ctx.caller, 'farm_id': farm_id, 'deposit_amount': amount +\n            decimal('0.0'), 'reward_amount': referral_bonus + decimal('0.0'\n            ), 'reward_token': XWT_CONTRACT})\n    __UserDeposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount +\n        decimal('0.0')})\n\n\n@__export('con_ff1')\ndef withdraw(farm_id: int, amount: float):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    __farm_exists(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    user_deposit = __user_deposits[farm_id, ctx.caller]\n    assert user_deposit, 'No deposit found'\n    assert user_deposit['amount'] >= amount, 'Insufficient deposit'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_deposit['amount'] = user_deposit['amount'] - amount\n    if user_deposit['amount'] == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        __user_deposits[farm_id, ctx.caller] = user_deposit\n    farm['total_staked'] = farm['total_staked'] - amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer(amount=amount, to=ctx.caller)\n    __UserWithdraw({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        amount + decimal('0.0')})\n\n\n@__export('con_ff1')\ndef claim_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    saved_xwt_farming = __saved_xwt_rewards[farm_id, ctx.caller]\n    available_xwt_farming = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    user_xwt_farming_rewards = min(saved_xwt_farming, available_xwt_farming\n        ) if available_xwt_farming > 0 else decimal('0.0')\n    saved_referral_commissions = decimal('0.0')\n    if farm_id == 1:\n        saved_referral_commissions = __referral_rewards_saved[1, ctx.caller]\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    user_referral_rewards = min(saved_referral_commissions,\n        available_referral_pool) if available_referral_pool > 0 else decimal(\n        '0.0')\n    total_xwt_rewards = user_xwt_farming_rewards + user_referral_rewards\n    assert user_rewards > 0 or user_xwt_farming_rewards > 0 or user_referral_rewards > 0, 'No rewards to claim'\n    if user_rewards > 0:\n        farm = __farms[farm_id]\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= user_rewards, 'Insufficient reward token balance in contract'\n        __saved_rewards[farm_id, ctx.caller] = decimal('0.0')\n        __rewards_paid[farm_id] = __rewards_paid[farm_id] + user_rewards\n        reward_token_contract.transfer(amount=user_rewards + decimal('0.0'),\n            to=ctx.caller)\n    total_xwt_transferred = decimal('0.0')\n    if user_xwt_farming_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __saved_xwt_rewards[farm_id, ctx.caller] = __saved_xwt_rewards[\n            farm_id, ctx.caller] - user_xwt_farming_rewards\n        __xwt_rewards_paid.set(__xwt_rewards_paid.get() +\n            user_xwt_farming_rewards)\n        xwt_token.transfer(amount=user_xwt_farming_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_xwt_farming_rewards\n    if user_referral_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __referral_rewards_saved[farm_id, ctx.caller\n            ] = __referral_rewards_saved[farm_id, ctx.caller\n            ] - user_referral_rewards\n        __referral_commission_paid.set(__referral_commission_paid.get() +\n            user_referral_rewards)\n        xwt_token.transfer(amount=user_referral_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_referral_rewards\n    __RewardsClaimed({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        user_rewards + total_xwt_transferred + decimal('0.0')})\n\n\n@__export('con_ff1')\ndef withdraw_lost_time_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    farm = __farms[farm_id]\n    assert now > farm['end_time'\n        ], 'Farm has not ended yet - cannot withdraw lost time rewards'\n    assert not farm['suspicious'], 'Cannot withdraw from suspicious farm'\n    lost_time_rewards = __farm_lost_time_rewards[farm_id]\n    assert lost_time_rewards > 0, 'No lost time rewards to withdraw'\n    reward_token_contract = importlib.import_module(farm['reward_token'])\n    contract_balance = reward_token_contract.balance_of(ctx.this)\n    assert contract_balance >= lost_time_rewards, 'Insufficient contract balance for withdrawal'\n    reward_token_contract.transfer(amount=lost_time_rewards + decimal('0.0'\n        ), to=ctx.caller)\n    __LostTimeRewardsWithdrawn({'farm_id': farm_id, 'creator': ctx.caller,\n        'amount': lost_time_rewards + decimal('0.0')})\n    __farm_lost_time_rewards[farm_id] = decimal('0.0')\n\n\n@__export('con_ff1')\ndef get_farm_info(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    current_apr = decimal('0.0')\n    if farm['total_staked'] > 0 and farm['active']:\n        seconds_in_year = 365 * 24 * 3600\n        annual_rewards_per_token = farm['reward_per_second'\n            ] * seconds_in_year / farm['total_staked']\n        current_apr = annual_rewards_per_token * 100\n    return {**farm, 'current_apr': current_apr, 'total_rewards_available': \n        farm['total_rewards'] - __rewards_paid[farm_id],\n        'lost_time_rewards': __farm_lost_time_rewards[farm_id],\n        'active_rewards_pool': farm['total_rewards'] - __rewards_paid[\n        farm_id] - __farm_lost_time_rewards[farm_id]}\n\n\n@__export('con_ff1')\ndef get_farm_lost_time_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    return {'farm_id': farm_id, 'lost_time_rewards':\n        __farm_lost_time_rewards[farm_id], 'can_withdraw': now > __farms[\n        farm_id]['end_time'], 'farm_creator': __farms[farm_id]['creator']}\n\n\n@__export('con_ff1')\ndef get_user_info(farm_id: int, user: str):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    user_deposit = __user_deposits[farm_id, user]\n    __update_global_xwt_rewards()\n    if not user_deposit:\n        return {'deposited': decimal('0.0'), 'pending_rewards': decimal(\n            '0.0'), 'saved_rewards': __saved_rewards[farm_id, user],\n            'pending_xwt_rewards': decimal('0.0'), 'saved_xwt_rewards':\n            __saved_xwt_rewards[farm_id, user], 'individual_deposits': []}\n    individual_farm_rewards, individual_xwt_rewards = (\n        __calculate_user_individual_rewards(farm_id, user))\n    individual_deposits = __get_individual_user_deposits(farm_id, user)\n    individual_farm_rewards = max(decimal('0.0'), individual_farm_rewards)\n    individual_xwt_rewards = max(decimal('0.0'), individual_xwt_rewards)\n    return {'deposited': user_deposit['amount'], 'pending_rewards':\n        individual_farm_rewards, 'saved_rewards': __saved_rewards[farm_id,\n        user], 'pending_xwt_rewards': individual_xwt_rewards,\n        'saved_xwt_rewards': __saved_xwt_rewards[farm_id, user],\n        'saved_referral_rewards': __referral_rewards_saved[farm_id, user],\n        'individual_deposits': individual_deposits, 'total_deposits_count':\n        len(individual_deposits)}\n\n\n@__export('con_ff1')\ndef get_all_farms():\n    return __farm_counter.get()\n\n\n@__export('con_ff1')\ndef set_farm_creation_fee(new_fee: float):\n    new_fee = new_fee + decimal('0.0')\n    __only_owner()\n    assert new_fee >= 0, 'Fee must be non-negative'\n    __farm_creation_fee.set(new_fee)\n\n\n@__export('con_ff1')\ndef get_farm_creation_fee():\n    return __farm_creation_fee.get()\n\n\n@__export('con_ff1')\ndef set_referral_bonus(new_bonus: float):\n    new_bonus = new_bonus + decimal('0.0')\n    __only_owner()\n    assert new_bonus > 0, 'Referral bonus must be positive'\n    old_bonus = __referral_bonus_amount.get()\n    __referral_bonus_amount.set(new_bonus)\n    __ReferralBonusChanged({'old_bonus': old_bonus + decimal('0.0'),\n        'new_bonus': new_bonus + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_ff1')\ndef deposit_referral_commission(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller\n        )\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n    __ReferralCommissionDeposited({'amount': amount + decimal('0.0'),\n        'deposited_by': ctx.caller, 'total_pool': \n        __referral_commission_pool.get() + decimal('0.0')})\n\n\n@__export('con_ff1')\ndef get_referral_commission_pool_info():\n    return {'total_commission_pool': __referral_commission_pool.get(),\n        'commission_paid': __referral_commission_paid.get(),\n        'remaining_commission': __referral_commission_pool.get() -\n        __referral_commission_paid.get()}\n\n\n@__export('con_ff1')\ndef get_xwt_pool_info():\n    return {'total_xwt_pool': __xwt_pool_total.get(), 'xwt_rewards_paid':\n        __xwt_rewards_paid.get(), 'remaining_xwt': __xwt_pool_total.get() -\n        __xwt_rewards_paid.get(), 'global_total_staked':\n        __global_total_staked.get()}\n\n\n@__export('con_ff1')\ndef get_referral_stats(user: str):\n    farm_1_earnings = __referral_earnings_by_farm[user, 1]\n    farm_earnings = {}\n    if farm_1_earnings > 0 and __farms[1]:\n        farm_earnings[1] = {'farm_id': 1, 'earnings': farm_1_earnings,\n            'reward_token': XWT_CONTRACT}\n    return {'total_earnings': __total_referral_earnings[user],\n        'earnings_by_farm': farm_earnings, 'referrals_count':\n        __referral_count[user], 'referrer': __user_referrers[user],\n        'has_deposits': __has_any_deposit(user), 'reward_token': XWT_CONTRACT}\n\n\n@__export('con_ff1')\ndef get_referral_xwt_rewards(user: str):\n    return {'saved_referral_rewards': __referral_rewards_saved[1, user],\n        'saved_xwt_farming_rewards': __saved_xwt_rewards[1, user],\n        'reward_token': XWT_CONTRACT, 'total_referral_earnings':\n        __total_referral_earnings[user]}\n\n\n@__export('con_ff1')\ndef get_referral_bonus_amount():\n    return {'bonus_amount': __referral_bonus_amount.get(), 'reward_token':\n        XWT_CONTRACT, 'description':\n        'Configurable amount of XWT tokens awarded per referral'}\n\n\n@__export('con_ff1')\ndef set_xwt_daily_rate(new_rate: float):\n    new_rate = new_rate + decimal('0.0')\n    __only_owner()\n    assert new_rate > 0, 'Daily rate must be positive'\n    assert new_rate <= decimal('0.1'\n        ), 'Daily rate cannot exceed 10% for safety'\n    __update_global_xwt_rewards()\n    old_rate = __xwt_daily_rate.get()\n    __xwt_daily_rate.set(new_rate)\n    __XWTDailyRateChanged({'old_rate': old_rate + decimal('0.0'),\n        'new_rate': new_rate + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_ff1')\ndef get_xwt_daily_rate_info():\n    current_rate = __xwt_daily_rate.get()\n    available_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    daily_distribution = (available_balance * current_rate if \n        available_balance > 0 else decimal('0.0'))\n    return {'daily_rate': current_rate, 'daily_rate_percentage': \n        current_rate * 100, 'available_xwt_balance': available_balance,\n        'daily_xwt_distribution': daily_distribution, 'global_total_staked':\n        __global_total_staked.get(), 'description':\n        'Daily percentage of available XWT balance distributed as rewards'}\n\n\n@__export('con_ff1')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    farm_id = farm_id // 1\n    __only_owner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_ff1')\ndef transfer_from_referral_to_farming_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    assert available_referral_pool >= amount, 'Insufficient funds in referral commission pool'\n    __referral_commission_pool.set(__referral_commission_pool.get() - amount)\n    __xwt_pool_total.set(__xwt_pool_total.get() + amount)\n\n\n@__export('con_ff1')\ndef transfer_from_farming_to_referral_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_farming_pool = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    assert available_farming_pool >= amount, 'Insufficient funds in farming XWT pool'\n    __xwt_pool_total.set(__xwt_pool_total.get() - amount)\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n"
            },
            {
                "key": "con_ff1.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_ff1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        4,
                        26,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_ff1.cumulative_rpt:1",
                "value": {
                    "__fixed__": "0.235339506172839506172839506149"
                }
            },
            {
                "key": "con_ff1.cumulative_rpt:2",
                "value": {
                    "__fixed__": "0.089004629629629629629629629627"
                }
            },
            {
                "key": "con_ff1.cumulative_xwt_rpt:0",
                "value": {
                    "__fixed__": "0.055721345892875514669957481847"
                }
            },
            {
                "key": "con_ff1.farm_counter",
                "value": 4
            },
            {
                "key": "con_ff1.farm_creation_fee",
                "value": {
                    "__fixed__": "5E+3"
                }
            },
            {
                "key": "con_ff1.farm_lost_time_rewards:1",
                "value": {
                    "__fixed__": "1.678240740740740740740740740585"
                }
            },
            {
                "key": "con_ff1.farm_lost_time_rewards:2",
                "value": {
                    "__fixed__": "5.543981481481481481481481481446"
                }
            },
            {
                "key": "con_ff1.farms:1",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            4,
                            31,
                            52,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            9,
                            4,
                            31,
                            52,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "6E+2"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.003858024691358024691358024691"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            10,
                            48,
                            1,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_ff1.farms:2",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            4,
                            32,
                            43,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            4,
                            32,
                            43,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "1.2E+3"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.011574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            5,
                            14,
                            53,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_ff1.farms:3",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_stellar",
                    "reward_token": "con_stellar",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            4,
                            33,
                            49,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            4,
                            33,
                            49,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.011574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            4,
                            33,
                            49,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_ff1.farms:4",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_tiger",
                    "reward_token": "con_tiger",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            4,
                            34,
                            49,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            11,
                            14,
                            4,
                            34,
                            49,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+2"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.000011574074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            4,
                            34,
                            49,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_ff1.global_last_update",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        10,
                        48,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_ff1.global_total_staked",
                "value": {
                    "__fixed__": "1.8E+3"
                }
            },
            {
                "key": "con_ff1.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_ff1.referral_bonus_amount",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_ff1.referral_commission_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_ff1.referral_commission_pool",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_ff1.rewards_paid:1",
                "value": {
                    "__fixed__": "0.8063271604938271604938271604"
                }
            },
            {
                "key": "con_ff1.rewards_paid:2",
                "value": {
                    "__fixed__": "8.9004629629629629629629629627"
                }
            },
            {
                "key": "con_ff1.saved_rewards:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "61.8595679012345679012345678952"
                }
            },
            {
                "key": "con_ff1.saved_rewards:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_ff1.saved_rewards:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "6.944444444444444444444444444"
                }
            },
            {
                "key": "con_ff1.saved_rewards:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_ff1.saved_xwt_rewards:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "9.4457258771842670019208331463"
                }
            },
            {
                "key": "con_ff1.saved_xwt_rewards:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_ff1.saved_xwt_rewards:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "1.185777473587369420702754032"
                }
            },
            {
                "key": "con_ff1.saved_xwt_rewards:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_ff1.user_deposit_history:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": [
                    {
                        "amount": {
                            "__fixed__": "1E+2"
                        },
                        "last_reward_per_token": {
                            "__fixed__": "0.014390432098765432098765432097"
                        },
                        "last_xwt_reward_per_token": {
                            "__fixed__": "0.020902709871184842249657064462"
                        },
                        "timestamp": {
                            "__time__": [
                                2025,
                                8,
                                6,
                                4,
                                45,
                                20,
                                0
                            ]
                        }
                    },
                    {
                        "amount": {
                            "__fixed__": "2E+2"
                        },
                        "last_reward_per_token": {
                            "__fixed__": "0.036516203703703703703703703699"
                        },
                        "last_xwt_reward_per_token": {
                            "__fixed__": "0.025902034517799515870503524808"
                        },
                        "timestamp": {
                            "__time__": [
                                2025,
                                8,
                                6,
                                5,
                                4,
                                27,
                                0
                            ]
                        }
                    },
                    {
                        "amount": {
                            "__fixed__": "2E+2"
                        },
                        "last_reward_per_token": {
                            "__fixed__": "0.235339506172839506172839506149"
                        },
                        "last_xwt_reward_per_token": {
                            "__fixed__": "0.055721345892875514669957481847"
                        },
                        "timestamp": {
                            "__time__": [
                                2025,
                                8,
                                6,
                                10,
                                48,
                                1,
                                0
                            ]
                        }
                    }
                ]
            },
            {
                "key": "con_ff1.user_deposit_history:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": [
                    {
                        "amount": {
                            "__fixed__": "1E+2"
                        },
                        "last_reward_per_token": {
                            "__fixed__": "0"
                        },
                        "last_xwt_reward_per_token": {
                            "__fixed__": "0"
                        },
                        "timestamp": {
                            "__time__": [
                                2025,
                                8,
                                6,
                                4,
                                39,
                                7,
                                0
                            ]
                        }
                    }
                ]
            },
            {
                "key": "con_ff1.user_deposit_history:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": [
                    {
                        "amount": {
                            "__fixed__": "1E+3"
                        },
                        "last_reward_per_token": {
                            "__fixed__": "0.074884259259259259259259259258"
                        },
                        "last_xwt_reward_per_token": {
                            "__fixed__": "0.024521170960505258344764517593"
                        },
                        "timestamp": {
                            "__time__": [
                                2025,
                                8,
                                6,
                                4,
                                51,
                                29,
                                0
                            ]
                        }
                    },
                    {
                        "amount": {
                            "__fixed__": "1E+2"
                        },
                        "last_reward_per_token": {
                            "__fixed__": "0.081828703703703703703703703702"
                        },
                        "last_xwt_reward_per_token": {
                            "__fixed__": "0.025706948434092627765467271625"
                        },
                        "timestamp": {
                            "__time__": [
                                2025,
                                8,
                                6,
                                5,
                                2,
                                29,
                                0
                            ]
                        }
                    }
                ]
            },
            {
                "key": "con_ff1.user_deposit_history:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": [
                    {
                        "amount": {
                            "__fixed__": "1E+2"
                        },
                        "last_reward_per_token": {
                            "__fixed__": "0"
                        },
                        "last_xwt_reward_per_token": {
                            "__fixed__": "0.018749999999999999999999999993"
                        },
                        "timestamp": {
                            "__time__": [
                                2025,
                                8,
                                6,
                                4,
                                40,
                                42,
                                0
                            ]
                        }
                    }
                ]
            },
            {
                "key": "con_ff1.user_deposits:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "5E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.235339506172839506172839506149"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.055721345892875514669957481847"
                    }
                }
            },
            {
                "key": "con_ff1.user_deposits:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.008063271604938271604938271604"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.020231481481481481481481481472"
                    }
                }
            },
            {
                "key": "con_ff1.user_deposits:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1.1E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.081828703703703703703703703702"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.025706948434092627765467271625"
                    }
                }
            },
            {
                "key": "con_ff1.user_deposits:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.089004629629629629629629629627"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.026807612113960480627268171154"
                    }
                }
            },
            {
                "key": "con_ff1.xwt_daily_rate",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "con_ff1.xwt_pool_total",
                "value": {
                    "__fixed__": "2E+4"
                }
            },
            {
                "key": "con_ff1.xwt_rewards_paid",
                "value": {
                    "__fixed__": "2.8289093595441962108749652633"
                }
            },
            {
                "key": "con_fff06.__code__",
                "value": "XWT_CONTRACT = 'con_xwt'\n__owner = Variable(contract='con_fff06', name='owner')\n__farm_counter = Variable(contract='con_fff06', name='farm_counter')\n__farm_creation_fee = Variable(contract='con_fff06', name='farm_creation_fee')\n__farms = Hash(contract='con_fff06', name='farms')\n__user_deposits = Hash(contract='con_fff06', name='user_deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_fff06',\n    name='saved_rewards')\n__cumulative_rpt = Hash(default_value=decimal('0.0'), contract='con_fff06',\n    name='cumulative_rpt')\n__rewards_paid = Hash(default_value=decimal('0.0'), contract='con_fff06',\n    name='rewards_paid')\n__user_referrers = Hash(default_value=None, contract='con_fff06', name=\n    'user_referrers')\n__total_referral_earnings = Hash(default_value=decimal('0.0'), contract=\n    'con_fff06', name='total_referral_earnings')\n__referral_earnings_by_farm = Hash(default_value=decimal('0.0'), contract=\n    'con_fff06', name='referral_earnings_by_farm')\n__referral_count = Hash(default_value=0, contract='con_fff06', name=\n    'referral_count')\n__referral_bonus_amount = Variable(contract='con_fff06', name=\n    'referral_bonus_amount')\n__referral_commission_pool = Variable(contract='con_fff06', name=\n    'referral_commission_pool')\n__referral_commission_paid = Variable(contract='con_fff06', name=\n    'referral_commission_paid')\n__referral_rewards_saved = Hash(default_value=decimal('0.0'), contract=\n    'con_fff06', name='referral_rewards_saved')\n__xwt_pool_total = Variable(contract='con_fff06', name='xwt_pool_total')\n__saved_xwt_rewards = Hash(default_value=decimal('0.0'), contract=\n    'con_fff06', name='saved_xwt_rewards')\n__cumulative_xwt_rpt = Hash(default_value=decimal('0.0'), contract=\n    'con_fff06', name='cumulative_xwt_rpt')\n__xwt_rewards_paid = Variable(contract='con_fff06', name='xwt_rewards_paid')\n__global_total_staked = Variable(contract='con_fff06', name=\n    'global_total_staked')\n__global_last_update = Variable(contract='con_fff06', name='global_last_update'\n    )\n__xwt_daily_rate = Variable(contract='con_fff06', name='xwt_daily_rate')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'staked_token': {'type': str, 'idx': True}, 'reward_token': {'type':\n    str}, 'duration_days': {'type': int}, 'reward_amount': {'type': (int,\n    float, decimal)}}, contract='con_fff06', name='FarmCreated')\n__FarmIncreased = LogEvent(event='FarmIncreased', params={'farm_id': {\n    'type': int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'additional_rewards': {'type': (int, float, decimal)}}, contract=\n    'con_fff06', name='FarmIncreased')\n__UserDeposit = LogEvent(event='UserDeposit', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fff06', name='UserDeposit')\n__UserWithdraw = LogEvent(event='UserWithdraw', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fff06', name='UserWithdraw')\n__RewardsClaimed = LogEvent(event='RewardsClaimed', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_fff06', name=\n    'RewardsClaimed')\n__ReferralSet = LogEvent(event='ReferralSet', params={'user': {'type': str,\n    'idx': True}, 'referrer': {'type': str, 'idx': True}}, contract=\n    'con_fff06', name='ReferralSet')\n__ReferralReward = LogEvent(event='ReferralReward', params={'referrer': {\n    'type': str, 'idx': True}, 'referred_user': {'type': str, 'idx': True},\n    'farm_id': {'type': int, 'idx': True}, 'deposit_amount': {'type': (int,\n    float, decimal)}, 'reward_amount': {'type': (int, float, decimal)},\n    'reward_token': {'type': str}}, contract='con_fff06', name='ReferralReward'\n    )\n__ReferralBonusChanged = LogEvent(event='ReferralBonusChanged', params={\n    'old_bonus': {'type': (int, float, decimal)}, 'new_bonus': {'type': (\n    int, float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': \n    True}}, contract='con_fff06', name='ReferralBonusChanged')\n__XWTDailyRateChanged = LogEvent(event='XWTDailyRateChanged', params={\n    'old_rate': {'type': (int, float, decimal)}, 'new_rate': {'type': (int,\n    float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': True}\n    }, contract='con_fff06', name='XWTDailyRateChanged')\n__ReferralCommissionDeposited = LogEvent(event=\n    'ReferralCommissionDeposited', params={'amount': {'type': (int, float,\n    decimal), 'idx': True}, 'deposited_by': {'type': str, 'idx': True},\n    'total_pool': {'type': (int, float, decimal)}}, contract='con_fff06',\n    name='ReferralCommissionDeposited')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(0)\n    __farm_creation_fee.set(decimal('5000.0'))\n    __referral_bonus_amount.set(decimal('100.0'))\n    __xwt_pool_total.set(decimal('0.0'))\n    __xwt_rewards_paid.set(decimal('0.0'))\n    __global_total_staked.set(decimal('0.0'))\n    __global_last_update.set(now)\n    __xwt_daily_rate.set(decimal('0.01'))\n    __referral_commission_pool.set(decimal('0.0'))\n    __referral_commission_paid.set(decimal('0.0'))\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm, 'Farm does not exist'\n    assert farm['creator'\n        ] == ctx.caller, 'Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id], 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm is not active'\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm or not farm['active']:\n        return\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            __cumulative_rpt[farm_id] = __cumulative_rpt[farm_id\n                ] + reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __calculate_active_total_staked():\n    active_total = decimal('0.0')\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        farm = __farms[i]\n        if farm and farm['active'] and now >= farm['start_time'\n            ] and now <= farm['end_time']:\n            active_total += farm['total_staked']\n    return active_total\n\n\ndef __update_global_xwt_rewards():\n    active_total_staked = __calculate_active_total_staked()\n    if active_total_staked > 0:\n        time_diff = now - __global_last_update.get()\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            xwt_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n            if xwt_balance > 0:\n                daily_rate = __xwt_daily_rate.get()\n                seconds_per_day = 86400\n                xwt_per_second = xwt_balance * daily_rate / seconds_per_day\n                xwt_reward_increment = (time_diff_seconds * xwt_per_second /\n                    active_total_staked)\n                __cumulative_xwt_rpt[0] = __cumulative_xwt_rpt[0\n                    ] + xwt_reward_increment\n    __global_last_update.set(now)\n\n\ndef __has_any_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            return True\n    return False\n\n\ndef __has_active_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            farm = __farms[i]\n            if farm and farm['active'] and now >= farm['start_time'\n                ] and now <= farm['end_time']:\n                return True\n    return False\n\n\ndef __calculate_referral_bonus():\n    return __referral_bonus_amount.get()\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    user_deposit = __user_deposits[farm_id, user]\n    if not user_deposit:\n        return\n    __update_global_xwt_rewards()\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] = __saved_rewards[farm_id, user\n            ] + pending_rewards\n    farm = __farms[farm_id]\n    farm_is_active = farm and farm['active'] and now >= farm['start_time'\n        ] and now <= farm['end_time']\n    if farm_is_active:\n        available_xwt = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        current_xwt_rpt = __cumulative_xwt_rpt[0]\n        last_xwt_rpt = user_deposit['last_xwt_reward_per_token']\n        if available_xwt > 0:\n            pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt\n                ) * user_deposit['amount']\n            if pending_xwt_rewards > 0:\n                __saved_xwt_rewards[farm_id, user] = __saved_xwt_rewards[\n                    farm_id, user] + pending_xwt_rewards\n        user_deposit['last_xwt_reward_per_token'] = current_xwt_rpt\n    user_deposit['last_reward_per_token'] = current_cumulative_rpt\n    __user_deposits[farm_id, user] = user_deposit\n\n\n@__export('con_fff06')\ndef create_farm(staked_token: str, reward_token: str, duration_days: int,\n    reward_amount: float):\n    duration_days = duration_days // 1\n    reward_amount = reward_amount + decimal('0.0')\n    assert duration_days > 0, 'Duration must be positive'\n    assert reward_amount > 0, 'Reward amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    staked_token_contract = importlib.import_module(staked_token)\n    reward_token_contract = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(staked_token_contract, token_interface\n        ), 'Invalid staked token interface'\n    assert importlib.enforce_interface(reward_token_contract, token_interface\n        ), 'Invalid reward token interface'\n    reward_token_contract.transfer_from(amount=reward_amount, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get() + 1\n    __farm_counter.set(farm_id)\n    start_time = now\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    total_seconds = duration_days * 24 * 3600\n    reward_per_second = reward_amount / total_seconds\n    farm_data = {'creator': ctx.caller, 'staked_token': staked_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'total_staked': decimal('0.0'), 'total_rewards':\n        reward_amount, 'reward_per_second': reward_per_second,\n        'last_update': start_time, 'active': True, 'verified': False,\n        'suspicious': False}\n    __farms[farm_id] = farm_data\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'staked_token': staked_token, 'reward_token': reward_token,\n        'duration_days': duration_days, 'reward_amount': reward_amount})\n    return farm_id\n\n\n@__export('con_fff06')\ndef increase_farm_rewards(farm_id: int, additional_rewards: float):\n    farm_id = farm_id // 1\n    additional_rewards = additional_rewards + decimal('0.0')\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    assert additional_rewards > 0, 'Additional rewards must be positive'\n    farm = __farms[farm_id]\n    assert farm['active'], 'Farm is not active'\n    assert now <= farm['end_time'], 'Farm has ended'\n    assert not farm['suspicious'\n        ], 'Cannot increase rewards for suspicious farm'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    reward_token_contract = importlib.import_module(farm['reward_token'])\n    reward_token_contract.transfer_from(amount=additional_rewards, to=ctx.\n        this, main_account=ctx.caller)\n    __update_farm_rewards(farm_id)\n    remaining_time = farm['end_time'] - now\n    remaining_seconds = (remaining_time.days * 24 * 3600 + remaining_time.\n        seconds)\n    if remaining_seconds > 0:\n        current_remaining_rewards = farm['total_rewards'] - __rewards_paid[\n            farm_id]\n        new_total_remaining = current_remaining_rewards + additional_rewards\n        farm['reward_per_second'] = new_total_remaining / remaining_seconds\n        farm['total_rewards'] = farm['total_rewards'] + additional_rewards\n        __farms[farm_id] = farm\n    __FarmIncreased({'farm_id': farm_id, 'creator': ctx.caller,\n        'additional_rewards': additional_rewards + decimal('0.0')})\n\n\n@__export('con_fff06')\ndef deposit(farm_id: int, amount: float, referrer: str=None):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    if referrer:\n        referrer = referrer + ''\n    __farm_exists(farm_id)\n    __farm_active(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    farm = __farms[farm_id]\n    assert not farm['suspicious'], 'Cannot deposit in suspicious farm'\n    if referrer and not __user_referrers[ctx.caller]:\n        assert referrer != ctx.caller, 'Cannot refer yourself'\n        assert referrer != __owner.get(), 'Owner cannot be a referrer'\n        __user_referrers[ctx.caller] = referrer\n        __referral_count[referrer] = __referral_count[referrer] + 1\n        __ReferralSet({'user': ctx.caller, 'referrer': referrer})\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer_from(amount=amount, to=ctx.this,\n        main_account=ctx.caller)\n    is_first_deposit_in_farm = not __user_deposits[farm_id, ctx.caller]\n    current_referrer = __user_referrers[ctx.caller]\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    if not current_deposit:\n        current_deposit = {'amount': decimal('0.0'),\n            'last_reward_per_token': __cumulative_rpt[farm_id],\n            'last_xwt_reward_per_token': __cumulative_xwt_rpt[0]}\n    current_deposit['amount'] = current_deposit['amount'] + amount\n    current_deposit['last_reward_per_token'] = __cumulative_rpt[farm_id]\n    if 'last_xwt_reward_per_token' not in current_deposit:\n        current_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n    __user_deposits[farm_id, ctx.caller] = current_deposit\n    farm['total_staked'] = farm['total_staked'] + amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    if current_referrer and current_referrer != __owner.get(\n        ) and __has_any_deposit(current_referrer) and is_first_deposit_in_farm:\n        assert __farms[1\n            ], 'Farm 1 (XWT farm) must exist to process referral rewards'\n        referral_bonus = __calculate_referral_bonus()\n        __referral_rewards_saved[1, current_referrer\n            ] = __referral_rewards_saved[1, current_referrer] + referral_bonus\n        __total_referral_earnings[current_referrer\n            ] = __total_referral_earnings[current_referrer] + referral_bonus\n        __referral_earnings_by_farm[current_referrer, 1\n            ] = __referral_earnings_by_farm[current_referrer, 1\n            ] + referral_bonus\n        __ReferralReward({'referrer': current_referrer, 'referred_user':\n            ctx.caller, 'farm_id': farm_id, 'deposit_amount': amount +\n            decimal('0.0'), 'reward_amount': referral_bonus + decimal('0.0'\n            ), 'reward_token': XWT_CONTRACT})\n    __UserDeposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount +\n        decimal('0.0')})\n\n\n@__export('con_fff06')\ndef withdraw(farm_id: int, amount: float):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    __farm_exists(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    user_deposit = __user_deposits[farm_id, ctx.caller]\n    assert user_deposit, 'No deposit found'\n    assert user_deposit['amount'] >= amount, 'Insufficient deposit'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_deposit['amount'] = user_deposit['amount'] - amount\n    if user_deposit['amount'] == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        user_deposit['last_reward_per_token'] = __cumulative_rpt[farm_id]\n        user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        __user_deposits[farm_id, ctx.caller] = user_deposit\n    farm['total_staked'] = farm['total_staked'] - amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer(amount=amount, to=ctx.caller)\n    __UserWithdraw({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        amount + decimal('0.0')})\n\n\n@__export('con_fff06')\ndef claim_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    saved_xwt_farming = __saved_xwt_rewards[farm_id, ctx.caller]\n    available_xwt_farming = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    user_xwt_farming_rewards = min(saved_xwt_farming, available_xwt_farming\n        ) if available_xwt_farming > 0 else decimal('0.0')\n    saved_referral_commissions = decimal('0.0')\n    if farm_id == 1:\n        saved_referral_commissions = __referral_rewards_saved[1, ctx.caller]\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    user_referral_rewards = min(saved_referral_commissions,\n        available_referral_pool) if available_referral_pool > 0 else decimal(\n        '0.0')\n    total_xwt_rewards = user_xwt_farming_rewards + user_referral_rewards\n    assert user_rewards > 0 or user_xwt_farming_rewards > 0 or user_referral_rewards > 0, 'No rewards to claim'\n    if user_rewards > 0:\n        farm = __farms[farm_id]\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= user_rewards, 'Insufficient reward token balance in contract'\n        __saved_rewards[farm_id, ctx.caller] = decimal('0.0')\n        __rewards_paid[farm_id] = __rewards_paid[farm_id] + user_rewards\n        reward_token_contract.transfer(amount=user_rewards + decimal('0.0'),\n            to=ctx.caller)\n    total_xwt_transferred = decimal('0.0')\n    if user_xwt_farming_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __saved_xwt_rewards[farm_id, ctx.caller] = __saved_xwt_rewards[\n            farm_id, ctx.caller] - user_xwt_farming_rewards\n        __xwt_rewards_paid.set(__xwt_rewards_paid.get() +\n            user_xwt_farming_rewards)\n        xwt_token.transfer(amount=user_xwt_farming_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_xwt_farming_rewards\n    if user_referral_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __referral_rewards_saved[farm_id, ctx.caller\n            ] = __referral_rewards_saved[farm_id, ctx.caller\n            ] - user_referral_rewards\n        __referral_commission_paid.set(__referral_commission_paid.get() +\n            user_referral_rewards)\n        xwt_token.transfer(amount=user_referral_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_referral_rewards\n    __RewardsClaimed({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        user_rewards + total_xwt_transferred + decimal('0.0')})\n\n\ndef __calculate_all_pending_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    total_pending = decimal('0.0')\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    total_accumulated_rewards = current_cumulative_rpt * farm['total_staked']\n    total_pending = total_accumulated_rewards - __rewards_paid[farm_id]\n    max_possible_pending = farm['total_rewards'] - __rewards_paid[farm_id]\n    total_pending = min(total_pending, max_possible_pending)\n    return max(decimal('0.0'), total_pending)\n\n\n@__export('con_fff06')\ndef withdraw_remaining_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    farm = __farms[farm_id]\n    assert now > farm['end_time'], 'Farm has not ended yet'\n    assert not farm['suspicious'], 'Cannot withdraw from suspicious farm'\n    total_pending_rewards = __calculate_all_pending_rewards(farm_id)\n    total_obligations = __rewards_paid[farm_id] + total_pending_rewards\n    remaining_rewards = farm['total_rewards'] - total_obligations\n    assert remaining_rewards >= 0, 'Cannot withdraw: pending rewards exceed available funds'\n    if remaining_rewards > 0:\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= remaining_rewards, 'Insufficient contract balance for withdrawal'\n        reward_token_contract.transfer(amount=remaining_rewards + decimal(\n            '0.0'), to=ctx.caller)\n        farm['active'] = False\n        __farms[farm_id] = farm\n    else:\n        farm['active'] = False\n        __farms[farm_id] = farm\n\n\n@__export('con_fff06')\ndef get_farm_info(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    current_apr = decimal('0.0')\n    if farm['total_staked'] > 0 and farm['active']:\n        seconds_in_year = 365 * 24 * 3600\n        annual_rewards_per_token = farm['reward_per_second'\n            ] * seconds_in_year / farm['total_staked']\n        current_apr = annual_rewards_per_token * 100\n    return {**farm, 'current_apr': current_apr, 'remaining_rewards': farm[\n        'total_rewards'] - __rewards_paid[farm_id]}\n\n\n@__export('con_fff06')\ndef get_user_info(farm_id: int, user: str):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    user_deposit = __user_deposits[farm_id, user]\n    __update_global_xwt_rewards()\n    if not user_deposit:\n        return {'deposited': decimal('0.0'), 'pending_rewards': decimal(\n            '0.0'), 'saved_rewards': __saved_rewards[farm_id, user],\n            'pending_xwt_rewards': decimal('0.0'), 'saved_xwt_rewards':\n            __saved_xwt_rewards[farm_id, user]}\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    current_xwt_rpt = __cumulative_xwt_rpt[0]\n    last_xwt_rpt = user_deposit.get('last_xwt_reward_per_token', decimal('0.0')\n        )\n    pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt) * user_deposit[\n        'amount']\n    pending_rewards = max(decimal('0.0'), pending_rewards)\n    pending_xwt_rewards = max(decimal('0.0'), pending_xwt_rewards)\n    return {'deposited': user_deposit['amount'], 'pending_rewards':\n        pending_rewards, 'saved_rewards': __saved_rewards[farm_id, user],\n        'pending_xwt_rewards': pending_xwt_rewards, 'saved_xwt_rewards':\n        __saved_xwt_rewards[farm_id, user], 'saved_referral_rewards':\n        __referral_rewards_saved[farm_id, user]}\n\n\n@__export('con_fff06')\ndef get_all_farms():\n    return __farm_counter.get()\n\n\n@__export('con_fff06')\ndef set_farm_creation_fee(new_fee: float):\n    new_fee = new_fee + decimal('0.0')\n    __only_owner()\n    assert new_fee >= 0, 'Fee must be non-negative'\n    __farm_creation_fee.set(new_fee)\n\n\n@__export('con_fff06')\ndef get_farm_creation_fee():\n    return __farm_creation_fee.get()\n\n\n@__export('con_fff06')\ndef set_referral_bonus(new_bonus: float):\n    new_bonus = new_bonus + decimal('0.0')\n    __only_owner()\n    assert new_bonus > 0, 'Referral bonus must be positive'\n    old_bonus = __referral_bonus_amount.get()\n    __referral_bonus_amount.set(new_bonus)\n    __ReferralBonusChanged({'old_bonus': old_bonus + decimal('0.0'),\n        'new_bonus': new_bonus + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fff06')\ndef deposit_referral_commission(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller\n        )\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n    __ReferralCommissionDeposited({'amount': amount + decimal('0.0'),\n        'deposited_by': ctx.caller, 'total_pool': \n        __referral_commission_pool.get() + decimal('0.0')})\n\n\n@__export('con_fff06')\ndef get_referral_commission_pool_info():\n    return {'total_commission_pool': __referral_commission_pool.get(),\n        'commission_paid': __referral_commission_paid.get(),\n        'remaining_commission': __referral_commission_pool.get() -\n        __referral_commission_paid.get()}\n\n\n@__export('con_fff06')\ndef get_xwt_pool_info():\n    return {'total_xwt_pool': __xwt_pool_total.get(), 'xwt_rewards_paid':\n        __xwt_rewards_paid.get(), 'remaining_xwt': __xwt_pool_total.get() -\n        __xwt_rewards_paid.get(), 'global_total_staked':\n        __global_total_staked.get()}\n\n\n@__export('con_fff06')\ndef get_referral_stats(user: str):\n    farm_1_earnings = __referral_earnings_by_farm[user, 1]\n    farm_earnings = {}\n    if farm_1_earnings > 0 and __farms[1]:\n        farm_earnings[1] = {'farm_id': 1, 'earnings': farm_1_earnings,\n            'reward_token': XWT_CONTRACT}\n    return {'total_earnings': __total_referral_earnings[user],\n        'earnings_by_farm': farm_earnings, 'referrals_count':\n        __referral_count[user], 'referrer': __user_referrers[user],\n        'has_deposits': __has_any_deposit(user), 'reward_token': XWT_CONTRACT}\n\n\n@__export('con_fff06')\ndef get_referral_xwt_rewards(user: str):\n    return {'saved_referral_rewards': __referral_rewards_saved[1, user],\n        'saved_xwt_farming_rewards': __saved_xwt_rewards[1, user],\n        'reward_token': XWT_CONTRACT, 'total_referral_earnings':\n        __total_referral_earnings[user]}\n\n\n@__export('con_fff06')\ndef get_referral_bonus_amount():\n    return {'bonus_amount': __referral_bonus_amount.get(), 'reward_token':\n        XWT_CONTRACT, 'description':\n        'Configurable amount of XWT tokens awarded per referral'}\n\n\n@__export('con_fff06')\ndef set_xwt_daily_rate(new_rate: float):\n    new_rate = new_rate + decimal('0.0')\n    __only_owner()\n    assert new_rate > 0, 'Daily rate must be positive'\n    assert new_rate <= decimal('0.1'\n        ), 'Daily rate cannot exceed 10% for safety'\n    __update_global_xwt_rewards()\n    old_rate = __xwt_daily_rate.get()\n    __xwt_daily_rate.set(new_rate)\n    __XWTDailyRateChanged({'old_rate': old_rate + decimal('0.0'),\n        'new_rate': new_rate + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fff06')\ndef get_xwt_daily_rate_info():\n    current_rate = __xwt_daily_rate.get()\n    available_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    daily_distribution = (available_balance * current_rate if \n        available_balance > 0 else decimal('0.0'))\n    return {'daily_rate': current_rate, 'daily_rate_percentage': \n        current_rate * 100, 'available_xwt_balance': available_balance,\n        'daily_xwt_distribution': daily_distribution, 'global_total_staked':\n        __global_total_staked.get(), 'description':\n        'Daily percentage of available XWT balance distributed as rewards'}\n\n\n@__export('con_fff06')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    farm_id = farm_id // 1\n    __only_owner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_fff06')\ndef transfer_from_referral_to_farming_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    assert available_referral_pool >= amount, 'Insufficient funds in referral commission pool'\n    __referral_commission_pool.set(__referral_commission_pool.get() - amount)\n    __xwt_pool_total.set(__xwt_pool_total.get() + amount)\n\n\n@__export('con_fff06')\ndef transfer_from_farming_to_referral_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_farming_pool = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    assert available_farming_pool >= amount, 'Insufficient funds in farming XWT pool'\n    __xwt_pool_total.set(__xwt_pool_total.get() - amount)\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n"
            },
            {
                "key": "con_fff06.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fff06.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        4,
                        22,
                        30,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_fff06.cumulative_rpt:1",
                "value": {
                    "__fixed__": "70.826903292181069958847736618941"
                }
            },
            {
                "key": "con_fff06.cumulative_rpt:4",
                "value": {
                    "__fixed__": "0.041255506409235217979877556278"
                }
            },
            {
                "key": "con_fff06.cumulative_rpt:6",
                "value": {
                    "__fixed__": "640.297094907407407407407407407223"
                }
            },
            {
                "key": "con_fff06.cumulative_xwt_rpt:0",
                "value": {
                    "__fixed__": "0.804592099765324870399377777151"
                }
            },
            {
                "key": "con_fff06.farm_counter",
                "value": 7
            },
            {
                "key": "con_fff06.farm_creation_fee",
                "value": {
                    "__fixed__": "5E+3"
                }
            },
            {
                "key": "con_fff06.farms:1",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            4,
                            22,
                            36,
                            4,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            22,
                            36,
                            4,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "103"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.003858024691358024691358024691"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            4,
                            20,
                            56,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff06.farms:2",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            2,
                            19,
                            29,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            11,
                            13,
                            2,
                            19,
                            29,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "1E+2"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.00011574074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            4,
                            13,
                            24,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff06.farms:3",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_xwt",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            2,
                            20,
                            45,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            2,
                            20,
                            45,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "1"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.005787037037037037037037037037"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            3,
                            10,
                            7,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff06.farms:4",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_pi",
                    "reward_token": "con_tiger",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            2,
                            45,
                            54,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            2,
                            45,
                            54,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "11001"
                    },
                    "total_rewards": {
                        "__fixed__": "11111"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.128599537037037037037037037037"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            4,
                            52,
                            35,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": true
                }
            },
            {
                "key": "con_fff06.farms:5",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_stellar",
                    "reward_token": "con_stellar",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            2,
                            50,
                            40,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            2,
                            50,
                            40,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "1E+2"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+2"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.001157407407407407407407407407"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            4,
                            35,
                            45,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff06.farms:6",
                "value": {
                    "creator": "6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                    "staked_token": "con_fire",
                    "reward_token": "con_fire",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            3,
                            1,
                            38,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            3,
                            1,
                            38,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "101"
                    },
                    "total_rewards": {
                        "__fixed__": "22222"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.128599537037037037037037037037"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            4,
                            34,
                            4,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff06.farms:7",
                "value": {
                    "creator": "6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                    "staked_token": "con_fire",
                    "reward_token": "con_fire",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            3,
                            12,
                            33,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            11,
                            13,
                            3,
                            12,
                            33,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "1"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+2"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.000011574074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            3,
                            13,
                            6,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff06.global_last_update",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        5,
                        4,
                        52,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_fff06.global_total_staked",
                "value": {
                    "__fixed__": "11407"
                }
            },
            {
                "key": "con_fff06.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fff06.referral_bonus_amount",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_fff06.referral_commission_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff06.referral_commission_pool",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff06.rewards_paid:4",
                "value": {
                    "__fixed__": "188.79186964790773535433111834"
                }
            },
            {
                "key": "con_fff06.saved_rewards:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.190329218106995884773662551422"
                }
            },
            {
                "key": "con_fff06.saved_rewards:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff06.saved_xwt_rewards:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.803917714884696016771488469417"
                }
            },
            {
                "key": "con_fff06.saved_xwt_rewards:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fff06.user_deposits:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "101"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "70.826903292181069958847736618941"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.803917714884696016771488469417"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:1:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "1"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "62.256944444444444444444444438667"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:3:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "1"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:4:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.024059804292929292929292929292"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.803917714884696016771488469417"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+4"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.041255506409235217979877556278"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.804592099765324870399377777151"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:4:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "1E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.803917714884696016771488469417"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:5:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.803917714884696016771488469417"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:6:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "640.297094907407407407407407407223"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.803917714884696016771488469417"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:6:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "1"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff06.user_deposits:7:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "1"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff06.xwt_daily_rate",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "con_fff06.xwt_pool_total",
                "value": {
                    "__fixed__": "3.5E+4"
                }
            },
            {
                "key": "con_fff06.xwt_rewards_paid",
                "value": {
                    "__fixed__": "6.74384880628853627889307734"
                }
            },
            {
                "key": "con_fff5.__code__",
                "value": "XWT_CONTRACT = 'con_xwt'\n__owner = Variable(contract='con_fff5', name='owner')\n__farm_counter = Variable(contract='con_fff5', name='farm_counter')\n__farm_creation_fee = Variable(contract='con_fff5', name='farm_creation_fee')\n__farms = Hash(contract='con_fff5', name='farms')\n__user_deposits = Hash(contract='con_fff5', name='user_deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_fff5',\n    name='saved_rewards')\n__cumulative_rpt = Hash(default_value=decimal('0.0'), contract='con_fff5',\n    name='cumulative_rpt')\n__rewards_paid = Hash(default_value=decimal('0.0'), contract='con_fff5',\n    name='rewards_paid')\n__user_referrers = Hash(default_value=None, contract='con_fff5', name=\n    'user_referrers')\n__total_referral_earnings = Hash(default_value=decimal('0.0'), contract=\n    'con_fff5', name='total_referral_earnings')\n__referral_earnings_by_farm = Hash(default_value=decimal('0.0'), contract=\n    'con_fff5', name='referral_earnings_by_farm')\n__referral_count = Hash(default_value=0, contract='con_fff5', name=\n    'referral_count')\n__referral_bonus_amount = Variable(contract='con_fff5', name=\n    'referral_bonus_amount')\n__referral_commission_pool = Variable(contract='con_fff5', name=\n    'referral_commission_pool')\n__referral_commission_paid = Variable(contract='con_fff5', name=\n    'referral_commission_paid')\n__referral_rewards_saved = Hash(default_value=decimal('0.0'), contract=\n    'con_fff5', name='referral_rewards_saved')\n__xwt_pool_total = Variable(contract='con_fff5', name='xwt_pool_total')\n__saved_xwt_rewards = Hash(default_value=decimal('0.0'), contract=\n    'con_fff5', name='saved_xwt_rewards')\n__cumulative_xwt_rpt = Hash(default_value=decimal('0.0'), contract=\n    'con_fff5', name='cumulative_xwt_rpt')\n__xwt_rewards_paid = Variable(contract='con_fff5', name='xwt_rewards_paid')\n__global_total_staked = Variable(contract='con_fff5', name=\n    'global_total_staked')\n__global_last_update = Variable(contract='con_fff5', name='global_last_update')\n__xwt_daily_rate = Variable(contract='con_fff5', name='xwt_daily_rate')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'staked_token': {'type': str, 'idx': True}, 'reward_token': {'type':\n    str}, 'duration_days': {'type': int}, 'reward_amount': {'type': (int,\n    float, decimal)}}, contract='con_fff5', name='FarmCreated')\n__FarmIncreased = LogEvent(event='FarmIncreased', params={'farm_id': {\n    'type': int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'additional_rewards': {'type': (int, float, decimal)}}, contract=\n    'con_fff5', name='FarmIncreased')\n__UserDeposit = LogEvent(event='UserDeposit', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fff5', name='UserDeposit')\n__UserWithdraw = LogEvent(event='UserWithdraw', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fff5', name='UserWithdraw')\n__RewardsClaimed = LogEvent(event='RewardsClaimed', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_fff5', name=\n    'RewardsClaimed')\n__ReferralSet = LogEvent(event='ReferralSet', params={'user': {'type': str,\n    'idx': True}, 'referrer': {'type': str, 'idx': True}}, contract=\n    'con_fff5', name='ReferralSet')\n__ReferralReward = LogEvent(event='ReferralReward', params={'referrer': {\n    'type': str, 'idx': True}, 'referred_user': {'type': str, 'idx': True},\n    'farm_id': {'type': int, 'idx': True}, 'deposit_amount': {'type': (int,\n    float, decimal)}, 'reward_amount': {'type': (int, float, decimal)},\n    'reward_token': {'type': str}}, contract='con_fff5', name='ReferralReward')\n__ReferralBonusChanged = LogEvent(event='ReferralBonusChanged', params={\n    'old_bonus': {'type': (int, float, decimal)}, 'new_bonus': {'type': (\n    int, float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': \n    True}}, contract='con_fff5', name='ReferralBonusChanged')\n__XWTDailyRateChanged = LogEvent(event='XWTDailyRateChanged', params={\n    'old_rate': {'type': (int, float, decimal)}, 'new_rate': {'type': (int,\n    float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': True}\n    }, contract='con_fff5', name='XWTDailyRateChanged')\n__ReferralCommissionDeposited = LogEvent(event=\n    'ReferralCommissionDeposited', params={'amount': {'type': (int, float,\n    decimal), 'idx': True}, 'deposited_by': {'type': str, 'idx': True},\n    'total_pool': {'type': (int, float, decimal)}}, contract='con_fff5',\n    name='ReferralCommissionDeposited')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(0)\n    __farm_creation_fee.set(decimal('5000.0'))\n    __referral_bonus_amount.set(decimal('100.0'))\n    __xwt_pool_total.set(decimal('0.0'))\n    __xwt_rewards_paid.set(decimal('0.0'))\n    __global_total_staked.set(decimal('0.0'))\n    __global_last_update.set(now)\n    __xwt_daily_rate.set(decimal('0.01'))\n    __referral_commission_pool.set(decimal('0.0'))\n    __referral_commission_paid.set(decimal('0.0'))\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm, 'Farm does not exist'\n    assert farm['creator'\n        ] == ctx.caller, 'Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id], 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm is not active'\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return\n    current_time = min(now, farm['end_time'])\n    if farm['active']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if farm['total_staked'] > 0 and time_diff_seconds > 0:\n            max_rewards_available = farm['total_rewards'] - __rewards_paid[\n                farm_id]\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_rewards_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                __cumulative_rpt[farm_id] = __cumulative_rpt[farm_id\n                    ] + reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __calculate_active_total_staked():\n    active_total = decimal('0.0')\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        farm = __farms[i]\n        if farm and farm['active'] and now >= farm['start_time'\n            ] and now <= farm['end_time']:\n            active_total += farm['total_staked']\n    return active_total\n\n\ndef __update_global_xwt_rewards():\n    active_total_staked = __calculate_active_total_staked()\n    if active_total_staked > 0:\n        time_diff = now - __global_last_update.get()\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            xwt_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n            if xwt_balance > 0:\n                daily_rate = __xwt_daily_rate.get()\n                seconds_per_day = 86400\n                xwt_per_second = xwt_balance * daily_rate / seconds_per_day\n                xwt_reward_increment = (time_diff_seconds * xwt_per_second /\n                    active_total_staked)\n                __cumulative_xwt_rpt[0] = __cumulative_xwt_rpt[0\n                    ] + xwt_reward_increment\n    __global_last_update.set(now)\n\n\ndef __has_any_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            return True\n    return False\n\n\ndef __has_active_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            farm = __farms[i]\n            if farm and farm['active'] and now >= farm['start_time'\n                ] and now <= farm['end_time']:\n                return True\n    return False\n\n\ndef __calculate_referral_bonus():\n    return __referral_bonus_amount.get()\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    user_deposit = __user_deposits[farm_id, user]\n    if not user_deposit:\n        return\n    __update_global_xwt_rewards()\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] = __saved_rewards[farm_id, user\n            ] + pending_rewards\n    farm = __farms[farm_id]\n    farm_is_active = farm and farm['active'] and now >= farm['start_time'\n        ] and now <= farm['end_time']\n    if farm_is_active:\n        available_xwt = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        current_xwt_rpt = __cumulative_xwt_rpt[0]\n        last_xwt_rpt = user_deposit['last_xwt_reward_per_token']\n        if available_xwt > 0:\n            pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt\n                ) * user_deposit['amount']\n            if pending_xwt_rewards > 0:\n                __saved_xwt_rewards[farm_id, user] = __saved_xwt_rewards[\n                    farm_id, user] + pending_xwt_rewards\n        user_deposit['last_xwt_reward_per_token'] = current_xwt_rpt\n    user_deposit['last_reward_per_token'] = current_cumulative_rpt\n    __user_deposits[farm_id, user] = user_deposit\n\n\n@__export('con_fff5')\ndef create_farm(staked_token: str, reward_token: str, duration_days: int,\n    reward_amount: float):\n    duration_days = duration_days // 1\n    reward_amount = reward_amount + decimal('0.0')\n    assert duration_days > 0, 'Duration must be positive'\n    assert reward_amount > 0, 'Reward amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    staked_token_contract = importlib.import_module(staked_token)\n    reward_token_contract = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(staked_token_contract, token_interface\n        ), 'Invalid staked token interface'\n    assert importlib.enforce_interface(reward_token_contract, token_interface\n        ), 'Invalid reward token interface'\n    reward_token_contract.transfer_from(amount=reward_amount, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get() + 1\n    __farm_counter.set(farm_id)\n    start_time = now\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    total_seconds = duration_days * 24 * 3600\n    reward_per_second = reward_amount / total_seconds\n    farm_data = {'creator': ctx.caller, 'staked_token': staked_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'total_staked': decimal('0.0'), 'total_rewards':\n        reward_amount, 'reward_per_second': reward_per_second,\n        'last_update': start_time, 'active': True, 'verified': False,\n        'suspicious': False}\n    __farms[farm_id] = farm_data\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'staked_token': staked_token, 'reward_token': reward_token,\n        'duration_days': duration_days, 'reward_amount': reward_amount})\n    return farm_id\n\n\n@__export('con_fff5')\ndef increase_farm_rewards(farm_id: int, additional_rewards: float):\n    farm_id = farm_id // 1\n    additional_rewards = additional_rewards + decimal('0.0')\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    assert additional_rewards > 0, 'Additional rewards must be positive'\n    farm = __farms[farm_id]\n    assert farm['active'], 'Farm is not active'\n    assert now <= farm['end_time'], 'Farm has ended'\n    assert not farm['suspicious'\n        ], 'Cannot increase rewards for suspicious farm'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    reward_token_contract = importlib.import_module(farm['reward_token'])\n    reward_token_contract.transfer_from(amount=additional_rewards, to=ctx.\n        this, main_account=ctx.caller)\n    __update_farm_rewards(farm_id)\n    remaining_time = farm['end_time'] - now\n    remaining_seconds = (remaining_time.days * 24 * 3600 + remaining_time.\n        seconds)\n    if remaining_seconds > 0:\n        farm['total_rewards'] = farm['total_rewards'] + additional_rewards\n        current_remaining_rewards = farm['total_rewards'] - __rewards_paid[\n            farm_id]\n        farm['reward_per_second'\n            ] = current_remaining_rewards / remaining_seconds\n        __farms[farm_id] = farm\n    __FarmIncreased({'farm_id': farm_id, 'creator': ctx.caller,\n        'additional_rewards': additional_rewards + decimal('0.0')})\n\n\n@__export('con_fff5')\ndef deposit(farm_id: int, amount: float, referrer: str=None):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    if referrer:\n        referrer = referrer + ''\n    __farm_exists(farm_id)\n    __farm_active(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    farm = __farms[farm_id]\n    assert not farm['suspicious'], 'Cannot deposit in suspicious farm'\n    if referrer and not __user_referrers[ctx.caller]:\n        assert referrer != ctx.caller, 'Cannot refer yourself'\n        assert referrer != __owner.get(), 'Owner cannot be a referrer'\n        __user_referrers[ctx.caller] = referrer\n        __referral_count[referrer] = __referral_count[referrer] + 1\n        __ReferralSet({'user': ctx.caller, 'referrer': referrer})\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer_from(amount=amount, to=ctx.this,\n        main_account=ctx.caller)\n    is_first_deposit_in_farm = not __user_deposits[farm_id, ctx.caller]\n    current_referrer = __user_referrers[ctx.caller]\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    if current_deposit:\n        __harvest_user_rewards(farm_id, ctx.caller)\n        current_deposit = __user_deposits[farm_id, ctx.caller]\n    else:\n        current_deposit = {'amount': decimal('0.0'),\n            'last_reward_per_token': __cumulative_rpt[farm_id],\n            'last_xwt_reward_per_token': __cumulative_xwt_rpt[0]}\n    current_deposit['amount'] = current_deposit['amount'] + amount\n    if 'last_xwt_reward_per_token' not in current_deposit:\n        current_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n    __user_deposits[farm_id, ctx.caller] = current_deposit\n    farm['total_staked'] = farm['total_staked'] + amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    if not current_deposit or current_deposit.get('amount', 0) == amount:\n        __harvest_user_rewards(farm_id, ctx.caller)\n    if current_referrer and current_referrer != __owner.get(\n        ) and __has_any_deposit(current_referrer) and is_first_deposit_in_farm:\n        assert __farms[1\n            ], 'Farm 1 (XWT farm) must exist to process referral rewards'\n        referral_bonus = __calculate_referral_bonus()\n        __referral_rewards_saved[1, current_referrer\n            ] = __referral_rewards_saved[1, current_referrer] + referral_bonus\n        __total_referral_earnings[current_referrer\n            ] = __total_referral_earnings[current_referrer] + referral_bonus\n        __referral_earnings_by_farm[current_referrer, 1\n            ] = __referral_earnings_by_farm[current_referrer, 1\n            ] + referral_bonus\n        __ReferralReward({'referrer': current_referrer, 'referred_user':\n            ctx.caller, 'farm_id': farm_id, 'deposit_amount': amount +\n            decimal('0.0'), 'reward_amount': referral_bonus + decimal('0.0'\n            ), 'reward_token': XWT_CONTRACT})\n    __UserDeposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount +\n        decimal('0.0')})\n\n\n@__export('con_fff5')\ndef withdraw(farm_id: int, amount: float):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    __farm_exists(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    user_deposit = __user_deposits[farm_id, ctx.caller]\n    assert user_deposit, 'No deposit found'\n    assert user_deposit['amount'] >= amount, 'Insufficient deposit'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_deposit['amount'] = user_deposit['amount'] - amount\n    if user_deposit['amount'] == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        __user_deposits[farm_id, ctx.caller] = user_deposit\n    farm['total_staked'] = farm['total_staked'] - amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer(amount=amount, to=ctx.caller)\n    __UserWithdraw({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        amount + decimal('0.0')})\n\n\n@__export('con_fff5')\ndef claim_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    saved_xwt_farming = __saved_xwt_rewards[farm_id, ctx.caller]\n    available_xwt_farming = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    user_xwt_farming_rewards = min(saved_xwt_farming, available_xwt_farming\n        ) if available_xwt_farming > 0 else decimal('0.0')\n    saved_referral_commissions = decimal('0.0')\n    if farm_id == 1:\n        saved_referral_commissions = __referral_rewards_saved[1, ctx.caller]\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    user_referral_rewards = min(saved_referral_commissions,\n        available_referral_pool) if available_referral_pool > 0 else decimal(\n        '0.0')\n    total_xwt_rewards = user_xwt_farming_rewards + user_referral_rewards\n    assert user_rewards > 0 or user_xwt_farming_rewards > 0 or user_referral_rewards > 0, 'No rewards to claim'\n    if user_rewards > 0:\n        farm = __farms[farm_id]\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= user_rewards, 'Insufficient reward token balance in contract'\n        __saved_rewards[farm_id, ctx.caller] = decimal('0.0')\n        __rewards_paid[farm_id] = __rewards_paid[farm_id] + user_rewards\n        reward_token_contract.transfer(amount=user_rewards + decimal('0.0'),\n            to=ctx.caller)\n    total_xwt_transferred = decimal('0.0')\n    if user_xwt_farming_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __saved_xwt_rewards[farm_id, ctx.caller] = __saved_xwt_rewards[\n            farm_id, ctx.caller] - user_xwt_farming_rewards\n        __xwt_rewards_paid.set(__xwt_rewards_paid.get() +\n            user_xwt_farming_rewards)\n        xwt_token.transfer(amount=user_xwt_farming_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_xwt_farming_rewards\n    if user_referral_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __referral_rewards_saved[farm_id, ctx.caller\n            ] = __referral_rewards_saved[farm_id, ctx.caller\n            ] - user_referral_rewards\n        __referral_commission_paid.set(__referral_commission_paid.get() +\n            user_referral_rewards)\n        xwt_token.transfer(amount=user_referral_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_referral_rewards\n    __RewardsClaimed({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        user_rewards + total_xwt_transferred + decimal('0.0')})\n\n\ndef __calculate_all_pending_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    total_pending = decimal('0.0')\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    total_accumulated_rewards = current_cumulative_rpt * farm['total_staked']\n    total_pending = total_accumulated_rewards - __rewards_paid[farm_id]\n    max_possible_pending = farm['total_rewards'] - __rewards_paid[farm_id]\n    total_pending = min(total_pending, max_possible_pending)\n    return max(decimal('0.0'), total_pending)\n\n\n@__export('con_fff5')\ndef withdraw_remaining_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    farm = __farms[farm_id]\n    assert now > farm['end_time'], 'Farm has not ended yet'\n    assert not farm['suspicious'], 'Cannot withdraw from suspicious farm'\n    total_pending_rewards = __calculate_all_pending_rewards(farm_id)\n    total_obligations = __rewards_paid[farm_id] + total_pending_rewards\n    remaining_rewards = farm['total_rewards'] - total_obligations\n    assert remaining_rewards >= 0, 'Cannot withdraw: pending rewards exceed available funds'\n    if remaining_rewards > 0:\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= remaining_rewards, 'Insufficient contract balance for withdrawal'\n        reward_token_contract.transfer(amount=remaining_rewards + decimal(\n            '0.0'), to=ctx.caller)\n        farm['active'] = False\n        __farms[farm_id] = farm\n    else:\n        farm['active'] = False\n        __farms[farm_id] = farm\n\n\n@__export('con_fff5')\ndef get_farm_info(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    current_apr = decimal('0.0')\n    if farm['total_staked'] > 0 and farm['active']:\n        seconds_in_year = 365 * 24 * 3600\n        annual_rewards_per_token = farm['reward_per_second'\n            ] * seconds_in_year / farm['total_staked']\n        current_apr = annual_rewards_per_token * 100\n    return {**farm, 'current_apr': current_apr, 'remaining_rewards': farm[\n        'total_rewards'] - __rewards_paid[farm_id]}\n\n\n@__export('con_fff5')\ndef get_user_info(farm_id: int, user: str):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    user_deposit = __user_deposits[farm_id, user]\n    __update_global_xwt_rewards()\n    if not user_deposit:\n        return {'deposited': decimal('0.0'), 'pending_rewards': decimal(\n            '0.0'), 'saved_rewards': __saved_rewards[farm_id, user],\n            'pending_xwt_rewards': decimal('0.0'), 'saved_xwt_rewards':\n            __saved_xwt_rewards[farm_id, user]}\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    current_xwt_rpt = __cumulative_xwt_rpt[0]\n    last_xwt_rpt = user_deposit.get('last_xwt_reward_per_token', decimal('0.0')\n        )\n    pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt) * user_deposit[\n        'amount']\n    pending_rewards = max(decimal('0.0'), pending_rewards)\n    pending_xwt_rewards = max(decimal('0.0'), pending_xwt_rewards)\n    return {'deposited': user_deposit['amount'], 'pending_rewards':\n        pending_rewards, 'saved_rewards': __saved_rewards[farm_id, user],\n        'pending_xwt_rewards': pending_xwt_rewards, 'saved_xwt_rewards':\n        __saved_xwt_rewards[farm_id, user], 'saved_referral_rewards':\n        __referral_rewards_saved[farm_id, user]}\n\n\n@__export('con_fff5')\ndef get_all_farms():\n    return __farm_counter.get()\n\n\n@__export('con_fff5')\ndef set_farm_creation_fee(new_fee: float):\n    new_fee = new_fee + decimal('0.0')\n    __only_owner()\n    assert new_fee >= 0, 'Fee must be non-negative'\n    __farm_creation_fee.set(new_fee)\n\n\n@__export('con_fff5')\ndef get_farm_creation_fee():\n    return __farm_creation_fee.get()\n\n\n@__export('con_fff5')\ndef set_referral_bonus(new_bonus: float):\n    new_bonus = new_bonus + decimal('0.0')\n    __only_owner()\n    assert new_bonus > 0, 'Referral bonus must be positive'\n    old_bonus = __referral_bonus_amount.get()\n    __referral_bonus_amount.set(new_bonus)\n    __ReferralBonusChanged({'old_bonus': old_bonus + decimal('0.0'),\n        'new_bonus': new_bonus + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fff5')\ndef deposit_referral_commission(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller\n        )\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n    __ReferralCommissionDeposited({'amount': amount + decimal('0.0'),\n        'deposited_by': ctx.caller, 'total_pool': \n        __referral_commission_pool.get() + decimal('0.0')})\n\n\n@__export('con_fff5')\ndef get_referral_commission_pool_info():\n    return {'total_commission_pool': __referral_commission_pool.get(),\n        'commission_paid': __referral_commission_paid.get(),\n        'remaining_commission': __referral_commission_pool.get() -\n        __referral_commission_paid.get()}\n\n\n@__export('con_fff5')\ndef get_xwt_pool_info():\n    return {'total_xwt_pool': __xwt_pool_total.get(), 'xwt_rewards_paid':\n        __xwt_rewards_paid.get(), 'remaining_xwt': __xwt_pool_total.get() -\n        __xwt_rewards_paid.get(), 'global_total_staked':\n        __global_total_staked.get()}\n\n\n@__export('con_fff5')\ndef get_referral_stats(user: str):\n    farm_1_earnings = __referral_earnings_by_farm[user, 1]\n    farm_earnings = {}\n    if farm_1_earnings > 0 and __farms[1]:\n        farm_earnings[1] = {'farm_id': 1, 'earnings': farm_1_earnings,\n            'reward_token': XWT_CONTRACT}\n    return {'total_earnings': __total_referral_earnings[user],\n        'earnings_by_farm': farm_earnings, 'referrals_count':\n        __referral_count[user], 'referrer': __user_referrers[user],\n        'has_deposits': __has_any_deposit(user), 'reward_token': XWT_CONTRACT}\n\n\n@__export('con_fff5')\ndef get_referral_xwt_rewards(user: str):\n    return {'saved_referral_rewards': __referral_rewards_saved[1, user],\n        'saved_xwt_farming_rewards': __saved_xwt_rewards[1, user],\n        'reward_token': XWT_CONTRACT, 'total_referral_earnings':\n        __total_referral_earnings[user]}\n\n\n@__export('con_fff5')\ndef get_referral_bonus_amount():\n    return {'bonus_amount': __referral_bonus_amount.get(), 'reward_token':\n        XWT_CONTRACT, 'description':\n        'Configurable amount of XWT tokens awarded per referral'}\n\n\n@__export('con_fff5')\ndef set_xwt_daily_rate(new_rate: float):\n    new_rate = new_rate + decimal('0.0')\n    __only_owner()\n    assert new_rate > 0, 'Daily rate must be positive'\n    assert new_rate <= decimal('0.1'\n        ), 'Daily rate cannot exceed 10% for safety'\n    __update_global_xwt_rewards()\n    old_rate = __xwt_daily_rate.get()\n    __xwt_daily_rate.set(new_rate)\n    __XWTDailyRateChanged({'old_rate': old_rate + decimal('0.0'),\n        'new_rate': new_rate + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fff5')\ndef get_xwt_daily_rate_info():\n    current_rate = __xwt_daily_rate.get()\n    available_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    daily_distribution = (available_balance * current_rate if \n        available_balance > 0 else decimal('0.0'))\n    return {'daily_rate': current_rate, 'daily_rate_percentage': \n        current_rate * 100, 'available_xwt_balance': available_balance,\n        'daily_xwt_distribution': daily_distribution, 'global_total_staked':\n        __global_total_staked.get(), 'description':\n        'Daily percentage of available XWT balance distributed as rewards'}\n\n\n@__export('con_fff5')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    farm_id = farm_id // 1\n    __only_owner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_fff5')\ndef transfer_from_referral_to_farming_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    assert available_referral_pool >= amount, 'Insufficient funds in referral commission pool'\n    __referral_commission_pool.set(__referral_commission_pool.get() - amount)\n    __xwt_pool_total.set(__xwt_pool_total.get() + amount)\n\n\n@__export('con_fff5')\ndef transfer_from_farming_to_referral_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_farming_pool = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    assert available_farming_pool >= amount, 'Insufficient funds in farming XWT pool'\n    __xwt_pool_total.set(__xwt_pool_total.get() - amount)\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n"
            },
            {
                "key": "con_fff5.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fff5.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        5,
                        8,
                        46,
                        22,
                        0
                    ]
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:1",
                "value": {
                    "__fixed__": "15.211805555555555555555555555457"
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:10",
                "value": {
                    "__fixed__": "0.006437663089225589225589225586"
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:2",
                "value": {
                    "__fixed__": "0.740474537037037037037037037032"
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:3",
                "value": {
                    "__fixed__": "1.322523148148148148148148148145"
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:4",
                "value": {
                    "__fixed__": "3.277546296296296296296296296274"
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:5",
                "value": {
                    "__fixed__": "6.60069444444444444444444444443"
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:6",
                "value": {
                    "__fixed__": "1.097835648148148148148148148146"
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:7",
                "value": {
                    "__fixed__": "18.95023148148148148148148148136"
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:8",
                "value": {
                    "__fixed__": "331.990740740740740740740740740337"
                }
            },
            {
                "key": "con_fff5.cumulative_rpt:9",
                "value": {
                    "__fixed__": "0.034825231481481481481481481439"
                }
            },
            {
                "key": "con_fff5.cumulative_xwt_rpt:0",
                "value": {
                    "__fixed__": "0.005934577520923528145098517516"
                }
            },
            {
                "key": "con_fff5.farm_counter",
                "value": 10
            },
            {
                "key": "con_fff5.farm_creation_fee",
                "value": {
                    "__fixed__": "5E+3"
                }
            },
            {
                "key": "con_fff5.farms:1",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            8,
                            49,
                            22,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            8,
                            49,
                            22,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "1.6E+3"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+4"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.11574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            12,
                            45,
                            16,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.farms:10",
                "value": {
                    "creator": "6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                    "staked_token": "con_fire",
                    "reward_token": "con_fire",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            1,
                            0,
                            13,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            1,
                            0,
                            13,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "3E+4"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+2"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.001157407407407407407407407407"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            3,
                            30,
                            29,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.farms:2",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_tiger",
                    "reward_token": "con_tiger",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            8,
                            51,
                            14,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            11,
                            13,
                            8,
                            51,
                            14,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "2E+3"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+5"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.011574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            2,
                            37,
                            31,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.farms:3",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_pi",
                    "reward_token": "con_stellar",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            8,
                            51,
                            54,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            8,
                            51,
                            54,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "3E+4"
                    },
                    "total_rewards": {
                        "__fixed__": "2E+4"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.231481481481481481481481481481"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            9,
                            0,
                            38,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.farms:4",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_pi",
                    "reward_token": "con_stellar",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            8,
                            52,
                            21,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            8,
                            52,
                            21,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "2E+3"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+4"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.05787037037037037037037037037"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            9,
                            10,
                            21,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.farms:5",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            8,
                            54,
                            49,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            8,
                            54,
                            49,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "4E+3"
                    },
                    "total_rewards": {
                        "__fixed__": "2E+4"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.231481481481481481481481481481"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            9,
                            0,
                            33,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.farms:6",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_xwt",
                    "reward_token": "con_stellar",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            8,
                            56,
                            0,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            8,
                            56,
                            0,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "2E+5"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+5"
                    },
                    "reward_per_second": {
                        "__fixed__": "1.157407407407407407407407407407"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            2,
                            42,
                            16,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.farms:7",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_xwt",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            9,
                            11,
                            54,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            9,
                            11,
                            54,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "2E+2"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+4"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.11574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            19,
                            42,
                            14,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.farms:8",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_stellar",
                    "reward_token": "con_tiger",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            9,
                            12,
                            6,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            9,
                            12,
                            6,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "1.0001E+6"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+5"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.578703703703703703703703703703"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            1,
                            8,
                            14,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.farms:9",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_xwt",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            9,
                            15,
                            20,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            9,
                            15,
                            20,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "6E+3"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+2"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.000578703703703703703703703703"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            1,
                            58,
                            18,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff5.global_last_update",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        3,
                        30,
                        29,
                        0
                    ]
                }
            },
            {
                "key": "con_fff5.global_total_staked",
                "value": {
                    "__fixed__": "1.2759E+6"
                }
            },
            {
                "key": "con_fff5.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fff5.referral_bonus_amount",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_fff5.referral_commission_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff5.referral_commission_pool",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff5.rewards_paid:4",
                "value": {
                    "__fixed__": "24.652777777777777777777777777"
                }
            },
            {
                "key": "con_fff5.rewards_paid:6",
                "value": {
                    "__fixed__": "146295.1388888888888888888888886"
                }
            },
            {
                "key": "con_fff5.saved_rewards:10:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "7.792350589225589225589225583"
                }
            },
            {
                "key": "con_fff5.saved_rewards:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "1635.3009259259259259259259259154"
                }
            },
            {
                "key": "con_fff5.saved_rewards:3:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "13225.23148148148148148148148145"
                }
            },
            {
                "key": "con_fff5.saved_rewards:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff5.saved_rewards:5:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "47.453703703703703703703703703"
                }
            },
            {
                "key": "con_fff5.saved_rewards:6:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff5.saved_rewards:6:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff5.saved_rewards:7:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "1895.023148148148148148148148136"
                }
            },
            {
                "key": "con_fff5.saved_rewards:8:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "33199.0740740740740740740740740337"
                }
            },
            {
                "key": "con_fff5.saved_rewards:9:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "34.825231481481481481481481439"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:10:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "0.10101653527667127519579768"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:10:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.178680489369425906173613177"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "0.4473020835722025575330719547"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.0024836500398321508558916376"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "0.000630807144816958948241774"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.001055438559151767936106842"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:3:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "26.29952187396608533006099237"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:4:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "0.007923587677442110997549049"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:5:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "1.627023998443056206146568594"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:5:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "2.039141414141414141414141413"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:6:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:6:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:7:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.114397515227071192715825082"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:8:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.0010506603049131261755066399"
                }
            },
            {
                "key": "con_fff5.saved_xwt_rewards:9:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "0.052878951174774674776791483"
                }
            },
            {
                "key": "con_fff5.user_deposits:10:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+4"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.00619097222222222222222222222"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005918416798833057069309204492"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:10:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "2E+4"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.006437663089225589225589225586"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005934577520923528145098517516"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "8E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "8.799189814814814814814814814758"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.003874890512206268419383936284"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "8E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "15.211805555555555555555555555457"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005882558203281964469903266579"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005919047605977874028257446266"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.740474537037037037037037037032"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005920103044537025796193553108"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:3:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "3E+4"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "1.322523148148148148148148148145"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005855436194130615267012833241"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:4:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "3.277546296296296296296296296274"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.00584030125137595056061302045"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.024652777777777777777777777777"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.003281606497497684899429832253"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:5:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "2E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "6.60069444444444444444444444443"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005832377663698508449615471401"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:5:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "2E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.047453703703703703703703703703"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.003225484006734006734006734004"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:6:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+5"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "1.097835648148148148148148148146"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005920982429354613911473525623"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:6:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+5"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "1.097835648148148148148148148146"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.00592141292851951135670592385"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:7:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "2E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "18.95023148148148148148148148136"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005018865664476980346542187104"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:8:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1.0001E+6"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "331.990740740740740740740740740337"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005893064806331095731658332978"
                    }
                }
            },
            {
                "key": "con_fff5.user_deposits:9:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "6E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.034825231481481481481481481439"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.005908315145305389941789624724"
                    }
                }
            },
            {
                "key": "con_fff5.xwt_daily_rate",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "con_fff5.xwt_pool_total",
                "value": {
                    "__fixed__": "5E+4"
                }
            },
            {
                "key": "con_fff5.xwt_rewards_paid",
                "value": {
                    "__fixed__": "265.430672527347845240314498956"
                }
            },
            {
                "key": "con_fff7.__code__",
                "value": "XWT_CONTRACT = 'con_xwt'\n__owner = Variable(contract='con_fff7', name='owner')\n__farm_counter = Variable(contract='con_fff7', name='farm_counter')\n__farm_creation_fee = Variable(contract='con_fff7', name='farm_creation_fee')\n__farms = Hash(contract='con_fff7', name='farms')\n__user_deposits = Hash(contract='con_fff7', name='user_deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_fff7',\n    name='saved_rewards')\n__cumulative_rpt = Hash(default_value=decimal('0.0'), contract='con_fff7',\n    name='cumulative_rpt')\n__rewards_paid = Hash(default_value=decimal('0.0'), contract='con_fff7',\n    name='rewards_paid')\n__user_referrers = Hash(default_value=None, contract='con_fff7', name=\n    'user_referrers')\n__total_referral_earnings = Hash(default_value=decimal('0.0'), contract=\n    'con_fff7', name='total_referral_earnings')\n__referral_earnings_by_farm = Hash(default_value=decimal('0.0'), contract=\n    'con_fff7', name='referral_earnings_by_farm')\n__referral_count = Hash(default_value=0, contract='con_fff7', name=\n    'referral_count')\n__referral_bonus_amount = Variable(contract='con_fff7', name=\n    'referral_bonus_amount')\n__referral_commission_pool = Variable(contract='con_fff7', name=\n    'referral_commission_pool')\n__referral_commission_paid = Variable(contract='con_fff7', name=\n    'referral_commission_paid')\n__referral_rewards_saved = Hash(default_value=decimal('0.0'), contract=\n    'con_fff7', name='referral_rewards_saved')\n__xwt_pool_total = Variable(contract='con_fff7', name='xwt_pool_total')\n__saved_xwt_rewards = Hash(default_value=decimal('0.0'), contract=\n    'con_fff7', name='saved_xwt_rewards')\n__cumulative_xwt_rpt = Hash(default_value=decimal('0.0'), contract=\n    'con_fff7', name='cumulative_xwt_rpt')\n__xwt_rewards_paid = Variable(contract='con_fff7', name='xwt_rewards_paid')\n__global_total_staked = Variable(contract='con_fff7', name=\n    'global_total_staked')\n__global_last_update = Variable(contract='con_fff7', name='global_last_update')\n__xwt_daily_rate = Variable(contract='con_fff7', name='xwt_daily_rate')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'staked_token': {'type': str, 'idx': True}, 'reward_token': {'type':\n    str}, 'duration_days': {'type': int}, 'reward_amount': {'type': (int,\n    float, decimal)}}, contract='con_fff7', name='FarmCreated')\n__FarmIncreased = LogEvent(event='FarmIncreased', params={'farm_id': {\n    'type': int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'additional_rewards': {'type': (int, float, decimal)}}, contract=\n    'con_fff7', name='FarmIncreased')\n__UserDeposit = LogEvent(event='UserDeposit', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fff7', name='UserDeposit')\n__UserWithdraw = LogEvent(event='UserWithdraw', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fff7', name='UserWithdraw')\n__RewardsClaimed = LogEvent(event='RewardsClaimed', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_fff7', name=\n    'RewardsClaimed')\n__ReferralSet = LogEvent(event='ReferralSet', params={'user': {'type': str,\n    'idx': True}, 'referrer': {'type': str, 'idx': True}}, contract=\n    'con_fff7', name='ReferralSet')\n__ReferralReward = LogEvent(event='ReferralReward', params={'referrer': {\n    'type': str, 'idx': True}, 'referred_user': {'type': str, 'idx': True},\n    'farm_id': {'type': int, 'idx': True}, 'deposit_amount': {'type': (int,\n    float, decimal)}, 'reward_amount': {'type': (int, float, decimal)},\n    'reward_token': {'type': str}}, contract='con_fff7', name='ReferralReward')\n__ReferralBonusChanged = LogEvent(event='ReferralBonusChanged', params={\n    'old_bonus': {'type': (int, float, decimal)}, 'new_bonus': {'type': (\n    int, float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': \n    True}}, contract='con_fff7', name='ReferralBonusChanged')\n__XWTDailyRateChanged = LogEvent(event='XWTDailyRateChanged', params={\n    'old_rate': {'type': (int, float, decimal)}, 'new_rate': {'type': (int,\n    float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': True}\n    }, contract='con_fff7', name='XWTDailyRateChanged')\n__ReferralCommissionDeposited = LogEvent(event=\n    'ReferralCommissionDeposited', params={'amount': {'type': (int, float,\n    decimal), 'idx': True}, 'deposited_by': {'type': str, 'idx': True},\n    'total_pool': {'type': (int, float, decimal)}}, contract='con_fff7',\n    name='ReferralCommissionDeposited')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(0)\n    __farm_creation_fee.set(decimal('5000.0'))\n    __referral_bonus_amount.set(decimal('100.0'))\n    __xwt_pool_total.set(decimal('0.0'))\n    __xwt_rewards_paid.set(decimal('0.0'))\n    __global_total_staked.set(decimal('0.0'))\n    __global_last_update.set(now)\n    __xwt_daily_rate.set(decimal('0.01'))\n    __referral_commission_pool.set(decimal('0.0'))\n    __referral_commission_paid.set(decimal('0.0'))\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm, 'Farm does not exist'\n    assert farm['creator'\n        ] == ctx.caller, 'Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id], 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm is not active'\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return\n    current_time = min(now, farm['end_time'])\n    if farm['active']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if farm['total_staked'] > 0 and time_diff_seconds > 0:\n            max_rewards_available = farm['total_rewards'] - __rewards_paid[\n                farm_id]\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_rewards_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                __cumulative_rpt[farm_id] = __cumulative_rpt[farm_id\n                    ] + reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __calculate_active_total_staked():\n    active_total = decimal('0.0')\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        farm = __farms[i]\n        if farm and farm['active'] and now >= farm['start_time'\n            ] and now <= farm['end_time']:\n            active_total += farm['total_staked']\n    return active_total\n\n\ndef __update_global_xwt_rewards():\n    active_total_staked = __calculate_active_total_staked()\n    if active_total_staked > 0:\n        time_diff = now - __global_last_update.get()\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            xwt_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n            if xwt_balance > 0:\n                daily_rate = __xwt_daily_rate.get()\n                seconds_per_day = 86400\n                xwt_per_second = xwt_balance * daily_rate / seconds_per_day\n                xwt_reward_increment = (time_diff_seconds * xwt_per_second /\n                    active_total_staked)\n                __cumulative_xwt_rpt[0] = __cumulative_xwt_rpt[0\n                    ] + xwt_reward_increment\n    __global_last_update.set(now)\n\n\ndef __has_any_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            return True\n    return False\n\n\ndef __has_active_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            farm = __farms[i]\n            if farm and farm['active'] and now >= farm['start_time'\n                ] and now <= farm['end_time']:\n                return True\n    return False\n\n\ndef __calculate_referral_bonus():\n    return __referral_bonus_amount.get()\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    user_deposit = __user_deposits[farm_id, user]\n    if not user_deposit:\n        return\n    __update_global_xwt_rewards()\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] = __saved_rewards[farm_id, user\n            ] + pending_rewards\n    farm = __farms[farm_id]\n    farm_is_active = farm and farm['active'] and now >= farm['start_time'\n        ] and now <= farm['end_time']\n    if farm_is_active:\n        available_xwt = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        current_xwt_rpt = __cumulative_xwt_rpt[0]\n        last_xwt_rpt = user_deposit['last_xwt_reward_per_token']\n        if available_xwt > 0:\n            pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt\n                ) * user_deposit['amount']\n            if pending_xwt_rewards > 0:\n                __saved_xwt_rewards[farm_id, user] = __saved_xwt_rewards[\n                    farm_id, user] + pending_xwt_rewards\n        user_deposit['last_xwt_reward_per_token'] = current_xwt_rpt\n    user_deposit['last_reward_per_token'] = current_cumulative_rpt\n    __user_deposits[farm_id, user] = user_deposit\n\n\n@__export('con_fff7')\ndef create_farm(staked_token: str, reward_token: str, duration_days: int,\n    reward_amount: float):\n    duration_days = duration_days // 1\n    reward_amount = reward_amount + decimal('0.0')\n    assert duration_days > 0, 'Duration must be positive'\n    assert reward_amount > 0, 'Reward amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    staked_token_contract = importlib.import_module(staked_token)\n    reward_token_contract = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(staked_token_contract, token_interface\n        ), 'Invalid staked token interface'\n    assert importlib.enforce_interface(reward_token_contract, token_interface\n        ), 'Invalid reward token interface'\n    reward_token_contract.transfer_from(amount=reward_amount, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get() + 1\n    __farm_counter.set(farm_id)\n    start_time = now\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    total_seconds = duration_days * 24 * 3600\n    reward_per_second = reward_amount / total_seconds\n    farm_data = {'creator': ctx.caller, 'staked_token': staked_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'total_staked': decimal('0.0'), 'total_rewards':\n        reward_amount, 'reward_per_second': reward_per_second,\n        'last_update': start_time, 'active': True, 'verified': False,\n        'suspicious': False}\n    __farms[farm_id] = farm_data\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'staked_token': staked_token, 'reward_token': reward_token,\n        'duration_days': duration_days, 'reward_amount': reward_amount})\n    return farm_id\n\n\n@__export('con_fff7')\ndef increase_farm_rewards(farm_id: int, additional_rewards: float):\n    farm_id = farm_id // 1\n    additional_rewards = additional_rewards + decimal('0.0')\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    assert additional_rewards > 0, 'Additional rewards must be positive'\n    farm = __farms[farm_id]\n    assert farm['active'], 'Farm is not active'\n    assert now <= farm['end_time'], 'Farm has ended'\n    assert not farm['suspicious'\n        ], 'Cannot increase rewards for suspicious farm'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    reward_token_contract = importlib.import_module(farm['reward_token'])\n    reward_token_contract.transfer_from(amount=additional_rewards, to=ctx.\n        this, main_account=ctx.caller)\n    __update_farm_rewards(farm_id)\n    remaining_time = farm['end_time'] - now\n    remaining_seconds = (remaining_time.days * 24 * 3600 + remaining_time.\n        seconds)\n    if remaining_seconds > 0:\n        farm['total_rewards'] = farm['total_rewards'] + additional_rewards\n        current_remaining_rewards = farm['total_rewards'] - __rewards_paid[\n            farm_id]\n        farm['reward_per_second'\n            ] = current_remaining_rewards / remaining_seconds\n        __farms[farm_id] = farm\n    __FarmIncreased({'farm_id': farm_id, 'creator': ctx.caller,\n        'additional_rewards': additional_rewards + decimal('0.0')})\n\n\n@__export('con_fff7')\ndef deposit(farm_id: int, amount: float, referrer: str=None):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    if referrer:\n        referrer = referrer + ''\n    __farm_exists(farm_id)\n    __farm_active(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    farm = __farms[farm_id]\n    assert not farm['suspicious'], 'Cannot deposit in suspicious farm'\n    if referrer and not __user_referrers[ctx.caller]:\n        assert referrer != ctx.caller, 'Cannot refer yourself'\n        assert referrer != __owner.get(), 'Owner cannot be a referrer'\n        __user_referrers[ctx.caller] = referrer\n        __referral_count[referrer] = __referral_count[referrer] + 1\n        __ReferralSet({'user': ctx.caller, 'referrer': referrer})\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer_from(amount=amount, to=ctx.this,\n        main_account=ctx.caller)\n    is_first_deposit_in_farm = not __user_deposits[farm_id, ctx.caller]\n    current_referrer = __user_referrers[ctx.caller]\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    if not current_deposit:\n        current_deposit = {'amount': decimal('0.0'),\n            'last_reward_per_token': __cumulative_rpt[farm_id],\n            'last_xwt_reward_per_token': __cumulative_xwt_rpt[0]}\n    current_deposit['amount'] = current_deposit['amount'] + amount\n    if 'last_xwt_reward_per_token' not in current_deposit:\n        current_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n    __user_deposits[farm_id, ctx.caller] = current_deposit\n    farm['total_staked'] = farm['total_staked'] + amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    if current_referrer and current_referrer != __owner.get(\n        ) and __has_any_deposit(current_referrer) and is_first_deposit_in_farm:\n        assert __farms[1\n            ], 'Farm 1 (XWT farm) must exist to process referral rewards'\n        referral_bonus = __calculate_referral_bonus()\n        __referral_rewards_saved[1, current_referrer\n            ] = __referral_rewards_saved[1, current_referrer] + referral_bonus\n        __total_referral_earnings[current_referrer\n            ] = __total_referral_earnings[current_referrer] + referral_bonus\n        __referral_earnings_by_farm[current_referrer, 1\n            ] = __referral_earnings_by_farm[current_referrer, 1\n            ] + referral_bonus\n        __ReferralReward({'referrer': current_referrer, 'referred_user':\n            ctx.caller, 'farm_id': farm_id, 'deposit_amount': amount +\n            decimal('0.0'), 'reward_amount': referral_bonus + decimal('0.0'\n            ), 'reward_token': XWT_CONTRACT})\n    __UserDeposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount +\n        decimal('0.0')})\n\n\n@__export('con_fff7')\ndef withdraw(farm_id: int, amount: float):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    __farm_exists(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    user_deposit = __user_deposits[farm_id, ctx.caller]\n    assert user_deposit, 'No deposit found'\n    assert user_deposit['amount'] >= amount, 'Insufficient deposit'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_deposit['amount'] = user_deposit['amount'] - amount\n    if user_deposit['amount'] == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        __user_deposits[farm_id, ctx.caller] = user_deposit\n    farm['total_staked'] = farm['total_staked'] - amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer(amount=amount, to=ctx.caller)\n    __UserWithdraw({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        amount + decimal('0.0')})\n\n\n@__export('con_fff7')\ndef claim_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    saved_xwt_farming = __saved_xwt_rewards[farm_id, ctx.caller]\n    available_xwt_farming = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    user_xwt_farming_rewards = min(saved_xwt_farming, available_xwt_farming\n        ) if available_xwt_farming > 0 else decimal('0.0')\n    saved_referral_commissions = decimal('0.0')\n    if farm_id == 1:\n        saved_referral_commissions = __referral_rewards_saved[1, ctx.caller]\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    user_referral_rewards = min(saved_referral_commissions,\n        available_referral_pool) if available_referral_pool > 0 else decimal(\n        '0.0')\n    total_xwt_rewards = user_xwt_farming_rewards + user_referral_rewards\n    assert user_rewards > 0 or user_xwt_farming_rewards > 0 or user_referral_rewards > 0, 'No rewards to claim'\n    if user_rewards > 0:\n        farm = __farms[farm_id]\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= user_rewards, 'Insufficient reward token balance in contract'\n        __saved_rewards[farm_id, ctx.caller] = decimal('0.0')\n        __rewards_paid[farm_id] = __rewards_paid[farm_id] + user_rewards\n        reward_token_contract.transfer(amount=user_rewards + decimal('0.0'),\n            to=ctx.caller)\n    total_xwt_transferred = decimal('0.0')\n    if user_xwt_farming_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __saved_xwt_rewards[farm_id, ctx.caller] = __saved_xwt_rewards[\n            farm_id, ctx.caller] - user_xwt_farming_rewards\n        __xwt_rewards_paid.set(__xwt_rewards_paid.get() +\n            user_xwt_farming_rewards)\n        xwt_token.transfer(amount=user_xwt_farming_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_xwt_farming_rewards\n    if user_referral_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __referral_rewards_saved[farm_id, ctx.caller\n            ] = __referral_rewards_saved[farm_id, ctx.caller\n            ] - user_referral_rewards\n        __referral_commission_paid.set(__referral_commission_paid.get() +\n            user_referral_rewards)\n        xwt_token.transfer(amount=user_referral_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_referral_rewards\n    __RewardsClaimed({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        user_rewards + total_xwt_transferred + decimal('0.0')})\n\n\ndef __calculate_all_pending_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    total_pending = decimal('0.0')\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    total_accumulated_rewards = current_cumulative_rpt * farm['total_staked']\n    total_pending = total_accumulated_rewards - __rewards_paid[farm_id]\n    max_possible_pending = farm['total_rewards'] - __rewards_paid[farm_id]\n    total_pending = min(total_pending, max_possible_pending)\n    return max(decimal('0.0'), total_pending)\n\n\n@__export('con_fff7')\ndef withdraw_remaining_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    farm = __farms[farm_id]\n    assert now > farm['end_time'], 'Farm has not ended yet'\n    assert not farm['suspicious'], 'Cannot withdraw from suspicious farm'\n    total_pending_rewards = __calculate_all_pending_rewards(farm_id)\n    total_obligations = __rewards_paid[farm_id] + total_pending_rewards\n    remaining_rewards = farm['total_rewards'] - total_obligations\n    assert remaining_rewards >= 0, 'Cannot withdraw: pending rewards exceed available funds'\n    if remaining_rewards > 0:\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= remaining_rewards, 'Insufficient contract balance for withdrawal'\n        reward_token_contract.transfer(amount=remaining_rewards + decimal(\n            '0.0'), to=ctx.caller)\n        farm['active'] = False\n        __farms[farm_id] = farm\n    else:\n        farm['active'] = False\n        __farms[farm_id] = farm\n\n\n@__export('con_fff7')\ndef get_farm_info(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    current_apr = decimal('0.0')\n    if farm['total_staked'] > 0 and farm['active']:\n        seconds_in_year = 365 * 24 * 3600\n        annual_rewards_per_token = farm['reward_per_second'\n            ] * seconds_in_year / farm['total_staked']\n        current_apr = annual_rewards_per_token * 100\n    return {**farm, 'current_apr': current_apr, 'remaining_rewards': farm[\n        'total_rewards'] - __rewards_paid[farm_id]}\n\n\n@__export('con_fff7')\ndef get_user_info(farm_id: int, user: str):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    user_deposit = __user_deposits[farm_id, user]\n    __update_global_xwt_rewards()\n    if not user_deposit:\n        return {'deposited': decimal('0.0'), 'pending_rewards': decimal(\n            '0.0'), 'saved_rewards': __saved_rewards[farm_id, user],\n            'pending_xwt_rewards': decimal('0.0'), 'saved_xwt_rewards':\n            __saved_xwt_rewards[farm_id, user]}\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    current_xwt_rpt = __cumulative_xwt_rpt[0]\n    last_xwt_rpt = user_deposit.get('last_xwt_reward_per_token', decimal('0.0')\n        )\n    pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt) * user_deposit[\n        'amount']\n    pending_rewards = max(decimal('0.0'), pending_rewards)\n    pending_xwt_rewards = max(decimal('0.0'), pending_xwt_rewards)\n    return {'deposited': user_deposit['amount'], 'pending_rewards':\n        pending_rewards, 'saved_rewards': __saved_rewards[farm_id, user],\n        'pending_xwt_rewards': pending_xwt_rewards, 'saved_xwt_rewards':\n        __saved_xwt_rewards[farm_id, user], 'saved_referral_rewards':\n        __referral_rewards_saved[farm_id, user]}\n\n\n@__export('con_fff7')\ndef get_all_farms():\n    return __farm_counter.get()\n\n\n@__export('con_fff7')\ndef set_farm_creation_fee(new_fee: float):\n    new_fee = new_fee + decimal('0.0')\n    __only_owner()\n    assert new_fee >= 0, 'Fee must be non-negative'\n    __farm_creation_fee.set(new_fee)\n\n\n@__export('con_fff7')\ndef get_farm_creation_fee():\n    return __farm_creation_fee.get()\n\n\n@__export('con_fff7')\ndef set_referral_bonus(new_bonus: float):\n    new_bonus = new_bonus + decimal('0.0')\n    __only_owner()\n    assert new_bonus > 0, 'Referral bonus must be positive'\n    old_bonus = __referral_bonus_amount.get()\n    __referral_bonus_amount.set(new_bonus)\n    __ReferralBonusChanged({'old_bonus': old_bonus + decimal('0.0'),\n        'new_bonus': new_bonus + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fff7')\ndef deposit_referral_commission(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller\n        )\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n    __ReferralCommissionDeposited({'amount': amount + decimal('0.0'),\n        'deposited_by': ctx.caller, 'total_pool': \n        __referral_commission_pool.get() + decimal('0.0')})\n\n\n@__export('con_fff7')\ndef get_referral_commission_pool_info():\n    return {'total_commission_pool': __referral_commission_pool.get(),\n        'commission_paid': __referral_commission_paid.get(),\n        'remaining_commission': __referral_commission_pool.get() -\n        __referral_commission_paid.get()}\n\n\n@__export('con_fff7')\ndef get_xwt_pool_info():\n    return {'total_xwt_pool': __xwt_pool_total.get(), 'xwt_rewards_paid':\n        __xwt_rewards_paid.get(), 'remaining_xwt': __xwt_pool_total.get() -\n        __xwt_rewards_paid.get(), 'global_total_staked':\n        __global_total_staked.get()}\n\n\n@__export('con_fff7')\ndef get_referral_stats(user: str):\n    farm_1_earnings = __referral_earnings_by_farm[user, 1]\n    farm_earnings = {}\n    if farm_1_earnings > 0 and __farms[1]:\n        farm_earnings[1] = {'farm_id': 1, 'earnings': farm_1_earnings,\n            'reward_token': XWT_CONTRACT}\n    return {'total_earnings': __total_referral_earnings[user],\n        'earnings_by_farm': farm_earnings, 'referrals_count':\n        __referral_count[user], 'referrer': __user_referrers[user],\n        'has_deposits': __has_any_deposit(user), 'reward_token': XWT_CONTRACT}\n\n\n@__export('con_fff7')\ndef get_referral_xwt_rewards(user: str):\n    return {'saved_referral_rewards': __referral_rewards_saved[1, user],\n        'saved_xwt_farming_rewards': __saved_xwt_rewards[1, user],\n        'reward_token': XWT_CONTRACT, 'total_referral_earnings':\n        __total_referral_earnings[user]}\n\n\n@__export('con_fff7')\ndef get_referral_bonus_amount():\n    return {'bonus_amount': __referral_bonus_amount.get(), 'reward_token':\n        XWT_CONTRACT, 'description':\n        'Configurable amount of XWT tokens awarded per referral'}\n\n\n@__export('con_fff7')\ndef set_xwt_daily_rate(new_rate: float):\n    new_rate = new_rate + decimal('0.0')\n    __only_owner()\n    assert new_rate > 0, 'Daily rate must be positive'\n    assert new_rate <= decimal('0.1'\n        ), 'Daily rate cannot exceed 10% for safety'\n    __update_global_xwt_rewards()\n    old_rate = __xwt_daily_rate.get()\n    __xwt_daily_rate.set(new_rate)\n    __XWTDailyRateChanged({'old_rate': old_rate + decimal('0.0'),\n        'new_rate': new_rate + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fff7')\ndef get_xwt_daily_rate_info():\n    current_rate = __xwt_daily_rate.get()\n    available_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    daily_distribution = (available_balance * current_rate if \n        available_balance > 0 else decimal('0.0'))\n    return {'daily_rate': current_rate, 'daily_rate_percentage': \n        current_rate * 100, 'available_xwt_balance': available_balance,\n        'daily_xwt_distribution': daily_distribution, 'global_total_staked':\n        __global_total_staked.get(), 'description':\n        'Daily percentage of available XWT balance distributed as rewards'}\n\n\n@__export('con_fff7')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    farm_id = farm_id // 1\n    __only_owner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_fff7')\ndef transfer_from_referral_to_farming_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    assert available_referral_pool >= amount, 'Insufficient funds in referral commission pool'\n    __referral_commission_pool.set(__referral_commission_pool.get() - amount)\n    __xwt_pool_total.set(__xwt_pool_total.get() + amount)\n\n\n@__export('con_fff7')\ndef transfer_from_farming_to_referral_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_farming_pool = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    assert available_farming_pool >= amount, 'Insufficient funds in farming XWT pool'\n    __xwt_pool_total.set(__xwt_pool_total.get() - amount)\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n"
            },
            {
                "key": "con_fff7.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fff7.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        5,
                        5,
                        8,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_fff7.cumulative_rpt:1",
                "value": {
                    "__fixed__": "5.216435185185185185185185185151"
                }
            },
            {
                "key": "con_fff7.cumulative_rpt:2",
                "value": {
                    "__fixed__": "3.773110416666666666666666666665"
                }
            },
            {
                "key": "con_fff7.cumulative_rpt:4",
                "value": {
                    "__fixed__": "3609.960682800579401613391273493401"
                }
            },
            {
                "key": "con_fff7.cumulative_xwt_rpt:0",
                "value": {
                    "__fixed__": "0.000178031672432225660551746859"
                }
            },
            {
                "key": "con_fff7.farm_counter",
                "value": 6
            },
            {
                "key": "con_fff7.farm_creation_fee",
                "value": {
                    "__fixed__": "5E+3"
                }
            },
            {
                "key": "con_fff7.farms:1",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            5,
                            16,
                            27,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            5,
                            16,
                            27,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "2E+2"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+4"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.11574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            6,
                            32,
                            18,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff7.farms:2",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_pi",
                    "reward_token": "con_tiger",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            5,
                            18,
                            23,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            5,
                            18,
                            23,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "3E+2"
                    },
                    "total_rewards": {
                        "__fixed__": "11111"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.128599537037037037037037037037"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            6,
                            18,
                            57,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff7.farms:3",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_stellar",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            5,
                            22,
                            31,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            11,
                            13,
                            5,
                            22,
                            31,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+4"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.001157407407407407407407407407"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            5,
                            22,
                            31,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff7.farms:4",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_stellar",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            5,
                            22,
                            58,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            5,
                            22,
                            58,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "100001"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+5"
                    },
                    "reward_per_second": {
                        "__fixed__": "1.157407407407407407407407407407"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            6,
                            34,
                            8,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff7.farms:5",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_xwt",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            5,
                            25,
                            7,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            5,
                            25,
                            7,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.011574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            5,
                            25,
                            7,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff7.farms:6",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_stellar",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            5,
                            28,
                            19,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            5,
                            28,
                            19,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+4"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.11574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            5,
                            28,
                            19,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff7.global_last_update",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        5,
                        6,
                        34,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_fff7.global_total_staked",
                "value": {
                    "__fixed__": "100501"
                }
            },
            {
                "key": "con_fff7.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fff7.referral_bonus_amount",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_fff7.referral_commission_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff7.referral_commission_pool",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff7.rewards_paid:4",
                "value": {
                    "__fixed__": "697.9096875697909687569790968"
                }
            },
            {
                "key": "con_fff7.saved_rewards:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff7.saved_xwt_rewards:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fff7.user_deposits:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff7.user_deposits:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "5.216435185185185185185185185151"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff7.user_deposits:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "2E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "3.773110416666666666666666666665"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff7.user_deposits:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff7.user_deposits:4:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_fff7.user_deposits:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+5"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "3609.960682800579401613391273493401"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.000178031672432225660551746859"
                    }
                }
            },
            {
                "key": "con_fff7.xwt_daily_rate",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "con_fff7.xwt_pool_total",
                "value": {
                    "__fixed__": "3E+4"
                }
            },
            {
                "key": "con_fff7.xwt_rewards_paid",
                "value": {
                    "__fixed__": "17.8031672432225660551746859"
                }
            },
            {
                "key": "con_fff8.__code__",
                "value": "XWT_CONTRACT = 'con_xwt'\n__owner = Variable(contract='con_fff8', name='owner')\n__farm_counter = Variable(contract='con_fff8', name='farm_counter')\n__farm_creation_fee = Variable(contract='con_fff8', name='farm_creation_fee')\n__farms = Hash(contract='con_fff8', name='farms')\n__user_deposits = Hash(contract='con_fff8', name='user_deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_fff8',\n    name='saved_rewards')\n__cumulative_rpt = Hash(default_value=decimal('0.0'), contract='con_fff8',\n    name='cumulative_rpt')\n__rewards_paid = Hash(default_value=decimal('0.0'), contract='con_fff8',\n    name='rewards_paid')\n__user_referrers = Hash(default_value=None, contract='con_fff8', name=\n    'user_referrers')\n__total_referral_earnings = Hash(default_value=decimal('0.0'), contract=\n    'con_fff8', name='total_referral_earnings')\n__referral_earnings_by_farm = Hash(default_value=decimal('0.0'), contract=\n    'con_fff8', name='referral_earnings_by_farm')\n__referral_count = Hash(default_value=0, contract='con_fff8', name=\n    'referral_count')\n__referral_bonus_amount = Variable(contract='con_fff8', name=\n    'referral_bonus_amount')\n__referral_commission_pool = Variable(contract='con_fff8', name=\n    'referral_commission_pool')\n__referral_commission_paid = Variable(contract='con_fff8', name=\n    'referral_commission_paid')\n__referral_rewards_saved = Hash(default_value=decimal('0.0'), contract=\n    'con_fff8', name='referral_rewards_saved')\n__xwt_pool_total = Variable(contract='con_fff8', name='xwt_pool_total')\n__saved_xwt_rewards = Hash(default_value=decimal('0.0'), contract=\n    'con_fff8', name='saved_xwt_rewards')\n__cumulative_xwt_rpt = Hash(default_value=decimal('0.0'), contract=\n    'con_fff8', name='cumulative_xwt_rpt')\n__xwt_rewards_paid = Variable(contract='con_fff8', name='xwt_rewards_paid')\n__global_total_staked = Variable(contract='con_fff8', name=\n    'global_total_staked')\n__global_last_update = Variable(contract='con_fff8', name='global_last_update')\n__xwt_daily_rate = Variable(contract='con_fff8', name='xwt_daily_rate')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'staked_token': {'type': str, 'idx': True}, 'reward_token': {'type':\n    str}, 'duration_days': {'type': int}, 'reward_amount': {'type': (int,\n    float, decimal)}}, contract='con_fff8', name='FarmCreated')\n__FarmIncreased = LogEvent(event='FarmIncreased', params={'farm_id': {\n    'type': int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'additional_rewards': {'type': (int, float, decimal)}}, contract=\n    'con_fff8', name='FarmIncreased')\n__UserDeposit = LogEvent(event='UserDeposit', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fff8', name='UserDeposit')\n__UserWithdraw = LogEvent(event='UserWithdraw', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fff8', name='UserWithdraw')\n__RewardsClaimed = LogEvent(event='RewardsClaimed', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_fff8', name=\n    'RewardsClaimed')\n__ReferralSet = LogEvent(event='ReferralSet', params={'user': {'type': str,\n    'idx': True}, 'referrer': {'type': str, 'idx': True}}, contract=\n    'con_fff8', name='ReferralSet')\n__ReferralReward = LogEvent(event='ReferralReward', params={'referrer': {\n    'type': str, 'idx': True}, 'referred_user': {'type': str, 'idx': True},\n    'farm_id': {'type': int, 'idx': True}, 'deposit_amount': {'type': (int,\n    float, decimal)}, 'reward_amount': {'type': (int, float, decimal)},\n    'reward_token': {'type': str}}, contract='con_fff8', name='ReferralReward')\n__ReferralBonusChanged = LogEvent(event='ReferralBonusChanged', params={\n    'old_bonus': {'type': (int, float, decimal)}, 'new_bonus': {'type': (\n    int, float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': \n    True}}, contract='con_fff8', name='ReferralBonusChanged')\n__XWTDailyRateChanged = LogEvent(event='XWTDailyRateChanged', params={\n    'old_rate': {'type': (int, float, decimal)}, 'new_rate': {'type': (int,\n    float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': True}\n    }, contract='con_fff8', name='XWTDailyRateChanged')\n__ReferralCommissionDeposited = LogEvent(event=\n    'ReferralCommissionDeposited', params={'amount': {'type': (int, float,\n    decimal), 'idx': True}, 'deposited_by': {'type': str, 'idx': True},\n    'total_pool': {'type': (int, float, decimal)}}, contract='con_fff8',\n    name='ReferralCommissionDeposited')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(0)\n    __farm_creation_fee.set(decimal('5000.0'))\n    __referral_bonus_amount.set(decimal('100.0'))\n    __xwt_pool_total.set(decimal('0.0'))\n    __xwt_rewards_paid.set(decimal('0.0'))\n    __global_total_staked.set(decimal('0.0'))\n    __global_last_update.set(now)\n    __xwt_daily_rate.set(decimal('0.01'))\n    __referral_commission_pool.set(decimal('0.0'))\n    __referral_commission_paid.set(decimal('0.0'))\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm, 'Farm does not exist'\n    assert farm['creator'\n        ] == ctx.caller, 'Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id], 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm is not active'\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return\n    current_time = min(now, farm['end_time'])\n    if farm['active']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if farm['total_staked'] > 0 and time_diff_seconds > 0:\n            max_rewards_available = farm['total_rewards'] - __rewards_paid[\n                farm_id]\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_rewards_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                __cumulative_rpt[farm_id] = __cumulative_rpt[farm_id\n                    ] + reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __calculate_active_total_staked():\n    active_total = decimal('0.0')\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        farm = __farms[i]\n        if farm and farm['active'] and now >= farm['start_time'\n            ] and now <= farm['end_time']:\n            active_total += farm['total_staked']\n    return active_total\n\n\ndef __update_global_xwt_rewards():\n    active_total_staked = __calculate_active_total_staked()\n    if active_total_staked > 0:\n        time_diff = now - __global_last_update.get()\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            xwt_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n            if xwt_balance > 0:\n                daily_rate = __xwt_daily_rate.get()\n                seconds_per_day = 86400\n                xwt_per_second = xwt_balance * daily_rate / seconds_per_day\n                xwt_reward_increment = (time_diff_seconds * xwt_per_second /\n                    active_total_staked)\n                __cumulative_xwt_rpt[0] = __cumulative_xwt_rpt[0\n                    ] + xwt_reward_increment\n    __global_last_update.set(now)\n\n\ndef __has_any_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            return True\n    return False\n\n\ndef __has_active_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            farm = __farms[i]\n            if farm and farm['active'] and now >= farm['start_time'\n                ] and now <= farm['end_time']:\n                return True\n    return False\n\n\ndef __calculate_referral_bonus():\n    return __referral_bonus_amount.get()\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    user_deposit = __user_deposits[farm_id, user]\n    if not user_deposit:\n        return\n    __update_global_xwt_rewards()\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] = __saved_rewards[farm_id, user\n            ] + pending_rewards\n    farm = __farms[farm_id]\n    farm_is_active = farm and farm['active'] and now >= farm['start_time'\n        ] and now <= farm['end_time']\n    if farm_is_active:\n        available_xwt = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        current_xwt_rpt = __cumulative_xwt_rpt[0]\n        last_xwt_rpt = user_deposit['last_xwt_reward_per_token']\n        if available_xwt > 0:\n            pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt\n                ) * user_deposit['amount']\n            if pending_xwt_rewards > 0:\n                __saved_xwt_rewards[farm_id, user] = __saved_xwt_rewards[\n                    farm_id, user] + pending_xwt_rewards\n        user_deposit['last_xwt_reward_per_token'] = current_xwt_rpt\n    user_deposit['last_reward_per_token'] = current_cumulative_rpt\n    __user_deposits[farm_id, user] = user_deposit\n\n\n@__export('con_fff8')\ndef create_farm(staked_token: str, reward_token: str, duration_days: int,\n    reward_amount: float):\n    duration_days = duration_days // 1\n    reward_amount = reward_amount + decimal('0.0')\n    assert duration_days > 0, 'Duration must be positive'\n    assert reward_amount > 0, 'Reward amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    staked_token_contract = importlib.import_module(staked_token)\n    reward_token_contract = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(staked_token_contract, token_interface\n        ), 'Invalid staked token interface'\n    assert importlib.enforce_interface(reward_token_contract, token_interface\n        ), 'Invalid reward token interface'\n    reward_token_contract.transfer_from(amount=reward_amount, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get() + 1\n    __farm_counter.set(farm_id)\n    start_time = now\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    total_seconds = duration_days * 24 * 3600\n    reward_per_second = reward_amount / total_seconds\n    farm_data = {'creator': ctx.caller, 'staked_token': staked_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'total_staked': decimal('0.0'), 'total_rewards':\n        reward_amount, 'reward_per_second': reward_per_second,\n        'last_update': start_time, 'active': True, 'verified': False,\n        'suspicious': False}\n    __farms[farm_id] = farm_data\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'staked_token': staked_token, 'reward_token': reward_token,\n        'duration_days': duration_days, 'reward_amount': reward_amount})\n    return farm_id\n\n\n@__export('con_fff8')\ndef increase_farm_rewards(farm_id: int, additional_rewards: float):\n    farm_id = farm_id // 1\n    additional_rewards = additional_rewards + decimal('0.0')\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    assert additional_rewards > 0, 'Additional rewards must be positive'\n    farm = __farms[farm_id]\n    assert farm['active'], 'Farm is not active'\n    assert now <= farm['end_time'], 'Farm has ended'\n    assert not farm['suspicious'\n        ], 'Cannot increase rewards for suspicious farm'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    reward_token_contract = importlib.import_module(farm['reward_token'])\n    reward_token_contract.transfer_from(amount=additional_rewards, to=ctx.\n        this, main_account=ctx.caller)\n    __update_farm_rewards(farm_id)\n    remaining_time = farm['end_time'] - now\n    remaining_seconds = (remaining_time.days * 24 * 3600 + remaining_time.\n        seconds)\n    if remaining_seconds > 0:\n        farm['total_rewards'] = farm['total_rewards'] + additional_rewards\n        current_remaining_rewards = farm['total_rewards'] - __rewards_paid[\n            farm_id]\n        farm['reward_per_second'\n            ] = current_remaining_rewards / remaining_seconds\n        __farms[farm_id] = farm\n    __FarmIncreased({'farm_id': farm_id, 'creator': ctx.caller,\n        'additional_rewards': additional_rewards + decimal('0.0')})\n\n\n@__export('con_fff8')\ndef deposit(farm_id: int, amount: float, referrer: str=None):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    if referrer:\n        referrer = referrer + ''\n    __farm_exists(farm_id)\n    __farm_active(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    farm = __farms[farm_id]\n    assert not farm['suspicious'], 'Cannot deposit in suspicious farm'\n    if referrer and not __user_referrers[ctx.caller]:\n        assert referrer != ctx.caller, 'Cannot refer yourself'\n        assert referrer != __owner.get(), 'Owner cannot be a referrer'\n        __user_referrers[ctx.caller] = referrer\n        __referral_count[referrer] = __referral_count[referrer] + 1\n        __ReferralSet({'user': ctx.caller, 'referrer': referrer})\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer_from(amount=amount, to=ctx.this,\n        main_account=ctx.caller)\n    is_first_deposit_in_farm = not __user_deposits[farm_id, ctx.caller]\n    current_referrer = __user_referrers[ctx.caller]\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    if not current_deposit:\n        current_deposit = {'amount': decimal('0.0'),\n            'last_reward_per_token': __cumulative_rpt[farm_id],\n            'last_xwt_reward_per_token': __cumulative_xwt_rpt[0]}\n    current_deposit['amount'] = current_deposit['amount'] + amount\n    if 'last_xwt_reward_per_token' not in current_deposit:\n        current_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n    __user_deposits[farm_id, ctx.caller] = current_deposit\n    farm['total_staked'] = farm['total_staked'] + amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    if current_referrer and current_referrer != __owner.get(\n        ) and __has_any_deposit(current_referrer) and is_first_deposit_in_farm:\n        assert __farms[1\n            ], 'Farm 1 (XWT farm) must exist to process referral rewards'\n        referral_bonus = __calculate_referral_bonus()\n        __referral_rewards_saved[1, current_referrer\n            ] = __referral_rewards_saved[1, current_referrer] + referral_bonus\n        __total_referral_earnings[current_referrer\n            ] = __total_referral_earnings[current_referrer] + referral_bonus\n        __referral_earnings_by_farm[current_referrer, 1\n            ] = __referral_earnings_by_farm[current_referrer, 1\n            ] + referral_bonus\n        __ReferralReward({'referrer': current_referrer, 'referred_user':\n            ctx.caller, 'farm_id': farm_id, 'deposit_amount': amount +\n            decimal('0.0'), 'reward_amount': referral_bonus + decimal('0.0'\n            ), 'reward_token': XWT_CONTRACT})\n    __UserDeposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount +\n        decimal('0.0')})\n\n\n@__export('con_fff8')\ndef withdraw(farm_id: int, amount: float):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    __farm_exists(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    user_deposit = __user_deposits[farm_id, ctx.caller]\n    assert user_deposit, 'No deposit found'\n    assert user_deposit['amount'] >= amount, 'Insufficient deposit'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_deposit['amount'] = user_deposit['amount'] - amount\n    if user_deposit['amount'] == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        __user_deposits[farm_id, ctx.caller] = user_deposit\n    farm['total_staked'] = farm['total_staked'] - amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer(amount=amount, to=ctx.caller)\n    __UserWithdraw({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        amount + decimal('0.0')})\n\n\n@__export('con_fff8')\ndef claim_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    saved_xwt_farming = __saved_xwt_rewards[farm_id, ctx.caller]\n    available_xwt_farming = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    user_xwt_farming_rewards = min(saved_xwt_farming, available_xwt_farming\n        ) if available_xwt_farming > 0 else decimal('0.0')\n    saved_referral_commissions = decimal('0.0')\n    if farm_id == 1:\n        saved_referral_commissions = __referral_rewards_saved[1, ctx.caller]\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    user_referral_rewards = min(saved_referral_commissions,\n        available_referral_pool) if available_referral_pool > 0 else decimal(\n        '0.0')\n    total_xwt_rewards = user_xwt_farming_rewards + user_referral_rewards\n    assert user_rewards > 0 or user_xwt_farming_rewards > 0 or user_referral_rewards > 0, 'No rewards to claim'\n    if user_rewards > 0:\n        farm = __farms[farm_id]\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= user_rewards, 'Insufficient reward token balance in contract'\n        __saved_rewards[farm_id, ctx.caller] = decimal('0.0')\n        __rewards_paid[farm_id] = __rewards_paid[farm_id] + user_rewards\n        reward_token_contract.transfer(amount=user_rewards + decimal('0.0'),\n            to=ctx.caller)\n    total_xwt_transferred = decimal('0.0')\n    if user_xwt_farming_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __saved_xwt_rewards[farm_id, ctx.caller] = __saved_xwt_rewards[\n            farm_id, ctx.caller] - user_xwt_farming_rewards\n        __xwt_rewards_paid.set(__xwt_rewards_paid.get() +\n            user_xwt_farming_rewards)\n        xwt_token.transfer(amount=user_xwt_farming_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_xwt_farming_rewards\n    if user_referral_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __referral_rewards_saved[farm_id, ctx.caller\n            ] = __referral_rewards_saved[farm_id, ctx.caller\n            ] - user_referral_rewards\n        __referral_commission_paid.set(__referral_commission_paid.get() +\n            user_referral_rewards)\n        xwt_token.transfer(amount=user_referral_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_referral_rewards\n    __RewardsClaimed({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        user_rewards + total_xwt_transferred + decimal('0.0')})\n\n\ndef __calculate_all_pending_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    total_pending = decimal('0.0')\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    total_accumulated_rewards = current_cumulative_rpt * farm['total_staked']\n    total_pending = total_accumulated_rewards - __rewards_paid[farm_id]\n    max_possible_pending = farm['total_rewards'] - __rewards_paid[farm_id]\n    total_pending = min(total_pending, max_possible_pending)\n    return max(decimal('0.0'), total_pending)\n\n\n@__export('con_fff8')\ndef withdraw_remaining_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    farm = __farms[farm_id]\n    assert now > farm['end_time'], 'Farm has not ended yet'\n    assert not farm['suspicious'], 'Cannot withdraw from suspicious farm'\n    total_pending_rewards = __calculate_all_pending_rewards(farm_id)\n    total_obligations = __rewards_paid[farm_id] + total_pending_rewards\n    remaining_rewards = farm['total_rewards'] - total_obligations\n    assert remaining_rewards >= 0, 'Cannot withdraw: pending rewards exceed available funds'\n    if remaining_rewards > 0:\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= remaining_rewards, 'Insufficient contract balance for withdrawal'\n        reward_token_contract.transfer(amount=remaining_rewards + decimal(\n            '0.0'), to=ctx.caller)\n        farm['active'] = False\n        __farms[farm_id] = farm\n    else:\n        farm['active'] = False\n        __farms[farm_id] = farm\n\n\n@__export('con_fff8')\ndef get_farm_info(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    current_apr = decimal('0.0')\n    if farm['total_staked'] > 0 and farm['active']:\n        seconds_in_year = 365 * 24 * 3600\n        annual_rewards_per_token = farm['reward_per_second'\n            ] * seconds_in_year / farm['total_staked']\n        current_apr = annual_rewards_per_token * 100\n    return {**farm, 'current_apr': current_apr, 'remaining_rewards': farm[\n        'total_rewards'] - __rewards_paid[farm_id]}\n\n\n@__export('con_fff8')\ndef get_user_info(farm_id: int, user: str):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    user_deposit = __user_deposits[farm_id, user]\n    __update_global_xwt_rewards()\n    if not user_deposit:\n        return {'deposited': decimal('0.0'), 'pending_rewards': decimal(\n            '0.0'), 'saved_rewards': __saved_rewards[farm_id, user],\n            'pending_xwt_rewards': decimal('0.0'), 'saved_xwt_rewards':\n            __saved_xwt_rewards[farm_id, user]}\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    current_xwt_rpt = __cumulative_xwt_rpt[0]\n    last_xwt_rpt = user_deposit.get('last_xwt_reward_per_token', decimal('0.0')\n        )\n    pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt) * user_deposit[\n        'amount']\n    pending_rewards = max(decimal('0.0'), pending_rewards)\n    pending_xwt_rewards = max(decimal('0.0'), pending_xwt_rewards)\n    return {'deposited': user_deposit['amount'], 'pending_rewards':\n        pending_rewards, 'saved_rewards': __saved_rewards[farm_id, user],\n        'pending_xwt_rewards': pending_xwt_rewards, 'saved_xwt_rewards':\n        __saved_xwt_rewards[farm_id, user], 'saved_referral_rewards':\n        __referral_rewards_saved[farm_id, user]}\n\n\n@__export('con_fff8')\ndef get_all_farms():\n    return __farm_counter.get()\n\n\n@__export('con_fff8')\ndef set_farm_creation_fee(new_fee: float):\n    new_fee = new_fee + decimal('0.0')\n    __only_owner()\n    assert new_fee >= 0, 'Fee must be non-negative'\n    __farm_creation_fee.set(new_fee)\n\n\n@__export('con_fff8')\ndef get_farm_creation_fee():\n    return __farm_creation_fee.get()\n\n\n@__export('con_fff8')\ndef set_referral_bonus(new_bonus: float):\n    new_bonus = new_bonus + decimal('0.0')\n    __only_owner()\n    assert new_bonus > 0, 'Referral bonus must be positive'\n    old_bonus = __referral_bonus_amount.get()\n    __referral_bonus_amount.set(new_bonus)\n    __ReferralBonusChanged({'old_bonus': old_bonus + decimal('0.0'),\n        'new_bonus': new_bonus + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fff8')\ndef deposit_referral_commission(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller\n        )\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n    __ReferralCommissionDeposited({'amount': amount + decimal('0.0'),\n        'deposited_by': ctx.caller, 'total_pool': \n        __referral_commission_pool.get() + decimal('0.0')})\n\n\n@__export('con_fff8')\ndef get_referral_commission_pool_info():\n    return {'total_commission_pool': __referral_commission_pool.get(),\n        'commission_paid': __referral_commission_paid.get(),\n        'remaining_commission': __referral_commission_pool.get() -\n        __referral_commission_paid.get()}\n\n\n@__export('con_fff8')\ndef get_xwt_pool_info():\n    return {'total_xwt_pool': __xwt_pool_total.get(), 'xwt_rewards_paid':\n        __xwt_rewards_paid.get(), 'remaining_xwt': __xwt_pool_total.get() -\n        __xwt_rewards_paid.get(), 'global_total_staked':\n        __global_total_staked.get()}\n\n\n@__export('con_fff8')\ndef get_referral_stats(user: str):\n    farm_1_earnings = __referral_earnings_by_farm[user, 1]\n    farm_earnings = {}\n    if farm_1_earnings > 0 and __farms[1]:\n        farm_earnings[1] = {'farm_id': 1, 'earnings': farm_1_earnings,\n            'reward_token': XWT_CONTRACT}\n    return {'total_earnings': __total_referral_earnings[user],\n        'earnings_by_farm': farm_earnings, 'referrals_count':\n        __referral_count[user], 'referrer': __user_referrers[user],\n        'has_deposits': __has_any_deposit(user), 'reward_token': XWT_CONTRACT}\n\n\n@__export('con_fff8')\ndef get_referral_xwt_rewards(user: str):\n    return {'saved_referral_rewards': __referral_rewards_saved[1, user],\n        'saved_xwt_farming_rewards': __saved_xwt_rewards[1, user],\n        'reward_token': XWT_CONTRACT, 'total_referral_earnings':\n        __total_referral_earnings[user]}\n\n\n@__export('con_fff8')\ndef get_referral_bonus_amount():\n    return {'bonus_amount': __referral_bonus_amount.get(), 'reward_token':\n        XWT_CONTRACT, 'description':\n        'Configurable amount of XWT tokens awarded per referral'}\n\n\n@__export('con_fff8')\ndef set_xwt_daily_rate(new_rate: float):\n    new_rate = new_rate + decimal('0.0')\n    __only_owner()\n    assert new_rate > 0, 'Daily rate must be positive'\n    assert new_rate <= decimal('0.1'\n        ), 'Daily rate cannot exceed 10% for safety'\n    __update_global_xwt_rewards()\n    old_rate = __xwt_daily_rate.get()\n    __xwt_daily_rate.set(new_rate)\n    __XWTDailyRateChanged({'old_rate': old_rate + decimal('0.0'),\n        'new_rate': new_rate + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fff8')\ndef get_xwt_daily_rate_info():\n    current_rate = __xwt_daily_rate.get()\n    available_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    daily_distribution = (available_balance * current_rate if \n        available_balance > 0 else decimal('0.0'))\n    return {'daily_rate': current_rate, 'daily_rate_percentage': \n        current_rate * 100, 'available_xwt_balance': available_balance,\n        'daily_xwt_distribution': daily_distribution, 'global_total_staked':\n        __global_total_staked.get(), 'description':\n        'Daily percentage of available XWT balance distributed as rewards'}\n\n\n@__export('con_fff8')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    farm_id = farm_id // 1\n    __only_owner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_fff8')\ndef transfer_from_referral_to_farming_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    assert available_referral_pool >= amount, 'Insufficient funds in referral commission pool'\n    __referral_commission_pool.set(__referral_commission_pool.get() - amount)\n    __xwt_pool_total.set(__xwt_pool_total.get() + amount)\n\n\n@__export('con_fff8')\ndef transfer_from_farming_to_referral_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_farming_pool = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    assert available_farming_pool >= amount, 'Insufficient funds in farming XWT pool'\n    __xwt_pool_total.set(__xwt_pool_total.get() - amount)\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n"
            },
            {
                "key": "con_fff8.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fff8.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        5,
                        7,
                        16,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_fff8.cumulative_rpt:1",
                "value": {
                    "__fixed__": "4.930555555555555555555555555522"
                }
            },
            {
                "key": "con_fff8.cumulative_rpt:2",
                "value": {
                    "__fixed__": "0.004684027777777777777777777774"
                }
            },
            {
                "key": "con_fff8.cumulative_rpt:6",
                "value": {
                    "__fixed__": "0.000158275462962962962962962961"
                }
            },
            {
                "key": "con_fff8.cumulative_xwt_rpt:0",
                "value": {
                    "__fixed__": "0.002896303631984739558258333444"
                }
            },
            {
                "key": "con_fff8.farm_counter",
                "value": 6
            },
            {
                "key": "con_fff8.farm_creation_fee",
                "value": {
                    "__fixed__": "5E+3"
                }
            },
            {
                "key": "con_fff8.farms:1",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            7,
                            18,
                            40,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            7,
                            18,
                            40,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "3E+2"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+4"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.11574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            8,
                            34,
                            32,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff8.farms:2",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_pi",
                    "reward_token": "con_tiger",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            7,
                            22,
                            16,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            7,
                            22,
                            16,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "3E+3"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+2"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.001157407407407407407407407407"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            8,
                            40,
                            58,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff8.farms:3",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_pi",
                    "reward_token": "con_stellar",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            7,
                            22,
                            55,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            7,
                            22,
                            55,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "1E+4"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.011574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            7,
                            28,
                            10,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff8.farms:4",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_stellar",
                    "reward_token": "con_stellar",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            7,
                            29,
                            27,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            7,
                            29,
                            27,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "111111"
                    },
                    "reward_per_second": {
                        "__fixed__": "1.286006944444444444444444444444"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            7,
                            29,
                            27,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff8.farms:5",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_xwt",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            7,
                            30,
                            10,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            7,
                            30,
                            10,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.011574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            7,
                            30,
                            10,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff8.farms:6",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "staked_token": "con_xwt",
                    "reward_token": "con_stellar",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            7,
                            31,
                            17,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            6,
                            7,
                            31,
                            17,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "6E+4"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.011574074074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            5,
                            8,
                            35,
                            24,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fff8.global_last_update",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        5,
                        8,
                        40,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_fff8.global_total_staked",
                "value": {
                    "__fixed__": "7.33E+4"
                }
            },
            {
                "key": "con_fff8.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fff8.referral_bonus_amount",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_fff8.referral_commission_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff8.referral_commission_pool",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff8.rewards_paid:1",
                "value": {
                    "__fixed__": "17.1874999999999999999999999998"
                }
            },
            {
                "key": "con_fff8.rewards_paid:2",
                "value": {
                    "__fixed__": "9.368055555555555555555555548"
                }
            },
            {
                "key": "con_fff8.saved_rewards:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "26.0416666666666666666666666664"
                }
            },
            {
                "key": "con_fff8.saved_rewards:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fff8.saved_rewards:6:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "4.44444444444444444444444438"
                }
            },
            {
                "key": "con_fff8.saved_rewards:6:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "2.28009259259259259259259256"
                }
            },
            {
                "key": "con_fff8.saved_xwt_rewards:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "0.1059027777777777777777777776"
                }
            },
            {
                "key": "con_fff8.saved_xwt_rewards:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.0032533883327881423342607824"
                }
            },
            {
                "key": "con_fff8.saved_xwt_rewards:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "0.021630236794171220400728597"
                }
            },
            {
                "key": "con_fff8.saved_xwt_rewards:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fff8.saved_xwt_rewards:3:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "0.19081581581581581581581581"
                }
            },
            {
                "key": "con_fff8.saved_xwt_rewards:6:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "1.00112504024380679759906689"
                }
            },
            {
                "key": "con_fff8.saved_xwt_rewards:6:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.38452563353103440701009322"
                }
            },
            {
                "key": "con_fff8.user_deposits:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.001059027777777777777777777776"
                    }
                }
            },
            {
                "key": "con_fff8.user_deposits:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "2E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "4.930555555555555555555555555522"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.002877984804551172807741603826"
                    }
                }
            },
            {
                "key": "con_fff8.user_deposits:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.004233796296296296296296296294"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.002830552186341120767350275543"
                    }
                }
            },
            {
                "key": "con_fff8.user_deposits:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "2E+3"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.004684027777777777777777777774"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.002896303631984739558258333444"
                    }
                }
            },
            {
                "key": "con_fff8.user_deposits:3:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+4"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.001736253298753298753298753296"
                    }
                }
            },
            {
                "key": "con_fff8.user_deposits:6:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "4E+4"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.000158275462962962962962962961"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.002880482105770987793051569083"
                    }
                }
            },
            {
                "key": "con_fff8.user_deposits:6:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "2E+4"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0.000125578703703703703703703702"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.002873935000326378709450480214"
                    }
                }
            },
            {
                "key": "con_fff8.xwt_daily_rate",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "con_fff8.xwt_pool_total",
                "value": {
                    "__fixed__": "3E+4"
                }
            },
            {
                "key": "con_fff8.xwt_rewards_paid",
                "value": {
                    "__fixed__": "3.1289542254333775012988720588"
                }
            },
            {
                "key": "con_fire.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_fire', name='balances')\n__metadata = Hash(contract='con_fire', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_fire', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_fire', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'fire'\n    __metadata['token_symbol'] = 'fire'\n    __metadata['token_logo_url'\n        ] = 'https://s2.coinmarketcap.com/static/img/coins/64x64/6636.png'\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 1000000000\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_fire')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_fire')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_fire')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_fire')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_fire')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_fire.__developer__",
                "value": "6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664"
            },
            {
                "key": "con_fire.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        5,
                        2,
                        59,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_fire.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "1.9E+5"
                }
            },
            {
                "key": "con_fire.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fire.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "3.799E+5"
                }
            },
            {
                "key": "con_fire.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fire.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fire.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "__fixed__": "999377476"
                }
            },
            {
                "key": "con_fire.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fire.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_fire.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_mf_02",
                "value": 900
            },
            {
                "key": "con_fire.balances:con_fff06",
                "value": {
                    "__fixed__": "22424"
                }
            },
            {
                "key": "con_fire.balances:con_fff5",
                "value": {
                    "__fixed__": "3.01E+4"
                }
            },
            {
                "key": "con_fire.balances:con_mf_02",
                "value": 100
            },
            {
                "key": "con_fire.metadata:operator",
                "value": "6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664"
            },
            {
                "key": "con_fire.metadata:token_logo_url",
                "value": "https://s2.coinmarketcap.com/static/img/coins/64x64/6636.png"
            },
            {
                "key": "con_fire.metadata:token_name",
                "value": "fire"
            },
            {
                "key": "con_fire.metadata:token_symbol",
                "value": "fire"
            },
            {
                "key": "con_fire.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_fire.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_fm5.__code__",
                "value": "XWT_CONTRACT = 'con_xwt'\n__owner = Variable(contract='con_fm5', name='owner')\n__farm_counter = Variable(contract='con_fm5', name='farm_counter')\n__farm_creation_fee = Variable(contract='con_fm5', name='farm_creation_fee')\n__farms = Hash(contract='con_fm5', name='farms')\n__user_deposits = Hash(contract='con_fm5', name='user_deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_fm5',\n    name='saved_rewards')\n__cumulative_rpt = Hash(default_value=decimal('0.0'), contract='con_fm5',\n    name='cumulative_rpt')\n__rewards_paid = Hash(default_value=decimal('0.0'), contract='con_fm5',\n    name='rewards_paid')\n__user_referrers = Hash(default_value=None, contract='con_fm5', name=\n    'user_referrers')\n__total_referral_earnings = Hash(default_value=decimal('0.0'), contract=\n    'con_fm5', name='total_referral_earnings')\n__referral_earnings_by_farm = Hash(default_value=decimal('0.0'), contract=\n    'con_fm5', name='referral_earnings_by_farm')\n__referral_count = Hash(default_value=0, contract='con_fm5', name=\n    'referral_count')\n__referral_bonus_amount = Variable(contract='con_fm5', name=\n    'referral_bonus_amount')\n__referral_commission_pool = Variable(contract='con_fm5', name=\n    'referral_commission_pool')\n__referral_commission_paid = Variable(contract='con_fm5', name=\n    'referral_commission_paid')\n__referral_rewards_saved = Hash(default_value=decimal('0.0'), contract=\n    'con_fm5', name='referral_rewards_saved')\n__xwt_pool_total = Variable(contract='con_fm5', name='xwt_pool_total')\n__saved_xwt_rewards = Hash(default_value=decimal('0.0'), contract='con_fm5',\n    name='saved_xwt_rewards')\n__cumulative_xwt_rpt = Hash(default_value=decimal('0.0'), contract=\n    'con_fm5', name='cumulative_xwt_rpt')\n__xwt_rewards_paid = Variable(contract='con_fm5', name='xwt_rewards_paid')\n__global_total_staked = Variable(contract='con_fm5', name='global_total_staked'\n    )\n__global_last_update = Variable(contract='con_fm5', name='global_last_update')\n__xwt_daily_rate = Variable(contract='con_fm5', name='xwt_daily_rate')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'staked_token': {'type': str, 'idx': True}, 'reward_token': {'type':\n    str}, 'duration_days': {'type': int}, 'reward_amount': {'type': (int,\n    float, decimal)}}, contract='con_fm5', name='FarmCreated')\n__FarmIncreased = LogEvent(event='FarmIncreased', params={'farm_id': {\n    'type': int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'additional_rewards': {'type': (int, float, decimal)}}, contract=\n    'con_fm5', name='FarmIncreased')\n__UserDeposit = LogEvent(event='UserDeposit', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fm5', name='UserDeposit')\n__UserWithdraw = LogEvent(event='UserWithdraw', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_fm5', name='UserWithdraw')\n__RewardsClaimed = LogEvent(event='RewardsClaimed', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_fm5', name='RewardsClaimed'\n    )\n__ReferralSet = LogEvent(event='ReferralSet', params={'user': {'type': str,\n    'idx': True}, 'referrer': {'type': str, 'idx': True}}, contract=\n    'con_fm5', name='ReferralSet')\n__ReferralReward = LogEvent(event='ReferralReward', params={'referrer': {\n    'type': str, 'idx': True}, 'referred_user': {'type': str, 'idx': True},\n    'farm_id': {'type': int, 'idx': True}, 'deposit_amount': {'type': (int,\n    float, decimal)}, 'reward_amount': {'type': (int, float, decimal)},\n    'reward_token': {'type': str}}, contract='con_fm5', name='ReferralReward')\n__ReferralBonusChanged = LogEvent(event='ReferralBonusChanged', params={\n    'old_bonus': {'type': (int, float, decimal)}, 'new_bonus': {'type': (\n    int, float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': \n    True}}, contract='con_fm5', name='ReferralBonusChanged')\n__XWTDailyRateChanged = LogEvent(event='XWTDailyRateChanged', params={\n    'old_rate': {'type': (int, float, decimal)}, 'new_rate': {'type': (int,\n    float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': True}\n    }, contract='con_fm5', name='XWTDailyRateChanged')\n__ReferralCommissionDeposited = LogEvent(event=\n    'ReferralCommissionDeposited', params={'amount': {'type': (int, float,\n    decimal), 'idx': True}, 'deposited_by': {'type': str, 'idx': True},\n    'total_pool': {'type': (int, float, decimal)}}, contract='con_fm5',\n    name='ReferralCommissionDeposited')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(0)\n    __farm_creation_fee.set(decimal('5000.0'))\n    __referral_bonus_amount.set(decimal('100.0'))\n    __xwt_pool_total.set(decimal('0.0'))\n    __xwt_rewards_paid.set(decimal('0.0'))\n    __global_total_staked.set(decimal('0.0'))\n    __global_last_update.set(now)\n    __xwt_daily_rate.set(decimal('0.01'))\n    __referral_commission_pool.set(decimal('0.0'))\n    __referral_commission_paid.set(decimal('0.0'))\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm, 'Farm does not exist'\n    assert farm['creator'\n        ] == ctx.caller, 'Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id], 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm is not active'\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return\n    current_time = min(now, farm['end_time'])\n    if farm['active']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.seconds\n        if farm['total_staked'] > 0 and time_diff_seconds > 0:\n            max_rewards_available = farm['total_rewards'] - __rewards_paid[\n                farm_id]\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_rewards_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                __cumulative_rpt[farm_id] = __cumulative_rpt[farm_id\n                    ] + reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __calculate_active_total_staked():\n    active_total = decimal('0.0')\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        farm = __farms[i]\n        if farm and farm['active'] and now >= farm['start_time'\n            ] and now <= farm['end_time']:\n            active_total += farm['total_staked']\n    return active_total\n\n\ndef __update_global_xwt_rewards():\n    active_total_staked = __calculate_active_total_staked()\n    if active_total_staked > 0:\n        time_diff = now - __global_last_update.get()\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            xwt_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n            if xwt_balance > 0:\n                daily_rate = __xwt_daily_rate.get()\n                seconds_per_day = 86400\n                xwt_per_second = xwt_balance * daily_rate / seconds_per_day\n                xwt_reward_increment = (time_diff_seconds * xwt_per_second /\n                    active_total_staked)\n                __cumulative_xwt_rpt[0] = __cumulative_xwt_rpt[0\n                    ] + xwt_reward_increment\n    __global_last_update.set(now)\n\n\ndef __has_any_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            return True\n    return False\n\n\ndef __has_active_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            farm = __farms[i]\n            if farm and farm['active'] and now >= farm['start_time'\n                ] and now <= farm['end_time']:\n                return True\n    return False\n\n\ndef __calculate_referral_bonus():\n    return __referral_bonus_amount.get()\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    user_deposit = __user_deposits[farm_id, user]\n    if not user_deposit:\n        return\n    __update_global_xwt_rewards()\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] = __saved_rewards[farm_id, user\n            ] + pending_rewards\n    farm = __farms[farm_id]\n    farm_is_active = farm and farm['active'] and now >= farm['start_time'\n        ] and now <= farm['end_time']\n    if farm_is_active:\n        available_xwt = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        current_xwt_rpt = __cumulative_xwt_rpt[0]\n        last_xwt_rpt = user_deposit['last_xwt_reward_per_token']\n        if available_xwt > 0:\n            pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt\n                ) * user_deposit['amount']\n            if pending_xwt_rewards > 0:\n                __saved_xwt_rewards[farm_id, user] = __saved_xwt_rewards[\n                    farm_id, user] + pending_xwt_rewards\n        user_deposit['last_xwt_reward_per_token'] = current_xwt_rpt\n    user_deposit['last_reward_per_token'] = current_cumulative_rpt\n    __user_deposits[farm_id, user] = user_deposit\n\n\n@__export('con_fm5')\ndef create_farm(staked_token: str, reward_token: str, duration_days: int,\n    reward_amount: float):\n    duration_days = duration_days // 1\n    reward_amount = reward_amount + decimal('0.0')\n    assert duration_days > 0, 'Duration must be positive'\n    assert reward_amount > 0, 'Reward amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    staked_token_contract = importlib.import_module(staked_token)\n    reward_token_contract = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(staked_token_contract, token_interface\n        ), 'Invalid staked token interface'\n    assert importlib.enforce_interface(reward_token_contract, token_interface\n        ), 'Invalid reward token interface'\n    reward_token_contract.transfer_from(amount=reward_amount, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get() + 1\n    __farm_counter.set(farm_id)\n    start_time = now\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    total_seconds = duration_days * 24 * 3600\n    reward_per_second = reward_amount / total_seconds\n    farm_data = {'creator': ctx.caller, 'staked_token': staked_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'total_staked': decimal('0.0'), 'total_rewards':\n        reward_amount, 'reward_per_second': reward_per_second,\n        'last_update': start_time, 'active': True, 'verified': False,\n        'suspicious': False}\n    __farms[farm_id] = farm_data\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'staked_token': staked_token, 'reward_token': reward_token,\n        'duration_days': duration_days, 'reward_amount': reward_amount})\n    return farm_id\n\n\n@__export('con_fm5')\ndef increase_farm_rewards(farm_id: int, additional_rewards: float):\n    farm_id = farm_id // 1\n    additional_rewards = additional_rewards + decimal('0.0')\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    assert additional_rewards > 0, 'Additional rewards must be positive'\n    farm = __farms[farm_id]\n    assert farm['active'], 'Farm is not active'\n    assert now <= farm['end_time'], 'Farm has ended'\n    assert not farm['suspicious'\n        ], 'Cannot increase rewards for suspicious farm'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    reward_token_contract = importlib.import_module(farm['reward_token'])\n    reward_token_contract.transfer_from(amount=additional_rewards, to=ctx.\n        this, main_account=ctx.caller)\n    __update_farm_rewards(farm_id)\n    remaining_time = farm['end_time'] - now\n    remaining_seconds = (remaining_time.days * 24 * 3600 + remaining_time.\n        seconds)\n    if remaining_seconds > 0:\n        farm['total_rewards'] = farm['total_rewards'] + additional_rewards\n        current_remaining_rewards = farm['total_rewards'] - __rewards_paid[\n            farm_id]\n        farm['reward_per_second'\n            ] = current_remaining_rewards / remaining_seconds\n        __farms[farm_id] = farm\n    __FarmIncreased({'farm_id': farm_id, 'creator': ctx.caller,\n        'additional_rewards': additional_rewards + decimal('0.0')})\n\n\n@__export('con_fm5')\ndef deposit(farm_id: int, amount: float, referrer: str=None):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    if referrer:\n        referrer = referrer + ''\n    __farm_exists(farm_id)\n    __farm_active(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    farm = __farms[farm_id]\n    assert not farm['suspicious'], 'Cannot deposit in suspicious farm'\n    if referrer and not __user_referrers[ctx.caller]:\n        assert referrer != ctx.caller, 'Cannot refer yourself'\n        assert referrer != __owner.get(), 'Owner cannot be a referrer'\n        __user_referrers[ctx.caller] = referrer\n        __referral_count[referrer] = __referral_count[referrer] + 1\n        __ReferralSet({'user': ctx.caller, 'referrer': referrer})\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer_from(amount=amount, to=ctx.this,\n        main_account=ctx.caller)\n    is_first_deposit_in_farm = not __user_deposits[farm_id, ctx.caller]\n    current_referrer = __user_referrers[ctx.caller]\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    if current_deposit:\n        __harvest_user_rewards(farm_id, ctx.caller)\n        current_deposit = __user_deposits[farm_id, ctx.caller]\n    else:\n        current_deposit = {'amount': decimal('0.0'),\n            'last_reward_per_token': __cumulative_rpt[farm_id],\n            'last_xwt_reward_per_token': __cumulative_xwt_rpt[0]}\n    current_deposit['amount'] = current_deposit['amount'] + amount\n    if 'last_xwt_reward_per_token' not in current_deposit:\n        current_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n    __user_deposits[farm_id, ctx.caller] = current_deposit\n    farm['total_staked'] = farm['total_staked'] + amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    if not current_deposit or current_deposit.get('amount', 0) == amount:\n        __harvest_user_rewards(farm_id, ctx.caller)\n    if current_referrer and current_referrer != __owner.get(\n        ) and __has_any_deposit(current_referrer) and is_first_deposit_in_farm:\n        assert __farms[1\n            ], 'Farm 1 (XWT farm) must exist to process referral rewards'\n        referral_bonus = __calculate_referral_bonus()\n        __referral_rewards_saved[1, current_referrer\n            ] = __referral_rewards_saved[1, current_referrer] + referral_bonus\n        __total_referral_earnings[current_referrer\n            ] = __total_referral_earnings[current_referrer] + referral_bonus\n        __referral_earnings_by_farm[current_referrer, 1\n            ] = __referral_earnings_by_farm[current_referrer, 1\n            ] + referral_bonus\n        __ReferralReward({'referrer': current_referrer, 'referred_user':\n            ctx.caller, 'farm_id': farm_id, 'deposit_amount': amount +\n            decimal('0.0'), 'reward_amount': referral_bonus + decimal('0.0'\n            ), 'reward_token': XWT_CONTRACT})\n    __UserDeposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount +\n        decimal('0.0')})\n\n\n@__export('con_fm5')\ndef withdraw(farm_id: int, amount: float):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    __farm_exists(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    user_deposit = __user_deposits[farm_id, ctx.caller]\n    assert user_deposit, 'No deposit found'\n    assert user_deposit['amount'] >= amount, 'Insufficient deposit'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_deposit['amount'] = user_deposit['amount'] - amount\n    if user_deposit['amount'] == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        __user_deposits[farm_id, ctx.caller] = user_deposit\n    farm['total_staked'] = farm['total_staked'] - amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer(amount=amount, to=ctx.caller)\n    __UserWithdraw({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        amount + decimal('0.0')})\n\n\n@__export('con_fm5')\ndef claim_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    saved_xwt_farming = __saved_xwt_rewards[farm_id, ctx.caller]\n    available_xwt_farming = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    user_xwt_farming_rewards = min(saved_xwt_farming, available_xwt_farming\n        ) if available_xwt_farming > 0 else decimal('0.0')\n    saved_referral_commissions = decimal('0.0')\n    if farm_id == 1:\n        saved_referral_commissions = __referral_rewards_saved[1, ctx.caller]\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    user_referral_rewards = min(saved_referral_commissions,\n        available_referral_pool) if available_referral_pool > 0 else decimal(\n        '0.0')\n    total_xwt_rewards = user_xwt_farming_rewards + user_referral_rewards\n    assert user_rewards > 0 or user_xwt_farming_rewards > 0 or user_referral_rewards > 0, 'No rewards to claim'\n    if user_rewards > 0:\n        farm = __farms[farm_id]\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= user_rewards, 'Insufficient reward token balance in contract'\n        __saved_rewards[farm_id, ctx.caller] = decimal('0.0')\n        __rewards_paid[farm_id] = __rewards_paid[farm_id] + user_rewards\n        reward_token_contract.transfer(amount=user_rewards + decimal('0.0'),\n            to=ctx.caller)\n    total_xwt_transferred = decimal('0.0')\n    if user_xwt_farming_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __saved_xwt_rewards[farm_id, ctx.caller] = __saved_xwt_rewards[\n            farm_id, ctx.caller] - user_xwt_farming_rewards\n        __xwt_rewards_paid.set(__xwt_rewards_paid.get() +\n            user_xwt_farming_rewards)\n        xwt_token.transfer(amount=user_xwt_farming_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_xwt_farming_rewards\n    if user_referral_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __referral_rewards_saved[farm_id, ctx.caller\n            ] = __referral_rewards_saved[farm_id, ctx.caller\n            ] - user_referral_rewards\n        __referral_commission_paid.set(__referral_commission_paid.get() +\n            user_referral_rewards)\n        xwt_token.transfer(amount=user_referral_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_referral_rewards\n    __RewardsClaimed({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        user_rewards + total_xwt_transferred + decimal('0.0')})\n\n\ndef __calculate_all_pending_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    total_pending = decimal('0.0')\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    time_diff_seconds = time_diff.seconds\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    total_accumulated_rewards = current_cumulative_rpt * farm['total_staked']\n    total_pending = total_accumulated_rewards - __rewards_paid[farm_id]\n    max_possible_pending = farm['total_rewards'] - __rewards_paid[farm_id]\n    total_pending = min(total_pending, max_possible_pending)\n    return max(decimal('0.0'), total_pending)\n\n\n@__export('con_fm5')\ndef withdraw_remaining_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    farm = __farms[farm_id]\n    assert now > farm['end_time'], 'Farm has not ended yet'\n    assert not farm['suspicious'], 'Cannot withdraw from suspicious farm'\n    total_pending_rewards = __calculate_all_pending_rewards(farm_id)\n    total_obligations = __rewards_paid[farm_id] + total_pending_rewards\n    remaining_rewards = farm['total_rewards'] - total_obligations\n    assert remaining_rewards >= 0, 'Cannot withdraw: pending rewards exceed available funds'\n    if remaining_rewards > 0:\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= remaining_rewards, 'Insufficient contract balance for withdrawal'\n        reward_token_contract.transfer(amount=remaining_rewards + decimal(\n            '0.0'), to=ctx.caller)\n        farm['active'] = False\n        __farms[farm_id] = farm\n    else:\n        farm['active'] = False\n        __farms[farm_id] = farm\n\n\n@__export('con_fm5')\ndef get_farm_info(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    current_apr = decimal('0.0')\n    if farm['total_staked'] > 0 and farm['active']:\n        seconds_in_year = 365 * 24 * 3600\n        annual_rewards_per_token = farm['reward_per_second'\n            ] * seconds_in_year / farm['total_staked']\n        current_apr = annual_rewards_per_token * 100\n    return {**farm, 'current_apr': current_apr, 'remaining_rewards': farm[\n        'total_rewards'] - __rewards_paid[farm_id]}\n\n\n@__export('con_fm5')\ndef get_user_info(farm_id: int, user: str):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    user_deposit = __user_deposits[farm_id, user]\n    __update_global_xwt_rewards()\n    if not user_deposit:\n        return {'deposited': decimal('0.0'), 'pending_rewards': decimal(\n            '0.0'), 'saved_rewards': __saved_rewards[farm_id, user],\n            'pending_xwt_rewards': decimal('0.0'), 'saved_xwt_rewards':\n            __saved_xwt_rewards[farm_id, user]}\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    time_diff_seconds = time_diff.seconds\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    current_xwt_rpt = __cumulative_xwt_rpt[0]\n    last_xwt_rpt = user_deposit.get('last_xwt_reward_per_token', decimal('0.0')\n        )\n    pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt) * user_deposit[\n        'amount']\n    pending_rewards = max(decimal('0.0'), pending_rewards)\n    pending_xwt_rewards = max(decimal('0.0'), pending_xwt_rewards)\n    return {'deposited': user_deposit['amount'], 'pending_rewards':\n        pending_rewards, 'saved_rewards': __saved_rewards[farm_id, user],\n        'pending_xwt_rewards': pending_xwt_rewards, 'saved_xwt_rewards':\n        __saved_xwt_rewards[farm_id, user], 'saved_referral_rewards':\n        __referral_rewards_saved[farm_id, user]}\n\n\n@__export('con_fm5')\ndef get_all_farms():\n    return __farm_counter.get()\n\n\n@__export('con_fm5')\ndef set_farm_creation_fee(new_fee: float):\n    new_fee = new_fee + decimal('0.0')\n    __only_owner()\n    assert new_fee >= 0, 'Fee must be non-negative'\n    __farm_creation_fee.set(new_fee)\n\n\n@__export('con_fm5')\ndef get_farm_creation_fee():\n    return __farm_creation_fee.get()\n\n\n@__export('con_fm5')\ndef set_referral_bonus(new_bonus: float):\n    new_bonus = new_bonus + decimal('0.0')\n    __only_owner()\n    assert new_bonus > 0, 'Referral bonus must be positive'\n    old_bonus = __referral_bonus_amount.get()\n    __referral_bonus_amount.set(new_bonus)\n    __ReferralBonusChanged({'old_bonus': old_bonus + decimal('0.0'),\n        'new_bonus': new_bonus + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fm5')\ndef deposit_referral_commission(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller\n        )\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n    __ReferralCommissionDeposited({'amount': amount + decimal('0.0'),\n        'deposited_by': ctx.caller, 'total_pool': \n        __referral_commission_pool.get() + decimal('0.0')})\n\n\n@__export('con_fm5')\ndef get_referral_commission_pool_info():\n    return {'total_commission_pool': __referral_commission_pool.get(),\n        'commission_paid': __referral_commission_paid.get(),\n        'remaining_commission': __referral_commission_pool.get() -\n        __referral_commission_paid.get()}\n\n\n@__export('con_fm5')\ndef get_xwt_pool_info():\n    return {'total_xwt_pool': __xwt_pool_total.get(), 'xwt_rewards_paid':\n        __xwt_rewards_paid.get(), 'remaining_xwt': __xwt_pool_total.get() -\n        __xwt_rewards_paid.get(), 'global_total_staked':\n        __global_total_staked.get()}\n\n\n@__export('con_fm5')\ndef get_referral_stats(user: str):\n    farm_1_earnings = __referral_earnings_by_farm[user, 1]\n    farm_earnings = {}\n    if farm_1_earnings > 0 and __farms[1]:\n        farm_earnings[1] = {'farm_id': 1, 'earnings': farm_1_earnings,\n            'reward_token': XWT_CONTRACT}\n    return {'total_earnings': __total_referral_earnings[user],\n        'earnings_by_farm': farm_earnings, 'referrals_count':\n        __referral_count[user], 'referrer': __user_referrers[user],\n        'has_deposits': __has_any_deposit(user), 'reward_token': XWT_CONTRACT}\n\n\n@__export('con_fm5')\ndef get_referral_xwt_rewards(user: str):\n    return {'saved_referral_rewards': __referral_rewards_saved[1, user],\n        'saved_xwt_farming_rewards': __saved_xwt_rewards[1, user],\n        'reward_token': XWT_CONTRACT, 'total_referral_earnings':\n        __total_referral_earnings[user]}\n\n\n@__export('con_fm5')\ndef get_referral_bonus_amount():\n    return {'bonus_amount': __referral_bonus_amount.get(), 'reward_token':\n        XWT_CONTRACT, 'description':\n        'Configurable amount of XWT tokens awarded per referral'}\n\n\n@__export('con_fm5')\ndef set_xwt_daily_rate(new_rate: float):\n    new_rate = new_rate + decimal('0.0')\n    __only_owner()\n    assert new_rate > 0, 'Daily rate must be positive'\n    assert new_rate <= decimal('0.1'\n        ), 'Daily rate cannot exceed 10% for safety'\n    __update_global_xwt_rewards()\n    old_rate = __xwt_daily_rate.get()\n    __xwt_daily_rate.set(new_rate)\n    __XWTDailyRateChanged({'old_rate': old_rate + decimal('0.0'),\n        'new_rate': new_rate + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_fm5')\ndef get_xwt_daily_rate_info():\n    current_rate = __xwt_daily_rate.get()\n    available_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    daily_distribution = (available_balance * current_rate if \n        available_balance > 0 else decimal('0.0'))\n    return {'daily_rate': current_rate, 'daily_rate_percentage': \n        current_rate * 100, 'available_xwt_balance': available_balance,\n        'daily_xwt_distribution': daily_distribution, 'global_total_staked':\n        __global_total_staked.get(), 'description':\n        'Daily percentage of available XWT balance distributed as rewards'}\n\n\n@__export('con_fm5')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    farm_id = farm_id // 1\n    __only_owner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_fm5')\ndef transfer_from_referral_to_farming_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    assert available_referral_pool >= amount, 'Insufficient funds in referral commission pool'\n    __referral_commission_pool.set(__referral_commission_pool.get() - amount)\n    __xwt_pool_total.set(__xwt_pool_total.get() + amount)\n\n\n@__export('con_fm5')\ndef transfer_from_farming_to_referral_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_farming_pool = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    assert available_farming_pool >= amount, 'Insufficient funds in farming XWT pool'\n    __xwt_pool_total.set(__xwt_pool_total.get() - amount)\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n"
            },
            {
                "key": "con_fm5.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fm5.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        3,
                        53,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_fm5.cumulative_rpt:2",
                "value": {
                    "__fixed__": "0.012242213804713804713804713804"
                }
            },
            {
                "key": "con_fm5.cumulative_xwt_rpt:0",
                "value": {
                    "__fixed__": "0.02105587121212121212121212121"
                }
            },
            {
                "key": "con_fm5.farm_counter",
                "value": 3
            },
            {
                "key": "con_fm5.farm_creation_fee",
                "value": {
                    "__fixed__": "5E+3"
                }
            },
            {
                "key": "con_fm5.farms:1",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            0,
                            5,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            11,
                            4,
                            0,
                            5,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.003858024691358024691358024691"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            0,
                            5,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fm5.farms:2",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            0,
                            51,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            10,
                            4,
                            0,
                            51,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "1E+2"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.005787037037037037037037037037"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            18,
                            21,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fm5.farms:3",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_tiger",
                    "reward_token": "con_tiger",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            1,
                            46,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            11,
                            16,
                            4,
                            1,
                            46,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.00011574074074074074074074074"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            1,
                            46,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_fm5.global_last_update",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        4,
                        18,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_fm5.global_total_staked",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_fm5.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_fm5.referral_bonus_amount",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_fm5.referral_commission_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fm5.referral_commission_pool",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_fm5.saved_rewards:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.61026936026936026936026936"
                }
            },
            {
                "key": "con_fm5.saved_xwt_rewards:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "2.0555555555555555555555555554"
                }
            },
            {
                "key": "con_fm5.saved_xwt_rewards:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "0.500315656565656565656565656"
                }
            },
            {
                "key": "con_fm5.user_deposits:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "last_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "last_xwt_reward_per_token": {
                        "__fixed__": "0.020555555555555555555555555554"
                    }
                }
            },
            {
                "key": "con_fm5.user_deposits:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": false
            },
            {
                "key": "con_fm5.xwt_daily_rate",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "con_fm5.xwt_pool_total",
                "value": {
                    "__fixed__": "1.5E+4"
                }
            },
            {
                "key": "con_fm5.xwt_rewards_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_foam.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_foam', name='balances')\n__metadata = Hash(contract='con_foam', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_foam', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_foam', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'FoamTest'\n    __metadata['token_symbol'] = 'Foam'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_foam')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_foam')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_foam')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_foam')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_foam')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_foam.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_foam.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        16,
                        5,
                        4,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_foam.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b",
                "value": 999951710
            },
            {
                "key": "con_foam.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_presale_foam",
                "value": 0
            },
            {
                "key": "con_foam.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_presale_foams",
                "value": 0
            },
            {
                "key": "con_foam.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_sale_foam",
                "value": 0
            },
            {
                "key": "con_foam.balances:con_presale_foam",
                "value": 0
            },
            {
                "key": "con_foam.balances:con_presale_foams",
                "value": 48290
            },
            {
                "key": "con_foam.balances:con_sale_foam",
                "value": 0
            },
            {
                "key": "con_foam.metadata:operator",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_foam.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_foam.metadata:token_name",
                "value": "FoamTest"
            },
            {
                "key": "con_foam.metadata:token_symbol",
                "value": "Foam"
            },
            {
                "key": "con_foam.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_foam.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_games.__code__",
                "value": "__owner = Variable(contract='con_games', name='owner')\n__game_counter = Variable(contract='con_games', name='game_counter')\n__games = Hash(default_value=None, contract='con_games', name='games')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __game_counter.set(0)\n\n\n@__export('con_games')\ndef create_game(name: str, image: str, description: str, external_link: str):\n    assert ctx.caller == __owner.get(), 'Solo el due\u00f1o puede crear juegos.'\n    game_id = __game_counter.get() + 1\n    __game_counter.set(game_id)\n    __games[game_id] = {'name': name, 'image': image, 'description':\n        description, 'external_link': external_link}\n    return f'Juego creado con ID {game_id}'\n\n\n@__export('con_games')\ndef update_game(game_id: int, name: str=None, image: str=None, description:\n    str=None, external_link: str=None):\n    assert ctx.caller == __owner.get(), 'Solo el due\u00f1o puede modificar juegos.'\n    game = __games[game_id]\n    assert game is not None, 'El ID del juego no existe.'\n    if name is not None:\n        game['name'] = name\n    if image is not None:\n        game['image'] = image\n    if description is not None:\n        game['description'] = description\n    if external_link is not None:\n        game['external_link'] = external_link\n    __games[game_id] = game\n    return f'Juego ID {game_id} actualizado.'\n\n\n@__export('con_games')\ndef get_game(game_id: int):\n    game = __games[game_id]\n    assert game is not None, 'El ID del juego no existe.'\n    return game\n\n\n@__export('con_games')\ndef list_games():\n    results = []\n    count = __game_counter.get()\n    for i in range(1, count + 1):\n        g = __games[i]\n        if g is not None:\n            results.append({'game_id': i, 'name': g['name'], 'image': g[\n                'image'], 'description': g['description'], 'external_link':\n                g['external_link']})\n    return results\n"
            },
            {
                "key": "con_games.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_games.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        13,
                        16,
                        41,
                        45,
                        0
                    ]
                }
            },
            {
                "key": "con_games.game_counter",
                "value": 2
            },
            {
                "key": "con_games.games:1",
                "value": {
                    "name": "pruebas",
                    "image": "imagen",
                    "description": "descripcion",
                    "external_link": "link"
                }
            },
            {
                "key": "con_games.games:2",
                "value": {
                    "name": "pruebas2",
                    "image": "imagen2",
                    "description": "descripcion2",
                    "external_link": "link2"
                }
            },
            {
                "key": "con_games.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_gamess.__code__",
                "value": "__owner = Variable(contract='con_gamess', name='owner')\n__game_counter = Variable(contract='con_gamess', name='game_counter')\n__games = Hash(default_value=None, contract='con_gamess', name='games')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __game_counter.set(0)\n\n\n@__export('con_gamess')\ndef create_game(name: str, image: str, description: str, external_link: str):\n    assert ctx.caller == __owner.get(), 'Solo el due\u00f1o puede crear juegos.'\n    game_id = __game_counter.get() + 1\n    __game_counter.set(game_id)\n    __games[game_id] = {'name': name, 'image': image, 'description':\n        description, 'external_link': external_link}\n    return f'Juego creado con ID {game_id}'\n\n\n@__export('con_gamess')\ndef update_game(game_id: int, name: str=None, image: str=None, description:\n    str=None, external_link: str=None):\n    assert ctx.caller == __owner.get(), 'Solo el due\u00f1o puede modificar juegos.'\n    game = __games[game_id]\n    assert game is not None, 'El ID del juego no existe.'\n    if name is not None:\n        game['name'] = name\n    if image is not None:\n        game['image'] = image\n    if description is not None:\n        game['description'] = description\n    if external_link is not None:\n        game['external_link'] = external_link\n    __games[game_id] = game\n    return f'Juego ID {game_id} actualizado.'\n\n\n@__export('con_gamess')\ndef get_game(game_id: int):\n    game = __games[game_id]\n    assert game is not None, 'El ID del juego no existe.'\n    return game\n\n\n@__export('con_gamess')\ndef list_games():\n    results = []\n    count = __game_counter.get()\n    for i in range(1, count + 1):\n        g = __games[i]\n        if g is not None:\n            results.append({'game_id': i, 'name': g['name'], 'image': g[\n                'image'], 'description': g['description'], 'external_link':\n                g['external_link']})\n    return results\n"
            },
            {
                "key": "con_gamess.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_gamess.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        14,
                        11,
                        45,
                        57,
                        0
                    ]
                }
            },
            {
                "key": "con_gamess.game_counter",
                "value": 0
            },
            {
                "key": "con_gamess.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_getthis.__code__",
                "value": "@__export('con_getthis')\ndef exported():\n    return 0\n\n\n@__export('con_getthis')\ndef getthis():\n    exported()\n    return ctx.this\n"
            },
            {
                "key": "con_getthis.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_getthis.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        30,
                        15,
                        30,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_hello.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_hello', name='balances')\n__metadata = Hash(contract='con_hello', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_hello')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_hello.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_hello.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        20,
                        9,
                        50,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_hello.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_hello.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_hello.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_hello.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_hello.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_hello.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_hello1.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_hello1', name='balances')\n__metadata = Hash(contract='con_hello1', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_hello1')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_hello1.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_hello1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        20,
                        9,
                        51,
                        3,
                        0
                    ]
                }
            },
            {
                "key": "con_hello1.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_hello1.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_hello1.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_hello1.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_hello1.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_hello1.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_helloworld.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_helloworld')\ndef test():\n    return 'Hello, World!'\n"
            },
            {
                "key": "con_helloworld.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_helloworld.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        1,
                        13,
                        48,
                        11,
                        0
                    ]
                }
            },
            {
                "key": "con_hotsale_dato.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_hotsale_dato', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_hotsale_dato',\n    name='allowed_tokens')\n__token_symbols = Hash(default_value='', contract='con_hotsale_dato', name=\n    'token_symbols')\n__token_balances = Hash(default_value=0, contract='con_hotsale_dato', name=\n    'token_balances')\n__token_prices = Hash(default_value=decimal('0.0'), contract=\n    'con_hotsale_dato', name='token_prices')\n__token_list = Variable(contract='con_hotsale_dato', name='token_list')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __token_list.set([])\n\n\n@__export('con_hotsale_dato')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    if not __allowed_tokens[token_contract]:\n        __allowed_tokens[token_contract] = True\n        __token_symbols[token_contract] = token_symbol\n        __token_balances[token_contract] = 0\n        tokens = __token_list.get()\n        tokens.append(token_contract)\n        __token_list.set(tokens)\n    return {'contract': token_contract, 'symbol': token_symbol, 'status':\n        'added'}\n\n\n@__export('con_hotsale_dato')\ndef set_token_price(token_contract: str, price_per_xian: float):\n    assert ctx.caller == __owner.get(), 'Only owner can set token price'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    assert price_per_xian > 0, 'Price must be greater than 0'\n    __token_prices[token_contract] = price_per_xian\n\n\n@__export('con_hotsale_dato')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __token_balances[token_contract] += amount\n    return {'success': True, 'amount': amount, 'token': __token_symbols[\n        token_contract], 'new_balance': __token_balances[token_contract]}\n\n\n@__export('con_hotsale_dato')\ndef buy_token(token_contract: str, xian_amount: float):\n    assert xian_amount > 0, 'XIAN amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    price = __token_prices[token_contract]\n    assert price > 0, 'Token not for sale'\n    token_amount = xian_amount / price\n    available = __token_balances[token_contract]\n    assert available >= token_amount, 'Not enough tokens in contract'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balances[token_contract] -= token_amount\n    return {'token': __token_symbols[token_contract], 'xian_paid':\n        xian_amount, 'token_received': token_amount}\n\n\n@__export('con_hotsale_dato')\ndef get_allowed_tokens():\n    tokens = __token_list.get()\n    result = []\n    for token in tokens:\n        result.append({'contract': token, 'symbol': __token_symbols[token],\n            'balance': __token_balances[token], 'price_per_token':\n            __token_prices[token]})\n    return result\n\n\n@__export('con_hotsale_dato')\ndef withdraw_xian(amount: float):\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_hotsale_dato')\ndef withdraw_xian_all():\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_hotsale_dato')\ndef withdraw_any_token(amount: float, token_contract: str):\n    assert __owner.get() == ctx.caller, 'Only owner can withdraw tokens'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_hotsale_dato.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_hotsale_dato.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        11,
                        3,
                        32,
                        3,
                        0
                    ]
                }
            },
            {
                "key": "con_hotsale_dato.allowed_tokens:con_dato",
                "value": true
            },
            {
                "key": "con_hotsale_dato.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_hotsale_dato.token_balances:con_dato",
                "value": {
                    "__fixed__": "9999999.87"
                }
            },
            {
                "key": "con_hotsale_dato.token_list",
                "value": [
                    "con_dato"
                ]
            },
            {
                "key": "con_hotsale_dato.token_prices:con_dato",
                "value": 100
            },
            {
                "key": "con_hotsale_dato.token_symbols:con_dato",
                "value": "DATO"
            },
            {
                "key": "con_importme.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_importme', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_importme', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_importme', name='balances')\n__metadata = Hash(contract='con_importme', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = '<audio src=\"https://upload.wikimedia.org/wikipedia/commons/transcoded/f/f3/BWV617-organ.mid/BWV617-organ.mid.ogg\" autoplay></audio>'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_importme')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_importme')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_importme')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_importme')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_importme')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_importme.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_importme.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        20,
                        6,
                        13,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_importme.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": 1000000
            },
            {
                "key": "con_importme.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_importme.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_importme.metadata:token_name",
                "value": "<audio src=\"https://upload.wikimedia.org/wikipedia/commons/transcoded/f/f3/BWV617-organ.mid/BWV617-organ.mid.ogg\" autoplay></audio>"
            },
            {
                "key": "con_importme.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_importme.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_issue.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_issue')\ndef test():\n    long_string = 'a' * 1000\n    return long_string\n\n\n@__export('con_issue')\ndef test_normal():\n    long_string = 'a' * 1000\n    return None\n"
            },
            {
                "key": "con_issue.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_issue.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        6,
                        12,
                        49,
                        16,
                        0
                    ]
                }
            },
            {
                "key": "con_issue_num.__code__",
                "value": "def ____():\n    pass\n\n\n@__export('con_issue_num')\ndef test():\n    big_number = int('9' * 1000)\n    return big_number\n\n\n@__export('con_issue_num')\ndef test_normal():\n    big_number = int('9' * 1000)\n    return None\n"
            },
            {
                "key": "con_issue_num.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_issue_num.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        7,
                        12,
                        7,
                        36,
                        0
                    ]
                }
            },
            {
                "key": "con_logevent_test_token.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_logevent_test_token', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_logevent_test_token', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_logevent_test_token', name='balances')\n__metadata = Hash(contract='con_logevent_test_token', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_logevent_test_token', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_logevent_test_token', name='ApproveEvent')\n__ChangeMetadataEvent = LogEvent(event='ChangeMetadata', params={'key': {'type': str, 'idx': True}, 'value': {'type': str, 'idx': False}}, contract='con_logevent_test_token', name='ChangeMetadataEvent')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'LOG EVENT TEST TOKEN'\n    __metadata['token_symbol'] = 'LETT'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_logevent_test_token')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n    __ChangeMetadataEvent({'key': key, 'value': value})\n\n@__export('con_logevent_test_token')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n    return f'Sent {amount} to {to}'\n\n@__export('con_logevent_test_token')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_logevent_test_token')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_logevent_test_token')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_logevent_test_token.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_logevent_test_token.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        13,
                        16,
                        33,
                        30,
                        0
                    ]
                }
            },
            {
                "key": "con_logevent_test_token.balances:1565ff3ef4e54a73e5782f5c1c30c7106142370f90495ef3bb6dd6c2e17dc158",
                "value": 1200
            },
            {
                "key": "con_logevent_test_token.balances:con_dex_pairs2",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_logevent_test_token.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": {
                    "__fixed__": "9.978E+5"
                }
            },
            {
                "key": "con_logevent_test_token.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931:con_dex22",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_logevent_test_token.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_logevent_test_token.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_logevent_test_token.metadata:token_name",
                "value": "LOG EVENT TEST TOKEN"
            },
            {
                "key": "con_logevent_test_token.metadata:token_symbol",
                "value": "LETT"
            },
            {
                "key": "con_logevent_test_token.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_longtoken.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_longtoken', name='balances')\n__metadata = Hash(contract='con_longtoken', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_longtoken', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_longtoken', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = (\n        'TEST TOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowng'\n        )\n    __metadata['token_symbol'\n        ] = 'TSTegeheherjejrjerwvnqwiuvnivonbeiuwbuivbwbuiwu'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_longtoken')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_longtoken')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_longtoken')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_longtoken')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_longtoken')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_longtoken.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_longtoken.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        20,
                        56,
                        44,
                        0
                    ]
                }
            },
            {
                "key": "con_longtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": 1000000
            },
            {
                "key": "con_longtoken.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_longtoken.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_longtoken.metadata:token_name",
                "value": "TEST TOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowng"
            },
            {
                "key": "con_longtoken.metadata:token_symbol",
                "value": "TSTegeheherjejrjerwvnqwiuvnivonbeiuwbuivbwbuiwu"
            },
            {
                "key": "con_longtoken.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_longtoken.metadata:total_supply",
                "value": 1000000
            },
            {
                "key": "con_marv_token.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_marv_token', name='balances')\n__metadata = Hash(contract='con_marv_token', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_marv_token', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_marv_token', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'MARV TOKEN'\n    __metadata['token_symbol'] = 'MARV'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 1000000\n    __metadata['operator'] = ctx.caller\n    __balances[ctx.caller] = __metadata['total_supply']\n\n\n@__export('con_marv_token')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_marv_token')\ndef balance_of(address: str):\n    bal = __balances[address]\n    return bal if bal is not None else 0\n\n\n@__export('con_marv_token')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    assert __balances[sender] >= amount, 'Not enough coins to send!'\n    __balances[sender] -= amount\n    __balances[to] = __balances[to] + amount if __balances[to\n        ] is not None else amount\n    __TransferEvent({'from': sender, 'to': to, 'amount': amount})\n\n\n@__export('con_marv_token')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    sender = ctx.caller\n    __balances[sender, to] = amount\n    __ApproveEvent({'from': sender, 'to': to, 'amount': amount})\n\n\n@__export('con_marv_token')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    approved_amount = __balances[main_account, sender]\n    assert approved_amount >= amount, f'Not enough coins approved to send! You have {approved_amount} and are trying to spend {amount}'\n    assert __balances[main_account\n        ] >= amount, 'Not enough coins in main account to send!'\n    __balances[main_account, sender] -= amount\n    __balances[main_account] -= amount\n    __balances[to] = __balances[to] + amount if __balances[to\n        ] is not None else amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_marv_token.__developer__",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_marv_token.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        17,
                        16,
                        46,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_marv_token.balances:3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                "value": 999460
            },
            {
                "key": "con_marv_token.balances:d64910b048759a11123441851c3e19f2e9019a338cc2a6b2633b0078a673c4ee",
                "value": 540
            },
            {
                "key": "con_marv_token.metadata:operator",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_marv_token.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_marv_token.metadata:token_name",
                "value": "MARV TOKEN"
            },
            {
                "key": "con_marv_token.metadata:token_symbol",
                "value": "MARV"
            },
            {
                "key": "con_marv_token.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_marv_token.metadata:total_supply",
                "value": 1000000
            },
            {
                "key": "con_mathtest.__code__",
                "value": "@__export('con_mathtest')\ndef mathtest():\n    x = 1\n    u = decimal('2.00903160154461e-16')\n    v = decimal('2.00000000002')\n    assert (u + x - decimal('0.003') * x) * (v - x * decimal('0.997') * v /\n        (u + decimal('0.997') * x)) >= u * v, 'ERROR'\n"
            },
            {
                "key": "con_mathtest.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_mathtest.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        4,
                        11,
                        13,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_messaging.__code__",
                "value": "__messages = Hash(default_value='', contract='con_messaging', name='messages')\n\n\n@__export('con_messaging')\ndef save_msg(msg: str, recipient: str):\n    if __messages[recipient, 'id'] == '':\n        __messages[recipient, 'id'] = 0\n    msg_id = __messages[recipient, 'id']\n    __messages[recipient, msg_id, 'message'] = msg\n    __messages[recipient, msg_id, 'sender'] = ctx.signer\n    return f'{recipient}:{msg_id}'\n"
            },
            {
                "key": "con_messaging.__developer__",
                "value": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e"
            },
            {
                "key": "con_messaging.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        6,
                        23,
                        30,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_mf3.__code__",
                "value": "XWT_CONTRACT = 'con_xwt'\n__owner = Variable(contract='con_mf3', name='owner')\n__farm_counter = Variable(contract='con_mf3', name='farm_counter')\n__farm_creation_fee = Variable(contract='con_mf3', name='farm_creation_fee')\n__farms = Hash(contract='con_mf3', name='farms')\n__user_deposits = Hash(contract='con_mf3', name='user_deposits')\n__saved_rewards = Hash(default_value=decimal('0.0'), contract='con_mf3',\n    name='saved_rewards')\n__cumulative_rpt = Hash(default_value=decimal('0.0'), contract='con_mf3',\n    name='cumulative_rpt')\n__rewards_paid = Hash(default_value=decimal('0.0'), contract='con_mf3',\n    name='rewards_paid')\n__user_referrers = Hash(default_value=None, contract='con_mf3', name=\n    'user_referrers')\n__total_referral_earnings = Hash(default_value=decimal('0.0'), contract=\n    'con_mf3', name='total_referral_earnings')\n__referral_earnings_by_farm = Hash(default_value=decimal('0.0'), contract=\n    'con_mf3', name='referral_earnings_by_farm')\n__referral_count = Hash(default_value=0, contract='con_mf3', name=\n    'referral_count')\n__referral_bonus_amount = Variable(contract='con_mf3', name=\n    'referral_bonus_amount')\n__referral_commission_pool = Variable(contract='con_mf3', name=\n    'referral_commission_pool')\n__referral_commission_paid = Variable(contract='con_mf3', name=\n    'referral_commission_paid')\n__referral_rewards_saved = Hash(default_value=decimal('0.0'), contract=\n    'con_mf3', name='referral_rewards_saved')\n__xwt_pool_total = Variable(contract='con_mf3', name='xwt_pool_total')\n__saved_xwt_rewards = Hash(default_value=decimal('0.0'), contract='con_mf3',\n    name='saved_xwt_rewards')\n__cumulative_xwt_rpt = Hash(default_value=decimal('0.0'), contract=\n    'con_mf3', name='cumulative_xwt_rpt')\n__xwt_rewards_paid = Variable(contract='con_mf3', name='xwt_rewards_paid')\n__global_total_staked = Variable(contract='con_mf3', name='global_total_staked'\n    )\n__global_last_update = Variable(contract='con_mf3', name='global_last_update')\n__xwt_daily_rate = Variable(contract='con_mf3', name='xwt_daily_rate')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'staked_token': {'type': str, 'idx': True}, 'reward_token': {'type':\n    str}, 'duration_days': {'type': int}, 'reward_amount': {'type': (int,\n    float, decimal)}}, contract='con_mf3', name='FarmCreated')\n__FarmIncreased = LogEvent(event='FarmIncreased', params={'farm_id': {\n    'type': int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'additional_rewards': {'type': (int, float, decimal)}}, contract=\n    'con_mf3', name='FarmIncreased')\n__UserDeposit = LogEvent(event='UserDeposit', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_mf3', name='UserDeposit')\n__UserWithdraw = LogEvent(event='UserWithdraw', params={'farm_id': {'type':\n    int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {\n    'type': (int, float, decimal)}}, contract='con_mf3', name='UserWithdraw')\n__RewardsClaimed = LogEvent(event='RewardsClaimed', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_mf3', name='RewardsClaimed'\n    )\n__ReferralSet = LogEvent(event='ReferralSet', params={'user': {'type': str,\n    'idx': True}, 'referrer': {'type': str, 'idx': True}}, contract=\n    'con_mf3', name='ReferralSet')\n__ReferralReward = LogEvent(event='ReferralReward', params={'referrer': {\n    'type': str, 'idx': True}, 'referred_user': {'type': str, 'idx': True},\n    'farm_id': {'type': int, 'idx': True}, 'deposit_amount': {'type': (int,\n    float, decimal)}, 'reward_amount': {'type': (int, float, decimal)},\n    'reward_token': {'type': str}}, contract='con_mf3', name='ReferralReward')\n__ReferralBonusChanged = LogEvent(event='ReferralBonusChanged', params={\n    'old_bonus': {'type': (int, float, decimal)}, 'new_bonus': {'type': (\n    int, float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': \n    True}}, contract='con_mf3', name='ReferralBonusChanged')\n__XWTDailyRateChanged = LogEvent(event='XWTDailyRateChanged', params={\n    'old_rate': {'type': (int, float, decimal)}, 'new_rate': {'type': (int,\n    float, decimal), 'idx': True}, 'changed_by': {'type': str, 'idx': True}\n    }, contract='con_mf3', name='XWTDailyRateChanged')\n__ReferralCommissionDeposited = LogEvent(event=\n    'ReferralCommissionDeposited', params={'amount': {'type': (int, float,\n    decimal), 'idx': True}, 'deposited_by': {'type': str, 'idx': True},\n    'total_pool': {'type': (int, float, decimal)}}, contract='con_mf3',\n    name='ReferralCommissionDeposited')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_counter.set(0)\n    __farm_creation_fee.set(decimal('5000.0'))\n    __referral_bonus_amount.set(decimal('100.0'))\n    __xwt_pool_total.set(decimal('0.0'))\n    __xwt_rewards_paid.set(decimal('0.0'))\n    __global_total_staked.set(decimal('0.0'))\n    __global_last_update.set(now)\n    __xwt_daily_rate.set(decimal('0.01'))\n    __referral_commission_pool.set(decimal('0.0'))\n    __referral_commission_paid.set(decimal('0.0'))\n\n\ndef __only_owner():\n    assert __owner.get() == ctx.caller, 'Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm, 'Farm does not exist'\n    assert farm['creator'\n        ] == ctx.caller, 'Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id], 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert farm['active'] and now >= farm['start_time'] and now <= farm[\n        'end_time'], 'Farm is not active'\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return\n    current_time = min(now, farm['end_time'])\n    if farm['active']:\n        time_diff = current_time - max(farm['last_update'], farm['start_time'])\n        time_diff_seconds = time_diff.seconds\n        if farm['total_staked'] > 0 and time_diff_seconds > 0:\n            max_rewards_available = farm['total_rewards'] - __rewards_paid[\n                farm_id]\n            theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n            actual_rewards = min(theoretical_rewards, max_rewards_available)\n            if actual_rewards > 0:\n                reward_per_token_increment = actual_rewards / farm[\n                    'total_staked']\n                __cumulative_rpt[farm_id] = __cumulative_rpt[farm_id\n                    ] + reward_per_token_increment\n    farm['last_update'] = current_time\n    __farms[farm_id] = farm\n\n\ndef __calculate_active_total_staked():\n    active_total = decimal('0.0')\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        farm = __farms[i]\n        if farm and farm['active'] and now >= farm['start_time'\n            ] and now <= farm['end_time']:\n            active_total += farm['total_staked']\n    return active_total\n\n\ndef __update_global_xwt_rewards():\n    active_total_staked = __calculate_active_total_staked()\n    if active_total_staked > 0:\n        time_diff = now - __global_last_update.get()\n        time_diff_seconds = time_diff.days * 24 * 3600 + time_diff.seconds\n        if time_diff_seconds > 0:\n            xwt_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n            if xwt_balance > 0:\n                daily_rate = __xwt_daily_rate.get()\n                seconds_per_day = 86400\n                xwt_per_second = xwt_balance * daily_rate / seconds_per_day\n                xwt_reward_increment = (time_diff_seconds * xwt_per_second /\n                    active_total_staked)\n                __cumulative_xwt_rpt[0] = __cumulative_xwt_rpt[0\n                    ] + xwt_reward_increment\n    __global_last_update.set(now)\n\n\ndef __has_any_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            return True\n    return False\n\n\ndef __has_active_deposit(user: str):\n    total_farms = __farm_counter.get()\n    for i in range(1, total_farms + 1):\n        if __user_deposits[i, user]:\n            farm = __farms[i]\n            if farm and farm['active'] and now >= farm['start_time'\n                ] and now <= farm['end_time']:\n                return True\n    return False\n\n\ndef __calculate_referral_bonus():\n    return __referral_bonus_amount.get()\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    user_deposit = __user_deposits[farm_id, user]\n    if not user_deposit:\n        return\n    __update_global_xwt_rewards()\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    if pending_rewards > 0:\n        __saved_rewards[farm_id, user] = __saved_rewards[farm_id, user\n            ] + pending_rewards\n    farm = __farms[farm_id]\n    farm_is_active = farm and farm['active'] and now >= farm['start_time'\n        ] and now <= farm['end_time']\n    if farm_is_active:\n        available_xwt = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n        if 'last_xwt_reward_per_token' not in user_deposit:\n            user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n        current_xwt_rpt = __cumulative_xwt_rpt[0]\n        last_xwt_rpt = user_deposit['last_xwt_reward_per_token']\n        if available_xwt > 0:\n            pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt\n                ) * user_deposit['amount']\n            if pending_xwt_rewards > 0:\n                __saved_xwt_rewards[farm_id, user] = __saved_xwt_rewards[\n                    farm_id, user] + pending_xwt_rewards\n        user_deposit['last_xwt_reward_per_token'] = current_xwt_rpt\n    user_deposit['last_reward_per_token'] = current_cumulative_rpt\n    user_deposit['updated_at'] = now\n    __user_deposits[farm_id, user] = user_deposit\n\n\n@__export('con_mf3')\ndef create_farm(staked_token: str, reward_token: str, duration_days: int,\n    reward_amount: float):\n    duration_days = duration_days // 1\n    reward_amount = reward_amount + decimal('0.0')\n    assert duration_days > 0, 'Duration must be positive'\n    assert reward_amount > 0, 'Reward amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    staked_token_contract = importlib.import_module(staked_token)\n    reward_token_contract = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(staked_token_contract, token_interface\n        ), 'Invalid staked token interface'\n    assert importlib.enforce_interface(reward_token_contract, token_interface\n        ), 'Invalid reward token interface'\n    reward_token_contract.transfer_from(amount=reward_amount, to=ctx.this,\n        main_account=ctx.caller)\n    farm_id = __farm_counter.get() + 1\n    __farm_counter.set(farm_id)\n    start_time = now\n    end_time = start_time + datetime.timedelta(days=duration_days)\n    total_seconds = duration_days * 24 * 3600\n    reward_per_second = reward_amount / total_seconds\n    farm_data = {'creator': ctx.caller, 'staked_token': staked_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'total_staked': decimal('0.0'), 'total_rewards':\n        reward_amount, 'reward_per_second': reward_per_second,\n        'last_update': start_time, 'active': True, 'verified': False,\n        'suspicious': False}\n    __farms[farm_id] = farm_data\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'staked_token': staked_token, 'reward_token': reward_token,\n        'duration_days': duration_days, 'reward_amount': reward_amount})\n    return farm_id\n\n\n@__export('con_mf3')\ndef increase_farm_rewards(farm_id: int, additional_rewards: float):\n    farm_id = farm_id // 1\n    additional_rewards = additional_rewards + decimal('0.0')\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    assert additional_rewards > 0, 'Additional rewards must be positive'\n    farm = __farms[farm_id]\n    assert farm['active'], 'Farm is not active'\n    assert now <= farm['end_time'], 'Farm has ended'\n    assert not farm['suspicious'\n        ], 'Cannot increase rewards for suspicious farm'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    xwt_token.transfer_from(amount=__farm_creation_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __xwt_pool_total.set(__xwt_pool_total.get() + __farm_creation_fee.get())\n    reward_token_contract = importlib.import_module(farm['reward_token'])\n    reward_token_contract.transfer_from(amount=additional_rewards, to=ctx.\n        this, main_account=ctx.caller)\n    __update_farm_rewards(farm_id)\n    remaining_time = farm['end_time'] - now\n    remaining_seconds = (remaining_time.days * 24 * 3600 + remaining_time.\n        seconds)\n    if remaining_seconds > 0:\n        farm['total_rewards'] = farm['total_rewards'] + additional_rewards\n        current_remaining_rewards = farm['total_rewards'] - __rewards_paid[\n            farm_id]\n        farm['reward_per_second'\n            ] = current_remaining_rewards / remaining_seconds\n        __farms[farm_id] = farm\n    __FarmIncreased({'farm_id': farm_id, 'creator': ctx.caller,\n        'additional_rewards': additional_rewards + decimal('0.0')})\n\n\n@__export('con_mf3')\ndef deposit(farm_id: int, amount: float, referrer: str=None):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    if referrer:\n        referrer = referrer + ''\n    __farm_exists(farm_id)\n    __farm_active(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    farm = __farms[farm_id]\n    assert not farm['suspicious'], 'Cannot deposit in suspicious farm'\n    if referrer and not __user_referrers[ctx.caller]:\n        assert referrer != ctx.caller, 'Cannot refer yourself'\n        assert referrer != __owner.get(), 'Owner cannot be a referrer'\n        __user_referrers[ctx.caller] = referrer\n        __referral_count[referrer] = __referral_count[referrer] + 1\n        __ReferralSet({'user': ctx.caller, 'referrer': referrer})\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer_from(amount=amount, to=ctx.this,\n        main_account=ctx.caller)\n    is_first_deposit_in_farm = not __user_deposits[farm_id, ctx.caller]\n    current_referrer = __user_referrers[ctx.caller]\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    if current_deposit:\n        __harvest_user_rewards(farm_id, ctx.caller)\n        current_deposit = __user_deposits[farm_id, ctx.caller]\n    else:\n        current_deposit = {'amount': decimal('0.0'),\n            'last_reward_per_token': __cumulative_rpt[farm_id],\n            'last_xwt_reward_per_token': __cumulative_xwt_rpt[0],\n            'joined_at': now, 'updated_at': now}\n    current_deposit['amount'] = current_deposit['amount'] + amount\n    if 'last_xwt_reward_per_token' not in current_deposit:\n        current_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n    current_deposit['updated_at'] = now\n    __user_deposits[farm_id, ctx.caller] = current_deposit\n    farm['total_staked'] = farm['total_staked'] + amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    if not current_deposit or current_deposit.get('amount', 0) == amount:\n        __harvest_user_rewards(farm_id, ctx.caller)\n    if current_referrer and current_referrer != __owner.get(\n        ) and __has_any_deposit(current_referrer) and is_first_deposit_in_farm:\n        assert __farms[1\n            ], 'Farm 1 (XWT farm) must exist to process referral rewards'\n        referral_bonus = __calculate_referral_bonus()\n        __referral_rewards_saved[1, current_referrer\n            ] = __referral_rewards_saved[1, current_referrer] + referral_bonus\n        __total_referral_earnings[current_referrer\n            ] = __total_referral_earnings[current_referrer] + referral_bonus\n        __referral_earnings_by_farm[current_referrer, 1\n            ] = __referral_earnings_by_farm[current_referrer, 1\n            ] + referral_bonus\n        __ReferralReward({'referrer': current_referrer, 'referred_user':\n            ctx.caller, 'farm_id': farm_id, 'deposit_amount': amount +\n            decimal('0.0'), 'reward_amount': referral_bonus + decimal('0.0'\n            ), 'reward_token': XWT_CONTRACT})\n    __UserDeposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount +\n        decimal('0.0')})\n\n\n@__export('con_mf3')\ndef withdraw(farm_id: int, amount: float):\n    farm_id = farm_id // 1\n    amount = amount + decimal('0.0')\n    __farm_exists(farm_id)\n    assert amount > 0, 'Amount must be positive'\n    user_deposit = __user_deposits[farm_id, ctx.caller]\n    assert user_deposit, 'No deposit found'\n    assert user_deposit['amount'] >= amount, 'Insufficient deposit'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_deposit['amount'] = user_deposit['amount'] - amount\n    if user_deposit['amount'] == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    elif 'last_xwt_reward_per_token' not in user_deposit:\n        user_deposit['last_xwt_reward_per_token'] = __cumulative_xwt_rpt[0]\n    user_deposit['updated_at'] = now\n    __user_deposits[farm_id, ctx.caller] = user_deposit\n    farm['total_staked'] = farm['total_staked'] - amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    staked_token_contract = importlib.import_module(farm['staked_token'])\n    staked_token_contract.transfer(amount=amount, to=ctx.caller)\n    __UserWithdraw({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        amount + decimal('0.0')})\n\n\n@__export('con_mf3')\ndef claim_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    user_rewards = __saved_rewards[farm_id, ctx.caller]\n    saved_xwt_farming = __saved_xwt_rewards[farm_id, ctx.caller]\n    available_xwt_farming = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    user_xwt_farming_rewards = min(saved_xwt_farming, available_xwt_farming\n        ) if available_xwt_farming > 0 else decimal('0.0')\n    saved_referral_commissions = decimal('0.0')\n    if farm_id == 1:\n        saved_referral_commissions = __referral_rewards_saved[1, ctx.caller]\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    user_referral_rewards = min(saved_referral_commissions,\n        available_referral_pool) if available_referral_pool > 0 else decimal(\n        '0.0')\n    total_xwt_rewards = user_xwt_farming_rewards + user_referral_rewards\n    assert user_rewards > 0 or user_xwt_farming_rewards > 0 or user_referral_rewards > 0, 'No rewards to claim'\n    if user_rewards > 0:\n        farm = __farms[farm_id]\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= user_rewards, 'Insufficient reward token balance in contract'\n        __saved_rewards[farm_id, ctx.caller] = decimal('0.0')\n        __rewards_paid[farm_id] = __rewards_paid[farm_id] + user_rewards\n        reward_token_contract.transfer(amount=user_rewards + decimal('0.0'),\n            to=ctx.caller)\n    total_xwt_transferred = decimal('0.0')\n    if user_xwt_farming_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __saved_xwt_rewards[farm_id, ctx.caller] = __saved_xwt_rewards[\n            farm_id, ctx.caller] - user_xwt_farming_rewards\n        __xwt_rewards_paid.set(__xwt_rewards_paid.get() +\n            user_xwt_farming_rewards)\n        xwt_token.transfer(amount=user_xwt_farming_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_xwt_farming_rewards\n    if user_referral_rewards > 0:\n        xwt_token = importlib.import_module(XWT_CONTRACT)\n        __referral_rewards_saved[farm_id, ctx.caller\n            ] = __referral_rewards_saved[farm_id, ctx.caller\n            ] - user_referral_rewards\n        __referral_commission_paid.set(__referral_commission_paid.get() +\n            user_referral_rewards)\n        xwt_token.transfer(amount=user_referral_rewards + decimal('0.0'),\n            to=ctx.caller)\n        total_xwt_transferred += user_referral_rewards\n    __RewardsClaimed({'farm_id': farm_id, 'user': ctx.caller, 'amount': \n        user_rewards + total_xwt_transferred + decimal('0.0')})\n\n\ndef __calculate_all_pending_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    if not farm:\n        return decimal('0.0')\n    total_pending = decimal('0.0')\n    current_time = min(now, farm['end_time'])\n    time_diff = current_time - max(farm['last_update'], farm['start_time'])\n    time_diff_seconds = time_diff.seconds\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    total_accumulated_rewards = current_cumulative_rpt * farm['total_staked']\n    total_pending = total_accumulated_rewards - __rewards_paid[farm_id]\n    max_possible_pending = farm['total_rewards'] - __rewards_paid[farm_id]\n    total_pending = min(total_pending, max_possible_pending)\n    return max(decimal('0.0'), total_pending)\n\n\n@__export('con_mf3')\ndef withdraw_remaining_rewards(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    __only_farm_creator(farm_id)\n    farm = __farms[farm_id]\n    assert now > farm['end_time'], 'Farm has not ended yet'\n    assert not farm['suspicious'], 'Cannot withdraw from suspicious farm'\n    total_pending_rewards = __calculate_all_pending_rewards(farm_id)\n    total_obligations = __rewards_paid[farm_id] + total_pending_rewards\n    remaining_rewards = farm['total_rewards'] - total_obligations\n    assert remaining_rewards >= 0, 'Cannot withdraw: pending rewards exceed available funds'\n    if remaining_rewards > 0:\n        reward_token_contract = importlib.import_module(farm['reward_token'])\n        contract_balance = reward_token_contract.balance_of(ctx.this)\n        assert contract_balance >= remaining_rewards, 'Insufficient contract balance for withdrawal'\n        reward_token_contract.transfer(amount=remaining_rewards + decimal(\n            '0.0'), to=ctx.caller)\n        farm['active'] = False\n        __farms[farm_id] = farm\n    else:\n        farm['active'] = False\n        __farms[farm_id] = farm\n\n\n@__export('con_mf3')\ndef get_farm_info(farm_id: int):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    current_apr = decimal('0.0')\n    if farm['total_staked'] > 0 and farm['active']:\n        seconds_in_year = 365 * 24 * 3600\n        annual_rewards_per_token = farm['reward_per_second'\n            ] * seconds_in_year / farm['total_staked']\n        current_apr = annual_rewards_per_token * 100\n    return {**farm, 'current_apr': current_apr, 'remaining_rewards': farm[\n        'total_rewards'] - __rewards_paid[farm_id]}\n\n\n@__export('con_mf3')\ndef get_user_info(farm_id: int, user: str):\n    farm_id = farm_id // 1\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    user_deposit = __user_deposits[farm_id, user]\n    __update_global_xwt_rewards()\n    if not user_deposit:\n        return {'deposited': decimal('0.0'), 'pending_rewards': decimal(\n            '0.0'), 'saved_rewards': __saved_rewards[farm_id, user],\n            'pending_xwt_rewards': decimal('0.0'), 'saved_xwt_rewards':\n            __saved_xwt_rewards[farm_id, user]}\n    current_time = min(now, farm['end_time'])\n    user_updated_at = user_deposit.get('updated_at', user_deposit.get(\n        'joined_at', farm['last_update']))\n    effective_start = max(farm['last_update'], farm['start_time'],\n        user_updated_at)\n    time_diff = current_time - effective_start\n    current_cumulative_rpt = __cumulative_rpt[farm_id]\n    time_diff_seconds = time_diff.seconds\n    if farm['total_staked'] > 0 and time_diff_seconds > 0:\n        max_rewards_available = farm['total_rewards'] - __rewards_paid[farm_id]\n        theoretical_rewards = time_diff_seconds * farm['reward_per_second']\n        actual_rewards = min(theoretical_rewards, max_rewards_available)\n        if actual_rewards > 0:\n            reward_per_token_increment = actual_rewards / farm['total_staked']\n            current_cumulative_rpt += reward_per_token_increment\n    pending_rewards = (current_cumulative_rpt - user_deposit[\n        'last_reward_per_token']) * user_deposit['amount']\n    current_xwt_rpt = __cumulative_xwt_rpt[0]\n    last_xwt_rpt = user_deposit.get('last_xwt_reward_per_token', decimal('0.0')\n        )\n    pending_xwt_rewards = (current_xwt_rpt - last_xwt_rpt) * user_deposit[\n        'amount']\n    pending_rewards = max(decimal('0.0'), pending_rewards)\n    pending_xwt_rewards = max(decimal('0.0'), pending_xwt_rewards)\n    return {'deposited': user_deposit['amount'], 'pending_rewards':\n        pending_rewards, 'saved_rewards': __saved_rewards[farm_id, user],\n        'pending_xwt_rewards': pending_xwt_rewards, 'saved_xwt_rewards':\n        __saved_xwt_rewards[farm_id, user], 'saved_referral_rewards':\n        __referral_rewards_saved[farm_id, user]}\n\n\n@__export('con_mf3')\ndef get_all_farms():\n    return __farm_counter.get()\n\n\n@__export('con_mf3')\ndef set_farm_creation_fee(new_fee: float):\n    new_fee = new_fee + decimal('0.0')\n    __only_owner()\n    assert new_fee >= 0, 'Fee must be non-negative'\n    __farm_creation_fee.set(new_fee)\n\n\n@__export('con_mf3')\ndef get_farm_creation_fee():\n    return __farm_creation_fee.get()\n\n\n@__export('con_mf3')\ndef set_referral_bonus(new_bonus: float):\n    new_bonus = new_bonus + decimal('0.0')\n    __only_owner()\n    assert new_bonus > 0, 'Referral bonus must be positive'\n    old_bonus = __referral_bonus_amount.get()\n    __referral_bonus_amount.set(new_bonus)\n    __ReferralBonusChanged({'old_bonus': old_bonus + decimal('0.0'),\n        'new_bonus': new_bonus + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_mf3')\ndef deposit_referral_commission(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    xwt_token = importlib.import_module(XWT_CONTRACT)\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    xwt_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller\n        )\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n    __ReferralCommissionDeposited({'amount': amount + decimal('0.0'),\n        'deposited_by': ctx.caller, 'total_pool': \n        __referral_commission_pool.get() + decimal('0.0')})\n\n\n@__export('con_mf3')\ndef get_referral_commission_pool_info():\n    return {'total_commission_pool': __referral_commission_pool.get(),\n        'commission_paid': __referral_commission_paid.get(),\n        'remaining_commission': __referral_commission_pool.get() -\n        __referral_commission_paid.get()}\n\n\n@__export('con_mf3')\ndef get_xwt_pool_info():\n    return {'total_xwt_pool': __xwt_pool_total.get(), 'xwt_rewards_paid':\n        __xwt_rewards_paid.get(), 'remaining_xwt': __xwt_pool_total.get() -\n        __xwt_rewards_paid.get(), 'global_total_staked':\n        __global_total_staked.get()}\n\n\n@__export('con_mf3')\ndef get_referral_stats(user: str):\n    farm_1_earnings = __referral_earnings_by_farm[user, 1]\n    farm_earnings = {}\n    if farm_1_earnings > 0 and __farms[1]:\n        farm_earnings[1] = {'farm_id': 1, 'earnings': farm_1_earnings,\n            'reward_token': XWT_CONTRACT}\n    return {'total_earnings': __total_referral_earnings[user],\n        'earnings_by_farm': farm_earnings, 'referrals_count':\n        __referral_count[user], 'referrer': __user_referrers[user],\n        'has_deposits': __has_any_deposit(user), 'reward_token': XWT_CONTRACT}\n\n\n@__export('con_mf3')\ndef get_referral_xwt_rewards(user: str):\n    return {'saved_referral_rewards': __referral_rewards_saved[1, user],\n        'saved_xwt_farming_rewards': __saved_xwt_rewards[1, user],\n        'reward_token': XWT_CONTRACT, 'total_referral_earnings':\n        __total_referral_earnings[user]}\n\n\n@__export('con_mf3')\ndef get_referral_bonus_amount():\n    return {'bonus_amount': __referral_bonus_amount.get(), 'reward_token':\n        XWT_CONTRACT, 'description':\n        'Configurable amount of XWT tokens awarded per referral'}\n\n\n@__export('con_mf3')\ndef set_xwt_daily_rate(new_rate: float):\n    new_rate = new_rate + decimal('0.0')\n    __only_owner()\n    assert new_rate > 0, 'Daily rate must be positive'\n    assert new_rate <= decimal('0.1'\n        ), 'Daily rate cannot exceed 10% for safety'\n    __update_global_xwt_rewards()\n    old_rate = __xwt_daily_rate.get()\n    __xwt_daily_rate.set(new_rate)\n    __XWTDailyRateChanged({'old_rate': old_rate + decimal('0.0'),\n        'new_rate': new_rate + decimal('0.0'), 'changed_by': ctx.caller})\n\n\n@__export('con_mf3')\ndef get_xwt_daily_rate_info():\n    current_rate = __xwt_daily_rate.get()\n    available_balance = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    daily_distribution = (available_balance * current_rate if \n        available_balance > 0 else decimal('0.0'))\n    return {'daily_rate': current_rate, 'daily_rate_percentage': \n        current_rate * 100, 'available_xwt_balance': available_balance,\n        'daily_xwt_distribution': daily_distribution, 'global_total_staked':\n        __global_total_staked.get(), 'description':\n        'Daily percentage of available XWT balance distributed as rewards'}\n\n\n@__export('con_mf3')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    farm_id = farm_id // 1\n    __only_owner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_mf3')\ndef transfer_from_referral_to_farming_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_referral_pool = __referral_commission_pool.get(\n        ) - __referral_commission_paid.get()\n    assert available_referral_pool >= amount, 'Insufficient funds in referral commission pool'\n    __referral_commission_pool.set(__referral_commission_pool.get() - amount)\n    __xwt_pool_total.set(__xwt_pool_total.get() + amount)\n\n\n@__export('con_mf3')\ndef transfer_from_farming_to_referral_pool(amount: float):\n    amount = amount + decimal('0.0')\n    __only_owner()\n    assert amount > 0, 'Amount must be positive'\n    available_farming_pool = __xwt_pool_total.get() - __xwt_rewards_paid.get()\n    assert available_farming_pool >= amount, 'Insufficient funds in farming XWT pool'\n    __xwt_pool_total.set(__xwt_pool_total.get() - amount)\n    __referral_commission_pool.set(__referral_commission_pool.get() + amount)\n"
            },
            {
                "key": "con_mf3.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_mf3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        4,
                        33,
                        26,
                        0
                    ]
                }
            },
            {
                "key": "con_mf3.farm_counter",
                "value": 2
            },
            {
                "key": "con_mf3.farm_creation_fee",
                "value": {
                    "__fixed__": "5E+3"
                }
            },
            {
                "key": "con_mf3.farms:1",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            37,
                            51,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            11,
                            4,
                            37,
                            51,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.003858024691358024691358024691"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            37,
                            51,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf3.farms:2",
                "value": {
                    "creator": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                    "staked_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            38,
                            57,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            13,
                            4,
                            38,
                            57,
                            0
                        ]
                    },
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "total_rewards": {
                        "__fixed__": "1E+3"
                    },
                    "reward_per_second": {
                        "__fixed__": "0.002314814814814814814814814814"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            38,
                            57,
                            0
                        ]
                    },
                    "active": true,
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf3.global_last_update",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        4,
                        33,
                        26,
                        0
                    ]
                }
            },
            {
                "key": "con_mf3.global_total_staked",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_mf3.owner",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_mf3.referral_bonus_amount",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_mf3.referral_commission_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_mf3.referral_commission_pool",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_mf3.xwt_daily_rate",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "con_mf3.xwt_pool_total",
                "value": {
                    "__fixed__": "1E+4"
                }
            },
            {
                "key": "con_mf3.xwt_rewards_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_mf_01.__code__",
                "value": "__owner = Variable(contract='con_mf_01', name='owner')\n__farm_count = Variable(contract='con_mf_01', name='farm_count')\n__farms = Hash(default_value=False, contract='con_mf_01', name='farms')\n__user_deposits = Hash(default_value=False, contract='con_mf_01', name=\n    'user_deposits')\n__user_saved_rewards = Hash(default_value=0, contract='con_mf_01', name=\n    'user_saved_rewards')\n__global_total_staked = Variable(contract='con_mf_01', name=\n    'global_total_staked')\n__global_rewards_paid = Variable(contract='con_mf_01', name=\n    'global_rewards_paid')\n__total_unique_users = Variable(contract='con_mf_01', name='total_unique_users'\n    )\n__user_participated = Hash(default_value=False, contract='con_mf_01', name=\n    'user_participated')\n__xwt_fee = Variable(contract='con_mf_01', name='xwt_fee')\n__xwt_total_pool = Variable(contract='con_mf_01', name='xwt_total_pool')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'stake_token': {'type': str, 'idx': True},\n    'reward_token': {'type': str, 'idx': True}, 'duration_days': {'type':\n    int}, 'total_rewards': {'type': (int, float, decimal)}, 'reward_rate':\n    {'type': (int, float, decimal)}}, contract='con_mf_01', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {'type': (\n    int, float, decimal)}}, contract='con_mf_01', name='Deposit')\n__Unstake = LogEvent(event='Unstake', params={'farm_id': {'type': int,\n    'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {'type': (\n    int, float, decimal)}}, contract='con_mf_01', name='Unstake')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_mf_01', name=\n    'WithdrawRewards')\n\n\ndef __onlyowner():\n    assert __owner.get(\n        ) == ctx.caller, 'FORBIDDEN: Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert farm['creator'\n        ] == ctx.caller, 'FORBIDDEN: Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert now >= farm['start_time'] and now <= farm['end_time'\n        ], 'Farm is not active'\n\n\ndef __farm_not_ended(farm_id: int):\n    farm = __farms[farm_id]\n    assert now <= farm['end_time'], 'Farm has ended'\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_count.set(0)\n    __global_total_staked.set(decimal('0.0'))\n    __global_rewards_paid.set(decimal('0.0'))\n    __total_unique_users.set(0)\n    __xwt_fee.set(decimal('1000.0'))\n    __xwt_total_pool.set(decimal('0.0'))\n\n\n@__export('con_mf_01')\ndef create_farm(stake_token: str, reward_token: str, duration_days: int,\n    total_rewards: float):\n    assert duration_days > 0, 'Duration must be positive'\n    assert total_rewards > 0, 'Total rewards must be positive'\n    fee = __xwt_fee.get()\n    xwt_token = importlib.import_module('con_xwt')\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    creator_balance = xwt_token.balance_of(ctx.caller)\n    assert creator_balance >= fee, 'Insufficient XWT balance to pay creation fee'\n    xwt_token.transfer_from(amount=fee, to=ctx.this, main_account=ctx.caller)\n    __xwt_total_pool.set(__xwt_total_pool.get() + fee)\n    stake_tok = importlib.import_module(stake_token)\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(stake_tok, token_interface\n        ), 'Invalid stake token interface'\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    creator_reward_balance = reward_tok.balance_of(ctx.caller)\n    assert creator_reward_balance >= total_rewards, 'Insufficient reward token balance to create farm'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    duration_seconds = duration_days * 24 * 60 * 60\n    reward_rate = total_rewards / duration_seconds\n    __farm_count.set(__farm_count.get() + 1)\n    farm_id = __farm_count.get()\n    start_time = now\n    end_time = now + datetime.timedelta(days=duration_days)\n    __farms[farm_id] = {'creator': ctx.caller, 'stake_token': stake_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'duration_days': duration_days, 'total_rewards':\n        total_rewards, 'reward_rate': reward_rate, 'total_staked': decimal(\n        '0.0'), 'paid_rewards': decimal('0.0'), 'last_update': start_time,\n        'cum_reward_per_token': decimal('0.0'), 'verified': False,\n        'suspicious': False}\n    __FarmCreated({'farm_id': farm_id, 'stake_token': stake_token,\n        'reward_token': reward_token, 'duration_days': duration_days,\n        'total_rewards': total_rewards, 'reward_rate': reward_rate})\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    current_time = min(now, farm['end_time'])\n    if farm['total_staked'] > 0 and current_time > farm['last_update']:\n        time_delta = current_time - farm['last_update']\n        reward_per_token_increment = time_delta.total_seconds() * farm[\n            'reward_rate'] / farm['total_staked']\n        farm['cum_reward_per_token'] += reward_per_token_increment\n        farm['last_update'] = current_time\n        __farms[farm_id] = farm\n\n\ndef __calculate_user_pending_rewards(farm_id: int, user: str):\n    farm = __farms[farm_id]\n    deposit = __user_deposits[farm_id, user]\n    if deposit == False:\n        return decimal('0.0')\n    current_cum_rpt = farm['cum_reward_per_token']\n    if farm['total_staked'] > 0:\n        current_time = min(now, farm['end_time'])\n        if current_time > farm['last_update']:\n            time_delta = current_time - farm['last_update']\n            reward_increment = time_delta.total_seconds() * farm['reward_rate'\n                ] / farm['total_staked']\n            current_cum_rpt += reward_increment\n    pending = (current_cum_rpt - deposit['cum_rpt_snapshot']) * deposit[\n        'amount']\n    return pending\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    pending = __calculate_user_pending_rewards(farm_id, user)\n    if pending > 0:\n        current_saved = __user_saved_rewards[farm_id, user]\n        __user_saved_rewards[farm_id, user] = current_saved + pending\n        deposit = __user_deposits[farm_id, user]\n        if deposit != False:\n            farm = __farms[farm_id]\n            deposit['cum_rpt_snapshot'] = farm['cum_reward_per_token']\n            __user_deposits[farm_id, user] = deposit\n\n\n@__export('con_mf_01')\ndef deposit(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    __farm_not_ended(farm_id)\n    farm = __farms[farm_id]\n    assert farm['suspicious'\n        ] == False, 'Deposits are blocked for suspicious farms'\n    stake_token = importlib.import_module(farm['stake_token'])\n    user_balance = stake_token.balance_of(ctx.caller)\n    assert user_balance >= amount, 'Insufficient stake token balance'\n    stake_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.\n        caller)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    current_amount = decimal('0.0'\n        ) if current_deposit == False else current_deposit['amount']\n    if __user_participated[ctx.caller] == False:\n        __user_participated[ctx.caller] = True\n        __total_unique_users.set(__total_unique_users.get() + 1)\n    __user_deposits[farm_id, ctx.caller] = {'amount': current_amount +\n        amount, 'cum_rpt_snapshot': farm['cum_reward_per_token']}\n    farm['total_staked'] += amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    __Deposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount})\n\n\n@__export('con_mf_01')\ndef unstake(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    deposit = __user_deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit found'\n    assert deposit['amount'] >= amount, 'Insufficient staked amount'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        __user_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt_snapshot': farm['cum_reward_per_token']}\n    farm['total_staked'] -= amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    stake_token = importlib.import_module(farm['stake_token'])\n    stake_token.transfer(amount=amount, to=ctx.caller)\n    __Unstake({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount})\n\n\n@__export('con_mf_01')\ndef withdraw_rewards(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert farm['suspicious'\n        ] == False, 'Reward withdrawals are blocked for suspicious farms'\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    available_rewards = __user_saved_rewards[farm_id, ctx.caller]\n    assert amount <= available_rewards, 'Insufficient rewards available'\n    assert farm['paid_rewards'] + amount <= farm['total_rewards'\n        ], 'Exceeds farm total rewards'\n    __user_saved_rewards[farm_id, ctx.caller] = available_rewards - amount\n    farm['paid_rewards'] += amount\n    __farms[farm_id] = farm\n    __global_rewards_paid.set(__global_rewards_paid.get() + amount)\n    reward_token = importlib.import_module(farm['reward_token'])\n    reward_token.transfer(amount=amount, to=ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'user': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_mf_01')\ndef get_global_stats():\n    return {'total_farms': __farm_count.get(), 'global_total_staked':\n        __global_total_staked.get(), 'global_rewards_paid':\n        __global_rewards_paid.get(), 'total_unique_users':\n        __total_unique_users.get(), 'xwt_fee': __xwt_fee.get(),\n        'xwt_total_pool': __xwt_total_pool.get()}\n\n\n@__export('con_mf_01')\ndef get_farm_info(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    pending_rewards = farm['total_rewards'] - farm['paid_rewards']\n    is_active = now >= farm['start_time'] and now <= farm['end_time']\n    return {'farm_id': farm_id, 'creator': farm['creator'], 'stake_token':\n        farm['stake_token'], 'reward_token': farm['reward_token'],\n        'start_time': farm['start_time'], 'end_time': farm['end_time'],\n        'duration_days': farm['duration_days'], 'total_rewards': farm[\n        'total_rewards'], 'reward_rate': farm['reward_rate'],\n        'total_staked': farm['total_staked'], 'paid_rewards': farm[\n        'paid_rewards'], 'pending_rewards': pending_rewards, 'is_active':\n        is_active, 'verified': farm['verified'], 'suspicious': farm[\n        'suspicious']}\n\n\n@__export('con_mf_01')\ndef get_user_info(farm_id: int, user: str):\n    __farm_exists(farm_id)\n    deposit = __user_deposits[farm_id, user]\n    saved_rewards = __user_saved_rewards[farm_id, user]\n    if deposit == False:\n        return {'staked_amount': decimal('0.0'), 'saved_rewards':\n            saved_rewards, 'pending_rewards': decimal('0.0'),\n            'total_rewards': saved_rewards}\n    pending_rewards = __calculate_user_pending_rewards(farm_id, user)\n    total_rewards = saved_rewards + pending_rewards\n    return {'staked_amount': deposit['amount'], 'saved_rewards':\n        saved_rewards, 'pending_rewards': pending_rewards, 'total_rewards':\n        total_rewards, 'cum_rpt_snapshot': deposit['cum_rpt_snapshot']}\n\n\n@__export('con_mf_01')\ndef get_farms_count():\n    return __farm_count.get()\n\n\n@__export('con_mf_01')\ndef set_xwt_fee(new_fee: float):\n    __onlyowner()\n    assert new_fee > 0, 'Fee must be positive'\n    __xwt_fee.set(new_fee)\n\n\n@__export('con_mf_01')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    __onlyowner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_mf_01')\ndef get_xwt_fee():\n    return __xwt_fee.get()\n\n\n@__export('con_mf_01')\ndef get_xwt_total_pool():\n    return __xwt_total_pool.get()\n\n\n@__export('con_mf_01')\ndef get_current_time():\n    return now\n\n\n@__export('con_mf_01')\ndef get_contract_token_balance(token_contract: str):\n    token = importlib.import_module(token_contract)\n    return token.balance_of(ctx.this)\n"
            },
            {
                "key": "con_mf_01.__developer__",
                "value": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011"
            },
            {
                "key": "con_mf_01.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        0,
                        24,
                        24,
                        0
                    ]
                }
            },
            {
                "key": "con_mf_01.farm_count",
                "value": 1
            },
            {
                "key": "con_mf_01.farms:1",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            0,
                            44,
                            53,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            0,
                            44,
                            53,
                            0
                        ]
                    },
                    "duration_days": 1,
                    "total_rewards": 240,
                    "reward_rate": 0.002777777777777778,
                    "total_staked": {
                        "__fixed__": "1E+1"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            0,
                            44,
                            53,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_01.global_rewards_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_mf_01.global_total_staked",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_mf_01.owner",
                "value": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011"
            },
            {
                "key": "con_mf_01.total_unique_users",
                "value": 1
            },
            {
                "key": "con_mf_01.user_deposits:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+1"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_mf_01.user_participated:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": true
            },
            {
                "key": "con_mf_01.xwt_fee",
                "value": 10
            },
            {
                "key": "con_mf_01.xwt_total_pool",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_mf_02.__code__",
                "value": "__owner = Variable(contract='con_mf_02', name='owner')\n__farm_count = Variable(contract='con_mf_02', name='farm_count')\n__farms = Hash(default_value=False, contract='con_mf_02', name='farms')\n__user_deposits = Hash(default_value=False, contract='con_mf_02', name=\n    'user_deposits')\n__user_saved_rewards = Hash(default_value=0, contract='con_mf_02', name=\n    'user_saved_rewards')\n__global_total_staked = Variable(contract='con_mf_02', name=\n    'global_total_staked')\n__global_rewards_paid = Variable(contract='con_mf_02', name=\n    'global_rewards_paid')\n__total_unique_users = Variable(contract='con_mf_02', name='total_unique_users'\n    )\n__user_participated = Hash(default_value=False, contract='con_mf_02', name=\n    'user_participated')\n__xwt_fee = Variable(contract='con_mf_02', name='xwt_fee')\n__xwt_total_pool = Variable(contract='con_mf_02', name='xwt_total_pool')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'stake_token': {'type': str, 'idx': True},\n    'reward_token': {'type': str, 'idx': True}, 'duration_days': {'type':\n    int}, 'total_rewards': {'type': (int, float, decimal)}, 'reward_rate':\n    {'type': (int, float, decimal)}}, contract='con_mf_02', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {'type': (\n    int, float, decimal)}}, contract='con_mf_02', name='Deposit')\n__Unstake = LogEvent(event='Unstake', params={'farm_id': {'type': int,\n    'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {'type': (\n    int, float, decimal)}}, contract='con_mf_02', name='Unstake')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_mf_02', name=\n    'WithdrawRewards')\n\n\ndef __onlyowner():\n    assert __owner.get(\n        ) == ctx.caller, 'FORBIDDEN: Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert farm['creator'\n        ] == ctx.caller, 'FORBIDDEN: Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert now >= farm['start_time'] and now <= farm['end_time'\n        ], 'Farm is not active'\n\n\ndef __farm_not_ended(farm_id: int):\n    farm = __farms[farm_id]\n    assert now <= farm['end_time'], 'Farm has ended'\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_count.set(0)\n    __global_total_staked.set(decimal('0.0'))\n    __global_rewards_paid.set(decimal('0.0'))\n    __total_unique_users.set(0)\n    __xwt_fee.set(decimal('1.0'))\n    __xwt_total_pool.set(decimal('0.0'))\n\n\n@__export('con_mf_02')\ndef create_farm(stake_token: str, reward_token: str, duration_days: int,\n    total_rewards: float):\n    assert duration_days > 0, 'Duration must be positive'\n    assert total_rewards > 0, 'Total rewards must be positive'\n    fee = __xwt_fee.get()\n    xwt_token = importlib.import_module('con_xwt')\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    creator_balance = xwt_token.balance_of(ctx.caller)\n    assert creator_balance >= fee, 'Insufficient XWT balance to pay creation fee'\n    xwt_token.transfer_from(amount=fee, to=ctx.this, main_account=ctx.caller)\n    __xwt_total_pool.set(__xwt_total_pool.get() + fee)\n    stake_tok = importlib.import_module(stake_token)\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(stake_tok, token_interface\n        ), 'Invalid stake token interface'\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    creator_reward_balance = reward_tok.balance_of(ctx.caller)\n    assert creator_reward_balance >= total_rewards, 'Insufficient reward token balance to create farm'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    duration_seconds = duration_days * 24 * 60 * 60\n    reward_rate = total_rewards / duration_seconds\n    __farm_count.set(__farm_count.get() + 1)\n    farm_id = __farm_count.get()\n    start_time = now\n    end_time = now + datetime.timedelta(days=duration_days)\n    __farms[farm_id] = {'creator': ctx.caller, 'stake_token': stake_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'duration_days': duration_days, 'total_rewards':\n        total_rewards, 'reward_rate': reward_rate, 'total_staked': decimal(\n        '0.0'), 'paid_rewards': decimal('0.0'), 'last_update': start_time,\n        'cum_reward_per_token': decimal('0.0'), 'verified': False,\n        'suspicious': False}\n    __FarmCreated({'farm_id': farm_id, 'stake_token': stake_token,\n        'reward_token': reward_token, 'duration_days': duration_days,\n        'total_rewards': total_rewards, 'reward_rate': reward_rate})\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    current_time = min(now, farm['end_time'])\n    if farm['total_staked'] > 0 and current_time > farm['last_update']:\n        time_delta = current_time - farm['last_update']\n        time_seconds = time_delta.days * 86400 + time_delta.seconds\n        reward_per_token_increment = time_seconds * farm['reward_rate'] / farm[\n            'total_staked']\n        farm['cum_reward_per_token'] += reward_per_token_increment\n        farm['last_update'] = current_time\n        __farms[farm_id] = farm\n\n\ndef __calculate_user_pending_rewards(farm_id: int, user: str):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n    farm = __farms[farm_id]\n    deposit = __user_deposits[farm_id, user]\n    if deposit == False:\n        return decimal('0.0')\n    current_cum_rpt = farm['cum_reward_per_token']\n    if farm['total_staked'] > 0:\n        current_time = min(now, farm['end_time'])\n        if current_time > farm['last_update']:\n            time_delta = current_time - farm['last_update']\n            time_seconds = time_delta.days * 86400 + time_delta.seconds\n            reward_increment = time_seconds * farm['reward_rate'] / farm[\n                'total_staked']\n            current_cum_rpt += reward_increment\n    pending = (current_cum_rpt - deposit['cum_rpt_snapshot']) * deposit[\n        'amount']\n    return pending\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    pending = __calculate_user_pending_rewards(farm_id, user)\n    if pending > 0:\n        current_saved = __user_saved_rewards[farm_id, user]\n        __user_saved_rewards[farm_id, user] = current_saved + pending\n        deposit = __user_deposits[farm_id, user]\n        if deposit != False:\n            farm = __farms[farm_id]\n            deposit['cum_rpt_snapshot'] = farm['cum_reward_per_token']\n            __user_deposits[farm_id, user] = deposit\n\n\n@__export('con_mf_02')\ndef deposit(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    __farm_not_ended(farm_id)\n    farm = __farms[farm_id]\n    assert farm['suspicious'\n        ] == False, 'Deposits are blocked for suspicious farms'\n    stake_token = importlib.import_module(farm['stake_token'])\n    user_balance = stake_token.balance_of(ctx.caller)\n    assert user_balance >= amount, 'Insufficient stake token balance'\n    stake_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.\n        caller)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    current_amount = decimal('0.0'\n        ) if current_deposit == False else current_deposit['amount']\n    if __user_participated[ctx.caller] == False:\n        __user_participated[ctx.caller] = True\n        __total_unique_users.set(__total_unique_users.get() + 1)\n    __user_deposits[farm_id, ctx.caller] = {'amount': current_amount +\n        amount, 'cum_rpt_snapshot': farm['cum_reward_per_token']}\n    farm['total_staked'] += amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    __Deposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount})\n\n\n@__export('con_mf_02')\ndef unstake(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    deposit = __user_deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit found'\n    assert deposit['amount'] >= amount, 'Insufficient staked amount'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        __user_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt_snapshot': farm['cum_reward_per_token']}\n    farm['total_staked'] -= amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    stake_token = importlib.import_module(farm['stake_token'])\n    stake_token.transfer(amount=amount, to=ctx.caller)\n    __Unstake({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount})\n\n\n@__export('con_mf_02')\ndef withdraw_rewards(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert farm['suspicious'\n        ] == False, 'Reward withdrawals are blocked for suspicious farms'\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    total_available_rewards = __user_saved_rewards[farm_id, ctx.caller]\n    assert total_available_rewards > 0, 'No rewards available to withdraw'\n    assert farm['paid_rewards'] + total_available_rewards <= farm[\n        'total_rewards'], 'Exceeds farm total rewards'\n    __user_saved_rewards[farm_id, ctx.caller] = 0\n    farm['paid_rewards'] += total_available_rewards\n    __farms[farm_id] = farm\n    __global_rewards_paid.set(__global_rewards_paid.get() +\n        total_available_rewards)\n    reward_token = importlib.import_module(farm['reward_token'])\n    reward_token.transfer(amount=total_available_rewards, to=ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'user': ctx.caller, 'amount':\n        total_available_rewards})\n\n\n@__export('con_mf_02')\ndef get_global_stats():\n    return {'total_farms': __farm_count.get(), 'global_total_staked':\n        __global_total_staked.get(), 'global_rewards_paid':\n        __global_rewards_paid.get(), 'total_unique_users':\n        __total_unique_users.get(), 'xwt_fee': __xwt_fee.get(),\n        'xwt_total_pool': __xwt_total_pool.get()}\n\n\n@__export('con_mf_02')\ndef get_farm_info(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    pending_rewards = farm['total_rewards'] - farm['paid_rewards']\n    is_active = now >= farm['start_time'] and now <= farm['end_time']\n    return {'farm_id': farm_id, 'creator': farm['creator'], 'stake_token':\n        farm['stake_token'], 'reward_token': farm['reward_token'],\n        'start_time': farm['start_time'], 'end_time': farm['end_time'],\n        'duration_days': farm['duration_days'], 'total_rewards': farm[\n        'total_rewards'], 'reward_rate': farm['reward_rate'],\n        'total_staked': farm['total_staked'], 'paid_rewards': farm[\n        'paid_rewards'], 'pending_rewards': pending_rewards, 'is_active':\n        is_active, 'verified': farm['verified'], 'suspicious': farm[\n        'suspicious']}\n\n\n@__export('con_mf_02')\ndef get_user_info(farm_id: int, user: str):\n    __farm_exists(farm_id)\n    deposit = __user_deposits[farm_id, user]\n    saved_rewards = __user_saved_rewards[farm_id, user]\n    if deposit == False:\n        return {'staked_amount': decimal('0.0'), 'saved_rewards':\n            saved_rewards, 'pending_rewards': decimal('0.0'),\n            'total_rewards': saved_rewards}\n    pending_rewards = __calculate_user_pending_rewards(farm_id, user)\n    total_rewards = saved_rewards + pending_rewards\n    return {'staked_amount': deposit['amount'], 'saved_rewards':\n        saved_rewards, 'pending_rewards': pending_rewards, 'total_rewards':\n        total_rewards, 'cum_rpt_snapshot': deposit['cum_rpt_snapshot']}\n\n\n@__export('con_mf_02')\ndef get_farms_count():\n    return __farm_count.get()\n\n\n@__export('con_mf_02')\ndef set_xwt_fee(new_fee: float):\n    __onlyowner()\n    assert new_fee > 0, 'Fee must be positive'\n    __xwt_fee.set(new_fee)\n\n\n@__export('con_mf_02')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    __onlyowner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_mf_02')\ndef get_xwt_fee():\n    return __xwt_fee.get()\n\n\n@__export('con_mf_02')\ndef get_xwt_total_pool():\n    return __xwt_total_pool.get()\n\n\n@__export('con_mf_02')\ndef get_current_time():\n    return now\n\n\n@__export('con_mf_02')\ndef get_contract_token_balance(token_contract: str):\n    token = importlib.import_module(token_contract)\n    return token.balance_of(ctx.this)\n"
            },
            {
                "key": "con_mf_02.__developer__",
                "value": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011"
            },
            {
                "key": "con_mf_02.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        2,
                        21,
                        36,
                        0
                    ]
                }
            },
            {
                "key": "con_mf_02.farm_count",
                "value": 6
            },
            {
                "key": "con_mf_02.farms:1",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            2,
                            24,
                            16,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            2,
                            24,
                            16,
                            0
                        ]
                    },
                    "duration_days": 1,
                    "total_rewards": 240,
                    "reward_rate": 0.002777777777777778,
                    "total_staked": {
                        "__fixed__": "6.02E+3"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            6,
                            53,
                            1,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "1.265302547701864717500703907553"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_02.farms:2",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_stellar",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            5,
                            2,
                            50,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            5,
                            2,
                            50,
                            0
                        ]
                    },
                    "duration_days": 1,
                    "total_rewards": 2400,
                    "reward_rate": 0.027777777777777776,
                    "total_staked": {
                        "__fixed__": "2E+2"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            5,
                            2,
                            50,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_02.farms:3",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            5,
                            27,
                            7,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            5,
                            27,
                            7,
                            0
                        ]
                    },
                    "duration_days": 1,
                    "total_rewards": 240,
                    "reward_rate": 0.002777777777777778,
                    "total_staked": {
                        "__fixed__": "2E+3"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            6,
                            53,
                            49,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "0.014450000000000001"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_02.farms:4",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_pi",
                    "reward_token": "con_stellar",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            6,
                            12,
                            42,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            10,
                            6,
                            12,
                            42,
                            0
                        ]
                    },
                    "duration_days": 3,
                    "total_rewards": 7200,
                    "reward_rate": 0.027777777777777776,
                    "total_staked": {
                        "__fixed__": "1E+2"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            6,
                            12,
                            42,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_02.farms:5",
                "value": {
                    "creator": "6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                    "stake_token": "con_fire",
                    "reward_token": "con_fire",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            6,
                            14,
                            40,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            9,
                            6,
                            14,
                            40,
                            0
                        ]
                    },
                    "duration_days": 2,
                    "total_rewards": 100,
                    "reward_rate": 0.0005787037037037037,
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            6,
                            14,
                            40,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_02.farms:6",
                "value": {
                    "creator": "6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                    "stake_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            6,
                            16,
                            13,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            9,
                            6,
                            16,
                            13,
                            0
                        ]
                    },
                    "duration_days": 2,
                    "total_rewards": 100,
                    "reward_rate": 0.0005787037037037037,
                    "total_staked": {
                        "__fixed__": "0"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            6,
                            16,
                            13,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_02.global_rewards_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_mf_02.global_total_staked",
                "value": {
                    "__fixed__": "8.32E+3"
                }
            },
            {
                "key": "con_mf_02.owner",
                "value": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011"
            },
            {
                "key": "con_mf_02.total_unique_users",
                "value": 3
            },
            {
                "key": "con_mf_02.user_deposits:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1.01E+3"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "1.263564137105838227434478741991"
                    }
                }
            },
            {
                "key": "con_mf_02.user_deposits:1:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": {
                    "amount": {
                        "__fixed__": "1.01E+3"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "1.265302547701864717500703907553"
                    }
                }
            },
            {
                "key": "con_mf_02.user_deposits:1:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "4E+3"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "1.265302547701864717500703907553"
                    }
                }
            },
            {
                "key": "con_mf_02.user_deposits:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_mf_02.user_deposits:2:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_mf_02.user_deposits:3:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "2E+3"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "0.014450000000000001"
                    }
                }
            },
            {
                "key": "con_mf_02.user_deposits:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_mf_02.user_participated:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": true
            },
            {
                "key": "con_mf_02.user_participated:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": true
            },
            {
                "key": "con_mf_02.user_participated:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": true
            },
            {
                "key": "con_mf_02.user_saved_rewards:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "37.82219444983714302565521257891"
                }
            },
            {
                "key": "con_mf_02.user_saved_rewards:1:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": {
                    "__fixed__": "0.57989577361005884432974823887"
                }
            },
            {
                "key": "con_mf_02.user_saved_rewards:1:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "__fixed__": "4.766207593379680132450331124"
                }
            },
            {
                "key": "con_mf_02.user_saved_rewards:3:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "__fixed__": "14.450000000000001"
                }
            },
            {
                "key": "con_mf_02.xwt_fee",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_mf_02.xwt_total_pool",
                "value": {
                    "__fixed__": "6"
                }
            },
            {
                "key": "con_mf_03.__code__",
                "value": "__owner = Variable(contract='con_mf_03', name='owner')\n__farm_count = Variable(contract='con_mf_03', name='farm_count')\n__farms = Hash(default_value=False, contract='con_mf_03', name='farms')\n__user_deposits = Hash(default_value=False, contract='con_mf_03', name=\n    'user_deposits')\n__user_saved_rewards = Hash(default_value=0, contract='con_mf_03', name=\n    'user_saved_rewards')\n__global_total_staked = Variable(contract='con_mf_03', name=\n    'global_total_staked')\n__global_rewards_paid = Variable(contract='con_mf_03', name=\n    'global_rewards_paid')\n__total_unique_users = Variable(contract='con_mf_03', name='total_unique_users'\n    )\n__user_participated = Hash(default_value=False, contract='con_mf_03', name=\n    'user_participated')\n__xwt_fee = Variable(contract='con_mf_03', name='xwt_fee')\n__xwt_total_pool = Variable(contract='con_mf_03', name='xwt_total_pool')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'stake_token': {'type': str, 'idx': True},\n    'reward_token': {'type': str, 'idx': True}, 'duration_days': {'type':\n    int}, 'total_rewards': {'type': (int, float, decimal)}, 'reward_rate':\n    {'type': (int, float, decimal)}}, contract='con_mf_03', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {'type': (\n    int, float, decimal)}}, contract='con_mf_03', name='Deposit')\n__Unstake = LogEvent(event='Unstake', params={'farm_id': {'type': int,\n    'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {'type': (\n    int, float, decimal)}}, contract='con_mf_03', name='Unstake')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_mf_03', name=\n    'WithdrawRewards')\n\n\ndef __onlyowner():\n    assert __owner.get(\n        ) == ctx.caller, 'FORBIDDEN: Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert farm['creator'\n        ] == ctx.caller, 'FORBIDDEN: Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert now >= farm['start_time'] and now <= farm['end_time'\n        ], 'Farm is not active'\n\n\ndef __farm_not_ended(farm_id: int):\n    farm = __farms[farm_id]\n    assert now <= farm['end_time'], 'Farm has ended'\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_count.set(0)\n    __global_total_staked.set(decimal('0.0'))\n    __global_rewards_paid.set(decimal('0.0'))\n    __total_unique_users.set(0)\n    __xwt_fee.set(decimal('1000.0'))\n    __xwt_total_pool.set(decimal('0.0'))\n\n\n@__export('con_mf_03')\ndef create_farm(stake_token: str, reward_token: str, duration_days: int,\n    total_rewards: float):\n    assert duration_days > 0, 'Duration must be positive'\n    assert total_rewards > 0, 'Total rewards must be positive'\n    fee = __xwt_fee.get()\n    xwt_token = importlib.import_module('con_xwt')\n    assert importlib.enforce_interface(xwt_token, token_interface\n        ), 'Invalid XWT token interface'\n    creator_balance = xwt_token.balance_of(ctx.caller)\n    assert creator_balance >= fee, 'Insufficient XWT balance to pay creation fee'\n    xwt_token.transfer_from(amount=fee, to=ctx.this, main_account=ctx.caller)\n    __xwt_total_pool.set(__xwt_total_pool.get() + fee)\n    stake_tok = importlib.import_module(stake_token)\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(stake_tok, token_interface\n        ), 'Invalid stake token interface'\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    creator_reward_balance = reward_tok.balance_of(ctx.caller)\n    assert creator_reward_balance >= total_rewards, 'Insufficient reward token balance to create farm'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    duration_seconds = duration_days * 24 * 60 * 60\n    reward_rate = total_rewards / duration_seconds\n    __farm_count.set(__farm_count.get() + 1)\n    farm_id = __farm_count.get()\n    start_time = now\n    end_time = now + datetime.timedelta(days=duration_days)\n    __farms[farm_id] = {'creator': ctx.caller, 'stake_token': stake_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'duration_days': duration_days, 'total_rewards':\n        total_rewards, 'reward_rate': reward_rate, 'total_staked': decimal(\n        '0.0'), 'paid_rewards': decimal('0.0'), 'last_update': start_time,\n        'cum_reward_per_token': decimal('0.0'), 'verified': False,\n        'suspicious': False}\n    __FarmCreated({'farm_id': farm_id, 'stake_token': stake_token,\n        'reward_token': reward_token, 'duration_days': duration_days,\n        'total_rewards': total_rewards, 'reward_rate': reward_rate})\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    current_time = min(now, farm['end_time'])\n    if farm['total_staked'] > 0 and current_time > farm['last_update']:\n        time_delta = current_time - farm['last_update']\n        reward_per_token_increment = time_delta.total_seconds() * farm[\n            'reward_rate'] / farm['total_staked']\n        farm['cum_reward_per_token'] += reward_per_token_increment\n        farm['last_update'] = current_time\n        __farms[farm_id] = farm\n\n\ndef __calculate_user_pending_rewards(farm_id: int, user: str):\n    farm = __farms[farm_id]\n    deposit = __user_deposits[farm_id, user]\n    if deposit == False:\n        return decimal('0.0')\n    current_cum_rpt = farm['cum_reward_per_token']\n    if farm['total_staked'] > 0:\n        current_time = min(now, farm['end_time'])\n        if current_time > farm['last_update']:\n            time_delta = current_time - farm['last_update']\n            reward_increment = time_delta.total_seconds() * farm['reward_rate'\n                ] / farm['total_staked']\n            current_cum_rpt += reward_increment\n    pending = (current_cum_rpt - deposit['cum_rpt_snapshot']) * deposit[\n        'amount']\n    return pending\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    pending = __calculate_user_pending_rewards(farm_id, user)\n    if pending > 0:\n        current_saved = __user_saved_rewards[farm_id, user]\n        __user_saved_rewards[farm_id, user] = current_saved + pending\n        deposit = __user_deposits[farm_id, user]\n        if deposit != False:\n            farm = __farms[farm_id]\n            deposit['cum_rpt_snapshot'] = farm['cum_reward_per_token']\n            __user_deposits[farm_id, user] = deposit\n\n\n@__export('con_mf_03')\ndef deposit(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    __farm_not_ended(farm_id)\n    farm = __farms[farm_id]\n    assert farm['suspicious'\n        ] == False, 'Deposits are blocked for suspicious farms'\n    stake_token = importlib.import_module(farm['stake_token'])\n    user_balance = stake_token.balance_of(ctx.caller)\n    assert user_balance >= amount, 'Insufficient stake token balance'\n    stake_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.\n        caller)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    current_amount = decimal('0.0'\n        ) if current_deposit == False else current_deposit['amount']\n    if __user_participated[ctx.caller] == False:\n        __user_participated[ctx.caller] = True\n        __total_unique_users.set(__total_unique_users.get() + 1)\n    __user_deposits[farm_id, ctx.caller] = {'amount': current_amount +\n        amount, 'cum_rpt_snapshot': farm['cum_reward_per_token']}\n    farm['total_staked'] += amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    __Deposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount})\n\n\n@__export('con_mf_03')\ndef unstake(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    deposit = __user_deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit found'\n    assert deposit['amount'] >= amount, 'Insufficient staked amount'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        __user_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt_snapshot': farm['cum_reward_per_token']}\n    farm['total_staked'] -= amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    stake_token = importlib.import_module(farm['stake_token'])\n    stake_token.transfer(amount=amount, to=ctx.caller)\n    __Unstake({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount})\n\n\n@__export('con_mf_03')\ndef withdraw_rewards(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert farm['suspicious'\n        ] == False, 'Reward withdrawals are blocked for suspicious farms'\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    available_rewards = __user_saved_rewards[farm_id, ctx.caller]\n    assert amount <= available_rewards, 'Insufficient rewards available'\n    assert farm['paid_rewards'] + amount <= farm['total_rewards'\n        ], 'Exceeds farm total rewards'\n    __user_saved_rewards[farm_id, ctx.caller] = available_rewards - amount\n    farm['paid_rewards'] += amount\n    __farms[farm_id] = farm\n    __global_rewards_paid.set(__global_rewards_paid.get() + amount)\n    reward_token = importlib.import_module(farm['reward_token'])\n    reward_token.transfer(amount=amount, to=ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'user': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_mf_03')\ndef get_global_stats():\n    return {'total_farms': __farm_count.get(), 'global_total_staked':\n        __global_total_staked.get(), 'global_rewards_paid':\n        __global_rewards_paid.get(), 'total_unique_users':\n        __total_unique_users.get(), 'xwt_fee': __xwt_fee.get(),\n        'xwt_total_pool': __xwt_total_pool.get()}\n\n\n@__export('con_mf_03')\ndef get_farm_info(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    pending_rewards = farm['total_rewards'] - farm['paid_rewards']\n    is_active = now >= farm['start_time'] and now <= farm['end_time']\n    return {'farm_id': farm_id, 'creator': farm['creator'], 'stake_token':\n        farm['stake_token'], 'reward_token': farm['reward_token'],\n        'start_time': farm['start_time'], 'end_time': farm['end_time'],\n        'duration_days': farm['duration_days'], 'total_rewards': farm[\n        'total_rewards'], 'reward_rate': farm['reward_rate'],\n        'total_staked': farm['total_staked'], 'paid_rewards': farm[\n        'paid_rewards'], 'pending_rewards': pending_rewards, 'is_active':\n        is_active, 'verified': farm['verified'], 'suspicious': farm[\n        'suspicious']}\n\n\n@__export('con_mf_03')\ndef get_user_info(farm_id: int, user: str):\n    __farm_exists(farm_id)\n    deposit = __user_deposits[farm_id, user]\n    saved_rewards = __user_saved_rewards[farm_id, user]\n    if deposit == False:\n        return {'staked_amount': decimal('0.0'), 'saved_rewards':\n            saved_rewards, 'pending_rewards': decimal('0.0'),\n            'total_rewards': saved_rewards}\n    pending_rewards = __calculate_user_pending_rewards(farm_id, user)\n    total_rewards = saved_rewards + pending_rewards\n    return {'staked_amount': deposit['amount'], 'saved_rewards':\n        saved_rewards, 'pending_rewards': pending_rewards, 'total_rewards':\n        total_rewards, 'cum_rpt_snapshot': deposit['cum_rpt_snapshot']}\n\n\n@__export('con_mf_03')\ndef get_farms_count():\n    return __farm_count.get()\n\n\n@__export('con_mf_03')\ndef set_xwt_fee(new_fee: float):\n    __onlyowner()\n    assert new_fee > 0, 'Fee must be positive'\n    __xwt_fee.set(new_fee)\n\n\n@__export('con_mf_03')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    __onlyowner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_mf_03')\ndef get_xwt_fee():\n    return __xwt_fee.get()\n\n\n@__export('con_mf_03')\ndef get_xwt_total_pool():\n    return __xwt_total_pool.get()\n\n\n@__export('con_mf_03')\ndef get_current_time():\n    return now\n\n\n@__export('con_mf_03')\ndef get_contract_token_balance(token_contract: str):\n    token = importlib.import_module(token_contract)\n    return token.balance_of(ctx.this)\n"
            },
            {
                "key": "con_mf_03.__developer__",
                "value": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011"
            },
            {
                "key": "con_mf_03.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        19,
                        58,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_mf_03.farm_count",
                "value": 1
            },
            {
                "key": "con_mf_03.farms:1",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            20,
                            0,
                            23,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            20,
                            0,
                            23,
                            0
                        ]
                    },
                    "duration_days": 1,
                    "total_rewards": 2400,
                    "reward_rate": 0.027777777777777776,
                    "total_staked": {
                        "__fixed__": "1E+1"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            20,
                            0,
                            23,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "0"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_03.global_rewards_paid",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_mf_03.global_total_staked",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_mf_03.owner",
                "value": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011"
            },
            {
                "key": "con_mf_03.total_unique_users",
                "value": 1
            },
            {
                "key": "con_mf_03.user_deposits:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+1"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_mf_03.user_participated:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": true
            },
            {
                "key": "con_mf_03.xwt_fee",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_mf_03.xwt_total_pool",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_mf_04.__code__",
                "value": "__owner = Variable(contract='con_mf_04', name='owner')\n__farm_count = Variable(contract='con_mf_04', name='farm_count')\n__farms = Hash(default_value=False, contract='con_mf_04', name='farms')\n__user_deposits = Hash(default_value=False, contract='con_mf_04', name=\n    'user_deposits')\n__user_saved_rewards = Hash(default_value=0, contract='con_mf_04', name=\n    'user_saved_rewards')\n__global_total_staked = Variable(contract='con_mf_04', name=\n    'global_total_staked')\n__global_rewards_paid = Variable(contract='con_mf_04', name=\n    'global_rewards_paid')\n__total_unique_users = Variable(contract='con_mf_04', name='total_unique_users'\n    )\n__user_participated = Hash(default_value=False, contract='con_mf_04', name=\n    'user_participated')\n__xwt_fee = Variable(contract='con_mf_04', name='xwt_fee')\n__xwt_total_pool = Variable(contract='con_mf_04', name='xwt_total_pool')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'stake_token': {'type': str, 'idx': True},\n    'reward_token': {'type': str, 'idx': True}, 'duration_days': {'type':\n    int}, 'total_rewards': {'type': (int, float, decimal)}, 'reward_rate':\n    {'type': (int, float, decimal)}}, contract='con_mf_04', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {'type': (\n    int, float, decimal)}}, contract='con_mf_04', name='Deposit')\n__Unstake = LogEvent(event='Unstake', params={'farm_id': {'type': int,\n    'idx': True}, 'user': {'type': str, 'idx': True}, 'amount': {'type': (\n    int, float, decimal)}}, contract='con_mf_04', name='Unstake')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'user': {'type': str, 'idx': True}, 'amount':\n    {'type': (int, float, decimal)}}, contract='con_mf_04', name=\n    'WithdrawRewards')\n\n\ndef __onlyowner():\n    assert __owner.get(\n        ) == ctx.caller, 'FORBIDDEN: Only owner can call this function'\n\n\ndef __only_farm_creator(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert farm['creator'\n        ] == ctx.caller, 'FORBIDDEN: Only farm creator can call this function'\n\n\ndef __farm_exists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef __farm_active(farm_id: int):\n    farm = __farms[farm_id]\n    assert now >= farm['start_time'] and now <= farm['end_time'\n        ], 'Farm is not active'\n\n\ndef __farm_not_ended(farm_id: int):\n    farm = __farms[farm_id]\n    assert now <= farm['end_time'], 'Farm has ended'\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __farm_count.set(0)\n    __global_total_staked.set(decimal('0.0'))\n    __global_rewards_paid.set(decimal('0.0'))\n    __total_unique_users.set(0)\n    __xwt_fee.set(decimal('1.0'))\n    __xwt_total_pool.set(decimal('0.0'))\n\n\n@__export('con_mf_04')\ndef create_farm(stake_token: str, reward_token: str, duration_days: int,\n    total_rewards: float):\n    assert duration_days > 0, 'Duration must be positive'\n    assert total_rewards > 0, 'Total rewards must be positive'\n    stake_tok = importlib.import_module(stake_token)\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(stake_tok, token_interface\n        ), 'Invalid stake token interface'\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token interface'\n    creator_reward_balance = reward_tok.balance_of(ctx.caller)\n    assert creator_reward_balance >= total_rewards, 'Insufficient reward token balance to create farm'\n    reward_tok.transfer_from(amount=total_rewards, to=ctx.this,\n        main_account=ctx.caller)\n    duration_seconds = duration_days * 24 * 60 * 60\n    reward_rate = total_rewards / duration_seconds\n    __farm_count.set(__farm_count.get() + 1)\n    farm_id = __farm_count.get()\n    start_time = now\n    end_time = now + datetime.timedelta(days=duration_days)\n    __farms[farm_id] = {'creator': ctx.caller, 'stake_token': stake_token,\n        'reward_token': reward_token, 'start_time': start_time, 'end_time':\n        end_time, 'duration_days': duration_days, 'total_rewards':\n        total_rewards, 'reward_rate': reward_rate, 'total_staked': decimal(\n        '0.0'), 'paid_rewards': decimal('0.0'), 'last_update': start_time,\n        'cum_reward_per_token': decimal('0.0'), 'verified': False,\n        'suspicious': False}\n    __FarmCreated({'farm_id': farm_id, 'stake_token': stake_token,\n        'reward_token': reward_token, 'duration_days': duration_days,\n        'total_rewards': total_rewards, 'reward_rate': reward_rate})\n\n\ndef __update_farm_rewards(farm_id: int):\n    farm = __farms[farm_id]\n    current_time = min(now, farm['end_time'])\n    if current_time > farm['last_update']:\n        if farm['total_staked'] > 0 and current_time >= farm['start_time']:\n            time_delta = current_time - max(farm['last_update'], farm[\n                'start_time'])\n            time_seconds = time_delta.days * 86400 + time_delta.seconds\n            reward_per_token_increment = time_seconds * farm['reward_rate'\n                ] / farm['total_staked']\n            farm['cum_reward_per_token'] += reward_per_token_increment\n        farm['last_update'] = current_time\n        __farms[farm_id] = farm\n\n\ndef __calculate_user_pending_rewards(farm_id: int, user: str):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n    farm = __farms[farm_id]\n    deposit = __user_deposits[farm_id, user]\n    if deposit == False:\n        return decimal('0.0')\n    current_cum_rpt = farm['cum_reward_per_token']\n    current_time = min(now, farm['end_time'])\n    if farm['total_staked'] > 0 and current_time >= farm['start_time'\n        ] and current_time > farm['last_update']:\n        time_delta = current_time - max(farm['last_update'], farm['start_time']\n            )\n        time_seconds = time_delta.days * 86400 + time_delta.seconds\n        reward_increment = time_seconds * farm['reward_rate'] / farm[\n            'total_staked']\n        current_cum_rpt += reward_increment\n    pending = (current_cum_rpt - deposit['cum_rpt_snapshot']) * deposit[\n        'amount']\n    return pending\n\n\ndef __harvest_user_rewards(farm_id: int, user: str):\n    deposit = __user_deposits[farm_id, user]\n    if deposit != False:\n        farm = __farms[farm_id]\n        pending = (farm['cum_reward_per_token'] - deposit['cum_rpt_snapshot']\n            ) * deposit['amount']\n        if pending > 0:\n            current_saved = __user_saved_rewards[farm_id, user]\n            __user_saved_rewards[farm_id, user] = current_saved + pending\n\n\n@__export('con_mf_04')\ndef deposit(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    __farm_not_ended(farm_id)\n    farm = __farms[farm_id]\n    assert farm['suspicious'\n        ] == False, 'Deposits are blocked for suspicious farms'\n    stake_token = importlib.import_module(farm['stake_token'])\n    user_balance = stake_token.balance_of(ctx.caller)\n    assert user_balance >= amount, 'Insufficient stake token balance'\n    stake_token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.\n        caller)\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    current_deposit = __user_deposits[farm_id, ctx.caller]\n    current_amount = decimal('0.0'\n        ) if current_deposit == False else current_deposit['amount']\n    if __user_participated[ctx.caller] == False:\n        __user_participated[ctx.caller] = True\n        __total_unique_users.set(__total_unique_users.get() + 1)\n    __user_deposits[farm_id, ctx.caller] = {'amount': current_amount +\n        amount, 'cum_rpt_snapshot': farm['cum_reward_per_token']}\n    farm['total_staked'] += amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() + amount)\n    __Deposit({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount})\n\n\n@__export('con_mf_04')\ndef unstake(farm_id: int, amount: float):\n    assert amount > 0, 'Amount must be positive'\n    __farm_exists(farm_id)\n    deposit = __user_deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit found'\n    assert deposit['amount'] >= amount, 'Insufficient staked amount'\n    farm = __farms[farm_id]\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __user_deposits[farm_id, ctx.caller] = False\n    else:\n        __user_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt_snapshot': farm['cum_reward_per_token']}\n    farm['total_staked'] -= amount\n    __farms[farm_id] = farm\n    __global_total_staked.set(__global_total_staked.get() - amount)\n    stake_token = importlib.import_module(farm['stake_token'])\n    stake_token.transfer(amount=amount, to=ctx.caller)\n    __Unstake({'farm_id': farm_id, 'user': ctx.caller, 'amount': amount})\n\n\n@__export('con_mf_04')\ndef withdraw_rewards(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    assert farm['suspicious'\n        ] == False, 'Reward withdrawals are blocked for suspicious farms'\n    __update_farm_rewards(farm_id)\n    __harvest_user_rewards(farm_id, ctx.caller)\n    total_available_rewards = __user_saved_rewards[farm_id, ctx.caller]\n    assert total_available_rewards > 0, 'No rewards available to withdraw'\n    assert farm['paid_rewards'] + total_available_rewards <= farm[\n        'total_rewards'], 'Exceeds farm total rewards'\n    __user_saved_rewards[farm_id, ctx.caller] = 0\n    farm['paid_rewards'] += total_available_rewards\n    __farms[farm_id] = farm\n    __global_rewards_paid.set(__global_rewards_paid.get() +\n        total_available_rewards)\n    reward_token = importlib.import_module(farm['reward_token'])\n    reward_token.transfer(amount=total_available_rewards, to=ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'user': ctx.caller, 'amount':\n        total_available_rewards})\n\n\n@__export('con_mf_04')\ndef get_global_stats():\n    return {'total_farms': __farm_count.get(), 'global_total_staked':\n        __global_total_staked.get(), 'global_rewards_paid':\n        __global_rewards_paid.get(), 'total_unique_users':\n        __total_unique_users.get(), 'xwt_fee': __xwt_fee.get(),\n        'xwt_total_pool': __xwt_total_pool.get()}\n\n\n@__export('con_mf_04')\ndef get_farm_info(farm_id: int):\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    pending_rewards = farm['total_rewards'] - farm['paid_rewards']\n    is_active = now >= farm['start_time'] and now <= farm['end_time']\n    return {'farm_id': farm_id, 'creator': farm['creator'], 'stake_token':\n        farm['stake_token'], 'reward_token': farm['reward_token'],\n        'start_time': farm['start_time'], 'end_time': farm['end_time'],\n        'duration_days': farm['duration_days'], 'total_rewards': farm[\n        'total_rewards'], 'reward_rate': farm['reward_rate'],\n        'total_staked': farm['total_staked'], 'paid_rewards': farm[\n        'paid_rewards'], 'pending_rewards': pending_rewards, 'is_active':\n        is_active, 'verified': farm['verified'], 'suspicious': farm[\n        'suspicious']}\n\n\n@__export('con_mf_04')\ndef get_user_info(farm_id: int, user: str):\n    __farm_exists(farm_id)\n    deposit = __user_deposits[farm_id, user]\n    saved_rewards = __user_saved_rewards[farm_id, user]\n    if deposit == False:\n        return {'staked_amount': decimal('0.0'), 'saved_rewards':\n            saved_rewards, 'pending_rewards': decimal('0.0'),\n            'total_rewards': saved_rewards}\n    pending_rewards = __calculate_user_pending_rewards(farm_id, user)\n    total_rewards = saved_rewards + pending_rewards\n    return {'staked_amount': deposit['amount'], 'saved_rewards':\n        saved_rewards, 'pending_rewards': pending_rewards, 'total_rewards':\n        total_rewards, 'cum_rpt_snapshot': deposit['cum_rpt_snapshot']}\n\n\n@__export('con_mf_04')\ndef get_farms_count():\n    return __farm_count.get()\n\n\n@__export('con_mf_04')\ndef set_xwt_fee(new_fee: float):\n    __onlyowner()\n    assert new_fee > 0, 'Fee must be positive'\n    __xwt_fee.set(new_fee)\n\n\n@__export('con_mf_04')\ndef set_farm_status(farm_id: int, verified: bool, suspicious: bool):\n    __onlyowner()\n    __farm_exists(farm_id)\n    farm = __farms[farm_id]\n    farm['verified'] = verified\n    farm['suspicious'] = suspicious\n    __farms[farm_id] = farm\n\n\n@__export('con_mf_04')\ndef get_xwt_fee():\n    return __xwt_fee.get()\n\n\n@__export('con_mf_04')\ndef get_xwt_total_pool():\n    return __xwt_total_pool.get()\n\n\n@__export('con_mf_04')\ndef get_current_time():\n    return now\n\n\n@__export('con_mf_04')\ndef get_contract_token_balance(token_contract: str):\n    token = importlib.import_module(token_contract)\n    return token.balance_of(ctx.this)\n"
            },
            {
                "key": "con_mf_04.__developer__",
                "value": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011"
            },
            {
                "key": "con_mf_04.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        20,
                        11,
                        56,
                        0
                    ]
                }
            },
            {
                "key": "con_mf_04.farm_count",
                "value": 4
            },
            {
                "key": "con_mf_04.farms:1",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_xwt",
                    "reward_token": "con_xwt",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            20,
                            15,
                            10,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            20,
                            15,
                            10,
                            0
                        ]
                    },
                    "duration_days": 1,
                    "total_rewards": 2400,
                    "reward_rate": 0.027777777777777776,
                    "total_staked": {
                        "__fixed__": "1.1E+3"
                    },
                    "paid_rewards": {
                        "__fixed__": "106.1944444444444444"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            21,
                            39,
                            30,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "1.250277777777777764"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_04.farms:2",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_stellar",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            20,
                            19,
                            21,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            20,
                            19,
                            21,
                            0
                        ]
                    },
                    "duration_days": 1,
                    "total_rewards": 24000,
                    "reward_rate": 0.2777777777777778,
                    "total_staked": {
                        "__fixed__": "1911"
                    },
                    "paid_rewards": {
                        "__fixed__": "27.8649921507064379905808477232"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            0,
                            44,
                            48,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "3.181582049746526552927219735188"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_04.farms:3",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            7,
                            21,
                            48,
                            14,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            21,
                            48,
                            14,
                            0
                        ]
                    },
                    "duration_days": 1,
                    "total_rewards": 1440,
                    "reward_rate": 0.016666666666666666,
                    "total_staked": {
                        "__fixed__": "1.0001E+5"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            12,
                            45,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "38.451666666666665"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_04.farms:4",
                "value": {
                    "creator": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                    "stake_token": "con_pi",
                    "reward_token": "con_pi",
                    "start_time": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            1,
                            4,
                            2,
                            0
                        ]
                    },
                    "end_time": {
                        "__time__": [
                            2025,
                            9,
                            7,
                            1,
                            4,
                            2,
                            0
                        ]
                    },
                    "duration_days": 30,
                    "total_rewards": 72000,
                    "reward_rate": 0.027777777777777776,
                    "total_staked": {
                        "__fixed__": "2E+1"
                    },
                    "paid_rewards": {
                        "__fixed__": "0"
                    },
                    "last_update": {
                        "__time__": [
                            2025,
                            8,
                            8,
                            4,
                            10,
                            8,
                            0
                        ]
                    },
                    "cum_reward_per_token": {
                        "__fixed__": "30.513888888888886"
                    },
                    "verified": false,
                    "suspicious": false
                }
            },
            {
                "key": "con_mf_04.global_rewards_paid",
                "value": {
                    "__fixed__": "134.0594365951508823905808477232"
                }
            },
            {
                "key": "con_mf_04.global_total_staked",
                "value": {
                    "__fixed__": "103041"
                }
            },
            {
                "key": "con_mf_04.owner",
                "value": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011"
            },
            {
                "key": "con_mf_04.total_unique_users",
                "value": 2
            },
            {
                "key": "con_mf_04.user_deposits:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "1.05"
                    }
                }
            },
            {
                "key": "con_mf_04.user_deposits:1:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": {
                    "amount": {
                        "__fixed__": "1E+3"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "1.250277777777777764"
                    }
                }
            },
            {
                "key": "con_mf_04.user_deposits:2:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1011"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_mf_04.user_deposits:2:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": {
                    "amount": {
                        "__fixed__": "9E+2"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "3.181582049746526552927219735188"
                    }
                }
            },
            {
                "key": "con_mf_04.user_deposits:3:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+5"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "38.451666666666665"
                    }
                }
            },
            {
                "key": "con_mf_04.user_deposits:3:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": {
                    "amount": {
                        "__fixed__": "1E+1"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_mf_04.user_deposits:4:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+1"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_mf_04.user_deposits:4:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": {
                    "amount": {
                        "__fixed__": "1E+1"
                    },
                    "cum_rpt_snapshot": {
                        "__fixed__": "30.513888888888886"
                    }
                }
            },
            {
                "key": "con_mf_04.user_participated:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": true
            },
            {
                "key": "con_mf_04.user_participated:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": true
            },
            {
                "key": "con_mf_04.user_saved_rewards:1:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": 0
            },
            {
                "key": "con_mf_04.user_saved_rewards:2:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": 0
            },
            {
                "key": "con_mf_04.xwt_fee",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_mf_04.xwt_total_pool",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_mimc_cts.__code__",
                "value": "cts = [0, \n    7120861356467848435263064379192047478074060781135320967663101236819528304084\n    , \n    5024705281721889198577876690145313457398658950011302225525409148828000436681\n    , \n    17980351014018068290387269214713820287804403312720763401943303895585469787384\n    , \n    19886576439381707240399940949310933992335779767309383709787331470398675714258\n    , \n    1213715278223786725806155661738676903520350859678319590331207960381534602599\n    , \n    18162138253399958831050545255414688239130588254891200470934232514682584734511\n    , \n    7667462281466170157858259197976388676420847047604921256361474169980037581876\n    , \n    7207551498477838452286210989212982851118089401128156132319807392460388436957\n    , \n    9864183311657946807255900203841777810810224615118629957816193727554621093838\n    , \n    4798196928559910300796064665904583125427459076060519468052008159779219347957\n    , \n    17387238494588145257484818061490088963673275521250153686214197573695921400950\n    , \n    10005334761930299057035055370088813230849810566234116771751925093634136574742\n    , \n    11897542014760736209670863723231849628230383119798486487899539017466261308762\n    , \n    16771780563523793011283273687253985566177232886900511371656074413362142152543\n    , \n    749264854018824809464168489785113337925400687349357088413132714480582918506\n    , \n    3683645737503705042628598550438395339383572464204988015434959428676652575331\n    , \n    7556750851783822914673316211129907782679509728346361368978891584375551186255\n    , \n    20391289379084797414557439284689954098721219201171527383291525676334308303023\n    , \n    18146517657445423462330854383025300323335289319277199154920964274562014376193\n    , \n    8080173465267536232534446836148661251987053305394647905212781979099916615292\n    , \n    10796443006899450245502071131975731672911747129805343722228413358507805531141\n    , \n    5404287610364961067658660283245291234008692303120470305032076412056764726509\n    , \n    4623894483395123520243967718315330178025957095502546813929290333264120223168\n    , \n    16845753148201777192406958674202574751725237939980634861948953189320362207797\n    , \n    4622170486584704769521001011395820886029808520586507873417553166762370293671\n    , \n    16688277490485052681847773549197928630624828392248424077804829676011512392564\n    , \n    11878652861183667748838188993669912629573713271883125458838494308957689090959\n    , \n    2436445725746972287496138382764643208791713986676129260589667864467010129482\n    , \n    1888098689545151571063267806606510032698677328923740058080630641742325067877\n    , \n    148924106504065664829055598316821983869409581623245780505601526786791681102\n    , \n    18875020877782404439294079398043479420415331640996249745272087358069018086569\n    , \n    15189693413320228845990326214136820307649565437237093707846682797649429515840\n    , \n    19669450123472657781282985229369348220906547335081730205028099210442632534079\n    , \n    5521922218264623411380547905210139511350706092570900075727555783240701821773\n    , \n    4144769320246558352780591737261172907511489963810975650573703217887429086546\n    , \n    10097732913112662248360143041019433907849917041759137293018029019134392559350\n    , \n    1720059427972723034107765345743336447947522473310069975142483982753181038321\n    , \n    6302388219880227251325608388535181451187131054211388356563634768253301290116\n    , \n    6745410632962119604799318394592010194450845483518862700079921360015766217097\n    , \n    10858157235265583624235850660462324469799552996870780238992046963007491306222\n    , \n    20241898894740093733047052816576694435372877719072347814065227797906130857593\n    , \n    10165780782761211520836029617746977303303335603838343292431760011576528327409\n    , \n    2832093654883670345969792724123161241696170611611744759675180839473215203706\n    , \n    153011722355526826233082383360057587249818749719433916258246100068258954737\n    , \n    20196970640587451358539129330170636295243141659030208529338914906436009086943\n    , \n    3180973917010545328313139835982464870638521890385603025657430208141494469656\n    , \n    17198004293191777441573635123110935015228014028618868252989374962722329283022\n    , \n    7642160509228669138628515458941659189680509753651629476399516332224325757132\n    , \n    19346204940546791021518535594447257347218878114049998691060016493806845179755\n    , \n    11501810868606870391127866188394535330696206817602260610801897042898616817272\n    , \n    3113973447392053821824427670386252797811804954746053461397972968381571297505\n    , \n    6545064306297957002139416752334741502722251869537551068239642131448768236585\n    , \n    5203908808704813498389265425172875593837960384349653691918590736979872578408\n    , \n    2246692432011290582160062129070762007374502637007107318105405626910313810224\n    , \n    11760570435432189127645691249600821064883781677693087773459065574359292849137\n    , \n    5543749482491340532547407723464609328207990784853381797689466144924198391839\n    , \n    8837549193990558762776520822018694066937602576881497343584903902880277769302\n    , \n    12855514863299373699594410385788943772765811961581749194183533625311486462501\n    , \n    5363660674689121676875069134269386492382220935599781121306637800261912519729\n    , \n    13162342403579303950549728848130828093497701266240457479693991108217307949435\n    , \n    916941639326869583414469202910306428966657806899788970948781207501251816730\n    , \n    15618589556584434434009868216186115416835494805174158488636000580759692174228\n    , \n    8959562060028569701043973060670353733575345393653685776974948916988033453971\n    , \n    16390754464333401712265575949874369157699293840516802426621216808905079127650\n    , \n    168282396747788514908709091757591226095443902501365500003618183905496160435\n    , \n    8327443473179334761744301768309008451162322941906921742120510244986704677004\n    , \n    17213012626801210615058753489149961717422101711567228037597150941152495100640\n    , \n    10394369641533736715250242399198097296122982486516256408681925424076248952280\n    , \n    17784386835392322654196171115293700800825771210400152504776806618892170162248\n    , \n    16533189939837087893364000390641148516479148564190420358849587959161226782982\n    , \n    18725396114211370207078434315900726338547621160475533496863298091023511945076\n    , \n    7132325028834551397904855671244375895110341505383911719294705267624034122405\n    , \n    148317947440800089795933930720822493695520852448386394775371401743494965187\n    , \n    19001050671757720352890779127693793630251266879994702723636759889378387053056\n    , \n    18824274411769830274877839365728651108434404855803844568234862945613766611460\n    , \n    12771414330193951156383998390424063470766226667986423961689712557338777174205\n    , \n    11332046574800279729678603488745295198038913503395629790213378101166488244657\n    , \n    9607550223176946388146938069307456967842408600269548190739947540821716354749\n    , \n    8756385288462344550200229174435953103162307705310807828651304665320046782583\n    , \n    176061952957067086877570020242717222844908281373122372938833890096257042779\n    , \n    12200212977482648306758992405065921724409841940671166017620928947866825250857\n    , \n    10868453624107875516866146499877130701929063632959660262366632833504750028858\n    , \n    2016095394399807253596787752134573207202567875457560571095586743878953450738\n    , \n    21815578223768330433802113452339488275704145896544481092014911825656390567514\n    , \n    4923772847693564777744725640710197015181591950368494148029046443433103381621\n    , \n    1813584943682214789802230765734821149202472893379265320098816901270224589984\n    , \n    10810123816265612772922113403831964815724109728287572256602010709288980656498\n    , \n    1153669123397255702524721206511185557982017410156956216465120456256288427021\n    , \n    5007518659266430200134478928344522649876467369278722765097865662497773767152\n    , \n    2511432546938591792036639990606464315121646668029252285288323664350666551637\n    , \n    32883284540320451295484135704808083452381176816565850047310272290579727564,\n    \n    10484856914279112612610993418405543310546746652738541161791501150994088679557\n    , \n    2026733759645519472558796412979210009170379159866522399881566309631434814953\n    , \n    14731806221235869882801331463708736361296174006732553130708107037190460654379\n    , \n    14740327483193277147065845135561988641238516852487657117813536909482068950652\n    , \n    18787428285295558781869865751953016580493190547148386433580291216673009884554\n    , \n    3804047064713122820157099453648459188816376755739202017447862327783289895072\n    , \n    16709604795697901641948603019242067672006293290826991671766611326262532802914\n    , \n    11061717085931490100602849654034280576915102867237101935487893025907907250695\n    , \n    2821730726367472966906149684046356272806484545281639696873240305052362149654\n    , \n    17467794879902895769410571945152708684493991588672014763135370927880883292655\n    , \n    1571520786233540988201616650622796363168031165456869481368085474420849243232\n    , \n    10041051776251223165849354194892664881051125330236567356945669006147134614302\n    , \n    3981753758468103976812813304477670033098707002886030847251581853700311567551\n    , \n    4365864398105436789177703571412645548020537580493599380018290523813331678900\n    , \n    2391801327305361293476178683853802679507598622000359948432171562543560193350\n    , \n    214219368547551689972421167733597094823289857206402800635962137077096090722\n    , \n    18192064100315141084242006659317257023098826945893371479835220462302399655674\n    , \n    15487549757142039139328911515400805508248576685795694919457041092150651939253\n    , \n    10142447197759703415402259672441315777933858467700579946665223821199077641122\n    , \n    11246573086260753259993971254725613211193686683988426513880826148090811891866\n    , \n    6574066859860991369704567902211886840188702386542112593710271426704432301235\n    , \n    11311085442652291634822798307831431035776248927202286895207125867542470350078\n    , \n    20977948360215259915441258687649465618185769343138135384346964466965010873779\n    , \n    792781492853909872425531014397300057232399608769451037135936617996830018501\n    , \n    5027602491523497423798779154966735896562099398367163998686335127580757861872\n    , \n    14595204575654316237672764823862241845410365278802914304953002937313300553572\n    , \n    13973538843621261113924259058427434053808430378163734641175100160836376897004\n    , \n    16395063164993626722686882727042150241125309409717445381854913964674649318585\n    , \n    8465768840047024550750516678171433288207841931251654898809033371655109266663\n    , \n    21345603324471810861925019445720576814602636473739003852898308205213912255830\n    , \n    21171984405852590343970239018692870799717057961108910523876770029017785940991\n    , \n    10761027113757988230637066281488532903174559953630210849190212601991063767647\n    , \n    6678298831065390834922566306988418588227382406175769592902974103663687992230\n    , \n    4993662582188632374202316265508850988596880036291765531885657575099537176757\n    , \n    18364168158495573675698600238443218434246806358811328083953887470513967121206\n    , \n    3506345610354615013737144848471391553141006285964325596214723571988011984829\n    , \n    248732676202643792226973868626360612151424823368345645514532870586234380100\n    , \n    10090204501612803176317709245679152331057882187411777688746797044706063410969\n    , \n    21297149835078365363970699581821844234354988617890041296044775371855432973500\n    , \n    16729368143229828574342820060716366330476985824952922184463387490091156065099\n    , \n    4467191506765339364971058668792642195242197133011672559453028147641428433293\n    , \n    8677548159358013363291014307402600830078662555833653517843708051504582990832\n    , \n    1022951765127126818581466247360193856197472064872288389992480993218645055345\n    , \n    1888195070251580606973417065636430294417895423429240431595054184472931224452\n    , \n    4221265384902749246920810956363310125115516771964522748896154428740238579824\n    , \n    2825393571154632139467378429077438870179957021959813965940638905853993971879\n    , \n    19171031072692942278056619599721228021635671304612437350119663236604712493093\n    , \n    10780807212297131186617505517708903709488273075252405602261683478333331220733\n    , \n    18230936781133176044598070768084230333433368654744509969087239465125979720995\n    , \n    16901065971871379877929280081392692752968612240624985552337779093292740763381\n    , \n    146494141603558321291767829522948454429758543710648402457451799015963102253\n    , \n    2492729278659146790410698334997955258248120870028541691998279257260289595548\n    , \n    2204224910006646535594933495262085193210692406133533679934843341237521233504\n    , \n    16062117410185840274616925297332331018523844434907012275592638570193234893570\n    , \n    5894928453677122829055071981254202951712129328678534592916926069506935491729\n    , \n    4947482739415078212217504789923078546034438919537985740403824517728200332286\n    , \n    16143265650645676880461646123844627780378251900510645261875867423498913438066\n    , \n    397690828254561723549349897112473766901585444153303054845160673059519614409\n    , \n    11272653598912269895509621181205395118899451234151664604248382803490621227687\n    , \n    15566927854306879444693061574322104423426072650522411176731130806720753591030\n    , \n    14222898219492484180162096141564251903058269177856173968147960855133048449557\n    , \n    16690275395485630428127725067513114066329712673106153451801968992299636791385\n    , \n    3667030990325966886479548860429670833692690972701471494757671819017808678584\n    , \n    21280039024501430842616328642522421302481259067470872421086939673482530783142\n    , \n    15895485136902450169492923978042129726601461603404514670348703312850236146328\n    , \n    7733050956302327984762132317027414325566202380840692458138724610131603812560\n    , \n    438123800976401478772659663183448617575635636575786782566035096946820525816\n    , \n    814913922521637742587885320797606426167962526342166512693085292151314976633\n    , \n    12368712287081330853637674140264759478736012797026621876924395982504369598764\n    , \n    2494806857395134874309386694756263421445039103814920780777601708371037591569\n    , \n    16101132301514338989512946061786320637179843435886825102406248183507106312877\n    , \n    6252650284989960032925831409804233477770646333900692286731621844532438095656\n    , \n    9277135875276787021836189566799935097400042171346561246305113339462708861695\n    , \n    10493603554686607050979497281838644324893776154179810893893660722522945589063\n    , \n    8673089750662709235894359384294076697329948991010184356091130382437645649279\n    , \n    9558393272910366944245875920138649617479779893610128634419086981339060613250\n    , \n    19012287860122586147374214541764572282814469237161122489573881644994964647218\n    , \n    9783723818270121678386992630754842961728702994964214799008457449989291229500\n    , \n    15550788416669474113213749561488122552422887538676036667630838378023479382689\n    , \n    15016165746156232864069722572047169071786333815661109750860165034341572904221\n    , \n    6506225705710197163670556961299945987488979904603689017479840649664564978574\n    , \n    10796631184889302076168355684722130903785890709107732067446714470783437829037\n    , \n    19871836214837460419845806980869387567383718044439891735114283113359312279540\n    , \n    20871081766843466343749609089986071784031203517506781251203251608363835140622\n    , \n    5100105771517691442278432864090229416166996183792075307747582375962855820797\n    , \n    8777887112076272395250620301071581171386440850451972412060638225741125310886\n    , \n    5300440870136391278944213332144327695659161151625757537632832724102670898756\n    , \n    1205448543652932944633962232545707633928124666868453915721030884663332604536\n    , \n    5542499997310181530432302492142574333860449305424174466698068685590909336771\n    , \n    11028094245762332275225364962905938096659249161369092798505554939952525894293\n    , \n    19187314764836593118404597958543112407224947638377479622725713735224279297009\n    , \n    17047263688548829001253658727764731047114098556534482052135734487985276987385\n    , \n    19914849528178967155534624144358541535306360577227460456855821557421213606310\n    , \n    2929658084700714257515872921366736697080475676508114973627124569375444665664\n    , \n    15092262360719700162343163278648422751610766427236295023221516498310468956361\n    , \n    21578580340755653236050830649990190843552802306886938815497471545814130084980\n    , \n    1258781501221760320019859066036073675029057285507345332959539295621677296991\n    , \n    3819598418157732134449049289585680301176983019643974929528867686268702720163\n    , \n    8653175945487997845203439345797943132543211416447757110963967501177317426221\n    , \n    6614652990340435611114076169697104582524566019034036680161902142028967568142\n    , \n    19212515502973904821995111796203064175854996071497099383090983975618035391558\n    , \n    18664315914479294273286016871365663486061896605232511201418576829062292269769\n    , \n    11498264615058604317482574216318586415670903094838791165247179252175768794889\n    , \n    10814026414212439999107945133852431304483604215416531759535467355316227331774\n    , \n    17566185590731088197064706533119299946752127014428399631467913813769853431107\n    , \n    14016139747289624978792446847000951708158212463304817001882956166752906714332\n    , \n    8242601581342441750402731523736202888792436665415852106196418942315563860366\n    , \n    9244680976345080074252591214216060854998619670381671198295645618515047080988\n    , \n    12216779172735125538689875667307129262237123728082657485828359100719208190116\n    , \n    10702811721859145441471328511968332847175733707711670171718794132331147396634\n    , \n    6479667912792222539919362076122453947926362746906450079329453150607427372979\n    , \n    15117544653571553820496948522381772148324367479772362833334593000535648316185\n    , \n    6842203153996907264167856337497139692895299874139131328642472698663046726780\n    , \n    12732823292801537626009139514048596316076834307941224506504666470961250728055\n    , \n    6936272626871035740815028148058841877090860312517423346335878088297448888663\n    , \n    17297554111853491139852678417579991271009602631577069694853813331124433680030\n    , \n    16641596134749940573104316021365063031319260205559553673368334842484345864859\n    , \n    7400481189785154329569470986896455371037813715804007747228648863919991399081\n    , \n    2273205422216987330510475127669563545720586464429614439716564154166712854048\n    , \n    15162538063742142685306302282127534305212832649282186184583465569986719234456\n    , \n    5628039096440332922248578319648483863204530861778160259559031331287721255522\n    , \n    16085392195894691829567913404182676871326863890140775376809129785155092531260\n    , \n    14227467863135365427954093998621993651369686288941275436795622973781503444257\n    , \n    18224457394066545825553407391290108485121649197258948320896164404518684305122\n    , \n    274945154732293792784580363548970818611304339008964723447672490026510689427\n    , \n    11050822248291117548220126630860474473945266276626263036056336623671308219529\n    , \n    2119542016932434047340813757208803962484943912710204325088879681995922344971\n    , 0]\n\n\n@__export('con_mimc_cts')\ndef get_cts(n: int=None) ->list:\n    return cts\n"
            },
            {
                "key": "con_mimc_cts.__developer__",
                "value": "ef0e2de819ea8060e3de26fa322c71e581152dd2f282cbcda6f5655bc64db5d9"
            },
            {
                "key": "con_mimc_cts.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        7,
                        0,
                        20,
                        59,
                        0
                    ]
                }
            },
            {
                "key": "con_msg.__code__",
                "value": "__counter = Variable(contract='con_msg', name='counter')\n__messages = Hash(contract='con_msg', name='messages')\n\n\ndef ____():\n    __counter.set(0)\n\n\n@__export('con_msg')\ndef save_msg(msg: str, recipient: str):\n    __counter.set(__counter.get() + 1)\n    __messages[__counter.get()] = {'sender': ctx.signer, 'message': msg,\n        'receiver': recipient, 'timestamp': now}\n"
            },
            {
                "key": "con_msg.__developer__",
                "value": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e"
            },
            {
                "key": "con_msg.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        8,
                        0,
                        47,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_msg.counter",
                "value": 12
            },
            {
                "key": "con_msg.messages:1",
                "value": {
                    "sender": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e",
                    "message": "this is a message",
                    "receiver": "dave",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            0,
                            47,
                            32,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:10",
                "value": {
                    "sender": "ca9aeee192854dc55a6d3e211bf858cc3ecd41e8b86a55c07740ece29f349597",
                    "message": "75d00f94becacba7078eacd3d2e68736fc691cb85ffc39d6923a32b50e5bf17855fdf7d555ed67287ba4d6ebb4d453defbf7",
                    "receiver": "13ca9a62d10cbc28d55408e0a85d31f5c059fe3bb49316538e1d03064f3f2c8e",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            10,
                            28,
                            55,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:11",
                "value": {
                    "sender": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                    "message": "ead1304c7481711f1fd112183790590dc32423b19e5f7cb4d1d5a8e6438c045903bfb410d6051545bd750a8bffbf021e436e650a74",
                    "receiver": "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            10,
                            35,
                            10,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:12",
                "value": {
                    "sender": "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                    "message": "95c26e04eac52173b073e6ee28bc91b3353a13aa34a600557e1de628c86fa91dc22ddb5d0eb41dce8ce584d2fc4653ed7e981680e7",
                    "receiver": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            10,
                            38,
                            27,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:2",
                "value": {
                    "sender": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e",
                    "message": "this is another one",
                    "receiver": "eric",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            0,
                            48,
                            10,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:3",
                "value": {
                    "sender": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e",
                    "message": "DAMN",
                    "receiver": "sandy",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            0,
                            48,
                            32,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:4",
                "value": {
                    "sender": "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                    "message": "55c20e92d5d4251dc21238227ea50a4753a3487afceaa52979ebed71cd058b3ea26a42adbca45d1f7be2767b2e057d2a21d3b06649",
                    "receiver": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            9,
                            21,
                            54,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:5",
                "value": {
                    "sender": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                    "message": "716c794d0da2b258236517a754c58f046af9ac5a5be07750c338c8d372c30b2a8f55a7b7c9c9fe6b9f64884f5eb9a208d5a9ac337038",
                    "receiver": "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            9,
                            23,
                            16,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:6",
                "value": {
                    "sender": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                    "message": "19d2cfa41dfbe3c0d2cd98b3a3408dd734b2085547e4410375be03ac7370e77c7995f12e1420c3f25f2d19646155850fda02e7f4793a1045",
                    "receiver": "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            9,
                            33,
                            24,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:7",
                "value": {
                    "sender": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                    "message": "b5973a0ef4f0c79d2bbd28fee0842b9883c601a8d09bbf80322e57358727955764917b47b82768ef59d3368e335ab1c1ed636a",
                    "receiver": "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            10,
                            11,
                            43,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:8",
                "value": {
                    "sender": "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                    "message": "91e201fb8e9f0231b3bba256a044a145c5363a36e304791356065ca5ff49467b840d2cb7feca160a100b9ab7ed808e4a46ecd18e",
                    "receiver": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            10,
                            18,
                            12,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg.messages:9",
                "value": {
                    "sender": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                    "message": "55beb1b339e4e988f0b5548b5588c94f142cf2da6f972ad5b24a1cf912a9881ddedb93a41cf112025cf4aae718967557d1dbccf512eeb59f3d7adcd161",
                    "receiver": "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            8,
                            10,
                            20,
                            32,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg_main.__code__",
                "value": "__counter = Variable(contract='con_msg_main', name='counter')\n__messages = Hash(contract='con_msg_main', name='messages')\n\n\ndef ____():\n    __counter.set(0)\n\n\n@__export('con_msg_main')\ndef save_msg(msg: str, recipient: str):\n    __counter.set(__counter.get() + 1)\n    __messages[__counter.get()] = {'sender': ctx.signer, 'message': msg,\n        'receiver': recipient, 'timestamp': now}\n"
            },
            {
                "key": "con_msg_main.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_msg_main.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        8,
                        10,
                        39,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_msg_main.counter",
                "value": 5
            },
            {
                "key": "con_msg_main.messages:1",
                "value": {
                    "sender": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                    "message": "cdd844c372d4d7ea662bcd0352796087ad9ebbacda25b34cdde174a11ccef35a66a3e78c9d81ed7906f3dde8e55aeaa80bc2197a",
                    "receiver": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                    "timestamp": {
                        "__time__": [
                            2024,
                            12,
                            12,
                            4,
                            35,
                            7,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg_main.messages:2",
                "value": {
                    "sender": "d64910b048759a11123441851c3e19f2e9019a338cc2a6b2633b0078a673c4ee",
                    "message": "8a84515fdcaffb42d70d024b741df35806a9ee17c5a57d7438a5f552a4fcb06d071149ad7c441f364c29651e75a7215e0da032b0dad5bbd9",
                    "receiver": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                    "timestamp": {
                        "__time__": [
                            2025,
                            4,
                            21,
                            22,
                            56,
                            7,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg_main.messages:3",
                "value": {
                    "sender": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                    "message": "53b30ca3c28e46823c3fa498d9dca63bc66ed486b8f9d1dede027685ae316f69e9e5ebc389788d95ea481d935ad667d538fdfcd37e239d8e5d5d86b46435d403",
                    "receiver": "d64910b048759a11123441851c3e19f2e9019a338cc2a6b2633b0078a673c4ee",
                    "timestamp": {
                        "__time__": [
                            2025,
                            4,
                            21,
                            23,
                            25,
                            42,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg_main.messages:4",
                "value": {
                    "sender": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                    "message": "5b3d289f3bda2a549a4761b486955631466a33041e18810a618f0d03bd2de664328cd0894d8ae7552d86f4987df88c66fb5f10b47b65e1ef",
                    "receiver": "d64910b048759a11123441851c3e19f2e9019a338cc2a6b2633b0078a673c4ee",
                    "timestamp": {
                        "__time__": [
                            2025,
                            4,
                            22,
                            13,
                            47,
                            58,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_msg_main.messages:5",
                "value": {
                    "sender": "d64910b048759a11123441851c3e19f2e9019a338cc2a6b2633b0078a673c4ee",
                    "message": "b8b8fe6dcbf1d74e20dd3935eca578439a0ceaef0f90f80b061d8c1e9bacb438d9548b0444db653a27c0ba6b4b6e6a65ca8d00112071f62f3e704c8de7a4b5b0c386a9d2a55f8fa249458065059ac0dfbe",
                    "receiver": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                    "timestamp": {
                        "__time__": [
                            2025,
                            4,
                            22,
                            13,
                            48,
                            41,
                            0
                        ]
                    }
                }
            },
            {
                "key": "con_multest.__code__",
                "value": "__val = Variable(contract='con_multest', name='val')\n\n\ndef ____():\n    __val.set(1)\n\n\n@__export('con_multest')\ndef mul(a: float):\n    t = __val.get()\n    t *= a\n    __val.set(t)\n\n\n@__export('con_multest')\ndef ret():\n    return __val.get()\n"
            },
            {
                "key": "con_multest.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_multest.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        10,
                        14,
                        30,
                        51,
                        0
                    ]
                }
            },
            {
                "key": "con_multest.val",
                "value": {
                    "__fixed__": "1E+29"
                }
            },
            {
                "key": "con_multi12345.__code__",
                "value": "I = importlib\n\n\n@__export('con_multi12345')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_multi12345.__developer__",
                "value": "b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d"
            },
            {
                "key": "con_multi12345.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        14,
                        12,
                        48,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_multisend.__code__",
                "value": "I = importlib\n\n\n@__export('con_multisend')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_multisend.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_multisend.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        11,
                        11,
                        40,
                        57,
                        0
                    ]
                }
            },
            {
                "key": "con_multisend1.__code__",
                "value": "@__export('con_multisend1')\ndef send(addresses: list, amount: float, contract: str):\n    token = importlib.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_multisend1.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_multisend1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        10,
                        12,
                        43,
                        33,
                        0
                    ]
                }
            },
            {
                "key": "con_multisend_2.__code__",
                "value": "I = importlib\n\n\n@__export('con_multisend_2')\ndef send(addresses: list, amounts: list, contract: str):\n    assert len(addresses) == len(amounts\n        ), 'Addresses and amounts must have the same length'\n    token = I.import_module(contract)\n    for address, amount in zip(addresses, amounts):\n        assert len(address) > 0, 'Address cannot be empty'\n        assert amount > 0, 'Amount must be greater than 0'\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_multisend_2.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_multisend_2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        24,
                        10,
                        47,
                        12,
                        0
                    ]
                }
            },
            {
                "key": "con_multisig_tst.__code__",
                "value": "__owner = Variable(contract='con_multisig_tst', name='owner')\n__owners = Hash(contract='con_multisig_tst', name='owners')\n__required_signatures = Variable(contract='con_multisig_tst', name=\n    'required_signatures')\n__nonce = Variable(contract='con_multisig_tst', name='nonce')\n__transactions = Hash(contract='con_multisig_tst', name='transactions')\n__confirmations = Hash(contract='con_multisig_tst', name='confirmations')\n__TransactionProposedEvent = LogEvent(event='TransactionProposed', params={\n    'tx_id': {'type': str, 'idx': True}, 'proposer': {'type': str, 'idx': \n    True}, 'destination': {'type': str, 'idx': True}, 'amount': {'type': (\n    int, float)}}, contract='con_multisig_tst', name='TransactionProposedEvent'\n    )\n__TransactionExecutedEvent = LogEvent(event='TransactionExecuted', params={\n    'tx_id': {'type': str, 'idx': True}, 'executor': {'type': str, 'idx': \n    True}}, contract='con_multisig_tst', name='TransactionExecutedEvent')\n__OwnerAddedEvent = LogEvent(event='OwnerAdded', params={'new_owner': {\n    'type': str, 'idx': True}, 'added_by': {'type': str, 'idx': True}},\n    contract='con_multisig_tst', name='OwnerAddedEvent')\n\n\ndef ____(initial_owners: list, signatures_required: int):\n    \"\"\"\n    Initialize the multisig wallet\n    :param initial_owners: List of initial owner addresses\n    :param signatures_required: Minimum signatures needed to execute a transaction\n    \"\"\"\n    assert len(initial_owners) > 0, 'Must have at least one owner'\n    assert signatures_required > 0 and signatures_required <= len(\n        initial_owners), 'Invalid signatures requirement'\n    __owner.set(ctx.caller)\n    for addr in initial_owners:\n        __owners[addr] = True\n        __OwnerAddedEvent({'new_owner': addr, 'added_by': ctx.caller})\n    __required_signatures.set(signatures_required)\n    __nonce.set(0)\n\n\n@__export('con_multisig_tst')\ndef propose_transaction(destination: str, amount: int):\n    \"\"\"\n    Propose a new transaction\n    :param destination: Recipient address\n    :param amount: Amount to transfer\n    \"\"\"\n    assert __owners[ctx.caller] == True, 'Unauthorized: Not an owner'\n    current_nonce = __nonce.get()\n    new_nonce = current_nonce + 1\n    __nonce.set(new_nonce)\n    tx_id = f'tx_{new_nonce}'\n    __transactions[tx_id] = {'destination': destination, 'amount': amount,\n        'proposer': ctx.caller, 'timestamp': now}\n    __confirmations[tx_id] = {}\n    __confirmations[tx_id][ctx.caller] = True\n    __TransactionProposedEvent({'tx_id': tx_id, 'proposer': ctx.caller,\n        'destination': destination, 'amount': amount})\n\n\n@__export('con_multisig_tst')\ndef confirm_transaction(tx_id: str):\n    \"\"\"\n    Confirm a proposed transaction\n    :param tx_id: Transaction ID to confirm\n    \"\"\"\n    assert __owners[ctx.caller] == True, 'Unauthorized: Not an owner'\n    assert __transactions[tx_id] is not None, 'Transaction does not exist'\n    assert __confirmations[tx_id].get(ctx.caller) is None, 'Already confirmed'\n    __confirmations[tx_id][ctx.caller] = True\n\n\n@__export('con_multisig_tst')\ndef execute_transaction(tx_id: str):\n    \"\"\"\n    Execute a transaction if enough signatures are collected\n    :param tx_id: Transaction ID to execute\n    \"\"\"\n    tx = __transactions[tx_id]\n    assert tx is not None, 'Transaction does not exist'\n    conf_count = 0\n    for addr in __owners:\n        if __confirmations[tx_id].get(addr) == True:\n            conf_count += 1\n    assert conf_count >= __required_signatures.get(), 'Not enough signatures'\n    token = importlib.import_module('currency')\n    token.transfer(amount=tx['amount'], to=tx['destination'])\n    __TransactionExecutedEvent({'tx_id': tx_id, 'executor': ctx.caller})\n    __transactions[tx_id] = None\n    __confirmations[tx_id] = None\n\n\n@__export('con_multisig_tst')\ndef add_owner(new_owner: str):\n    \"\"\"\n    Add a new owner to the multisig wallet\n    :param new_owner: Address of the new owner\n    \"\"\"\n    assert __owners[ctx.caller] == True, 'Unauthorized: Not an owner'\n    assert __owners[new_owner] is None, 'Address is already an owner'\n    __owners[new_owner] = True\n    __OwnerAddedEvent({'new_owner': new_owner, 'added_by': ctx.caller})\n\n\n@__export('con_multisig_tst')\ndef remove_owner(owner_to_remove: str):\n    \"\"\"\n    Remove an owner from the multisig wallet\n    :param owner_to_remove: Address of the owner to remove\n    \"\"\"\n    assert __owners[ctx.caller] == True, 'Unauthorized: Not an owner'\n    assert len(__owners) > 1, 'Cannot remove the last owner'\n    __owners[owner_to_remove] = None\n"
            },
            {
                "key": "con_multisig_tst.__developer__",
                "value": "8bf21c7dc3a4ff32996bf56a665e1efe3c9261cc95bbf82552c328585c863829"
            },
            {
                "key": "con_multisig_tst.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        6,
                        0,
                        2,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_multisig_tst.nonce",
                "value": 0
            },
            {
                "key": "con_multisig_tst.owner",
                "value": "8bf21c7dc3a4ff32996bf56a665e1efe3c9261cc95bbf82552c328585c863829"
            },
            {
                "key": "con_multisig_tst.owners:,",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:0",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:1",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:2",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:3",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:4",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:5",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:6",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:7",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:8",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:9",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:a",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:b",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:c",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:d",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:e",
                "value": true
            },
            {
                "key": "con_multisig_tst.owners:f",
                "value": true
            },
            {
                "key": "con_multisig_tst.required_signatures",
                "value": 1
            },
            {
                "key": "con_my_cool_contract.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_my_cool_contract', name='game')\n__rolls = Hash(default_value=False, contract='con_my_cool_contract', name=\n    'rolls')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['total_wins'] = 0\n    __game['total_losses'] = 0\n    __game['total_rolls'] = 0\n    __game['allowed_tokens'] = ['currency']\n    __game['max_token_bet', 'currency'] = 1000\n    __game['house_edge'] = decimal('0.03')\n\n\n@__export('con_my_cool_contract')\ndef roll(bet_size: float, token_contract: str, roll_type: str, roll_target: int\n    ):\n    __balances = ForeignHash(foreign_contract=token_contract, foreign_name=\n        'balances', contract='con_my_cool_contract', name='balances')\n    assert bet_size > 0, 'Bet size must be greater than 0'\n    assert token_contract in __game['allowed_tokens'], 'Token not allowed'\n    assert bet_size <= __game['max_token_bet', token_contract\n        ], 'Bet size exceeds the maximum allowed bet'\n    assert roll_type in ['over', 'under'], 'Invalid roll type'\n    if roll_type == 'over':\n        assert 1 <= roll_target < 100, 'Roll target must be between 1 and 99 for over rolls'\n    else:\n        assert 2 <= roll_target <= 100, 'Roll target must be between 2 and 100 for under rolls'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=bet_size, to=ctx.this, main_account=ctx.caller)\n    roll_range = (1, roll_target) if roll_type == 'under' else (roll_target,\n        100)\n    roll_range_size = roll_range[1] - roll_range[0] + 1\n    fair_multiplier = 100 / roll_range_size\n    adjusted_multiplier = fair_multiplier * (1 - __game['house_edge'])\n    assert __balances[ctx.this\n        ] >= bet_size * adjusted_multiplier, 'Contract does not have enough funds to cover the bet'\n    __game['total_rolls'] += 1\n    roll = random.randint(1, 100)\n    __rolls[ctx.caller, __game['total_rolls']] = roll\n    if (roll_type == 'over' and roll > roll_target or roll_type == 'under' and\n        roll < roll_target):\n        win_amount = bet_size * adjusted_multiplier\n        token.transfer(amount=win_amount, to=ctx.caller)\n        __game['total_wins'] += 1\n        return f'You rolled {roll}. You win {win_amount} {token_contract}!'\n    else:\n        __game['total_losses'] += 1\n        return f'You lose! You rolled {roll}'\n\n\n@__export('con_my_cool_contract')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_my_cool_contract')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowed_tokens'] = tokens\n\n\n@__export('con_my_cool_contract')\ndef change_max_token_bet(token_contract: str, max_bet: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the max token bet'\n    __game['max_token_bet', token_contract] = max_bet\n\n\n@__export('con_my_cool_contract')\ndef change_house_edge(new_edge: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the house edge'\n    assert 0 <= new_edge < 1, 'House edge must be between 0 and 1. For example, 0.03 represents 3%'\n    __game['house_edge'] = new_edge\n\n\n@__export('con_my_cool_contract')\ndef withdraw(amount: float, token_contract: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can withdraw'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_my_cool_contract.__developer__",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        13,
                        10,
                        27,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_contract.game:allowed_tokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_my_cool_contract.game:house_edge",
                "value": {
                    "__fixed__": "0.03"
                }
            },
            {
                "key": "con_my_cool_contract.game:max_token_bet:currency",
                "value": 1000
            },
            {
                "key": "con_my_cool_contract.game:owner",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract.game:total_losses",
                "value": 0
            },
            {
                "key": "con_my_cool_contract.game:total_rolls",
                "value": 0
            },
            {
                "key": "con_my_cool_contract.game:total_wins",
                "value": 0
            },
            {
                "key": "con_my_cool_contract1.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_my_cool_contract1', name='game')\n__rolls = Hash(default_value=False, contract='con_my_cool_contract1', name=\n    'rolls')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['total_wins'] = 0\n    __game['total_losses'] = 0\n    __game['total_rolls'] = 0\n    __game['allowed_tokens'] = ['currency']\n    __game['max_token_bet', 'currency'] = 1000\n    __game['house_edge'] = decimal('0.03')\n\n\n@__export('con_my_cool_contract1')\ndef roll(bet_size: float, token_contract: str, roll_type: str, roll_target: int\n    ):\n    __balances = ForeignHash(foreign_contract=token_contract, foreign_name=\n        'balances', contract='con_my_cool_contract1', name='balances')\n    assert bet_size > 0, 'Bet size must be greater than 0'\n    assert token_contract in __game['allowed_tokens'], 'Token not allowed'\n    assert bet_size <= __game['max_token_bet', token_contract\n        ], 'Bet size exceeds the maximum allowed bet'\n    assert roll_type in ['over', 'under'], 'Invalid roll type'\n    if roll_type == 'over':\n        assert 1 <= roll_target < 100, 'Roll target must be between 1 and 99 for over rolls'\n    else:\n        assert 2 <= roll_target <= 100, 'Roll target must be between 2 and 100 for under rolls'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=bet_size, to=ctx.this, main_account=ctx.caller)\n    roll_range = (1, roll_target) if roll_type == 'under' else (roll_target,\n        100)\n    roll_range_size = roll_range[1] - roll_range[0] + 1\n    fair_multiplier = 100 / roll_range_size\n    adjusted_multiplier = fair_multiplier * (1 - __game['house_edge'])\n    assert __balances[ctx.this\n        ] >= bet_size * adjusted_multiplier, 'Contract does not have enough funds to cover the bet'\n    __game['total_rolls'] += 1\n    roll = random.randint(1, 100)\n    __rolls[ctx.caller, __game['total_rolls']] = roll\n    if (roll_type == 'over' and roll > roll_target or roll_type == 'under' and\n        roll < roll_target):\n        win_amount = bet_size * adjusted_multiplier\n        token.transfer(amount=win_amount, to=ctx.caller)\n        __game['total_wins'] += 1\n        return f'You rolled {roll}. You win {win_amount} {token_contract}!'\n    else:\n        __game['total_losses'] += 1\n        return f'You lose! You rolled {roll}'\n\n\n@__export('con_my_cool_contract1')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_my_cool_contract1')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowed_tokens'] = tokens\n\n\n@__export('con_my_cool_contract1')\ndef change_max_token_bet(token_contract: str, max_bet: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the max token bet'\n    __game['max_token_bet', token_contract] = max_bet\n\n\n@__export('con_my_cool_contract1')\ndef change_house_edge(new_edge: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the house edge'\n    assert 0 <= new_edge < 1, 'House edge must be between 0 and 1. For example, 0.03 represents 3%'\n    __game['house_edge'] = new_edge\n\n\n@__export('con_my_cool_contract1')\ndef withdraw(amount: float, token_contract: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can withdraw'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_my_cool_contract1.__developer__",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        13,
                        10,
                        29,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_contract1.game:allowed_tokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_my_cool_contract1.game:house_edge",
                "value": {
                    "__fixed__": "0.03"
                }
            },
            {
                "key": "con_my_cool_contract1.game:max_token_bet:currency",
                "value": 1000
            },
            {
                "key": "con_my_cool_contract1.game:owner",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract1.game:total_losses",
                "value": 0
            },
            {
                "key": "con_my_cool_contract1.game:total_rolls",
                "value": 0
            },
            {
                "key": "con_my_cool_contract1.game:total_wins",
                "value": 0
            },
            {
                "key": "con_my_cool_contract22.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_my_cool_contract22', name='game')\n__rolls = Hash(default_value=False, contract='con_my_cool_contract22', name\n    ='rolls')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['total_wins'] = 0\n    __game['total_losses'] = 0\n    __game['total_rolls'] = 0\n    __game['allowed_tokens'] = ['currency']\n    __game['max_token_bet', 'currency'] = 1000\n    __game['house_edge'] = decimal('0.03')\n\n\n@__export('con_my_cool_contract22')\ndef roll(bet_size: float, token_contract: str, roll_type: str, roll_target: int\n    ):\n    __balances = ForeignHash(foreign_contract=token_contract, foreign_name=\n        'balances', contract='con_my_cool_contract22', name='balances')\n    assert bet_size > 0, 'Bet size must be greater than 0'\n    assert token_contract in __game['allowed_tokens'], 'Token not allowed'\n    assert bet_size <= __game['max_token_bet', token_contract\n        ], 'Bet size exceeds the maximum allowed bet'\n    assert roll_type in ['over', 'under'], 'Invalid roll type'\n    if roll_type == 'over':\n        assert 1 <= roll_target < 100, 'Roll target must be between 1 and 99 for over rolls'\n    else:\n        assert 2 <= roll_target <= 100, 'Roll target must be between 2 and 100 for under rolls'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=bet_size, to=ctx.this, main_account=ctx.caller)\n    roll_range = (1, roll_target) if roll_type == 'under' else (roll_target,\n        100)\n    roll_range_size = roll_range[1] - roll_range[0] + 1\n    fair_multiplier = 100 / roll_range_size\n    adjusted_multiplier = fair_multiplier * (1 - __game['house_edge'])\n    assert __balances[ctx.this\n        ] >= bet_size * adjusted_multiplier, 'Contract does not have enough funds to cover the bet'\n    __game['total_rolls'] += 1\n    roll = random.randint(1, 100)\n    __rolls[ctx.caller, __game['total_rolls']] = roll\n    if (roll_type == 'over' and roll > roll_target or roll_type == 'under' and\n        roll < roll_target):\n        win_amount = bet_size * adjusted_multiplier\n        token.transfer(amount=win_amount, to=ctx.caller)\n        __game['total_wins'] += 1\n        return f'You rolled {roll}. You win {win_amount} {token_contract}!'\n    else:\n        __game['total_losses'] += 1\n        return f'You lose! You rolled {roll}'\n\n\n@__export('con_my_cool_contract22')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_my_cool_contract22')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowed_tokens'] = tokens\n\n\n@__export('con_my_cool_contract22')\ndef change_max_token_bet(token_contract: str, max_bet: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the max token bet'\n    __game['max_token_bet', token_contract] = max_bet\n\n\n@__export('con_my_cool_contract22')\ndef change_house_edge(new_edge: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the house edge'\n    assert 0 <= new_edge < 1, 'House edge must be between 0 and 1. For example, 0.03 represents 3%'\n    __game['house_edge'] = new_edge\n\n\n@__export('con_my_cool_contract22')\ndef withdraw(amount: float, token_contract: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can withdraw'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_my_cool_contract22.__developer__",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract22.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        13,
                        10,
                        32,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_contract22.game:allowed_tokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_my_cool_contract22.game:house_edge",
                "value": {
                    "__fixed__": "0.03"
                }
            },
            {
                "key": "con_my_cool_contract22.game:max_token_bet:currency",
                "value": 1000
            },
            {
                "key": "con_my_cool_contract22.game:owner",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract22.game:total_losses",
                "value": 0
            },
            {
                "key": "con_my_cool_contract22.game:total_rolls",
                "value": 0
            },
            {
                "key": "con_my_cool_contract22.game:total_wins",
                "value": 0
            },
            {
                "key": "con_my_cool_token.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_my_cool_token', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_my_cool_token', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_my_cool_token', name='balances')\n__metadata = Hash(contract='con_my_cool_token', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_my_cool_token')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_my_cool_token')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_my_cool_token')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_my_cool_token')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_my_cool_token')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_my_cool_token.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_my_cool_token.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        14,
                        9,
                        55,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_token.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_my_cool_token.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_my_cool_token.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_my_cool_token.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_my_cool_token1.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_my_cool_token1', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_my_cool_token1', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_my_cool_token1', name='balances')\n__metadata = Hash(contract='con_my_cool_token1', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_my_cool_token1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_my_cool_token1')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_my_cool_token1')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_my_cool_token1')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_my_cool_token1')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_my_cool_token1.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_my_cool_token1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        25,
                        18,
                        14,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_token1.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_my_cool_token1.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_my_cool_token1.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_my_cool_token1.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_name_service.__code__",
                "value": "import currency\n__manager = Variable(contract='con_name_service', name='manager')\n__names = Hash(default_value=False, contract='con_name_service', name='names')\n__balances = Hash(default_value=0, contract='con_name_service', name='balances'\n    )\n__approvals = Hash(default_value=0, contract='con_name_service', name=\n    'approvals')\n__expiry_times = Hash(default_value=None, contract='con_name_service', name\n    ='expiry_times')\n__owners = Hash(default_value=None, contract='con_name_service', name='owners')\n__mint_price = Variable(contract='con_name_service', name='mint_price')\n__royalty_fee_percentage = Variable(contract='con_name_service', name=\n    'royalty_fee_percentage')\n__registration_period = Variable(contract='con_name_service', name=\n    'registration_period')\n__contracts_allowlist = Variable(contract='con_name_service', name=\n    'contracts_allowlist')\n__enabled = Variable(contract='con_name_service', name='enabled')\n__main_name_to_address = Hash(default_value=None, contract=\n    'con_name_service', name='main_name_to_address')\n__address_to_main_name = Hash(default_value=None, contract=\n    'con_name_service', name='address_to_main_name')\n\n\ndef ____():\n    __manager.set(ctx.caller)\n    __enabled.set(False)\n    __contracts_allowlist.set([])\n    __mint_price.set(1)\n    __royalty_fee_percentage.set(2)\n    __registration_period.set(365)\n\n\ndef __assert_is_manager():\n    assert ctx.caller == __manager.get(), 'You are not the manager'\n\n\ndef __assert_is_owner(address: str, name: str):\n    assert __balances[address, name] == 1, 'You are not the owner of this name'\n\n\ndef __assert_if_contract_is_approved(contract: str):\n    if 'con_' in contract:\n        assert contract in __contracts_allowlist.get(\n            ), 'This contract is not allowed to interact with this contract'\n\n\ndef __assert_is_approved_for_transfer(main_account: str, to: str, name: str):\n    assert __approvals[main_account, to, name\n        ] == 1, 'Name is not approved for transfer'\n\n\ndef __is_expired(name: str):\n    expiry = __expiry_times[name]\n    if expiry is None:\n        return True\n    return now >= expiry\n\n\ndef __assert_is_not_expired(name: str):\n    assert not __is_expired(name), 'Name is expired'\n\n\ndef __assert_is_enabled():\n    assert __enabled.get() == True, 'Contract is not enabled'\n\n\n@__export('con_name_service')\ndef mint_name(name: str):\n    __assert_is_enabled()\n    __assert_if_contract_is_approved(ctx.caller)\n    name = name.lower()\n    assert name.isalnum() and name.isascii(\n        ), 'Name must be alphanumeric and ascii'\n    assert len(name) >= 3, 'The minimum length is 3 characters'\n    assert len(name) <= 32, 'The maximum length is 32 characters'\n    if __names[name] != False:\n        assert __is_expired(name\n            ), 'Name already exists and has not expired yet.'\n    currency.transfer_from(amount=__mint_price.get(), to=__manager.get(),\n        main_account=ctx.caller)\n    __names[name] = {}\n    __expiry_times[name] = now + datetime.timedelta(days=\n        __registration_period.get())\n    __balances[ctx.caller, name] = 1\n    __owners[name] = ctx.caller\n\n\n@__export('con_name_service')\ndef transfer(name: str, to: str):\n    __assert_is_not_expired(name)\n    assert name != '', 'Please specify the Name you want to transfer'\n    __assert_is_owner(ctx.caller, name)\n    __balances[ctx.caller, name] = 0\n    __balances[to, name] = 1\n    __main_name_to_address[name] = None\n    __address_to_main_name[ctx.caller] = None\n    __names[name] = {}\n    __owners[name] = to\n\n\n@__export('con_name_service')\ndef approve(name: str, to: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __approvals[ctx.caller, to, name] = 1\n\n\n@__export('con_name_service')\ndef revoke_approval(name: str, to: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __approvals[ctx.caller, to, name] = 0\n\n\n@__export('con_name_service')\ndef transfer_from(name: str, to: str, main_account: str):\n    __assert_if_contract_is_approved(ctx.caller)\n    assert name != '', 'Please specify the Name you want to transfer'\n    __assert_is_not_expired(name)\n    __assert_is_owner(main_account, name)\n    __assert_is_approved_for_transfer(main_account, to, name)\n    __approvals[main_account, to, name] = 0\n    __balances[main_account, name] = 0\n    __balances[to, name] = 1\n    __main_name_to_address[name] = None\n    __address_to_main_name[main_account] = None\n    __names[name] = {}\n    __owners[name] = to\n\n\n@__export('con_name_service')\ndef set_main_name_to_caller(name: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __main_name_to_address[name] = ctx.caller\n    __address_to_main_name[ctx.caller] = name\n\n\n@__export('con_name_service')\ndef set_data(name: str, data: dict):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __names[name] = data\n\n\n@__export('con_name_service')\ndef get_main_name_to_address(name: str):\n    address = __main_name_to_address[name]\n    if address is None or __is_expired(name):\n        return None\n    return address\n\n\n@__export('con_name_service')\ndef get_address_to_main_name(address: str):\n    name = __address_to_main_name[address]\n    if name is None or __is_expired(name):\n        return None\n    return name\n\n\n@__export('con_name_service')\ndef get_owner(name: str):\n    owner = __owners[name]\n    if owner is None or __is_expired(name):\n        return None\n    return owner\n\n\n@__export('con_name_service')\ndef get_expiry_time(name: str):\n    return __expiry_times[name]\n\n\n@__export('con_name_service')\ndef get_data(name: str):\n    return __names[name]\n\n\n@__export('con_name_service')\ndef is_owner(name: str, address: str):\n    return __balances[address, name] == 1 and not __is_expired(name)\n\n\n@__export('con_name_service')\ndef renew_name(name: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    currency.transfer_from(amount=__mint_price.get(), to=__manager.get(),\n        main_account=ctx.caller)\n    __expiry_times[name] = __expiry_times[name] + datetime.timedelta(days=\n        __registration_period.get())\n\n\n@__export('con_name_service')\ndef set_mint_price(price: int):\n    __assert_is_manager()\n    __mint_price.set(price)\n\n\n@__export('con_name_service')\ndef set_royalty_fee_percentage(percentage: int):\n    __assert_is_manager()\n    __royalty_fee_percentage.set(percentage)\n\n\n@__export('con_name_service')\ndef set_manager(new_manager: str):\n    __assert_is_manager()\n    __manager.set(new_manager)\n\n\n@__export('con_name_service')\ndef set_contract_allowlist(contracts: list):\n    __assert_is_manager()\n    __contracts_allowlist.set(contracts)\n\n\n@__export('con_name_service')\ndef set_registration_period(period: int):\n    __assert_is_manager()\n    __registration_period.set(period)\n\n\n@__export('con_name_service')\ndef set_enabled(state: bool):\n    __assert_is_manager()\n    __enabled.set(state)\n"
            },
            {
                "key": "con_name_service.__developer__",
                "value": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05"
            },
            {
                "key": "con_name_service.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        1,
                        15,
                        27,
                        47,
                        0
                    ]
                }
            },
            {
                "key": "con_name_service.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:test",
                "value": 0
            },
            {
                "key": "con_name_service.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:test2",
                "value": 1
            },
            {
                "key": "con_name_service.balances:burn:test",
                "value": 1
            },
            {
                "key": "con_name_service.contracts_allowlist",
                "value": []
            },
            {
                "key": "con_name_service.enabled",
                "value": true
            },
            {
                "key": "con_name_service.expiry_times:test",
                "value": {
                    "__time__": [
                        2027,
                        2,
                        3,
                        19,
                        17,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_name_service.expiry_times:test2",
                "value": {
                    "__time__": [
                        2026,
                        2,
                        3,
                        19,
                        22,
                        44,
                        0
                    ]
                }
            },
            {
                "key": "con_name_service.manager",
                "value": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05"
            },
            {
                "key": "con_name_service.mint_price",
                "value": 1
            },
            {
                "key": "con_name_service.names:test",
                "value": {}
            },
            {
                "key": "con_name_service.names:test2",
                "value": {}
            },
            {
                "key": "con_name_service.owners:test",
                "value": "burn"
            },
            {
                "key": "con_name_service.owners:test2",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_name_service.registration_period",
                "value": 365
            },
            {
                "key": "con_name_service.royalty_fee_percentage",
                "value": 2
            },
            {
                "key": "con_nameservice.__code__",
                "value": "import currency\n__collection_name = Variable(contract='con_nameservice', name='collection_name'\n    )\n__collection_owner = Variable(contract='con_nameservice', name=\n    'collection_owner')\n__collection_nfts = Hash(default_value=False, contract='con_nameservice',\n    name='collection_nfts')\n__collection_balances = Hash(default_value=0, contract='con_nameservice',\n    name='collection_balances')\n__collection_balances_approvals = Hash(default_value=0, contract=\n    'con_nameservice', name='collection_balances_approvals')\n__mint_price = Variable(contract='con_nameservice', name='mint_price')\n__royalty_fee_percentage = Variable(contract='con_nameservice', name=\n    'royalty_fee_percentage')\n__contracts_allowlist = Variable(contract='con_nameservice', name=\n    'contracts_allowlist')\n\n\ndef ____(name: str, owner: str):\n    __collection_name.set(name)\n    __collection_owner.set(owner)\n    __contracts_allowlist.set([])\n    __mint_price.set(1)\n    __royalty_fee_percentage.set(2)\n\n\n@__export('con_nameservice')\ndef mint_nft(name: str):\n    name = name.lower()\n    assert name.isalnum(), 'Name must be alphanumeric'\n    assert __collection_nfts[name] == False, 'Name already exists'\n    assert len(name) >= 3, 'The minimum length is 3 characters'\n    assert len(name) <= 32, 'The maximum length is 32 characters'\n    currency.transfer_from(amount=__mint_price.get(), to=__collection_owner\n        .get(), main_account=ctx.caller)\n    __collection_nfts[name] = {'description':\n        'A alias name for your wallet.', 'ipfs_image_url': '', 'metadata':\n        {}, 'amount': 1}\n    __collection_balances[ctx.caller, name] = 1\n\n\n@__export('con_nameservice')\ndef transfer(name: str, amount: int, to: str):\n    assert amount > 0, 'You cannot transfer negative amounts'\n    assert name != '', 'Please specify the name of the NFT you want to transfer'\n    assert __collection_balances[ctx.caller, name\n        ] >= amount, \"You don't have enough NFTs to send\"\n    __collection_balances[ctx.caller, name] -= amount\n    __collection_balances[to, name] += amount\n\n\n@__export('con_nameservice')\ndef approve(amount: int, name: str, to: str):\n    assert amount > 0, 'Cannot approve negative amounts'\n    __collection_balances_approvals[ctx.caller, to, name] += amount\n\n\n@__export('con_nameservice')\ndef transfer_from(name: str, amount: int, to: str, main_account: str):\n    if 'con_' in ctx.caller:\n        assert ctx.caller in __contracts_allowlist.get(\n            ), 'This contract is not allowed to interact with this contract'\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __collection_balances_approvals[main_account, to, name\n        ] >= amount, 'Not enough NFTs approved to send! You have {} and are trying to spend {}'.format(\n        __collection_balances_approvals[main_account, to, name], amount)\n    assert __collection_balances[main_account, name\n        ] >= amount, 'Not enough NFTs to send!'\n    __collection_balances_approvals[main_account, to, name] -= amount\n    __collection_balances[main_account, name] -= amount\n    __collection_balances[to, name] += amount\n\n\n@__export('con_nameservice')\ndef set_mint_price(price: int):\n    assert ctx.caller == __collection_owner.get(\n        ), 'You are not the owner of this collection'\n    __mint_price.set(price)\n\n\n@__export('con_nameservice')\ndef set_royalty_fee_percentage(percentage: int):\n    assert ctx.caller == __collection_owner.get(\n        ), 'You are not the owner of this collection'\n    __royalty_fee_percentage.set(percentage)\n\n\n@__export('con_nameservice')\ndef set_collection_owner(owner: str):\n    assert ctx.caller == __collection_owner.get(\n        ), 'You are not the owner of this collection'\n    __collection_owner.set(owner)\n\n\n@__export('con_nameservice')\ndef set_contract_allowlist(contracts: list):\n    assert ctx.caller == __collection_owner.get(\n        ), 'You are not the owner of this collection'\n    __contracts_allowlist.set(contracts)\n"
            },
            {
                "key": "con_nameservice.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_nameservice.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        16,
                        17,
                        31,
                        50,
                        0
                    ]
                }
            },
            {
                "key": "con_nameservice.collection_balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:crosschainer",
                "value": 1
            },
            {
                "key": "con_nameservice.collection_balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:duelingbenjos",
                "value": 1
            },
            {
                "key": "con_nameservice.collection_balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:endogen",
                "value": 1
            },
            {
                "key": "con_nameservice.collection_balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:xian",
                "value": 1
            },
            {
                "key": "con_nameservice.collection_name",
                "value": "Xian Nameservice"
            },
            {
                "key": "con_nameservice.collection_nfts:crosschainer",
                "value": {
                    "description": "A alias name for your wallet.",
                    "ipfs_image_url": "",
                    "metadata": {},
                    "amount": 1
                }
            },
            {
                "key": "con_nameservice.collection_nfts:duelingbenjos",
                "value": {
                    "description": "A alias name for your wallet.",
                    "ipfs_image_url": "",
                    "metadata": {},
                    "amount": 1
                }
            },
            {
                "key": "con_nameservice.collection_nfts:endogen",
                "value": {
                    "description": "A alias name for your wallet.",
                    "ipfs_image_url": "",
                    "metadata": {},
                    "amount": 1
                }
            },
            {
                "key": "con_nameservice.collection_nfts:xian",
                "value": {
                    "description": "A alias name for your wallet.",
                    "ipfs_image_url": "",
                    "metadata": {},
                    "amount": 1
                }
            },
            {
                "key": "con_nameservice.collection_owner",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_nameservice.contracts_allowlist",
                "value": []
            },
            {
                "key": "con_nameservice.mint_price",
                "value": 1
            },
            {
                "key": "con_nameservice.royalty_fee_percentage",
                "value": 2
            },
            {
                "key": "con_nwal.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_nwal', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_nwal', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_nwal', name='balances')\n__metadata = Hash(contract='con_nwal', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_nwal')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_nwal')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_nwal')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_nwal')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_nwal')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_nwal.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_nwal.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        21,
                        22,
                        0,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_nwal.balances:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": {
                    "__fixed__": "1E+6"
                }
            },
            {
                "key": "con_nwal.metadata:operator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_nwal.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_nwal.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_nwal.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_nwal.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_otc.__code__",
                "value": "random.seed()\nI = importlib\n__fee = Variable(contract='con_otc', name='fee')\n__otc_listing = Hash(contract='con_otc', name='otc_listing')\n__owner = Variable(contract='con_otc', name='owner')\n__earned_fees = Hash(default_value=decimal('0.0'), contract='con_otc', name\n    ='earned_fees')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __fee.set(decimal('0.5'))\n\n\n@__export('con_otc')\ndef list_offer(offer_token: str, offer_amount: float, take_token: str,\n    take_amount: float):\n    assert offer_amount > decimal('0.0'), 'Offer amount must be positive'\n    assert take_amount > decimal('0.0'), 'Take amount must be positive'\n    listing_id = hashlib.sha256(str(now) + str(random.randrange(99)))\n    assert not __otc_listing[listing_id], 'Generated ID not unique. Try again'\n    maker_fee = offer_amount / 100 * __fee.get()\n    I.import_module(offer_token).transfer_from(amount=offer_amount +\n        maker_fee, to=ctx.this, main_account=ctx.caller)\n    __otc_listing[listing_id] = {'maker': ctx.caller, 'taker': None,\n        'offer_token': offer_token, 'offer_amount': offer_amount,\n        'take_token': take_token, 'take_amount': take_amount, 'fee': __fee.\n        get(), 'status': 'OPEN'}\n    return listing_id\n\n\n@__export('con_otc')\ndef take_offer(listing_id: str):\n    offer = __otc_listing[listing_id]\n    assert offer, 'Offer ID does not exist'\n    assert offer['status'] == 'OPEN', 'Offer not available'\n    offer_fee_percent = offer['fee']\n    taker_fee = offer['take_amount'] / decimal('100.0') * offer_fee_percent\n    maker_fee = offer['offer_amount'] / decimal('100.0') * offer_fee_percent\n    I.import_module(offer['take_token']).transfer_from(amount=offer[\n        'take_amount'] + taker_fee, to=ctx.this, main_account=ctx.caller)\n    current_maker_fee_earned = __earned_fees[offer['offer_token']]\n    __earned_fees[offer['offer_token']] = current_maker_fee_earned + maker_fee\n    current_taker_fee_earned = __earned_fees[offer['take_token']]\n    __earned_fees[offer['take_token']] = current_taker_fee_earned + taker_fee\n    I.import_module(offer['take_token']).transfer(amount=offer[\n        'take_amount'], to=offer['maker'])\n    I.import_module(offer['offer_token']).transfer(amount=offer[\n        'offer_amount'], to=ctx.caller)\n    offer['status'] = 'EXECUTED'\n    offer['taker'] = ctx.caller\n    __otc_listing[listing_id] = offer\n\n\n@__export('con_otc')\ndef cancel_offer(listing_id: str):\n    offer = __otc_listing[listing_id]\n    assert offer, 'Offer ID does not exist'\n    assert offer['status'] == 'OPEN', 'Offer can not be cancelled'\n    assert offer['maker'] == ctx.caller, 'Only maker can cancel offer'\n    maker_fee = offer['offer_amount'] / decimal('100.0') * offer['fee']\n    amount_to_refund = offer['offer_amount'] + maker_fee\n    I.import_module(offer['offer_token']).transfer(amount=amount_to_refund,\n        to=ctx.caller)\n    offer['status'] = 'CANCELLED'\n    __otc_listing[listing_id] = offer\n\n\n@__export('con_otc')\ndef adjust_fee(trading_fee: float):\n    assert ctx.caller == __owner.get(), 'Only owner can call this method!'\n    assert decimal('0.0') <= trading_fee <= decimal('10.0'\n        ), 'Fee must be between 0.0 and 10.0 percent'\n    __fee.set(trading_fee)\n\n\n@__export('con_otc')\ndef withdraw(token_list: list):\n    assert ctx.caller == __owner.get(), 'Only owner can call this method!'\n    for token in token_list:\n        amount_to_withdraw = __earned_fees[token]\n        if amount_to_withdraw > decimal('0.0'):\n            I.import_module(token).transfer(amount=amount_to_withdraw, to=\n                __owner.get())\n            __earned_fees[token] = decimal('0.0')\n\n\n@__export('con_otc')\ndef view_earned_fees(token: str):\n    return __earned_fees[token]\n\n\n@__export('con_otc')\ndef view_contract_balance(token: str):\n    __balances = ForeignHash(foreign_contract=token, foreign_name=\n        'balances', contract='con_otc', name='balances')\n    token_balance = __balances[ctx.this]\n    return decimal(str(token_balance)\n        ) if token_balance is not None else decimal('0.0')\n"
            },
            {
                "key": "con_otc.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_otc.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        23,
                        35,
                        47,
                        0
                    ]
                }
            },
            {
                "key": "con_otc.fee",
                "value": {
                    "__fixed__": "0.5"
                }
            },
            {
                "key": "con_otc.owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_ozark_interface_fake.__code__",
                "value": "@__export('con_ozark_interface_fake')\ndef deposit(commitment: str):\n    __process_deposit(ctx.caller)\n\n\ndef __process_deposit(caller: str):\n    pass\n\n\n@__export('con_ozark_interface_fake')\ndef withdraw(a: list, b: list, c: list, root: str, nullifier_hash: str,\n    recipient: str, relayer: str='0', fee: str='0', refund: str='0'):\n    __process_withdraw(recipient, relayer, int(fee, 10), int(refund, 10))\n\n\ndef __process_withdraw(recipient: str, relayer: str, fee: int, refund: int):\n    pass\n"
            },
            {
                "key": "con_ozark_interface_fake.__developer__",
                "value": "ef0e2de819ea8060e3de26fa322c71e581152dd2f282cbcda6f5655bc64db5d9"
            },
            {
                "key": "con_ozark_interface_fake.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        8,
                        13,
                        55,
                        57,
                        0
                    ]
                }
            },
            {
                "key": "con_ozark_interface_fake_v2.__code__",
                "value": "import con_mimc_cts as mimc_cts\nI = importlib\n__denomination = Variable(contract='con_ozark_interface_fake_v2', name=\n    'denomination')\n__token_contract = Variable(contract='con_ozark_interface_fake_v2', name=\n    'token_contract')\n__total_deposit_balance = Variable(contract='con_ozark_interface_fake_v2',\n    name='total_deposit_balance')\n__commitments = Hash(default_value=None, contract=\n    'con_ozark_interface_fake_v2', name='commitments')\n__commitment_history = Hash(default_value=None, contract=\n    'con_ozark_interface_fake_v2', name='commitment_history')\n__nullifier_hashes = Hash(default_value=None, contract=\n    'con_ozark_interface_fake_v2', name='nullifier_hashes')\n__current_root_index = Variable(contract='con_ozark_interface_fake_v2',\n    name='current_root_index')\n__next_index = Variable(contract='con_ozark_interface_fake_v2', name=\n    'next_index')\n__roots_var = Variable(contract='con_ozark_interface_fake_v2', name='roots_var'\n    )\n__filled_subtrees_var = Variable(contract='con_ozark_interface_fake_v2',\n    name='filled_subtrees_var')\nROOT_HISTORY_SIZE = 30\nTREE_LEVELS = 20\n\n\ndef ____(denomination_value: int=10, token_contract_value: str='currency'):\n    assert TREE_LEVELS > 0, 'tree_levels should be greater than zero'\n    assert TREE_LEVELS < 32, 'tree_levels should be less than 32'\n    filled_subtrees = []\n    roots = [None] * ROOT_HISTORY_SIZE\n    for i in range(TREE_LEVELS):\n        filled_subtrees.append(str(__zeros(i)))\n    roots[0] = str(__zeros(TREE_LEVELS - 1))\n    __current_root_index.set(0)\n    __next_index.set(0)\n    __roots_var.set(roots)\n    __filled_subtrees_var.set(filled_subtrees)\n    __total_deposit_balance.set(0)\n    __denomination.set(denomination_value)\n    __token_contract.set(token_contract_value)\n\n\n@__export('con_ozark_interface_fake_v2')\ndef deposit(commitment: str):\n    assert __commitments[commitment\n        ] is None, 'The commitment has been submitted.'\n    __insert(commitment)\n    __commitments[commitment] = True\n    __commitment_history[__next_index.get()] = commitment\n    __process_deposit(ctx.caller)\n\n\ndef __process_deposit(caller: str):\n    amount = __denomination.get()\n    token = I.import_module(__token_contract.get())\n    __total_deposit_balance.set(__total_deposit_balance.get() + amount)\n\n\n@__export('con_ozark_interface_fake_v2')\ndef withdraw(a: list, b: list, c: list, root: str, nullifier_hash: str,\n    recipient: str, relayer: str='0', fee: str='0', refund: str='0'):\n    __process_withdraw(recipient, relayer, int(fee, 10), int(refund, 10))\n\n\ndef __process_withdraw(recipient: str, relayer: str, fee: int, refund: int):\n    pass\n\n\nSEED = 'mimcsponge'\nNROUNDS = 220\ncurve_order = (\n    21888242871839275222246405745257275088548364400416034343698204186575808495617\n    )\n\n\ndef __mimc_hash(xL_in: str, xR_in: str, k: str, cts: list) ->tuple:\n    xL = int(xL_in)\n    xR = int(xR_in)\n    k = int(k)\n    for i in range(NROUNDS):\n        c = cts[i]\n        t = __mimc_add(xL, k) if i == 0 else __mimc_add(__mimc_add(xL, k), c)\n        xR_tmp = int(xR)\n        if i < NROUNDS - 1:\n            xR = xL\n            xL = __mimc_add(xR_tmp, __mimc_exp(t, 5))\n        else:\n            xR = __mimc_add(xR_tmp, __mimc_exp(t, 5))\n    return __mimc_affine(xL), __mimc_affine(xR)\n\n\ndef __mimc_multi_hash(arr: list, cts: list, key: str=None, num_outputs: int=1):\n    key = int(key or 0)\n    r = 0\n    c = 0\n    for i in range(len(arr)):\n        r = __mimc_add(r, int(arr[i]))\n        r, c = __mimc_hash(r, c, key, cts)\n    outputs = [__mimc_affine(r)]\n    for i in range(1, num_outputs):\n        r, c = __mimc_hash(r, c, key)\n        outputs.append(__mimc_affine(r))\n    return outputs\n\n\ndef __hash_left_right(left: str, right: str, cts: list) ->str:\n    assert int(left) < curve_order, 'left should be inside the field'\n    assert int(right) < curve_order, 'right should be inside the field'\n    return str(__mimc_multi_hash([left, right], cts)[0])\n\n\ndef __mimc_add(self: int, other: int) ->int:\n    return (self + other) % curve_order\n\n\ndef __mimc_mul(self: int, other: int) ->int:\n    return self * other % curve_order\n\n\ndef __mimc_square(self: int) ->int:\n    return __mimc_mul(self, self)\n\n\ndef __mimc_shr(self: int, b: int) ->int:\n    return self >> b\n\n\ndef __mimc_exp(base: int, e: int) ->int:\n    res = 1\n    rem = int(e)\n    ex = base\n    while rem != 0:\n        if rem % 2 == 1:\n            res = __mimc_mul(res, ex)\n        ex = __mimc_square(ex)\n        rem = __mimc_shr(rem, 1)\n    return res\n\n\ndef __mimc_affine(self: int) ->int:\n    aux = self\n    nq = -curve_order\n    if aux < 0:\n        if aux <= nq:\n            aux = aux % curve_order\n        if aux < 0:\n            aux = aux + curve_order\n    elif aux >= curve_order:\n        aux = aux % curve_order\n    return aux\n\n\ndef __insert(leaf: str) ->int:\n    current_index = __next_index.get()\n    tree_levels = TREE_LEVELS\n    assert current_index != 2 ** tree_levels, 'Merkle tree is full. No more leaves can be added.'\n    cts = mimc_cts.get_cts()\n    filled_subtrees = __filled_subtrees_var.get()\n    roots = __roots_var.get()\n    current_level_hash = str(leaf)\n    for i in range(tree_levels):\n        if current_index % 2 == 0:\n            left = current_level_hash\n            right = __zeros(i)\n            filled_subtrees[i] = current_level_hash\n        else:\n            left = filled_subtrees[i]\n            right = current_level_hash\n        current_level_hash = __hash_left_right(left, right, cts)\n        current_index /= 2\n    root_index = __current_root_index.get()\n    next_root_index = int((root_index + 1) % ROOT_HISTORY_SIZE)\n    roots[next_root_index] = current_level_hash\n    __next_index.set(int(current_index + 1))\n    __current_root_index.set(next_root_index)\n    __roots_var.set(roots)\n    __filled_subtrees_var.set(filled_subtrees)\n    return current_index\n\n\ndef __is_known_root(root: str) ->bool:\n    if root is None or len(root) == 0 or int(root) == 0:\n        return False\n    i = __current_root_index.get()\n    current_index = i\n    roots = __roots_var.get()\n    first_loop = True\n    while first_loop or i != current_index:\n        first_loop = False\n        if root == roots[i]:\n            return True\n        if i == 0:\n            i = ROOT_HISTORY_SIZE\n        i -= 1\n    return False\n\n\ndef __zeros(i: int) ->int:\n    if i == 0:\n        return (\n            21663839004416932945382355908790599225266501822907911457504978515578255421292\n            )\n    elif i == 1:\n        return (\n            16923532097304556005972200564242292693309333953544141029519619077135960040221\n            )\n    elif i == 2:\n        return (\n            7833458610320835472520144237082236871909694928684820466656733259024982655488\n            )\n    elif i == 3:\n        return (\n            14506027710748750947258687001455876266559341618222612722926156490737302846427\n            )\n    elif i == 4:\n        return (\n            4766583705360062980279572762279781527342845808161105063909171241304075622345\n            )\n    elif i == 5:\n        return (\n            16640205414190175414380077665118269450294358858897019640557533278896634808665\n            )\n    elif i == 6:\n        return (\n            13024477302430254842915163302704885770955784224100349847438808884122720088412\n            )\n    elif i == 7:\n        return (\n            11345696205391376769769683860277269518617256738724086786512014734609753488820\n            )\n    elif i == 8:\n        return (\n            17235543131546745471991808272245772046758360534180976603221801364506032471936\n            )\n    elif i == 9:\n        return (\n            155962837046691114236524362966874066300454611955781275944230309195800494087\n            )\n    elif i == 10:\n        return (\n            14030416097908897320437553787826300082392928432242046897689557706485311282736\n            )\n    elif i == 11:\n        return (\n            12626316503845421241020584259526236205728737442715389902276517188414400172517\n            )\n    elif i == 12:\n        return (\n            6729873933803351171051407921027021443029157982378522227479748669930764447503\n            )\n    elif i == 13:\n        return (\n            12963910739953248305308691828220784129233893953613908022664851984069510335421\n            )\n    elif i == 14:\n        return (\n            8697310796973811813791996651816817650608143394255750603240183429036696711432\n            )\n    elif i == 15:\n        return (\n            9001816533475173848300051969191408053495003693097546138634479732228054209462\n            )\n    elif i == 16:\n        return (\n            13882856022500117449912597249521445907860641470008251408376408693167665584212\n            )\n    elif i == 17:\n        return (\n            6167697920744083294431071781953545901493956884412099107903554924846764168938\n            )\n    elif i == 18:\n        return (\n            16572499860108808790864031418434474032816278079272694833180094335573354127261\n            )\n    elif i == 19:\n        return (\n            11544818037702067293688063426012553693851444915243122674915303779243865603077\n            )\n    elif i == 20:\n        return (\n            18926336163373752588529320804722226672465218465546337267825102089394393880276\n            )\n    elif i == 21:\n        return (\n            11644142961923297861823153318467410719458235936926864848600378646368500787559\n            )\n    elif i == 22:\n        return (\n            14452740608498941570269709581566908438169321105015301708099056566809891976275\n            )\n    elif i == 23:\n        return (\n            7578744943370928628486790984031172450284789077258575411544517949960795417672\n            )\n    elif i == 24:\n        return (\n            5265560722662711931897489036950489198497887581819190855722292641626977795281\n            )\n    elif i == 25:\n        return (\n            731223578478205522266734242762040379509084610212963055574289967577626707020\n            )\n    elif i == 26:\n        return (\n            20461032451716111710758703191059719329157552073475405257510123004109059116697\n            )\n    elif i == 27:\n        return (\n            21109115181850306325376985763042479104020288670074922684065722930361593295700\n            )\n    elif i == 28:\n        return (\n            81188535419966333443828411879788371791911419113311601242851320922268145565\n            )\n    elif i == 29:\n        return (\n            7369375930008366466575793949976062119589129382075515225587339510228573090855\n            )\n    elif i == 30:\n        return (\n            14128481056524536957498216347562587505734220138697483515041882766627531681467\n            )\n    elif i == 31:\n        return (\n            20117374654854068065360091929240690644953205021847304657748312176352011708876\n            )\n    else:\n        assert False, 'Index out of bounds'\n"
            },
            {
                "key": "con_ozark_interface_fake_v2.__developer__",
                "value": "ef0e2de819ea8060e3de26fa322c71e581152dd2f282cbcda6f5655bc64db5d9"
            },
            {
                "key": "con_ozark_interface_fake_v2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        9,
                        0,
                        3,
                        36,
                        0
                    ]
                }
            },
            {
                "key": "con_ozark_interface_fake_v2.current_root_index",
                "value": 0
            },
            {
                "key": "con_ozark_interface_fake_v2.denomination",
                "value": 10
            },
            {
                "key": "con_ozark_interface_fake_v2.filled_subtrees_var",
                "value": [
                    "21663839004416932945382355908790599225266501822907911457504978515578255421292",
                    "16923532097304556005972200564242292693309333953544141029519619077135960040221",
                    "7833458610320835472520144237082236871909694928684820466656733259024982655488",
                    "14506027710748750947258687001455876266559341618222612722926156490737302846427",
                    "4766583705360062980279572762279781527342845808161105063909171241304075622345",
                    "16640205414190175414380077665118269450294358858897019640557533278896634808665",
                    "13024477302430254842915163302704885770955784224100349847438808884122720088412",
                    "11345696205391376769769683860277269518617256738724086786512014734609753488820",
                    "17235543131546745471991808272245772046758360534180976603221801364506032471936",
                    "155962837046691114236524362966874066300454611955781275944230309195800494087",
                    "14030416097908897320437553787826300082392928432242046897689557706485311282736",
                    "12626316503845421241020584259526236205728737442715389902276517188414400172517",
                    "6729873933803351171051407921027021443029157982378522227479748669930764447503",
                    "12963910739953248305308691828220784129233893953613908022664851984069510335421",
                    "8697310796973811813791996651816817650608143394255750603240183429036696711432",
                    "9001816533475173848300051969191408053495003693097546138634479732228054209462",
                    "13882856022500117449912597249521445907860641470008251408376408693167665584212",
                    "6167697920744083294431071781953545901493956884412099107903554924846764168938",
                    "16572499860108808790864031418434474032816278079272694833180094335573354127261",
                    "11544818037702067293688063426012553693851444915243122674915303779243865603077"
                ]
            },
            {
                "key": "con_ozark_interface_fake_v2.next_index",
                "value": 0
            },
            {
                "key": "con_ozark_interface_fake_v2.roots_var",
                "value": [
                    "11544818037702067293688063426012553693851444915243122674915303779243865603077",
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                ]
            },
            {
                "key": "con_ozark_interface_fake_v2.token_contract",
                "value": "currency"
            },
            {
                "key": "con_ozark_interface_fake_v2.total_deposit_balance",
                "value": 0
            },
            {
                "key": "con_phased_test.__code__",
                "value": "import currency as xian\n__presale_status = Variable(contract='con_phased_test', name='presale_status')\n__token_price = Variable(contract='con_phased_test', name='token_price')\n__owner = Variable(contract='con_phased_test', name='owner')\n__default_tokens = Variable(contract='con_phased_test', name='default_tokens')\nTOKEN_RATE = 1000\n\n\ndef ____():\n    __presale_status.set('Started')\n    __token_price.set(1 / TOKEN_RATE)\n    __owner.set(ctx.caller)\n    __default_tokens.set(0)\n\n\n@__export('con_phased_test')\ndef deposit(amount: float):\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __default_tokens.set(__default_tokens.get() + amount)\n\n\n@__export('con_phased_test')\ndef buy_tokens(amount: float):\n    assert __presale_status.get() == 'Active', 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    current_tokens = __default_tokens.get()\n    assert current_tokens > 0, 'No tokens available for sale'\n    tokens_to_receive = amount * TOKEN_RATE\n    assert tokens_to_receive <= current_tokens, 'Not enough tokens remaining'\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __default_tokens.set(current_tokens - tokens_to_receive)\n\n\n@__export('con_phased_test')\ndef get_remaining_tokens():\n    return __default_tokens.get()\n\n\n@__export('con_phased_test')\ndef get_presale_status():\n    return __presale_status.get()\n\n\n@__export('con_phased_test')\ndef get_token_price():\n    return __token_price.get()\n\n\n@__export('con_phased_test')\ndef set_presale_status(status: str):\n    assert __owner.get() == ctx.caller, 'Only owner can change status'\n    __presale_status.set(status)\n\n\n@__export('con_phased_test')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_phased_test')\ndef withdraw_xian_all():\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_phased_test')\ndef withdraw_any_token(amount: float, token_contract: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(token_contract).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_phased_test.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_phased_test.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        15,
                        19,
                        46,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_phased_test.default_tokens",
                "value": 0
            },
            {
                "key": "con_phased_test.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_phased_test.presale_status",
                "value": "Started"
            },
            {
                "key": "con_phased_test.token_price",
                "value": {
                    "__fixed__": "0.001"
                }
            },
            {
                "key": "con_phased_test1.__code__",
                "value": "import currency as xian\n__presale_status = Variable(contract='con_phased_test1', name='presale_status')\n__token_price = Variable(contract='con_phased_test1', name='token_price')\n__owner = Variable(contract='con_phased_test1', name='owner')\n__default_tokens = Variable(contract='con_phased_test1', name='default_tokens')\nTOKEN_RATE = 15\n__token_contract = Variable(contract='con_phased_test1', name='token_contract')\n__token_symbol = Variable(contract='con_phased_test1', name='token_symbol')\n\n\ndef ____():\n    __presale_status.set('Started')\n    __token_price.set(1 / TOKEN_RATE)\n    __owner.set(ctx.caller)\n    __default_tokens.set(0)\n\n\n@__export('con_phased_test1')\ndef set_target_token(contract: str, symbol: str):\n    assert __owner.get() == ctx.caller, 'Only owner can set target token'\n    __token_contract.set(contract)\n    __token_symbol.set(symbol)\n\n\n@__export('con_phased_test1')\ndef get_target_token():\n    return {'contract': __token_contract.get(), 'symbol': __token_symbol.get()}\n\n\n@__export('con_phased_test1')\ndef deposit(amount: float):\n    assert __token_contract.get() is not None, 'Target token not set'\n    assert ctx.caller == __owner.get(), 'Only owner can deposit tokens'\n    token = importlib.import_module(__token_contract.get())\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __default_tokens.set(__default_tokens.get() + amount)\n\n\n@__export('con_phased_test1')\ndef buy_tokens(amount: float):\n    assert __presale_status.get() == 'Active', 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    current_tokens = __default_tokens.get()\n    assert current_tokens > 0, 'No tokens available for sale'\n    tokens_to_receive = amount * TOKEN_RATE\n    assert tokens_to_receive <= current_tokens, 'Not enough tokens remaining'\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __default_tokens.set(current_tokens - tokens_to_receive)\n\n\n@__export('con_phased_test1')\ndef get_remaining_tokens():\n    return __default_tokens.get()\n\n\n@__export('con_phased_test1')\ndef get_presale_status():\n    return __presale_status.get()\n\n\n@__export('con_phased_test1')\ndef get_token_price():\n    return __token_price.get()\n\n\n@__export('con_phased_test1')\ndef set_presale_status(status: str):\n    assert __owner.get() == ctx.caller, 'Only owner can change status'\n    __presale_status.set(status)\n\n\n@__export('con_phased_test1')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_phased_test1')\ndef withdraw_xian_all():\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_phased_test1')\ndef withdraw_any_token(amount: float, contract_name: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(contract_name).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_phased_test1.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_phased_test1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        15,
                        19,
                        53,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_phased_test1.default_tokens",
                "value": 10000000
            },
            {
                "key": "con_phased_test1.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_phased_test1.presale_status",
                "value": "Active"
            },
            {
                "key": "con_phased_test1.token_contract",
                "value": "con_bag"
            },
            {
                "key": "con_phased_test1.token_price",
                "value": {
                    "__fixed__": "0.06666666666666667"
                }
            },
            {
                "key": "con_phased_test1.token_symbol",
                "value": "DIRET"
            },
            {
                "key": "con_pi.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_pi', name='balances')\n__metadata = Hash(contract='con_pi', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_pi', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_pi', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'xwt'\n    __metadata['token_symbol'] = 'xwt'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 1000000000\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pi')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pi')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_pi')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_pi')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_pi')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_pi.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_pi.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        4,
                        22,
                        32,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "997884906.3564814814815"
                }
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": 100
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:cno_zen2",
                "value": 1000
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_f1",
                "value": 1000
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_f2",
                "value": 49000
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_f3",
                "value": 0
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_f4",
                "value": 0
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_ff1",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff7",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff8",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fm5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_mf3",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_zen1",
                "value": 50000
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_zen2",
                "value": 0
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_zen3",
                "value": 0
            },
            {
                "key": "con_pi.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_zen4",
                "value": 0
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "1630715.8101505327539317199420597627"
                }
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_ff1",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff7",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff8",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fm5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_mf_02",
                "value": 0
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_mf_04",
                "value": 0
            },
            {
                "key": "con_pi.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_zen4",
                "value": 0
            },
            {
                "key": "con_pi.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": {
                    "__fixed__": "7.8649921507064379905808477232"
                }
            },
            {
                "key": "con_pi.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a:con_mf_02",
                "value": 10
            },
            {
                "key": "con_pi.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a:con_mf_04",
                "value": 0
            },
            {
                "key": "con_pi.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "__fixed__": "36799"
                }
            },
            {
                "key": "con_pi.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_pi.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_mf_02",
                "value": 0
            },
            {
                "key": "con_pi.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_zen4",
                "value": 0
            },
            {
                "key": "con_pi.balances:con_f2",
                "value": 1000
            },
            {
                "key": "con_pi.balances:con_f3",
                "value": 1200
            },
            {
                "key": "con_pi.balances:con_f4",
                "value": 1000
            },
            {
                "key": "con_pi.balances:con_ff1",
                "value": {
                    "__fixed__": "2191.0995370370370370370370370373"
                }
            },
            {
                "key": "con_pi.balances:con_fff06",
                "value": {
                    "__fixed__": "14204"
                }
            },
            {
                "key": "con_pi.balances:con_fff5",
                "value": {
                    "__fixed__": "6.61E+4"
                }
            },
            {
                "key": "con_pi.balances:con_fff7",
                "value": {
                    "__fixed__": "120602.0903124302090312430209032"
                }
            },
            {
                "key": "con_pi.balances:con_fff8",
                "value": {
                    "__fixed__": "1.4E+4"
                }
            },
            {
                "key": "con_pi.balances:con_fm5",
                "value": {
                    "__fixed__": "1.1E+3"
                }
            },
            {
                "key": "con_pi.balances:con_mf3",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_pi.balances:con_mf_02",
                "value": 4840
            },
            {
                "key": "con_pi.balances:con_mf_04",
                "value": {
                    "__fixed__": "197442.1350078492935620094191522768"
                }
            },
            {
                "key": "con_pi.balances:con_zen2",
                "value": {
                    "__fixed__": "7891.6435185185185"
                }
            },
            {
                "key": "con_pi.balances:con_zen3",
                "value": 1000
            },
            {
                "key": "con_pi.balances:con_zen4",
                "value": 14000
            },
            {
                "key": "con_pi.metadata:operator",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_pi.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_pi.metadata:token_name",
                "value": "xwt"
            },
            {
                "key": "con_pi.metadata:token_symbol",
                "value": "xwt"
            },
            {
                "key": "con_pi.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_pi.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_pixel_frames_auction.S:thing_master_contract",
                "value": "con_pixel_frames_master"
            },
            {
                "key": "con_pixel_frames_auction.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames',\n    foreign_name='S', contract='con_pixel_frames_auction', name='Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction', name='S')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_auction',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid] = False\n\n\n@__export('con_pixel_frames_auction')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    listing_info = __S[uid]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': __S[uid, 'current_owner'], 'uid': __S\n        [uid, 'uid'], 'reserve_price': __S[uid, 'reserve_price'],\n        'current_bid': __S[uid, 'current_bid'], 'current_winner': __S[uid,\n        'current_winner'], 'royalty_percent': __S[uid, 'royalty_percent'],\n        'creator': __S[uid, 'creator']}\n\n\n@__export('con_pixel_frames_auction')\ndef auction_thing(uid: str, reserve_price: float, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer_from(uid=uid, to=ctx.this, main_account=\n        ctx.caller)\n    assert not __S[uid], 'Auction has already started!'\n    assert end_date > now, 'end_date is in the past'\n    assert reserve_price >= 0, 'reserve_price cannot be less than 0'\n    __S[uid, 'start_date'] = start_date\n    __S[uid, 'end_date'] = end_date\n    __S[uid, 'current_owner'] = ctx.caller\n    __S[uid, 'uid'] = uid\n    __S[uid, 'reserve_price'] = reserve_price\n    __S[uid, 'current_bid'] = None\n    __S[uid, 'current_winner'] = ''\n    __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta', 'royalty_percent']\n    __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n    __S[uid] = True\n\n\n@__export('con_pixel_frames_auction')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid']] = False\n\n\n@__export('con_pixel_frames_auction')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n"
            },
            {
                "key": "con_pixel_frames_auction.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_auction.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        9,
                        16,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction.metadata:operator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_auction_v0_1.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_1"
            },
            {
                "key": "con_pixel_frames_auction_v0_1.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_1', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_1',\n    name='S')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_auction_v0_1',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_1'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid] = False\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    listing_info = __S[uid]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': __S[uid, 'current_owner'], 'uid': __S\n        [uid, 'uid'], 'reserve_price': __S[uid, 'reserve_price'],\n        'current_bid': __S[uid, 'current_bid'], 'current_winner': __S[uid,\n        'current_winner'], 'royalty_percent': __S[uid, 'royalty_percent'],\n        'creator': __S[uid, 'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef auction_thing(uid: str, reserve_price: float, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer_from(uid=uid, to=ctx.this, main_account=\n        ctx.caller)\n    assert not __S[uid], 'Auction has already started!'\n    assert end_date > now, 'end_date is in the past'\n    assert reserve_price >= 0, 'reserve_price cannot be less than 0'\n    __S[uid, 'start_date'] = start_date\n    __S[uid, 'end_date'] = end_date\n    __S[uid, 'current_owner'] = ctx.caller\n    __S[uid, 'uid'] = uid\n    __S[uid, 'reserve_price'] = reserve_price\n    __S[uid, 'current_bid'] = None\n    __S[uid, 'current_winner'] = ''\n    __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta', 'royalty_percent']\n    __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n    __S[uid] = True\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid']] = False\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_1.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_auction_v0_1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        10,
                        55,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_1.metadata:operator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_auction_v0_4.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_3"
            },
            {
                "key": "con_pixel_frames_auction_v0_4.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames_info_v0_3',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_4', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_4',\n    name='S')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_auction_v0_4',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_3'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_4')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_4')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid, new_owner] = False\n\n\n@__export('con_pixel_frames_auction_v0_4')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    listing_info = __S[uid, ctx.caller]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': __S[uid, 'current_owner'], 'uid': __S\n        [uid, 'uid'], 'reserve_price': __S[uid, 'reserve_price'],\n        'current_bid': __S[uid, 'current_bid'], 'current_winner': __S[uid,\n        'current_winner'], 'royalty_percent': __S[uid, 'royalty_percent'],\n        'creator': __S[uid, 'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_4')\ndef auction_thing(uid: str, reserve_price: float, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer_from(uid=uid, to=ctx.this, main_account=\n        ctx.caller)\n    assert not __S[uid, ctx.caller], 'Auction has already started!'\n    assert end_date > now, 'end_date is in the past'\n    assert reserve_price >= 0, 'reserve_price cannot be less than 0'\n    __S[uid, 'start_date'] = start_date\n    __S[uid, 'end_date'] = end_date\n    __S[uid, 'current_owner'] = ctx.caller\n    __S[uid, 'uid'] = uid\n    __S[uid, 'reserve_price'] = reserve_price\n    __S[uid, 'current_bid'] = None\n    __S[uid, 'current_winner'] = ''\n    __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta', 'royalty_percent']\n    __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n    __S[uid, ctx.caller] = True\n\n\n@__export('con_pixel_frames_auction_v0_4')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\n@__export('con_pixel_frames_auction_v0_4')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n\n\ndef __strptime_ymdhms(date_string: str):\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_4.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_4.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        6,
                        3,
                        33,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_4.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:current_winner",
                "value": ""
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:end_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        10,
                        12,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:reserve_price",
                "value": 20
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:start_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        10,
                        9,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:uid",
                "value": "aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a"
            },
            {
                "key": "con_pixel_frames_auction_v0_5.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_3"
            },
            {
                "key": "con_pixel_frames_auction_v0_5.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames_info_v0_3',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_5', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_5',\n    name='S')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_auction_v0_5',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_3'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_5')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_5')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid, new_owner] = False\n\n\n@__export('con_pixel_frames_auction_v0_5')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    listing_info = __S[uid, ctx.caller]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': __S[uid, 'current_owner'], 'uid': __S\n        [uid, 'uid'], 'reserve_price': __S[uid, 'reserve_price'],\n        'current_bid': __S[uid, 'current_bid'], 'current_winner': __S[uid,\n        'current_winner'], 'royalty_percent': __S[uid, 'royalty_percent'],\n        'creator': __S[uid, 'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_5')\ndef auction_thing(uid: str, reserve_price: float, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer_from(uid=uid, to=ctx.this, main_account=\n        ctx.caller)\n    start_date = __strptime_ymdhms(start_date)\n    end_date = __strptime_ymdhms(end_date)\n    assert not __S[uid, ctx.caller], 'Auction has already started!'\n    assert end_date > now, 'end_date is in the past'\n    assert reserve_price >= 0, 'reserve_price cannot be less than 0'\n    __S[uid, 'start_date'] = start_date\n    __S[uid, 'end_date'] = end_date\n    __S[uid, 'current_owner'] = ctx.caller\n    __S[uid, 'uid'] = uid\n    __S[uid, 'reserve_price'] = reserve_price\n    __S[uid, 'current_bid'] = None\n    __S[uid, 'current_winner'] = ''\n    __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta', 'royalty_percent']\n    __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n    __S[uid, ctx.caller] = True\n\n\n@__export('con_pixel_frames_auction_v0_5')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\n@__export('con_pixel_frames_auction_v0_5')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n\n\ndef __strptime_ymdhms(date_string: str):\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_5.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_5.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        6,
                        12,
                        21,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_5.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_3"
            },
            {
                "key": "con_pixel_frames_auction_v0_6.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames_info_v0_3',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_6', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_6',\n    name='S')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_auction_v0_6',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_3'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_6')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_6')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid, new_owner] = False\n\n\n@__export('con_pixel_frames_auction_v0_6')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    current_owner = __S[uid, 'current_owner']\n    listing_info = __S[uid, current_owner]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': current_owner, 'uid': __S[uid, 'uid'],\n        'reserve_price': __S[uid, 'reserve_price'], 'current_bid': __S[uid,\n        'current_bid'], 'current_winner': __S[uid, 'current_winner'],\n        'royalty_percent': __S[uid, 'royalty_percent'], 'creator': __S[uid,\n        'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_6')\ndef auction_thing(uid: str, reserve_price: float, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer_from(uid=uid, to=ctx.this, main_account=\n        ctx.caller)\n    start_date = __strptime_ymdhms(start_date)\n    end_date = trptime_ymdhms(end_date)\n    assert not __S[uid, ctx.caller], 'Auction has already started!'\n    assert end_date > now, 'end_date is in the past'\n    assert reserve_price >= 0, 'reserve_price cannot be less than 0'\n    __S[uid, 'start_date'] = start_date\n    __S[uid, 'end_date'] = end_date\n    __S[uid, 'current_owner'] = ctx.caller\n    __S[uid, 'uid'] = uid\n    __S[uid, 'reserve_price'] = reserve_price\n    __S[uid, 'current_bid'] = None\n    __S[uid, 'current_winner'] = ''\n    __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta', 'royalty_percent']\n    __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n    __S[uid, ctx.caller] = True\n\n\n@__export('con_pixel_frames_auction_v0_6')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\n@__export('con_pixel_frames_auction_v0_6')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n\n\ndef __strptime_ymdhms(date_string: str):\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_6.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        10,
                        9,
                        41,
                        10,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:current_winner",
                "value": ""
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:end_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        17,
                        20,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": true
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:reserve_price",
                "value": 10
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:start_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        17,
                        19,
                        47,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:uid",
                "value": "36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:current_bid",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:current_winner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:end_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        16,
                        1,
                        20,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:reserve_price",
                "value": 10
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:start_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        16,
                        0,
                        50,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:uid",
                "value": "6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:current_bid",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:current_winner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:end_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        16,
                        1,
                        40,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:reserve_price",
                "value": 10
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:start_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        16,
                        0,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:uid",
                "value": "92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:current_winner",
                "value": ""
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:end_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        17,
                        20,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": true
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:reserve_price",
                "value": 10
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:start_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        17,
                        19,
                        52,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:uid",
                "value": "a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:current_bid",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:current_winner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:end_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        10,
                        12,
                        50,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:reserve_price",
                "value": 10
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:start_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        10,
                        10,
                        20,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:uid",
                "value": "aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:current_bid",
                "value": {
                    "__fixed__": "2E+1"
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:current_winner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:end_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        14,
                        12,
                        20,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:reserve_price",
                "value": 10
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:start_date",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        14,
                        11,
                        20,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:uid",
                "value": "b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_3"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames_info_v0_3',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_6_1', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_6_1',\n    name='S')\n__metadata = Hash(default_value=0, contract=\n    'con_pixel_frames_auction_v0_6_1', name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_3'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_6_1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_6_1')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid, new_owner] = False\n\n\n@__export('con_pixel_frames_auction_v0_6_1')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    current_owner = __S[uid, 'current_owner']\n    listing_info = __S[uid, current_owner]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': current_owner, 'uid': __S[uid, 'uid'],\n        'reserve_price': __S[uid, 'reserve_price'], 'current_bid': __S[uid,\n        'current_bid'], 'current_winner': __S[uid, 'current_winner'],\n        'royalty_percent': __S[uid, 'royalty_percent'], 'creator': __S[uid,\n        'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_6_1')\ndef auction_thing(uid: str, reserve_price: float, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer_from(uid=uid, to=ctx.this, main_account=\n        ctx.caller)\n    start_date = __strptime_ymdhms(start_date)\n    end_date = __strptime_ymdhms(end_date)\n    assert not __S[uid, ctx.caller], 'Auction has already started!'\n    assert end_date > now, 'end_date is in the past'\n    assert reserve_price >= 0, 'reserve_price cannot be less than 0'\n    __S[uid, 'start_date'] = start_date\n    __S[uid, 'end_date'] = end_date\n    __S[uid, 'current_owner'] = ctx.caller\n    __S[uid, 'uid'] = uid\n    __S[uid, 'reserve_price'] = reserve_price\n    __S[uid, 'current_bid'] = None\n    __S[uid, 'current_winner'] = ''\n    __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta', 'royalty_percent']\n    __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n    __S[uid, ctx.caller] = True\n\n\n@__export('con_pixel_frames_auction_v0_6_1')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\n@__export('con_pixel_frames_auction_v0_6_1')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n\n\ndef __strptime_ymdhms(date_string: str):\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        10,
                        9,
                        57,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_6_1.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:current_winner",
                "value": ""
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:end_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        7,
                        12,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:reserve_price",
                "value": 20
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:start_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        4,
                        12,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:uid",
                "value": "049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:current_winner",
                "value": ""
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:end_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        7,
                        12,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:reserve_price",
                "value": 20
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:start_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        4,
                        12,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:uid",
                "value": "1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:current_winner",
                "value": ""
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:end_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        7,
                        12,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:reserve_price",
                "value": 20
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:start_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        4,
                        12,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:uid",
                "value": "6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_3"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames_info_v0_3',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_7', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_7',\n    name='S')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_auction_v0_7',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_3'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_7')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_7')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid, new_owner] = False\n\n\n@__export('con_pixel_frames_auction_v0_7')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    current_owner = __S[uid, 'current_owner']\n    listing_info = __S[uid, current_owner]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': current_owner, 'uid': __S[uid, 'uid'],\n        'reserve_price': __S[uid, 'reserve_price'], 'current_bid': __S[uid,\n        'current_bid'], 'current_winner': __S[uid, 'current_winner'],\n        'royalty_percent': __S[uid, 'royalty_percent'], 'creator': __S[uid,\n        'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_7')\ndef auction_thing(uids: list, reserve_price: float, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    start_date = __strptime_ymdhms(start_date)\n    end_date = __strptime_ymdhms(end_date)\n    for uid in uids:\n        thing_master_contract = I.import_module(__S['thing_master_contract'])\n        thing_master_contract.transfer_from(uid=uid, to=ctx.this,\n            main_account=ctx.caller)\n        assert not __S[uid, ctx.caller], 'Auction has already started!'\n        assert end_date > now, 'end_date is in the past'\n        assert reserve_price >= 0, 'reserve_price cannot be less than 0'\n        __S[uid, 'start_date'] = start_date\n        __S[uid, 'end_date'] = end_date\n        __S[uid, 'current_owner'] = ctx.caller\n        __S[uid, 'uid'] = uid\n        __S[uid, 'reserve_price'] = reserve_price\n        __S[uid, 'current_bid'] = None\n        __S[uid, 'current_winner'] = ''\n        __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta',\n            'royalty_percent']\n        __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n        __S[uid, ctx.caller] = True\n\n\n@__export('con_pixel_frames_auction_v0_7')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\n@__export('con_pixel_frames_auction_v0_7')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n\n\ndef __strptime_ymdhms(date_string: str):\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.__developer__",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_auction_v0_7.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        4,
                        11,
                        23,
                        47,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_7.metadata:operator",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_auction_v0_8.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_3"
            },
            {
                "key": "con_pixel_frames_auction_v0_8.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames_info_v0_3',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_8', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_8',\n    name='S')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_auction_v0_8',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_3'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_8')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_8')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid, new_owner] = False\n\n\n@__export('con_pixel_frames_auction_v0_8')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    current_owner = __S[uid, 'current_owner']\n    listing_info = __S[uid, current_owner]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': current_owner, 'uid': __S[uid, 'uid'],\n        'reserve_price': __S[uid, 'reserve_price'], 'current_bid': __S[uid,\n        'current_bid'], 'current_winner': __S[uid, 'current_winner'],\n        'royalty_percent': __S[uid, 'royalty_percent'], 'creator': __S[uid,\n        'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_8')\ndef auction_thing(uids: list, reserve_prices: list, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    assert len(uids) == len(reserve_prices\n        ), 'number of uids must match the number of reserve_prices'\n    start_date = __strptime_ymdhms(start_date)\n    end_date = __strptime_ymdhms(end_date)\n    i = 0\n    for uid in uids:\n        thing_master_contract = I.import_module(__S['thing_master_contract'])\n        thing_master_contract.approve(uid, ctx.this)\n        thing_master_contract.transfer_from(uid=uid, to=ctx.this,\n            main_account=ctx.caller)\n        assert not __S[uid, ctx.caller], 'Auction has already started!'\n        assert end_date > now, 'end_date is in the past'\n        assert reserve_prices[i] >= 0, 'reserve_price cannot be less than 0'\n        __S[uid, 'start_date'] = start_date\n        __S[uid, 'end_date'] = end_date\n        __S[uid, 'current_owner'] = ctx.caller\n        __S[uid, 'uid'] = uid\n        __S[uid, 'reserve_price'] = reserve_prices[i]\n        __S[uid, 'current_bid'] = None\n        __S[uid, 'current_winner'] = ''\n        __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta',\n            'royalty_percent']\n        __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n        __S[uid, ctx.caller] = True\n        i = i + 1\n\n\n@__export('con_pixel_frames_auction_v0_8')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\n@__export('con_pixel_frames_auction_v0_8')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n\n\ndef __strptime_ymdhms(date_string: str):\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_8.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        8,
                        3,
                        18,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_1.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_3"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_1.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames_info_v0_3',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_8_1', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_8_1',\n    name='S')\n__metadata = Hash(default_value=0, contract=\n    'con_pixel_frames_auction_v0_8_1', name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_3'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_8_1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_8_1')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid, new_owner] = False\n\n\n@__export('con_pixel_frames_auction_v0_8_1')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    current_owner = __S[uid, 'current_owner']\n    listing_info = __S[uid, current_owner]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': current_owner, 'uid': __S[uid, 'uid'],\n        'reserve_price': __S[uid, 'reserve_price'], 'current_bid': __S[uid,\n        'current_bid'], 'current_winner': __S[uid, 'current_winner'],\n        'royalty_percent': __S[uid, 'royalty_percent'], 'creator': __S[uid,\n        'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_8_1')\ndef auction_thing(uids: list, reserve_prices: list, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    assert len(uids) == len(reserve_prices\n        ), 'number of uids must match the number of reserve_prices'\n    start_date = __strptime_ymdhms(start_date)\n    end_date = __strptime_ymdhms(end_date)\n    i = 0\n    for uid in uids:\n        thing_master_contract = I.import_module(__S['thing_master_contract'])\n        thing_master_contract.transfer_from(uid=uid, to=ctx.this,\n            main_account=ctx.caller)\n        assert not __S[uid, ctx.caller], 'Auction has already started!'\n        assert end_date > now, 'end_date is in the past'\n        assert reserve_prices[i] >= 0, 'reserve_price cannot be less than 0'\n        __S[uid, 'start_date'] = start_date\n        __S[uid, 'end_date'] = end_date\n        __S[uid, 'current_owner'] = ctx.caller\n        __S[uid, 'uid'] = uid\n        __S[uid, 'reserve_price'] = reserve_prices[i]\n        __S[uid, 'current_bid'] = None\n        __S[uid, 'current_winner'] = ''\n        __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta',\n            'royalty_percent']\n        __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n        __S[uid, ctx.caller] = True\n        i = i + 1\n\n\n@__export('con_pixel_frames_auction_v0_8_1')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\n@__export('con_pixel_frames_auction_v0_8_1')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n\n\ndef __strptime_ymdhms(date_string: str):\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_1.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        8,
                        3,
                        33,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8_1.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:current_winner",
                "value": ""
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:end_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        10,
                        12,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:reserve_price",
                "value": 15
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:start_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        8,
                        4,
                        5,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:uid",
                "value": "049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:current_winner",
                "value": ""
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:end_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        10,
                        12,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:reserve_price",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:start_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        8,
                        4,
                        5,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:uid",
                "value": "1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:current_bid",
                "value": {
                    "__fixed__": "11"
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:current_owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:current_winner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:end_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        10,
                        12,
                        30,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": false
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:reserve_price",
                "value": 10
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:start_date",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        8,
                        4,
                        5,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:uid",
                "value": "6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_4"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames_info_v0_3',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_8_2', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_8_2',\n    name='S')\n__metadata = Hash(default_value=0, contract=\n    'con_pixel_frames_auction_v0_8_2', name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_4'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_8_2')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_8_2')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid, new_owner] = False\n\n\n@__export('con_pixel_frames_auction_v0_8_2')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    current_owner = __S[uid, 'current_owner']\n    listing_info = __S[uid, current_owner]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': current_owner, 'uid': __S[uid, 'uid'],\n        'reserve_price': __S[uid, 'reserve_price'], 'current_bid': __S[uid,\n        'current_bid'], 'current_winner': __S[uid, 'current_winner'],\n        'royalty_percent': __S[uid, 'royalty_percent'], 'creator': __S[uid,\n        'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_8_2')\ndef auction_thing(uids: list, reserve_prices: list, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    assert len(uids) == len(reserve_prices\n        ), 'number of uids must match the number of reserve_prices'\n    start_date = __strptime_ymdhms(start_date)\n    end_date = __strptime_ymdhms(end_date)\n    i = 0\n    for uid in uids:\n        thing_master_contract = I.import_module(__S['thing_master_contract'])\n        thing_master_contract.transfer_from(uid=uid, to=ctx.this,\n            main_account=ctx.caller)\n        assert not __S[uid, ctx.caller], 'Auction has already started!'\n        assert end_date > now, 'end_date is in the past'\n        assert reserve_prices[i] >= 0, 'reserve_price cannot be less than 0'\n        __S[uid, 'start_date'] = start_date\n        __S[uid, 'end_date'] = end_date\n        __S[uid, 'current_owner'] = ctx.caller\n        __S[uid, 'uid'] = uid\n        __S[uid, 'reserve_price'] = reserve_prices[i]\n        __S[uid, 'current_bid'] = None\n        __S[uid, 'current_winner'] = ''\n        __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta',\n            'royalty_percent']\n        __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n        __S[uid, ctx.caller] = True\n        i = i + 1\n\n\n@__export('con_pixel_frames_auction_v0_8_2')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid'], listing_info['current_owner']] = False\n\n\n@__export('con_pixel_frames_auction_v0_8_2')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n\n\ndef __strptime_ymdhms(date_string: str):\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        8,
                        3,
                        52,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_8_2.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info.__code__",
                "value": "__S = Hash(default_value='', contract='con_pixel_frames_info', name='S')\n\n\n@__export('con_pixel_frames_info')\ndef add_thing(thing_string: str, name: str, description: str, meta: dict,\n    creator: str):\n    __enforce_thing_standards(thing_string, name, description, meta)\n    uid = hashlib.sha256(thing_string)\n    assert not __S[uid], thing_string + ' already exists'\n    names_uid = hashlib.sha256(name.lower().replace(' ', ''))\n    assert not __S['names', names_uid\n        ], 'A form of this name already belongs to ' + __S['names', names_uid]\n    __S['names', names_uid] = uid\n    __custom_string_validations(thing_string, meta['num_of_frames'])\n    __S[uid] = ['thing', 'type', 'name', 'description', 'owner', 'creator',\n        'likes', 'price:amount', 'price:hold', 'meta_items']\n    __S[uid, 'thing'] = thing_string\n    __S[uid, 'type'] = 'text/plain'\n    __S[uid, 'name'] = name\n    __S[uid, 'description'] = description\n    __S[uid, 'owner'] = creator\n    __S[uid, 'creator'] = creator\n    __S[uid, 'likes'] = 0\n    __S[uid, 'price', 'amount'] = 0\n    __S[uid, 'meta_items'] = ['speed', 'num_of_frames', 'royalty_percent']\n    __S[uid, 'meta', 'speed'] = meta['speed']\n    __S[uid, 'meta', 'num_of_frames'] = meta['num_of_frames']\n    __S[uid, 'meta', 'royalty_percent'] = meta['royalty_percent']\n    return uid\n\n\ndef __enforce_thing_standards(thing_string: str, name: str, description:\n    str, meta: dict):\n    assert len(thing_string) > 0, 'Thing string cannot be empty.'\n    assert len(name) > 0, 'No Name provided.'\n    assert len(name) <= 25, 'Name too long (25 chars max).'\n    assert len(description) > 0, 'No description provided.'\n    assert len(description) <= 128, 'Description too long (128 chars max).'\n    __custom_meta_validations(meta)\n\n\ndef __custom_string_validations(thing_string: str, num_of_frames: int):\n    assert num_of_frames >= 1 and num_of_frames <= 8, 'num_of_frames value ' + str(\n        num_of_frames) + ' is out of range (1-4).'\n    assert len(thing_string\n        ) % num_of_frames == 0, 'num_of_frames value is invalid.'\n    assert len(thing_string\n        ) / num_of_frames == 625, 'Frames Data is Invalid, must be 625 pixels/frame.'\n    __assertPixelValues(thing_string)\n\n\ndef __assertPixelValues(thing_string):\n    for pixel in thing_string:\n        assert (ord(pixel) >= 65 and ord(pixel) <= 122) and ord(pixel\n            ) != 92, 'Frames Data contains invalid pixel {}.'.format(pixel)\n\n\ndef __custom_meta_validations(meta):\n    assert 'speed' in meta, \"Missing meta value 'speed' (int).\"\n    assert isinstance(meta['speed'], int), 'Speed value is not an integer.'\n    assert meta['speed'] >= 100 and meta['speed'\n        ] <= 2000, 'Speed value ' + str(meta['speed']\n        ) + ' is out of range (100ms-2000ms).'\n    assert 'num_of_frames' in meta, \"Missing meta value 'num_of_frames' (int).\"\n    assert isinstance(meta['num_of_frames'], int\n        ), 'num_of_frames value is not an integer.'\n    assert 'royalty_percent' in meta, \"Missing meta value 'royalty_percent' (int).\"\n    assert isinstance(meta['royalty_percent'], int\n        ), 'royalty_percent value is not an integer.'\n    assert meta['royalty_percent'] >= 0 and meta['royalty_percent'\n        ] <= 100, 'royalty_percent value ' + str(meta['royalty_percent']\n        ) + ' is out of range (0-100).'\n\n\n@__export('con_pixel_frames_info')\ndef thing_exists(thing_string: str):\n    uid = hashlib.sha256(thing_string)\n    return __S[uid]\n\n\n@__export('con_pixel_frames_info')\ndef get_owner(uid: str):\n    return __S[uid, 'owner']\n\n\n@__export('con_pixel_frames_info')\ndef get_creator(uid: str):\n    return __S[uid, 'creator']\n\n\n@__export('con_pixel_frames_info')\ndef set_price(uid: str, amount: float, hold: str):\n    assert amount >= 0, 'Cannot set a negative price'\n    __S[uid, 'price', 'amount'] = amount\n    if not hold == None:\n        __S[uid, 'price', 'hold'] = hold\n\n\n@__export('con_pixel_frames_info')\ndef get_price_amount(uid: str):\n    return __S[uid, 'price', 'amount']\n\n\n@__export('con_pixel_frames_info')\ndef get_royalty_amount(uid: str):\n    return __S[uid, 'meta', 'royalty_percent']\n\n\n@__export('con_pixel_frames_info')\ndef get_price_hold(uid: str):\n    return __S[uid, 'price', 'hold']\n\n\n@__export('con_pixel_frames_info')\ndef set_owner(uid: str, owner: str):\n    __S[uid, 'owner'] = owner\n\n\n@__export('con_pixel_frames_info')\ndef like_thing(uid: str):\n    likes = __S[uid, 'likes']\n    __S[uid, 'likes'] = likes + 1\n\n\n@__export('con_pixel_frames_info')\ndef set_proof(uid: str, code: str):\n    __S[uid, 'proof'] = code\n"
            },
            {
                "key": "con_pixel_frames_info.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_info.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        15,
                        13,
                        7,
                        10,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:description",
                "value": "asdasdsad"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:name",
                "value": "asdasdasd"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:thing",
                "value": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYYAAAAAAAAAAAAAAAAAAAAAAYYAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAYYAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAYAAAAAAAAAAAAAAAYYAAAAAYYYAAAAYAAAAAAAAAAYAAAAAYYAAAAAYYAAAAAAAAAAAAAAAAYAAAAAYAAAAAAAAAAAAAAAAAYAAAAAYYAAAAAAAAAAAAAAAAYAAAAAAYAAAAAAAAAAAAAAAAYAAAAAYYAAAAAAAAAAAAAAAAYAAAAAYYAAAAAAAAAAAAAAAAYAAAAAYYAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:description",
                "value": "kjhkhkjhkh"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:name",
                "value": "kjhgkjhkjh"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBAAABBBBBBBBBBBBBJBBBBBBBAABBBBBBBBBBBBBJJJBBBBBBABBBBBBBBBBBJJBJJJJKJBBAABBBBBBBBBBBBBJJBBJKJJBAABBKKKKBBBBBBBBBBKJBJKJBBBBKKLLBBBBBBBBBBBJBJLJBBBBKKLLBBBBBBBBBBBBJJJLJBBKKKLLBBBBBBBBBBBBJJJLLJBKKJLLBBBBBBBBBBBBBJJLLJBKKJLLBBBBBBBBBBBBBJLLBLJKKLLLBBBBBBBBBBBBBBLLBLLJKLLBBBBBBBBBBBBBBBBLBBLJJLLBBBBBBBBBBBBBBBBBBBBLJLLBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:creator",
                "value": "5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:description",
                "value": "cool cool pixel"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:name",
                "value": "cool_pixel"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:owner",
                "value": "5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:thing",
                "value
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:description",
                "value": "34534534"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:name",
                "value": "43354345"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:thing",
                "value": "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYBYYYYYYYYYYYYYYYYYYYYYYYYBYYYYYYYYYYYYYYYYYYYYYYYYBYYYYYYYYYYYYYYYYYYYYYYYYBYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYBYYYYYYYYYYYYYYYYYYYYYYYYAYYYYYYYYYYYYYYYYYYYYYYYYBYYYYYYYYYYYYYYYYYYYYKKYYYYYYYYYYYYYYYYYYYYYYYKKYYBYYYYYYYYYYYYYYYYYYYYYKYYBYYYYKYYYYYYYYYYYYYYBYKYBBYYYYKYYYYYYYKYYKKYKBYKYBBYYYYKYKYYKYYKKYBKKKBYKYBBBYBYKYKYYKKYKKBBKKBBBYBBBBYBBBBKKYBKYBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:names:0531a7fd2d8e6d3011f75922c152217bc6c06a32af8a089c3eee69222fbddca7",
                "value": "d05e516196753fd40b684e24a08a6a7f87fad9637b03f055c7058b9658869861"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:names:d8a928b2043db77e340b523547bf16cb4aa483f0645fe0a290ed1f20aab76257",
                "value": "4c105f89b38d388d4b038ec1795cce62bb507bfa1f8a16049a929de5204f8682"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:names:f6385893d8383821d6cf3056c600f0e31a4c45b871d4f1c458b3be9084ac1e7d",
                "value": "5fefaacc2c91871eede54319c32c10765afa2282aa00b297f4eb778136c11ba6"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:names:ffe8608b087fdca776bb71be3f020c61cf6b21fd41e73ad3eda66e3261fb9789",
                "value": "c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab"
            },
            {
                "key": "con_pixel_frames_info_v0_1.__code__",
                "value": "__S = Hash(default_value='', contract='con_pixel_frames_info_v0_1', name='S')\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef add_thing(thing_string: str, name: str, description: str, meta: dict,\n    creator: str):\n    __enforce_thing_standards(thing_string, name, description, meta)\n    uid = hashlib.sha256(thing_string)\n    assert not __S[uid], thing_string + ' already exists'\n    names_uid = hashlib.sha256(name.lower().replace(' ', ''))\n    assert not __S['names', names_uid\n        ], 'A form of this name already belongs to ' + __S['names', names_uid]\n    __S['names', names_uid] = uid\n    __custom_string_validations(thing_string, meta['num_of_frames'])\n    __S[uid] = ['thing', 'type', 'name', 'description', 'owner', 'creator',\n        'likes', 'price:amount', 'price:hold', 'meta_items']\n    __S[uid, 'thing'] = thing_string\n    __S[uid, 'type'] = 'text/plain'\n    __S[uid, 'name'] = name\n    __S[uid, 'description'] = description\n    __S[uid, 'owner'] = creator\n    __S[uid, 'creator'] = creator\n    __S[uid, 'likes'] = 0\n    __S[uid, 'price', 'amount'] = 0\n    __S[uid, 'meta_items'] = ['speed', 'num_of_frames', 'royalty_percent']\n    __S[uid, 'meta', 'speed'] = meta['speed']\n    __S[uid, 'meta', 'num_of_frames'] = meta['num_of_frames']\n    __S[uid, 'meta', 'royalty_percent'] = meta['royalty_percent']\n    return uid\n\n\ndef __enforce_thing_standards(thing_string: str, name: str, description:\n    str, meta: dict):\n    assert len(thing_string) > 0, 'Thing string cannot be empty.'\n    assert len(name) > 0, 'No Name provided.'\n    assert len(name) <= 25, 'Name too long (25 chars max).'\n    assert len(description) > 0, 'No description provided.'\n    assert len(description) <= 128, 'Description too long (128 chars max).'\n    __custom_meta_validations(meta)\n\n\ndef __custom_string_validations(thing_string: str, num_of_frames: int):\n    assert num_of_frames >= 1 and num_of_frames <= 8, 'num_of_frames value ' + str(\n        num_of_frames) + ' is out of range (1-4).'\n    assert len(thing_string\n        ) % num_of_frames == 0, 'num_of_frames value is invalid.'\n    assert len(thing_string\n        ) / num_of_frames == 625, 'Frames Data is Invalid, must be 625 pixels/frame.'\n    __assertPixelValues(thing_string)\n\n\ndef __assertPixelValues(thing_string):\n    for pixel in thing_string:\n        assert (ord(pixel) >= 65 and ord(pixel) <= 122) and ord(pixel\n            ) != 92, 'Frames Data contains invalid pixel {}.'.format(pixel)\n\n\ndef __custom_meta_validations(meta):\n    assert 'speed' in meta, \"Missing meta value 'speed' (int).\"\n    assert isinstance(meta['speed'], int), 'Speed value is not an integer.'\n    assert meta['speed'] >= 100 and meta['speed'\n        ] <= 2000, 'Speed value ' + str(meta['speed']\n        ) + ' is out of range (100ms-2000ms).'\n    assert 'num_of_frames' in meta, \"Missing meta value 'num_of_frames' (int).\"\n    assert isinstance(meta['num_of_frames'], int\n        ), 'num_of_frames value is not an integer.'\n    assert 'royalty_percent' in meta, \"Missing meta value 'royalty_percent' (int).\"\n    assert isinstance(meta['royalty_percent'], int\n        ), 'royalty_percent value is not an integer.'\n    assert meta['royalty_percent'] >= 0 and meta['royalty_percent'\n        ] <= 100, 'royalty_percent value ' + str(meta['royalty_percent']\n        ) + ' is out of range (0-100).'\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef thing_exists(thing_string: str):\n    uid = hashlib.sha256(thing_string)\n    return __S[uid]\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_owner(uid: str):\n    return __S[uid, 'owner']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_creator(uid: str):\n    return __S[uid, 'creator']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef set_price(uid: str, amount: float, hold: str):\n    assert amount >= 0, 'Cannot set a negative price'\n    __S[uid, 'price', 'amount'] = amount\n    if not hold == None:\n        __S[uid, 'price', 'hold'] = hold\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_price_amount(uid: str):\n    return __S[uid, 'price', 'amount']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_royalty_amount(uid: str):\n    return __S[uid, 'meta', 'royalty_percent']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_price_hold(uid: str):\n    return __S[uid, 'price', 'hold']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef set_owner(uid: str, owner: str):\n    __S[uid, 'owner'] = owner\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef like_thing(uid: str):\n    likes = __S[uid, 'likes']\n    __S[uid, 'likes'] = likes + 1\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef set_proof(uid: str, code: str):\n    __S[uid, 'proof'] = code\n"
            },
            {
                "key": "con_pixel_frames_info_v0_1.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_info_v0_1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        10,
                        55,
                        59,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:created",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        7,
                        18,
                        37,
                        45,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:description",
                "value": "lines lines"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:name",
                "value": "gee lines 3"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBttBBBBBBBBBBBBBBBBBBBBBBttBBBBBBBBBBBBBBBBBBBBBBBttBBBBBBBBBBBBBBBBBBBBBBBtBBBBBBGGBBBBBBBBBBBBBBBttBBBBBBGBBBBBBBBBBBBBBBBtBBBBBBGGBBBBBBBBBBBBBBBtBBBBBBBGBBBBBdBBBBBBBBBBtBBBBBBBGBBBBBdBBBBBBBBBttBBBBBBBGBBBBddBBBBBBBBBtBBBBBBBGBBBBBdBBBBBBBBBBBBBBBBBGBBBBBBdBBBBBBBBBBBBBBBBBGBBBBBBdBBBBBBBBBBBBBBBBBGBBBBBddBBBBBBBBBBBBBBBBGBBBBBBdBBBBBBBBBBBBBBBGGGBBBBBBdBBBBBBBBBBBBBBBBBBBBBBBBdBBBBBBBBBBBBBBBBBBBBBBBBdBBBBBBBBBBBBBBBBBBBBBBBBdBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        53,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:description",
                "value": "7777"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:name",
                "value": "77"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:price:amount",
                "value": {
                    "__fixed__": "1111"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGGBBGBBBBBBBBBBBBBBBBBBBBGGGGGGBBBBBBBBBBBBBBBBBBBGGGGGGGBBBBBBBBBBBBBBGGGGGGGGGGGGBBBBBBBBBBBBBGGGGGGGGGGGBBBBBBBBBBBBBBGGGGGGGGBBBGGBBBBBBBBBBBBGGGGGGGGBBBBBBBBBBBBBBBBBGGGGGGGGGBBBBBBBBBBBBBBBBGGGGGGGGGGBBBBBBBBBBBBBBGGGGGGGGGGGGBBBBBBBBBBBBBBGGGGGGGGGGGBBBBBBBBBBBBBBBGGGGGGGBBBBBBBBBBBBBBBBBBBBGGGGBBBBBBBBBBBBBBBBBBBBBBGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        20,
                        54,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:description",
                "value": "123123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:name",
                "value": "space taco"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:price:amount",
                "value": {
                    "__fixed__": "1123123123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:thing",
                "value": "GGGPTTTNNNNGGGGGGGGGGGGGGGGGPPPTTTTNNGGGGGGGGDGGGGGGGQQPPPPPTNNNGGGGGGGGGGGGGGGQQQPPPPPTNNNNGGGGGGGGGGGGJJQQQQPPPPTTNNNGGGGGGGGLLKKJJQQQQQQPPPTNNNNNNGGGGLLLKJJJJJQQQQQPPPPTTNNGGGGGLLKKKKJJJJJQQQQPPPTTGGGGGGLLLKKKKJJJJJQQQQQPPGGGGGGGGLLKKKKKKKKKJJJJJJGGCGGGGGGLLLLLLKKKKKKKKKJGGGGGGGGGGGGGGLLLLLLLLKKKGGGGGGGGGGGGGGGGGGGGGGLLLGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        14,
                        4,
                        48,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:description",
                "value": "123123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:meta:num_of_frames",
                "value": 4
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:name",
                "value": "ANIMATED OMG"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:price:amount",
                "value": {
                    "__fixed__": "1E+5"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJJBJJBBBBBBBBBBBBBBBBJJBJJJJJJBBJBBBBBBBBBBJJJBJJJBJJBBBBBBBJBBJBBBBBBJJBJJBBBBBBBBBBJJBBBBBBJJJJBBBBBBBBBBBJJJJBBBBBBJBBBBBBBBBBBBBJJJJJBBBBBBBBBBBBBBBBBBJJJJJJBBBBBBBBBBBBBBBBBJJJJBBBBBBBBBBBBBBBBBBBJJJBBBJBBBBBBBBBBBBBBBBJJJJJJJJBJBBBBBJBBBBBBBBBBBBBBBBBBBJBJJJBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFBBBBBBBBBBBBFFBFBFFFFFFBBBBBBBBBBBBBBBBBBBBFBBBFBBFBFFFBBBBBBBBBBBBBBBFFJBJJBBBFBFBBBBBBBBBBJJFFJJJJJFBFFFFBBBBBBBJJJBFFFFJFFBFFBBBJBBJBBBBBBJJFJFBBBBFBBBBBJJBBBBBBJFJJBBBBFBFBFBFJFFFBBBBFFFBBFBBFBFBBBFBJFJJJBBBBBBBBBBBBBFBBFBJJJJJJBBBBBBBBBBBFFFFBBFFFJBBBBBBBBBBBFFFFFFFFFJFFBBJBBBBBBBBBBBBBFFFFFJJJJJJBJBBBBBJBBBBBBBBBBBBBBBBBBBJBJJJBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFBBBBBBBBBBBBFFBFBFFFFFFBBBBBBBBBBBBBBBBBBBBFBBBFBBLBFFFBBBBBBBBBBBBBBBFFLLLJBBBFBFBBBBBBBBBBJJFFLJJJJFBFFFFBBBBBBBJJJLFLFFJFFBFFBBBJBBJBBBBBBLJFJFBBBBFBBBBLLLBBBBBBLFJJBBBBFLFLLBLLFFFBBBBLFFBBLBBLBFLBBFBJFJJJBBBLBLBLBLBBLFBBFBJJJJJJBBBBBBBBBLBFFFFBBFFFJBBBBBBBBBBBLLLLFFLFLJFLBBLBLLBBBBBBBBBBFFFFFJJJLLLLJLLBLBJBBBBBBBBBBBBBBBBLLBJBLLLBBBBBBBBBBBBBBBLBLBBLBBBBBBBBBBBBBBLLLLBBBBBBBBBBBBBBBBBBBLLLBBLLLLLLLLLBBBBBBBBBBBBLLLLLBLBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBxxxBxBBxBxFBxBxxBBBBBBBFFBFBxFFxFFxxxxxxxxBBBBBBBBBBBBFBxBxBxLxFxFBxBxBBBBBBBxxxxFFLLLJBBBFBxxxxBBBBBBBJJFxLxJJJFxFxFFBBBBBBBJJJLFLFFJxFxFFBBBJBBJBBBBBBLJFJFBxBBFxBBBLLLBBBBBBLFJJBBBxFLFLLxLLFFFBBBBLFFBBLBBLxFLBBFBxFJJJBBBLBLBLBLBBLxBBFBJxJJJJBBBBBBBBBLBFFFFxBxFxJBBBBBBBBBBBLLLLFFLFLJFxBxLBLLBBBBBBBBBBFFFFFxxJLLLLJxxxxBJBBBBBBBBBxxBxxBxLxxJBLLLBBBBBBBBBxBxBBBLBLBBLBBBBBBBBBBBBBBLLxLxBxBxBBBBBBBBBBBBBBLLLBBLLLLxLxxLxxBBBBBBBBBBLLLLxxxxxBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        26,
                        8,
                        41,
                        40,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:description",
                "value": "987654"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:meta:num_of_frames",
                "value": 3
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:name",
                "value": "987654"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:price:amount",
                "value": {
                    "__fixed__": "123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:thing",
                "value": "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGEEEEECGGGGGGGGGGGGGGGGGGGEEEEECGGGGGGGGGGGGGGGGGGGEEEEECGGGGGGGGGGGGGGGGGGGEEEEECGGGGGGGGGGGGGGGGGGGEEEEEGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGGCEEEEEGGGGGGGGGGGGGGGGGGGCEEEEEGGGGGGGGGGGGGGGGGGGCEEEEEGGGGGGGGGGGGGGGGGGGCEEEEEGGGGGGGGGGGGGGGGGGGGEEEEEGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGEEEEEGGGGGGGGGGGGGGGGGGGGEEEEECGGGGGGGGGGGGGGGGGGGEEEEECGGGGGGGGGGGGGGGGGGGEEEEECGGGGGGGGGGGGGGGGGGGEEEEECGGGGGGGGGGGGGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGGCGGGGGGGDDDDDGGGGGGGGGGGGCGGGGGGGDGGGDGGGGGGGGGGGGCGGGGGGGDGGGDGGGGGGGGGGGGCGGGGGGGDGGGDGGGGGGGGGGGGGGGGGGGGDDDDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGGGGGCGGGGGGGGGGGGGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        26,
                        12,
                        35,
                        6,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:description",
                "value": "100%"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:name",
                "value": "ITS JUST TESTNET SHEEEET"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:price:amount",
                "value": {
                    "__fixed__": "12313123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:thing",
                "value": "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDDDGGGGGCCCGGGGGGGGGGGGGCDDDGGGGGCDDDGGGGGGGGGGGGCDDDGGGGGCDDDGGGGGGGGGGGGCCCGGGGCGGDDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGKKKGGGGGGGGGGGGGGGGGGGGGCKKKGGGGGEEEGGGGGGGCGGGGGCKKKGGGGGECCCGGGGGGGGGGGGCCCGGGGGGECFFFGGGGGGGGGGGGGGGGGGGGGCFCFGGGGGGGGGGGGGGGGGGGGGGFFFGGGGZZZCGGGGGGGGGGGGGGGGGGGGGZZZCGGGGGGGGGGGGGGGGGGGGGZZZCGGGGGGGGGGGGGGGCGGGGGGGGGFFFGGGGGGGGGGGGGGGGGFFGGGFFFEGGGGGGGGGGGGGGDDFFGGGFFFEDCCGGGGGGGGGGFDDDGGGGGEEEDCCGGGGGGGGGCFDDDGGGGGGDDDCCGGGGGGGGGCFFFGGGGGGGCCCCCGGGGGGGGGCCCGGGGGGGGCCCCCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        6,
                        12,
                        23,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:description",
                "value": "765765"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:name",
                "value": "98797"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBJJBJBBBBJBBBBBBBBBBBBBBBBBBBJNNNNNBBBBBBBBBBBBBBBBBBNNNNNBNNBBBBBBBBBBBBBBBBNNNNNJJBNBBBBBBBBBBBBBBBNNNNNJBBJNNBBBBBBBBBBBBBBNNNNJBBBBJNBBBBBBBBBBBBBBNNNNBBBBBBNJBBBBBBBBBBBBBNNBBBBBBBNBJJBBBBBBBBBBBBBNNNBBBBBNBBBBBBBBBBBBBBBBNNBNNBNNNBBBBBBBBBBBBBBBBBNNNNNNNBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        20,
                        59,
                        26,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:description",
                "value": "352235235"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:name",
                "value": "5124512312"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDDDGBBBBBBBBBBBBBBBBBBBDDDDDGBBBBBBBBBBBBBBBBBBBDDDDDGBBBBBDDDDDBBBBBBBBBDDDDDGBBBBBDDDDDBBBBBBBBBDDDDDGBBBBBDDDDDBBBBBBBBBBBBBBBBBBBBDDDDDBBBBBBBBBBBBBBBBBBBBDDDDDBBBBBBBBBBBBBBBBBBBBGGGGGBBBBBBBBBBBBBDGGGGGBBBBBBBBBBBBGGGGGBBDGGGGGBBBBBBBBBBBDDDDDGBBDGGGGGBBBBBBBBBBBDDDDDGBBDGGGGGBBBBBBBBBBBDDDDDGBBDGGGGGBBBBBBBBBBBDDDDDGBBBBBBBBBBBBBBBBBBBDDDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGGGGGBBBBBDDDDDBBBBBBBBBBGDDDDDBBBGDDDDDBBBBBBBBBBGDDDDDBBBGDDDDDBBBBBBBBBBGDDDDDBBBGDDDDDBBBBBBBBBBGDDDDDBBBGDDDDDBBBBBBBBBBBDDDDDBBBGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        13,
                        5,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:description",
                "value": "12312312312"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:name",
                "value": "13123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:price:amount",
                "value": {
                    "__fixed__": "123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBBBABBBBBBBBBBBBBBBBBBBBBBBBBABBBBBBBBBBBBBBBBBBBBBBBBBABBBBBAABBBBBBBBBBBBBBBBBBABBBBAAABBBBBBBBBBBBBBBBBBABBBABABBBBBBBBBBBBBBBBBBAABBABBABBBBBBBBBBBBBBBBBBAABABBBABBBBBBBBBBBBBBBBBBABABBBABBBBBBBBBBBBBBBBBBAABBBBABBBBBBBBBBBBBBBBBBBAABBBABBBBBBBBBBBBBBBBBBBAABBABBBBBBBBBBBBBBBBBBBBAAAABBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBABABBAABBBBBBBBBBBBBBAAAABBBBBAABBBBBBBBBBBBBAABBBBBBBBAAABBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBAAABBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBAABBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        51,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:description",
                "value": "555"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:name",
                "value": "555"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:price:amount",
                "value": {
                    "__fixed__": "7777"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBGGBBBBBBBBBBBBBBBBBBBBBBBGBGBBBBBBBBBBBBBBBBBBBBBBGBBGGBBBBBBBBBBBBBBBBBBBBBGBGGBBBBBBBBBBBBBBBBBBGGBBBBGGBBBBBBBBBBBBBBGGGBGGGGBBGGGGBBBBBBBBBBBGGGGBBBGGGGGGBBBBBBBBBBBBGGGGGBBGBBGGGBBBBBBBBBBBBGGBGBGGBGGBBGGBBBBBBBBBBBGGBBGBBGGGGBBBBBBBBBBBBBBBGBBBGGBBGBBBBBBBBBBBBBBGGGGGGGBBBGGGBBBBBBBBBBBBGBGGGGGGGGGBGGBBBBBBBBBBGBBBGBBGBBBBBBBGGBBBBBBBBGGBBGGBGBBBBBBBBGGBBBBBBBBGGGBGGGBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        52,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:description",
                "value": "666"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:name",
                "value": "666"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:price:amount",
                "value": {
                    "__fixed__": "444"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBBBBBBBBBBJJBBBBBBBBBBBBBBBBBBBBBBJJBJBBBBBBBBBBBBBBBBBBBJJJBBBJBBBBBBBBBBBBBBBBBJBBJBBBBJJBBBBBBBBBBBBBBBJBBJBBBJJBBBBBBBBBBBBBBBBBBJBBBBJJBBBBBBBBBBBBBBBJBBJJBBJBJBBBBBBBBBBBBBBJBBJBBBJBBBBBBBBBBBBBBBBBBBBJBJJBBBJBBBBBBBBBBBBBBJJJJJJBBBBJBBBBBBBBBBBBJJBBJJJBBBBBBBBBBBBBBBBBBJBJBBJJBBBBBJBBBBBBBBBBBJBBJBBBJBBBBBJBBBBBBBBBBBJBBJBBBJBBBBJBBBBBBBBBBBBJJJBBBBJBBBJBBBBBBBBBBBBBBBJJBJJJJBJJBBBBBBBBBBBBBBBBBJBBJBBBBBBBBBBBBBBBBBBBBBBJJJBBBBBBBBBBBBBBBBBBBBBBBJJBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        15,
                        21,
                        43,
                        32,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:description",
                "value": "123123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:name",
                "value": "123123123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBBBBBBBBKKBBBBBBBBBBBBAAAABBKKKKKKBBBBBBBBBBBBBBBKKKKKKKKKBBBBBBBBBBBBBBKKBKKKKBBKKKBBBBBBBBBBBKKBBKKKKKKBBKKKBBBBBBBBBBKKKKKKKKKKKKKAKKBBBBBBBBBBBBKAKKKKKKKKBBKBBBBBBBBBAAAKBKKKBBBKKKBBKBBBBBBBBAAAKBKKABBBBKKBKKBBBBBBBBBBBKBKKKKAABKKKBBBBBBBBBBBBBKKKBBBKKKKAKBBBBBBBBBBBBBBKKBBBBBBKKKAAABBBBBBBBBBBKKKKKBKKKKKBBBBBBBBBBBBBBBKKKKKKKKBKBBBBBBBBBBBBBBBBBKKKAKKKBBBBBBBBBBBBBBBBBBBBAKKBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:created",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        8,
                        10,
                        5,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:description",
                "value": "scibble"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:name",
                "value": "scribble"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBoooBBBBBBBBBBBBBooBBBBBBBoBooBBBBBBBBBoooBooBBBBBBoBBooooBBBBBoBBBBBoBBBBBBoBBBBBooBBBBBBBBBBoBBBBBBoBBBBBBoBBBBBBBBBBBoBBBBBoBBBBBBoBBBBBBBBBBBoBBBBBoBBBBBBoBBBBBBBBBBBoBBBBoBBBBBBBBBBBBBBBBBBBoBBBBoBBBBBBBBBBBBBBBBBBBoBBBBBBBBBBBBBBBBBBBBBBBBooBBBoBBBBBBBBBBBBBBBBBBBooBooooooooooBBBBBBBBBooooooooooooooooBBBBBBBBBBBBoBBBBBBBBBBBoBBBBBBBBBBBBoBBBBBBBBBBBBBBBBBBBBBBBBoBBBBBBBBBBBBBBBBBBBBoooooBBBBBBBBBBBBBBBBBBBBooBBBBBBBBBBBBBBBBBBBBBBBBooooBBBBBBBBBBBBBBBBBBBBBBBBoooooBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        5,
                        10,
                        59,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:description",
                "value": "123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:name",
                "value": "123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:thing",
                "value": "XXXXXXXXXXXXXXXXXXXXXByyyXXXXXXXXXXXXXXXXXXXXXXyyyXXXXXXXXXXXXXXXXXXXXXXyyyXXXXXXXXXXXXXXXXXXXyyJXXyXXXXXXXXXXXXXXXXXXXXJyXXyXXXXXXXXXXXXXXXXXKKKKyXXXXXXXXXXXXXXXXXXXKJKeeJJXyXXXXXXXXXXXXXXXKJPJeeJJXyXXXXXXXXXKKKyKyJJPeeJJyXXXXXXXXKKKJJJJJJPPeeXJJJXyXXXXXXKJJJPPPPPPPeeXXyyXXXXXXXKJJPPyjJPJJPeeXXyXXXXXXXXKJPyJPJJPPPfeeXXXXXXXXXXXKJPJJJJPPJffeXXXXXXXXXXXfeJPPPjPPffeXXXXXXXXXXXXXfeeeJjPPefeXXXXXXXXXXXXXXfffffffffXXXXXXXXXXXyXXXXXXfffffXXXXXXXXXXXXyyXXXXXXXXXXXXXXXXXXXXXXXyyXXXXXXXXXXXXXXXXXXXXXXyyyXXXXXXXXXXXXXXXXXXXXXXyyyXXXXXXXXXXXXXXXXXXXXXXyyyXXXXXXXXXXXXXXXXXXXXXyyyyXXXXXXXXXXXXXXXXXXXXXyyyyXXXXXXXXXXXXXXXXXXXXXyyyy"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:created",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        6,
                        11,
                        11,
                        29,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:description",
                "value": "sun baking the earth"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:name",
                "value": "scorching sun"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:owner",
                "value": "con_pixel_frames_auction_v0_6_1"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBJBBBBBBBBBBBBBJBBBJBBBBBJBBBBBBBBBBBBBBJJBBJBBBBJJBBBBBBBBBBBBBBBJBBBBBBBJBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJJBBBBBBBBBBBBBJBBBBBBBBBJJJJBBJJJJBBBBBJJBBBBBJJJBBBJBJJBBBBBBBBBJBBBBJJBBBBBJJBBBBBBBBBBBJBBBBJBBBBBBBJBBBBBBBBBBBBBBBBJBBBBBBBJBBBBBBBBBBBBBBBBJBBBBBBBJBBBBBBBBBBBBBBBBJBBBBBBJBJJBBBBBBBBBBBBBBJJBBBBJJBBJJBBBBBBBBBBBBBBJJBBJJBBBBBBBBBBBBJJJJBBBBJJJJBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBBBBBBBBBBJJBBBBBBBBBBBBBBBJJBBBBBBBJBBBBBBBBBBBBBJJBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        26,
                        23,
                        51,
                        36,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:description",
                "value": "00000000"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:name",
                "value": "00000000"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:thing",
                "value
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        14,
                        29,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:description",
                "value": "HELLO :D"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:name",
                "value": "SO COOL"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKKKKBBBBBBBBBBBBBBBBBBBBBKKKKKKBBBBBBBBBKKKKBBBBBBKKKKKKBBBBBBBBBKKKKKBBBBBBKKKKBBBBBBBBBBKKKKKKBBBBBBBBBBBBBBBBBBBBKKKKKBBBBBBBBBBBBBBBBBBBBBKKKKBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKKKKKBBBBBBBBBBBBBBBBBBBKKBBBKBBBBBBBBBBBBBBBBKKKBBBBKKKBBBBBBBBBBBBBKKKBBBBKKBKBBBBBBBBBBBBKKKBBBBKKBBBKBBBBBBBBBBKKKBBBBBKKBBBBKBBBBBBBBBBBKBBBBKKBBBBBBKBBBBBBBBBBBKKBBKKBBBBBKKBBBBBBBBBBBBBKKKKKKKKKKKBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        52,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:description",
                "value": "1"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:name",
                "value": "1"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:price:amount",
                "value": {
                    "__fixed__": "12312312"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBGBBBBBBBBBBBBBBBBBBBBBGBBGGBBBBBBBBBBBBBBBBBBBBGGGBGGGBBBBBBBBBBBBBBBGGGGGGGGGGGBBBBBBBBBBBBBGGGGGGGGGGGGGBBBBBBBBBGGGGGGGGGGGGGGGGGBBBBBBBBGGGGGGGGGGGGGGGGGBBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGBGGGGGGGGGGGGGGGBBBBBBBBBBBGGBGGGGGGGGGBBBBBBBBBBBBBBBBBGGGGGGBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        51,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:description",
                "value": "44"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:name",
                "value": "4"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:price:amount",
                "value": {
                    "__fixed__": "55551"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBAABBBBBBBBBBBBBBAABBBBBBAAAABBBBBBBBBBBBBBBABABBABBBABBBBABBBBBBBBBBBBBAABBBBABBBABBBBBBBBBBBBBBBABABBBABABBBBBBBBBBBBBBBABBBABBAAABBBBBBBBBBBBBBABBBBAABAABBBBBBBBBBBBBBABBBBBBBAAABBBBBBBBBBBBBABBBBBBBBAAABBBBBBBBBBBBBABBBBBBBABBBBBBBBBBBBBBBABBBBBBBAABBBBBBBBBBBBBBABBBBBBBBABBBBBBBBBBBBBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        20,
                        36,
                        28,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:description",
                "value": "1513515135"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:name",
                "value": "151515125"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:price:amount",
                "value": {
                    "__fixed__": "123123123123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBOBBBBBBBBBBBBBBBBBBBBBBBBOOBABAAAABBBBBBBBBBBBBBBBAAAABAABBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBABBBABABBBBBBBBBBBBBBAAABBBBBOOBABBBBBBBBBBBBBABBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBAOOBBBBBABAAAABBBBBBBBAAAABABABBBBBBAABBBBBBBBBAAABBBOBBBABBBBBBBBBBBBBBBBBBBBOOBABBBBBBBBBBBBBBBBBOBBBAABBBBBBBBBBBBBBBBBBBOAABBOBBBBBBBBBBBBBBBBBBBAAAAAABBBBBBBBBBBBBBBBBBAABAAABOBBBBBBBBBBBBAAABBBBBBBOOOOBBBBBBBBBBBABAABABBABABABAAABBBBBBBBBBBBBBBBABABOOBBBBBBBBBBBBBBABBAABABBBOBBBBBBBBBBBBBBBBBBAABAABAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        13,
                        13,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:description",
                "value": "0"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:name",
                "value": "0"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:thing",
                "value": "BBBBBBBBBGBGBBGGBBBBBBBBBBBBBBBBBGBGBGBGBGBBBBBBBBBBBBBBBBGGGBGBGBBBBBBBBBBBBBGBBGGGGGBBGGGGBBBBBBBBBBBGGBGGGGGGGGGGBGBBBBBBBBBBBGGBGGBGGGBGGBBGBBBBBBBBBBGBGGGGGGGBGGBGBBBBBBBBBBGGGBBGBGGGBBGGGGBBBBBBBBBGGGGBGGGGGBBBGBBGBBBBBBBBGGGGGBGGBGGBGBGGGBBBBBBBBBBGGGBBGGBBGBBBBGGBBBBBBBBBGGGGGGGGGGBBBBGGBBBBBBBBBGGGBGBBGGBBBBGGGGBBBBBBBBGGGGGBBGBGBGBBBBGGBBBBBBBGGBGGGGGGGBGGGBGGGGBBBBGGGGGBBGGBBBBBBBBBBGGBBGGBGBBGGBGBBBBBBBBBBBBBBBBBBGGGBGGGBBBBBBBBBBBBBBBBBBBBGGGBGGBBBBBBBBBBBBBBBBBBBBGGGBGGBBBBBBBBBBBBBBBBBBBBGGGBGBBBBBBBBBBBBBBBBBBBBBBGGBGBBBBBBBBBBBBBBBBBBBBBBBGGGBBBBBBBBBBBBBBBBBBBBBBBGGGBBBBBBBBBBBBBBBBBBBBBBBGGBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:created",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        14,
                        23,
                        38,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:creator",
                "value": "f34430e0c1e6976993e225dd8b6dcba5259196a6dcda3dd03036dbd808170cc2"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:description",
                "value": "RUN BITCH RUN"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:meta:num_of_frames",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:meta:royalty_percent",
                "value": 10
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:meta:speed",
                "value": 181
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:name",
                "value": "RUN"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:owner",
                "value": "f34430e0c1e6976993e225dd8b6dcba5259196a6dcda3dd03036dbd808170cc2"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:thing",
                "value
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        20,
                        42,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:description",
                "value": "457457457"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:name",
                "value": "75457457"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:thing",
                "value": "_______B_____``````_____B_____B______``BBBBIIJJ_________B___``_BBIIIIJJJB__B_______``__BIIIJJJJBKK_______B_``B_IIIJJJJJKKLI____BB__``__IIJJJJKKKLLL`___B__``__IIJJJKKKKLLLB``__B__BBBIIIJJKKKKILI``_______BBIIIJJJKKKLLLB``_____BBBIIIJJKKKBBLLB__`____`_BIIIJJKKBKBLLL___`_```B`_BIJ____BLLLL____````___`BBB____B_LB__B_```_B_____BB______B__B__`_`B____```_B____````B_____BB_``_``__B_`___BB______B``BB_``__BB``````___`B__`BBB`B```___B```___AA``__B__``````B__````__B_``BBB_```BBBB``BB``__`B__B___B```BBB__`B__`_```_BB____``B_B``___BBBBB`_``______B__``______BBB_B``_``B`____B`________B```__BBB``BBBB___BBBBBBBB`B__BBBBBBBBBBBBB_B_B_B__"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        20,
                        42,
                        55,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:description",
                "value": "346346346346"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:meta:num_of_frames",
                "value": 2
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:name",
                "value": "346346346"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:price:amount",
                "value": {
                    "__fixed__": "5"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB`BBBBB````BBBBBBBBBBBBBB`````B`BBB`BBBBBBBBBBBBBB`BBBB``BBB`BBBBBBBBBBBBBB`BBBBBB`B``BBBBBBBBBBBBBBB```BBBB``BBBBBBBBBBBBBBBBB``B``B``BBBBBBBBBBBBBBBBBBB```````BBBBBBBBBBBBBBBBB`````BBB```BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB```````BBBBBBBBBB``B`````BBBBBB``BBBBBB```BBBB```B`B`BBBB`BBBBBB`BBBBB``BBBBBB```B`BBBBBBBBBBB``BBBB````BB``BBBBBBBB```````B`BBB`BBBBBBBBBBB``B`B`````BBB`BBBBBBBBBBB`BB`B`B``B`B``BBBBBBBBBBB`BBB```B`BB``BBBBBBBBBBBBB`B```````B``BBBBBBBBBBBBBB``BBB```````BBBBBBBBBBBBB``BB``````BB```BBBBBBBBBBB``BBBBBB```B``BBBBBBBBBBB`B``````B`BBBB`BBBBBBBBBB``BBBBBBBB`BBB``BBBBBBBBBB``BBBBBBBB`BBB`BBBBBBBBBBBB``````BBB`BB`BBBBBBBBB``BBBBBBBBBB````BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:created",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        6,
                        12,
                        12,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:description",
                "value": "baking the planet"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:name",
                "value": "hot hot sun"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:owner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBJBBBBBBBBBBBBBJBBBJBBBBBJBBBBBBBBBBBBBBJJBBJBSBBJJBBBBBBBBBBBBBBBJSSBBSBBJBBSBBBBBBBBBBBBBJBBBBBBBBBSBBBBBBBBBBBBBSBBBBBBJJBBBBBBBBBBBBBJBBSSBBBBBJJJJBBJJJJBBBBBJJBBBBBJJJBBBJBJJBBBBBBBBBJBBBBJJBBBBBJJBBBBBBBBBBBJBBBBJBBBBBBBJBBBBBBBBBBBBBBBBJBBBBBBBJBSSBBBBBBBBBSSBBJBBBBBBBJBBBBBBBBBBBBBBBBJBBBBBBJBJJBBBBBBBBBBBBBBJJBBBBJJBBJJBBBBBBBBBBBBBBJJBBJJBBBBBBBBBBBBJJJJBBBBJJJJBBBSSSBBBBBBBBBBBSSBBSSBBBBBBBBBBBBBBBBBBBBBBBBSSBBBBJBBBBBBBBBBBBBBBBBBBSBBBBJJBBBBBBBBBBBBBBBJJBBBBBBBJBBBBBBBBBBBBBJJBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:created",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        6,
                        17,
                        43,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:description",
                "value": "lines with colour"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:name",
                "value": "gee lines 2"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:owner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBUUBBBBBBBBBBBBBBBBBBBBBBBUBBBBBBBBBBBBBBBBBBBBBBBUUBBBBBBBBBBBBBBBBBBBBBBBUBBBBBBTTBBBBBBBBBBBBBBBUUBBBBBBTBBBBBBBBBBBBBBBBUBBBBBBTTBBBBBBBBBBBBBBBUBBBBBBBTBBBBBjBBBBBBBBBBUBBBBBBBTBBBBBjBBBBBBBBBUUBBBBBBBTBBBBjjBBBBBBBBBUBBBBBBBTBBBBBjBBBBBBBBBBBBBBBBBTBBBBBBjBBBBBBBBBBBBBBBBBTBBBBBBjBBBBBBBBBBBBBBBBBTBBBBBjjBBBBBBBBBBBBBBBBTBBBBBBjBBBBBBBBBBBBBBBBTTBBBBBBjBBBBBBBBBBBBBBBBBBBBBBBBjBBBBBBBBBBBBBBBBBBBBBBBBjBBBBBBBBBBBBBBBBBBBBBBBBjBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        48,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:creator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:description",
                "value": "ssss"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:name",
                "value": "asdsad"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:owner",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:thing",
                "value": "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGVVGGGGGGGGGGGGGGGGGGGGGVVVVVVGGGGGGGGGGGGGGGGVVVVGGGGVVGGGGGGGGGGGGGGVVGGGGGGGGGVGGGGGGGGGGGVVVGGGGGGGGGGGVVGGGGGGGVVVGGGGGGGGGGGGGGVVVGGGGGVVVVVVVVVVVVVVVVVVVVVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGGVVGGGGGGGGGGGGGGGGVVGGGGGVVGGGGGGGGGGGGGGGGVGGGGGGVVGGGGGGGGGGGGGGGGVGGGGGGVGGGGGGGGGGGGGGGGGVGGGGGGVGGGGGGGGGGGGGGGGGVGGGGGGVVVVVVVVVVVVVVVVVVVGGGGGGGGGGGGGGGGGGGGVVGVVGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:created",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        14,
                        23,
                        12,
                        13,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:creator",
                "value": "f34430e0c1e6976993e225dd8b6dcba5259196a6dcda3dd03036dbd808170cc2"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:description",
                "value": "TO MANY PIXELS NOT ENOUGH TIME"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:meta:royalty_percent",
                "value": 10
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:name",
                "value": "Trevor"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:owner",
                "value": "f34430e0c1e6976993e225dd8b6dcba5259196a6dcda3dd03036dbd808170cc2"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:thing",
                "value": "hmhhhmhhhhhmhhmhmhhhmhhmhhmhhhmhhhhmhhhhmhmhhmhhmhhhhhhhhhhhmhhhhhhhhhmmhhhhmhhGGGGGGGGGGGGGGGhhhhhhhmhhGGGXCcCBrXXBrcGhhhhmhhhhhGGCrXBcrXBBXcrGhhhhmhhhhmGGcBGGGGGBrGGGGhhmhmhhmhmGCrcGGGGGccGGGGhhmhhhhmhhGCXXGGKGGrBGGKGhhhhhhhhhhGCBcGGGGGXXGGGGhmhhhhhhhhGCcrGGGGcCGcGGGhmhhhmhmhhGCrBXcXcXGBGcXGhmhhhmhmhmGGCXBcXrXGBGBXGhmhhhmhmhmGGCBBBBrBBBBBBGhmhhhmhhhhGGCBBCGBGBGBGBGhmmhhmhmhhGGCCGGGGGGGGGGGhhmmhhhmhhGGGCCCGCGCGBGBGhhhmhhhmhhmGGGCCCCCCCBBBGhhhhhhhhhhhhGGGGGGGGGGGGGhhhhhhhhhhmhhhhGGGGGGhhhhhhhhhhhhhhmhhmhGGCCBGhhhhmhhmmhhmhhmhhhhGGGGGGhmhhmhhhmhhhhhhhhmhGGCCBGhmhhhhmhhhhmhhhhmmhGGGBBGhmhhhhmhhhhhhmmhhhhGGGGGGhhhhhhhhhh"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        26,
                        18,
                        39,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:description",
                "value": "345678"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:meta:num_of_frames",
                "value": 3
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:name",
                "value": "2345678"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:thing",
                "value
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:created",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        14,
                        23,
                        21,
                        43,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:creator",
                "value": "f34430e0c1e6976993e225dd8b6dcba5259196a6dcda3dd03036dbd808170cc2"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:description",
                "value": "So Funny You'll Slip Over"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:meta:num_of_frames",
                "value": 2
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:meta:royalty_percent",
                "value": 10
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:name",
                "value": "Banana Entertainer "
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:owner",
                "value": "f34430e0c1e6976993e225dd8b6dcba5259196a6dcda3dd03036dbd808170cc2"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:thing",
                "value": "ooooooooooooooooooooooooooooooooUUVUVoooooooooooooooooooooUUUUVoooooooooooooooooooooXUXZooooooooooooooooooooooX[X[ZooooooooooooooooooooX[XX[ZoooooooooooooooooooXX[XX[ZooooooooooooooooooXX[XX[ZoooooooooooooooooooX[XXX[ZooooooooooGGooooooXX[XX[ZooooooooBEGGooooooXX[XXX[ZooooooBEEEooooooZZX[ZZZ[ZooooooEBBooooooCCGCXCGC[ZZooooooBGooooooCGGCCGGCX[ZooooooooGoooooCCCCXCCCX[ZoooooooooGoooooCCX[CCXX[ZooooooooooGoooooXX[XXXX[ZoooooooooooGGooXGXXXXGX[ZooooooooooooGGGXG[XXXGX[ZooooooooooooooGXGGGGGG[ZGGGGGooooooooooXXXXXXXX[ZZoooGooooooooooXXOOQOOXXZoooGooooooooooXX[XQXQX[ZZoooGoooooooooXX[XXXXX[XZZooCCGoooooooXX[XXXXX[XZZooCCCCoooooooooooooooooooooooooooooooooUUVUVoooooooooooooooooooooUUUUVoooooooooooooooooooooXUXZooooooooooooooooooooooX[X[ZooooooooooooooooooooX[XX[ZoooooooooooooooooooXX[XX[ZooooooooooooooooooXX[XX[ZooooooooooCoCooooooX[XXX[ZooooooooECEECEGGooXX[XX[ZooooooooEECCEEGGooXX[XXX[ZoooooooooCGCooooZZX[ZZZ[ZooooooooooGGoooCCGCXCGC[ZZoooooooooGooooCGGCCGGCX[ZoooooooooGooooCCCCXCCCX[ZooooooooooGooooCCX[CCXX[ZooooooooooGoooooXX[XXXX[ZoooooooooooGGooXGXXXXGX[ZooooooooooooGGGXG[XXXGX[ZooooooooooooooGXGGGGGG[ZGGGGGooooooooooXXXXXXXX[ZZoooGooooooooooXXOOQOOXXZoooGooooooooooXX[XQXQX[ZZoooGoooooooooXX[XXXXX[XZZooCCGoooooooXX[XXXXX[XZZooCCCCo"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        6,
                        12,
                        19,
                        48,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:description",
                "value": "321321321"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:name",
                "value": "321321321"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:thing",
                "value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFJJJFFFFFFFFFFJFFJFFFFFFFFJFJJJFFFFFFFFFJFFFFFFFFFFJJFJJFFFJJJFFFJFFFFFFJJJFFJJJFFFJJFJJFFFFFFFFFJFJJFFFFFJJJFFFJJFFFFFFFFJJJFFFFJJJFFFFFFJJFFFFFFFFFFFFFJJFFFFFJFFFJJFFFFFFFFFFFJJFFFFFFFFFJJFFFFFFFFFFJJJFFFFFJFFFJJFFFFFFFFFFJJFFFFFFFFFFJJFFFFFFFFFFJJFFFFFFJFFFJJFFFFFFFFFFFJJFFFFFFFFFJJFFFFFFFFFFFFFFJJFFJFFFJJFFFFFFFFFFFFFFFFJJFFFFJJFFFFFFFFFFFFFFFFFFFJJFFJFFFFFFFFFFFFFFFFFFFFFJJJJFFFFFFFFFFFFFFFFFFFFFFJJFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:created",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        6,
                        10,
                        39,
                        28,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:description",
                "value": "fine table"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:name",
                "value": "fine table"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:owner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKKKKKKKKKKKKKKKBBBBBBBBBBVVVVVVVVVVVVVVVBBBBBBBBBBBBdBBBBBBBBBdBBBBBBBBBBBBBBdBBBBBBBBBdBBBBBBBBBBBBBBdBBBBBBBBBdBBBBBBBBBBBBBBdBBBBBBBBBdBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKKKKKBBBBBBBBBBBBBBBBBBBBKBBBKBBBBBBBBBBBBBBBBBBBBKBBBKBBBBBBBBBBBBBBBBBBBBKVVVKBBBBBBBBBBBBBBBBBBBBdBBBdBBBBBBBBBBBBBBBBBBBBdBBBdBBBBBBBBBBBBBBBBBBBBdBBBdBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        14,
                        31,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:description",
                "value": "568568568"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:name",
                "value": "756856856"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:price:amount",
                "value": {
                    "__fixed__": "123123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:thing",
                "value
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:created",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        6,
                        17,
                        43,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:description",
                "value": "lines with colours"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:name",
                "value": "gee lines"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:owner",
                "value": "con_pixel_frames_auction_v0_6_1"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBUUBBBBBBBBBBBBBBBBBBBBBBBUBBBBBBBBBBBBBBBBBBBBBBBUUBBBBBBBBBBBBBBBBBBBBBBBUBBBBBBTTBBBBBBBBBBBBBBBUUBBBBBBTBBBBBBBBBBBBBBBBUBBBBBBTTBBBBBBBBBBBBBBBUBBBBBBBTBBBBBjBBBBBBBBBBUBBBBBBBTBBBBBjBBBBBBBBBUUBBBBBBBBBBBBjjBBBBBBBBBUBBBBBBBTBBBBBjBBBBBBBBBBBBBBBBBTBBBBBBjBBBBBBBBBBBBBBBBBTBBBBBBjBBBBBBBBBBBBBBBBBTBBBBBjjBBBBBBBBBBBBBBBBTBBBBBBjBBBBBBBBBBBBBBBBTTBBBBBBjBBBBBBBBBBBBBBBBBBBBBBBBjBBBBBBBBBBBBBBBBBBBBBBBBjBBBBBBBBBBBBBBBBBBBBBBBBjBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        15,
                        28,
                        32,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:description",
                "value": "555"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:name",
                "value": "5555"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:price:amount",
                "value": {
                    "__fixed__": "123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBGGGGBBBBBBBBBBBBBBBBBBBGGGBGGBBBBBBBBBBBGGGGGBBBGBGGGGGBBBBBBBBBGGGGGBBBBBGBBBGGGBBBBBBBGGGGGGGBBBBGGBBBBGGBBBBBBGGGGGGGGBGGGGBBBBBGGBBBBGGGGGGGGGGGGGGBBBBBBBBBBBGGGGGGGGGGGGGBGGBBBBBBBBGGGGGGGGGGGBGBGBGBBBBBBBBGGGGGGGGGGGGBBGBGGBBBBBBBGGGGGGGGGGGGBBBGBGGGBBBBBGGGGGGGGGGGGBBBGBBBGBBBBGGGGGGGGGGGGBBBBGBBBGBBBBGGGBGGGGGGGGBBBBGBBBBBBBBBGBBGGBBGGGGGBBGGBBBBBBBBBGBBBBBBBBBBBGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        13,
                        0,
                        13,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:description",
                "value": "fire on match"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:name",
                "value": "match on fire"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:owner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBBBBBBBBBJJJBBBBBBBBBBBBBBBBBBBBBJJJJJBBBBBBBBBBBBBBBBBBBBJJSJJBBBBBBBBBBBBBBBBBBBBSSSSSBBBBBBBBBBBBBBBBBBBBBSSSBBBBBBBBBBBBBBBBBBBBBBSVSBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        20,
                        36,
                        56,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:description",
                "value": "235235235"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:name",
                "value": "6525235"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:price:amount",
                "value": {
                    "__fixed__": "435345123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:thing",
                "value": "BBBBBBBBBBBBBBBBBBBIIBBBBBBBBBBBBBBBBBBBBBBIIJJBBBBBBBBBBBBBBBBBBIIIIJJJBBBBBBBBBBBBBBBBIIIJJJJBKKBBBBBBBBBBBBBIIIJJJJJKKLIBBBBBBBBBBBBIIJJJJKKKLLLBBBBBBBBBBBIIJJJKKKKLLLBBBBBBBBBBBIIIJJKKKKILIBBBBBBBBBBBIIIJJJKKKLLLBBBBBBBBBBBIIIJJKKKBBLLBBBBBBBBBBBIIIJJKKBKBLLLBBBBBBBBBBBBIJBBBBBLLLLBBBBBBBBBBBBBBBBBBBBBLBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        25,
                        13,
                        51,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:description",
                "value": "35234234234"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:name",
                "value": "5234234234"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBAAABBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKKBBBBBBBBBBBBBBBBBBBBBBKKKBBBBBBBBBBBBBBBBBBBBKKKKBBBBBBBBBBBBBBBBBBBBKKKBBBBBBBBBBBBBBBBBBBBKKKKBBBBBBBBBBBBBBBBBBBBKKABBBBBBBBBBBBBBBBBBBBBKKKAABBBBBBBBBBBBBBBBBBKKKKBBABBBBBBBBBBBBBBBBBKKKKKBBBAABBBBBBBBBBBBBBKKKKBBBBBBAAABBBBBBBBBBBKKKKBBBABBBBBAABBBBBBBBBBBBBBBBBBABBBBBBAABBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBBBABBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        5,
                        12,
                        3,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:description",
                "value": "123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:name",
                "value": "12322222"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:thing",
                "value
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:created",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        6,
                        11,
                        8,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:description",
                "value": "walking and singing"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:name",
                "value": "happy day"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:owner",
                "value": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGGBBGGBBBBBBBBBBBBBBBBBGGGGGGGBGGBBBBBBBBBBBBBBGBBBBBBBBGGBBBBBBBBBBBBBBGBBBBBBBBGBBBBBBBBBBBBBBGBBBBBBBBBGBBBBBBBBBBBBBBGBBBBBBBBGGBBBBBBBBBBBBBGGBBBBBBBGGBBBBBBBBBBBBBBGGBBBBBBGGBBBGGBBBBBBBBBBBGGBBBGGBGGBBGBBBBBBBBBBBBBGGGGGBBBGGGBBBBBBBBBBBBBBBBBBBBBGGGBBBBBBBBBBBBBBBBBBBGGGGBBGBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBGGBBBBBBBBBBBBBBBBBBBBBBBGGBBBBBBBBBBBBBBBBBBBBBGGBBGGBBBBBBBBBBBBBBBBGGGGBBBBGBBBBBBBBBBBBBBBGGBBBBBBBGGBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        27,
                        0,
                        8,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:description",
                "value": "235235235"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:meta:num_of_frames",
                "value": 8
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:meta:speed",
                "value": 100
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:name",
                "value": "35235235"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:thing",
                "value
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        54,
                        13,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:description",
                "value": "2342342"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:name",
                "value": "51342134"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:price:amount",
                "value": {
                    "__fixed__": "1E+4"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGGBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBGGGBBBBBBBBBBBBBBBBGBBBBGGBBGBBBBBBBBBBBBBBBBGBGGBBBBBGGBBBBBBBBBBBBBBGGBBBBBBBGGGGGBBBBBBBBBBBGGBBBBBBGBBBGGBBBBBBBBBBGBGBBBBBBGBBBBGGGBBBBBBBBGBBGGGGGGGBBBBGBBGBBBBBBGBBBGGBBBGBGBBBBGBGBBBBBBGBBGBGBBGBBGBBBBBBBGBBBBBGBGBBBBBGBBBGBBBGBBGGBBBBGGGBBBGGGBBBBBBBGBBBGBBBBGGBBBBGGBBBBGBBBGBBBGBBBBGGBBBBBGBBBBBBBBGBBGBBBBBBGGBBBBBBBBBBBBBGGGBBBBBBBBGGBBBBBBBBBBBGGBBBBBBBBBBBGGGGGGBGGGBGGBBBBBBBBBBBBBBGGBBBBBGGBBBBBBBBBBBBBBBBBBGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        26,
                        15,
                        30,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:description",
                "value": "515166136"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:name",
                "value": "65342151"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBEEEEEBBEEEEEBBBBBBBBBBBBBEEEEEBBEEEEEBBBBBBBBBBBBBEEEEEBBEEEEEBBBBBEEEEEBBBEEEEEBBEEEEEBBBAAEEEEEBBBEEEEEBBEEEEEBBAAAEEEEEBBBAAAAABBBEEEEEAAAAEEEEEBBBBBBBBBBBEEEEEAAAAEEEEEBBBBBBBBBBBEEEEEAAAAEEEEEBBBBBBBBBBBEEEEEAAAAAAABBBBBBBBBBBBBEEEEEAAAAABBBBBBBBBBBBBBBEEEEEAAEEEEEBBBAAAAAABBBBAAAAAAAEEEEEBBBAAAAAABBBBAAAAAABEEEEEBEEEEEAAABBBBAAAAABBEEEEEBEEEEEAAABBBBBBBBBBBEEEEEAEEEEEAAABEEEEEBBBBBBBBBBAEEEEEAABBEEEEEBBBBBBBBBBAEEEEEEEEEEEEEEBBBBBBBBBBAAAAAAEEEEEEEEEBBBBBBBBBBAAAAAAEEEEEEEEEEEEEBBBBEEEEEEABEEEEBBBBEEEEEBBBBEEEEEEBBEEEEBBBBEEEEEBBBBEEEEEEBBBBBBBBBBEEEEEBBBBEEEEEEBBBBBBBBBBEEEEEBBBBEEEEEEBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        13,
                        13,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:description",
                "value": "123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:name",
                "value": "123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:price:amount",
                "value": {
                    "__fixed__": "12312312312"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBGGBBBBBBBBBBBBBBBBGBBBBBGGBBBBBBBBBBBBBBBBBGBBBBBGBBBBBBBBBBBBBBBBBGGBBBBGBBBBBBBBBBBBBBBBBGGGGBBGBBBBBBBBBBBBBBBBBBGGGGBGGBBBBBBBBBBBBBBBBBBBGGGGGBBBBBBBBBBBBBBBBBBBBGGGGGBBBBBBBBBBBBBBBBBBGGGGGGGGBBBBBBBBBBBBBBBBBGGGGGGGGGBBBBBBBBBBBBBBBBGGGGGGGGGGBBBBBBBBBBBBBGGGGGGGGGGGGGBBBBBBBBBBBBBGGGGGGGGBGBGBBBBBBBBBBBBBBGGGGGGGGBBBBBBBBBBBBBBBBBBGGGGGGGGBBBBBBBBBBBBBBBBBBGGGGGGGBBBBBBBBBBBBBBBBBBBGGGGGGBBBBBBBBBBBBBBBBBBBBGGGGGGBBBBBBBBBBBBBBBBBBBBGGGGBBBBBBBBBBBBBBBBBBBBBBGGGGBBBBBBBBBBBBBBBBBBBBBBGGGBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        26,
                        15,
                        6,
                        32,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:description",
                "value": "346346346"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:name",
                "value": "64363346"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:price:amount",
                "value": {
                    "__fixed__": "123123123675765"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:thing",
                "value": "YYYBBBBBBYYYBBYYYYYYJJJBBYYYBBBBBBYYYBBYPPPYYJJJJBYYYBMMMMMBBBBBBPPPBWWWJJJBBPPMMMMMNNPBBBPPPPPWWJJJBBPPMMMMMNNPPPJWWPPPWWJJJBBPPMMMMMNNPPPPPPPPPYPPPJBBPPMMMMMNNPPPPPPPPPYPPPBBBPPPPNNNNNPPAPPPPPPYPPPBYYPPPPYYBJWWPPPNNNNNBBBBBYYBYYYYYJJWWPPPMMMMMJJBBBYYBYYWWWJJWWPPPMMMMMJJJYYBBBBPPPWJJPPPYYMMMMMJJAAAYYYMMMMMJJPPPYPMMMMMMJAAAYYYMMMMMNYPPPAPMMMMMMPAAAYYYMMMMMNPPAAAPPMMMMMPAAABBBMMMMMNPPAAAJJMMMMMPAAABBBMMMMMNPPBWWWJMMMMMPYBBBJJWNNNNNBJJWWWJBBYPPPYBBBJJWPPPBBWWWWWWBYYYPPPBBBBJJYYYBBJWWNMMMMMPPPYBBBBBJJJJBBWWWPNMMMMMPPPBBYYYBPPPBPPPWWPNMMMMMPPPBYYYYBPPPYPPPWWPNMMMMMBBYYYYYYYPPPYPPPJBYNMMMMMYYYYYYYYYYYYYBBBBBYYYYYBBYYYYYYYY"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        50,
                        14,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:description",
                "value": "123123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:name",
                "value": "123123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:price:amount",
                "value": {
                    "__fixed__": "11111"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:thing",
                "value": "TSSSTSBBSSTTSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSBSTSBSSSSSTSTSSBSSSSSSSSTSSSSSSSS`SSSSTTSSSSSTSBBBB````S`S``SYSSS`S`SSSSSSBSSSSSSSSYS`SSS`SSSSSSSBBB````SBBSSSSBSYYS`SBSSTBBBSSBSSSSSSSSJSGYS`SSSSSSSB`SBSSS`SGGS`SSSBSTBTSSOSS`SBSB`SSSSSSSSSS`SSSSSOSSSASSSSSSSYSSSSSSSSSSSSSSSSASAASSASSSSSAASSSSSSSSSSSASSSSSSSSSSAASSSSSSSSSSSAAAAAAASSSSASSAAASSSSSSSSASSSSSSASAAAAAAASSSSSSSSSAASSSSSSSAAAAAASSSSSSSSSSAASSSSASSASSSAAAAASSSSSSSSAASSSSSSSSSAASASSAASSSSSSSASSSSSSSSAAAAAAASSSSSSSSSAAAAAAAAAASSASSSSSSSSSSSSSAAAAASSSSSAASSSSSSSSSSSSSSSSSSSSSSSASBSSSSSSSSSSSSSBSSSSSSSSSSSBSBSBSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSBS"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:00f8f0e734b9af342cc845306c159b141367e7ca5ed65fc8ed4e16ea61d11274",
                "value": "a1d5cd78d5e9cfe7ecf8031db06fa6cdca6fafc84419758844c42a95172ce90a"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:048578ceafb2e5d966d4b5514603f295d189e7f35e25ac3996a63e6500814c12",
                "value": "16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:0c08a9536b5dd78713f440acb930872fd69f7a71ad0cf9cdedc9628ddf9ac3d7",
                "value": "7881106ed20cae0fdffdcd71876ab35b554195ddc62e0d5a41daf93af8ec49c3"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:12e84da630211bc7682e6f669e4608133869b6ea5436bcb5fac208d24ba27169",
                "value": "aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:145756f0f895e3c590869e8b1d23aa739f1c10bc1812729de73f814a066ae8f4",
                "value": "f0232d6fa7e731ab96449d2fcd69f74bf999e334a912b97d6f80b71cb3d4917b"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:1a9d053b67d271e16db78005b6eb3b797214bed699cc9e697efc2a155e66da11",
                "value": "64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:211aa2734e5c4303791ef1757a163ea1b1cca550144c482f83bfa91aa98d7b7d",
                "value": "120f6cf9ecad7ca336f21d3e4ee02b4547754f98b7289860c759b429db60db86"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:2a2564090f6911018cb487564e448eacf0de05a46e409434f4f0568d37f5fcff",
                "value": "cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:2a73ba3fbb2ad6dcf509a426b5284c4e2b36ed26fb58e27d40dbd9e80a8c5efe",
                "value": "80df350ec4fe37ef4e591746da17cb59c267746ecbc25130c5eb314de77f4240"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:2e7e49126ce79fe985959d751f7562a5d2c9e158eaf1415652b8da981c807510",
                "value": "0c03c637289f76abe7660963658a12c2d5e60590872d5191ec940828f8ea1efc"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:3481d95f26325bf6e7ceb5e9aabd5e46d9df0bf6e9eabbe7d59e90f5d0aebc34",
                "value": "b5d06e834eca4e9ee7cd2c25bee9d77dcbfc25dd1aa9c30ec7583e5fe994666b"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:34f05f0000ab238cc5cb3aa4603be6058c54e1e68e789b539914e1508fecc2ce",
                "value": "6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:45efc9bfb4c2f336cde3e91c1499cb73bf061489997d54a275882c428553437c",
                "value": "b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8a",
                "value": "4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:50ad41624c25e493aa1dc7f4ab32bdc5a3b0b78ecc35b539936e3fea7c565af7",
                "value": "71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:50e721e49c013f00c62cf59f2163542a9d8df02464efeb615d31051b0fddc326",
                "value": "091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9",
                "value": "528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b",
                "value": "4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:70801eb4bac16df84658a7c0e49cbbf3b42d20c29d1a7f809f7cf6d31c76f2c2",
                "value": "a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:70ff594bd2866efb7a7d22a6bc2bd0ffaac1b401bcc5fa12bc6ce2f033259e03",
                "value": "4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:7f05d7b59df33f0ca9b77d7d43c6e087ca1755c70711181fe9509cf685f59ed7",
                "value": "eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:8667c3ec6a3e9bc25b2b8461c8962c8f788458ccb24676449a884a7f9b7a9580",
                "value": "8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:91a73fd806ab2c005c13b4dc19130a884e909dea3f72d46e30266fe1a1f588d8",
                "value": "18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:926b31a0e5e9209b45040cbec9fd92307f6d18db4777b7021b6673fa44234244",
                "value": "307a8dedad45b562ff4afbffdd38396f726df42bce755580512c0125d365d167"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:932f3c1b56257ce8539ac269d7aab42550dacf8818d075f0bdf1990562aae3ef",
                "value": "f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:9a65d356a488535439239331fd4d863bb01dba0a5318554d9386533a768f0283",
                "value": "1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
                "value": "31bd626d700bbb232cefdcb98459cedf9638ceb358fec021ef39022ec575ec9e"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:acba25512100f80b56fc3ccd14c65be55d94800cda77585c5f41a887e398f9be",
                "value": "5af8237e23d543d46133934a67b59f712a368665fe013d379bad599234156fc1"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:aee0f0d6907c908426095f118cd9bc694d5cc1871bb50d34cc10158b4f236665",
                "value": "92846ad290d0c08156ee9258382a0f05d419640f01eea82d1d99c7013f4f4dec"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:ba62b03a7bb5ca64a6d40b103ae48f991fb74bc07e76ab36e330f8de0cf4b846",
                "value": "36047ee45b11eac5cb151c48868b9683f9f59006127b0f1f4889cf70ad58ad7e"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:bc35f572b0f9689e524c227418345a0ceeaf3e010638994a4a2587f827d44ad6",
                "value": "105ae1904c62050d760046790b1ea9e3453c6cf9e0a3787eaaa6696b6ac38434"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:c38bcf3474a7b0d6ce48860f41f76c2f0b26dccdfc4cb8c268a0880d739d38ac",
                "value": "1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:c7e616822f366fb1b5e0756af498cc11d2c0862edcb32ca65882f622ff39de1b",
                "value": "1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:c996975318e6e7207f72cac8e2cc4df78f847dff7ddfdfaca7d45ffc5e7d2b86",
                "value": "b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119",
                "value": "3a9189325f31b6c531de7ee081f88ac3a2b867485812d259ccb4eb447e1159e5"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:e3f25f8bf574760f5a48f6deb95337f090d71a498e7e0b5fef22d76226a30d04",
                "value": "5d2754ac707ce94c457e39639230e9bb48e23762a317f9ab89fed79c5b4db247"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:e984af814f7f706b0df901c67ba98fcb038ddd97355fc1126a31b745f93bdc60",
                "value": "25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:ea2e9369919d802982c0b3142287e0f185bda864df6ba16178c151f1d04fff5b",
                "value": "ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:ea73b4e871bcec03fcfdb5a578bbfa79095cd4f09536f852d9fbd7a61b1c5b1a",
                "value": "049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:eeac7816005ff0bde67004b95a5563844d60901f3db3baaafc62ac4e850e08de",
                "value": "7223c560c2c40b80be5f6eb8a79e6b70e4ee97975fbbd0e92983fd27204e83d5"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:efd0cdd4133060a183b6ed1125711e8a2804aaf3ea3b14d1eeeb73cd2489d9b9",
                "value": "cdc8cfb1e815811957a035a6d543728b8fcd0b5546d9a56c72364fe46e078f8c"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:f171c53abd4a1b354cc2a390594a5ece760525d14545c0b73d8136da3767f36b",
                "value": "4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:fbefd0182b6d2ed16cf61910a8a1d8c9150d3c156d876ec623646bd228e9fd69",
                "value": "0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:fc3d3ef39ad0d35d51e678b1ca6c471c33abb9508772a8056b456ba57e881b0e",
                "value": "98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:fd31522be7bce2ba2b833080695e4660382751658c5e81c9b9a73e9f54c5859f",
                "value": "d5e52417387fe38be240091d527206044514469ca13462ee1b9780dc1967518f"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:ffe91b515cb12067e2aeb4e625400528b9f67b3a0758bd40c7951b25313a5454",
                "value": "6847e8c0e9633eec65c9a3b3c76d96eb720c01b8cbf22bfdb21ca4245355a917"
            },
            {
                "key": "con_pixel_frames_info_v0_3.__code__",
                "value": "__S = Hash(default_value='', contract='con_pixel_frames_info_v0_3', name='S')\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef add_thing(thing_string: str, name: str, description: str, meta: dict,\n    creator: str):\n    __enforce_thing_standards(thing_string, name, description, meta)\n    uid = hashlib.sha256(thing_string)\n    assert not __S[uid], thing_string + ' already exists'\n    names_uid = hashlib.sha256(name.lower().replace(' ', ''))\n    assert not __S['names', names_uid\n        ], 'A form of this name already belongs to ' + __S['names', names_uid]\n    __S['names', names_uid] = uid\n    __custom_string_validations(thing_string, meta['num_of_frames'])\n    __S[uid] = ['thing', 'type', 'name', 'description', 'owner', 'creator',\n        'likes', 'price:amount', 'price:hold', 'meta_items']\n    __S[uid, 'thing'] = thing_string\n    __S[uid, 'type'] = 'text/plain'\n    __S[uid, 'name'] = name\n    __S[uid, 'description'] = description\n    __S[uid, 'owner'] = creator\n    __S[uid, 'creator'] = creator\n    __S[uid, 'created'] = now\n    __S[uid, 'likes'] = 0\n    __S[uid, 'price', 'amount'] = 0\n    __S[uid, 'meta_items'] = ['speed', 'num_of_frames', 'royalty_percent']\n    __S[uid, 'meta', 'speed'] = meta['speed']\n    __S[uid, 'meta', 'num_of_frames'] = meta['num_of_frames']\n    __S[uid, 'meta', 'royalty_percent'] = meta['royalty_percent']\n    return uid\n\n\ndef __enforce_thing_standards(thing_string: str, name: str, description:\n    str, meta: dict):\n    assert len(thing_string) > 0, 'Thing string cannot be empty.'\n    assert len(name) > 0, 'No Name provided.'\n    assert len(name) <= 25, 'Name too long (25 chars max).'\n    assert len(description) > 0, 'No description provided.'\n    assert len(description) <= 128, 'Description too long (128 chars max).'\n    __custom_meta_validations(meta)\n\n\ndef __custom_string_validations(thing_string: str, num_of_frames: int):\n    assert num_of_frames >= 1 and num_of_frames <= 8, 'num_of_frames value ' + str(\n        num_of_frames) + ' is out of range (1-4).'\n    assert len(thing_string\n        ) % num_of_frames == 0, 'num_of_frames value is invalid.'\n    assert len(thing_string\n        ) / num_of_frames == 625, 'Frames Data is Invalid, must be 625 pixels/frame.'\n    __assertPixelValues(thing_string)\n\n\ndef __assertPixelValues(thing_string):\n    for pixel in thing_string:\n        assert (ord(pixel) >= 65 and ord(pixel) <= 122) and ord(pixel\n            ) != 92, 'Frames Data contains invalid pixel {}.'.format(pixel)\n\n\ndef __custom_meta_validations(meta):\n    assert 'speed' in meta, \"Missing meta value 'speed' (int).\"\n    assert isinstance(meta['speed'], int), 'Speed value is not an integer.'\n    assert meta['speed'] >= 100 and meta['speed'\n        ] <= 2000, 'Speed value ' + str(meta['speed']\n        ) + ' is out of range (100ms-2000ms).'\n    assert 'num_of_frames' in meta, \"Missing meta value 'num_of_frames' (int).\"\n    assert isinstance(meta['num_of_frames'], int\n        ), 'num_of_frames value is not an integer.'\n    assert 'royalty_percent' in meta, \"Missing meta value 'royalty_percent' (int).\"\n    assert isinstance(meta['royalty_percent'], int\n        ), 'royalty_percent value is not an integer.'\n    assert meta['royalty_percent'] >= 0 and meta['royalty_percent'\n        ] <= 100, 'royalty_percent value ' + str(meta['royalty_percent']\n        ) + ' is out of range (0-100).'\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef thing_exists(thing_string: str):\n    uid = hashlib.sha256(thing_string)\n    return __S[uid]\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_owner(uid: str):\n    return __S[uid, 'owner']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_creator(uid: str):\n    return __S[uid, 'creator']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef set_price(uid: str, amount: float, hold: str):\n    assert amount >= 0, 'Cannot set a negative price'\n    __S[uid, 'price', 'amount'] = amount\n    if not hold == None:\n        __S[uid, 'price', 'hold'] = hold\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_price_amount(uid: str):\n    return __S[uid, 'price', 'amount']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_royalty_amount(uid: str):\n    return __S[uid, 'meta', 'royalty_percent']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_price_hold(uid: str):\n    return __S[uid, 'price', 'hold']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef set_owner(uid: str, owner: str):\n    __S[uid, 'owner'] = owner\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef like_thing(uid: str):\n    likes = __S[uid, 'likes']\n    __S[uid, 'likes'] = likes + 1\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef set_proof(uid: str, code: str):\n    __S[uid, 'proof'] = code\n"
            },
            {
                "key": "con_pixel_frames_info_v0_3.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        11,
                        52,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_master.S:thing_info_contract",
                "value": "con_pixel_frames"
            },
            {
                "key": "con_pixel_frames_master.__code__",
                "value": "import currency\nI = importlib\n__S = Hash(default_value='', contract='con_pixel_frames_master', name='S')\n__balances = Hash(default_value=0, contract='con_pixel_frames_master', name\n    ='balances')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_master', name\n    ='metadata')\n\n\ndef ____():\n    __S['thing_info_contract'] = 'con_pixel_frames'\n    __metadata['operator'] = ctx.caller\n    __metadata['things_name'] = 'Pixel Frames Test 2'\n    __metadata['things_description'] = (\n        'Create, Own and Sell unique pixel animations on the Lamden Blockchain!'\n        )\n\n\n@__export('con_pixel_frames_master')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_master')\ndef create_thing(thing_string: str, name: str, description: str, meta: dict={}\n    ):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    thing_uid = thing_info.add_thing(thing_string, name, description, meta,\n        sender)\n    __add_to_balance(sender)\n    return thing_uid\n\n\n@__export('con_pixel_frames_master')\ndef buy_thing(uid: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    owner = thing_info.get_owner(uid)\n    creator = thing_info.get_creator(uid)\n    __assert_already_owned(uid, sender)\n    price_amount = thing_info.get_price_amount(uid)\n    royalty_percent = thing_info.get_royalty_amount(uid)\n    assert price_amount, uid + ' is not for sale'\n    assert price_amount > 0, uid + ' is not for sale'\n    price_hold = thing_info.get_price_hold(uid)\n    if price_hold != '':\n        assert sender == price_hold, uid + ' is being held for ' + price_hold\n    if royalty_percent > 0:\n        royalty_amount = price_amount * (royalty_percent / 100)\n        net_amount = price_amount - royalty_amount\n        currency.transfer_from(royalty_amount, creator, sender)\n    else:\n        net_amount = price_amount\n    currency.transfer_from(net_amount, owner, sender)\n    __transfer_ownership(uid, sender)\n\n\n@__export('con_pixel_frames_master')\ndef sell_thing(uid: str, amount: float):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, '')\n\n\n@__export('con_pixel_frames_master')\ndef sell_thing_to(uid: str, amount: float, hold: str):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, hold)\n\n\n@__export('con_pixel_frames_master')\ndef transfer(uid: str, new_owner: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __assert_already_owned(uid, new_owner)\n    __transfer_ownership(uid, new_owner)\n\n\n@__export('con_pixel_frames_master')\ndef approve(uid: str, to: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __balances[sender, uid, to] = True\n\n\n@__export('con_pixel_frames_master')\ndef revoke(uid: str, to: str):\n    __balances[ctx.caller, uid, to] = None\n\n\n@__export('con_pixel_frames_master')\ndef transfer_from(uid: str, to: str, main_account: str):\n    sender = ctx.caller\n    assert __balances[main_account, uid, sender\n        ], \"You have not been given approval to transfer this user's item.\"\n    __assert_ownership(uid, main_account)\n    __assert_already_owned(uid, to)\n    __transfer_ownership(uid, to)\n    __balances[main_account, uid, sender] = None\n\n\n@__export('con_pixel_frames_master')\ndef like_thing(uid: str):\n    sender = ctx.caller\n    assert __S['liked', uid, sender] == '', sender + ' already liked ' + uid\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.like_thing(uid)\n    __S['liked', uid, sender] = True\n\n\n@__export('con_pixel_frames_master')\ndef prove_ownership(uid: str, code: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_proof(uid, code)\n\n\ndef __assert_ownership(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner == sender, uid + ' not owned by ' + sender\n\n\ndef __assert_already_owned(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner != sender, uid + ' already owned by ' + sender\n\n\ndef __transfer_ownership(uid: str, new_owner: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    old_owner = thing_info.get_owner(uid)\n    thing_info.set_owner(uid, new_owner)\n    if thing_info.get_price_amount(uid) > 0:\n        thing_info.set_price(uid, 0, '')\n    __add_to_balance(new_owner)\n    __subtract_from_balance(old_owner)\n\n\ndef __add_to_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 1\n    else:\n        __balances[holder] = __balances[holder] + 1\n\n\ndef __subtract_from_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 0\n    else:\n        __balances[holder] = __balances[holder] - 1\n"
            },
            {
                "key": "con_pixel_frames_master.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_master.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        9,
                        16,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_master.metadata:operator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_master.metadata:things_description",
                "value": "Create, Own and Sell unique pixel animations on the Lamden Blockchain!"
            },
            {
                "key": "con_pixel_frames_master.metadata:things_name",
                "value": "Pixel Frames Test 2"
            },
            {
                "key": "con_pixel_frames_master_v0_1.S:thing_info_contract",
                "value": "con_pixel_frames_info_v0_1"
            },
            {
                "key": "con_pixel_frames_master_v0_1.__code__",
                "value": "import currency\nI = importlib\n__S = Hash(default_value='', contract='con_pixel_frames_master_v0_1', name='S')\n__balances = Hash(default_value=0, contract='con_pixel_frames_master_v0_1',\n    name='balances')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_master_v0_1',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_info_contract'] = 'con_pixel_frames_info_v0_1'\n    __metadata['operator'] = ctx.caller\n    __metadata['things_name'] = 'Pixel Frames Test 2'\n    __metadata['things_description'] = (\n        'Create, Own and Sell unique pixel animations on the Lamden Blockchain!'\n        )\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef create_thing(thing_string: str, name: str, description: str, meta: dict={}\n    ):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    thing_uid = thing_info.add_thing(thing_string, name, description, meta,\n        sender)\n    __add_to_balance(sender)\n    return thing_uid\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef buy_thing(uid: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    owner = thing_info.get_owner(uid)\n    creator = thing_info.get_creator(uid)\n    __assert_already_owned(uid, sender)\n    price_amount = thing_info.get_price_amount(uid)\n    royalty_percent = thing_info.get_royalty_amount(uid)\n    assert price_amount, uid + ' is not for sale'\n    assert price_amount > 0, uid + ' is not for sale'\n    price_hold = thing_info.get_price_hold(uid)\n    if price_hold != '':\n        assert sender == price_hold, uid + ' is being held for ' + price_hold\n    if royalty_percent > 0:\n        royalty_amount = price_amount * (royalty_percent / 100)\n        net_amount = price_amount - royalty_amount\n        currency.transfer_from(royalty_amount, creator, sender)\n    else:\n        net_amount = price_amount\n    currency.transfer_from(net_amount, owner, sender)\n    __transfer_ownership(uid, sender)\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef sell_thing(uid: str, amount: float):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, '')\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef sell_thing_to(uid: str, amount: float, hold: str):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, hold)\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef transfer(uid: str, new_owner: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __assert_already_owned(uid, new_owner)\n    __transfer_ownership(uid, new_owner)\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef approve(uid: str, to: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __balances[sender, uid, to] = True\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef revoke(uid: str, to: str):\n    __balances[ctx.caller, uid, to] = None\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef transfer_from(uid: str, to: str, main_account: str):\n    sender = ctx.caller\n    assert __balances[main_account, uid, sender\n        ], \"You have not been given approval to transfer this user's item.\"\n    __assert_ownership(uid, main_account)\n    __assert_already_owned(uid, to)\n    __transfer_ownership(uid, to)\n    __balances[main_account, uid, sender] = None\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef like_thing(uid: str):\n    sender = ctx.caller\n    assert __S['liked', uid, sender] == '', sender + ' already liked ' + uid\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.like_thing(uid)\n    __S['liked', uid, sender] = True\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef prove_ownership(uid: str, code: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_proof(uid, code)\n\n\ndef __assert_ownership(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner == sender, uid + ' not owned by ' + sender\n\n\ndef __assert_already_owned(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner != sender, uid + ' already owned by ' + sender\n\n\ndef __transfer_ownership(uid: str, new_owner: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    old_owner = thing_info.get_owner(uid)\n    thing_info.set_owner(uid, new_owner)\n    if thing_info.get_price_amount(uid) > 0:\n        thing_info.set_price(uid, 0, '')\n    __add_to_balance(new_owner)\n    __subtract_from_balance(old_owner)\n\n\ndef __add_to_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 1\n    else:\n        __balances[holder] = __balances[holder] + 1\n\n\ndef __subtract_from_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 0\n    else:\n        __balances[holder] = __balances[holder] - 1\n"
            },
            {
                "key": "con_pixel_frames_master_v0_1.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_master_v0_1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        10,
                        48,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_master_v0_1.balances:5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4",
                "value": 1
            },
            {
                "key": "con_pixel_frames_master_v0_1.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 3
            },
            {
                "key": "con_pixel_frames_master_v0_1.metadata:operator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_master_v0_1.metadata:things_description",
                "value": "Create, Own and Sell unique pixel animations on the Lamden Blockchain!"
            },
            {
                "key": "con_pixel_frames_master_v0_1.metadata:things_name",
                "value": "Pixel Frames Test 2"
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:0ef1b7ec0f0f2445c47211efb1642a564cf6fba35da017fe58489dfd12338160:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:1448b25056214625e58f1ea23e8bc8b63647e3a9810c757bf5303db120b5b986:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:25e969a9a039db4322bf2aa6e0eb29e913ef455ee0e503316468a9576f18fccd:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:4726c773e7c46b9f4802f1a9142fc2445d5c6b762bdd187f3e4730b8ce062eb6:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:4dd548d6e01b0fb2c82df28f71d3891e1f37c5ef27ebb2651ac8738b805582cc:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:64f803263c2b9ba14a2b06da6e130354e059adb7d4e164abcf8369faeaa1388c:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:8211fbf2e9ab5f25128e31346622ff964885b295fdf149660373e87b7388abcc:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:98b7b0fdafcf60ca2987cf257eecb4672e9431f688522dd1922b3960f55c50b5:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:ae1ce57595f161364d726c1319489b62902a5c1fe9b8afaf30e0221f6c48eb90:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:b2310ea420de2a954a9ed5c4b827d54469528d4cbe094181309b60c75a7b4316:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:b4aa56225855b700193d1f155b8558c113b802652ff23d5d2b68db6d4bedfff4:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:thing_info_contract",
                "value": "con_pixel_frames_info_v0_3"
            },
            {
                "key": "con_pixel_frames_master_v0_3.__code__",
                "value": "import currency\nI = importlib\n__S = Hash(default_value='', contract='con_pixel_frames_master_v0_3', name='S')\n__balances = Hash(default_value=0, contract='con_pixel_frames_master_v0_3',\n    name='balances')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_master_v0_3',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_info_contract'] = 'con_pixel_frames_info_v0_3'\n    __metadata['operator'] = ctx.caller\n    __metadata['things_name'] = 'Pixel Frames Test 2'\n    __metadata['things_description'] = (\n        'Create, Own and Sell unique pixel animations on the Lamden Blockchain!'\n        )\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef create_thing(thing_string: str, name: str, description: str, meta: dict={}\n    ):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    thing_uid = thing_info.add_thing(thing_string, name, description, meta,\n        sender)\n    __add_to_balance(sender)\n    return thing_uid\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef buy_thing(uid: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    owner = thing_info.get_owner(uid)\n    creator = thing_info.get_creator(uid)\n    __assert_already_owned(uid, sender)\n    price_amount = thing_info.get_price_amount(uid)\n    royalty_percent = thing_info.get_royalty_amount(uid)\n    assert price_amount, uid + ' is not for sale'\n    assert price_amount > 0, uid + ' is not for sale'\n    price_hold = thing_info.get_price_hold(uid)\n    if price_hold != '':\n        assert sender == price_hold, uid + ' is being held for ' + price_hold\n    if royalty_percent > 0:\n        royalty_amount = price_amount * (royalty_percent / 100)\n        net_amount = price_amount - royalty_amount\n        currency.transfer_from(royalty_amount, creator, sender)\n    else:\n        net_amount = price_amount\n    currency.transfer_from(net_amount, owner, sender)\n    __transfer_ownership(uid, sender)\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef sell_thing(uid: str, amount: float):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, '')\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef sell_thing_to(uid: str, amount: float, hold: str):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, hold)\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef transfer(uid: str, new_owner: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __assert_already_owned(uid, new_owner)\n    __transfer_ownership(uid, new_owner)\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef approve(uid: str, to: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __balances[sender, uid, to] = True\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef revoke(uid: str, to: str):\n    __balances[ctx.caller, uid, to] = None\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef transfer_from(uid: str, to: str, main_account: str):\n    sender = ctx.caller\n    assert __balances[main_account, uid, sender\n        ], \"You have not been given approval to transfer this user's item.\"\n    __assert_ownership(uid, main_account)\n    __assert_already_owned(uid, to)\n    __transfer_ownership(uid, to)\n    __balances[main_account, uid, sender] = None\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef like_thing(uid: str):\n    sender = ctx.caller\n    assert __S['liked', uid, sender] == '', sender + ' already liked ' + uid\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.like_thing(uid)\n    __S['liked', uid, sender] = True\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef prove_ownership(uid: str, code: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_proof(uid, code)\n\n\ndef __assert_ownership(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner == sender, uid + ' not owned by ' + sender\n\n\ndef __assert_already_owned(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner != sender, uid + ' already owned by ' + sender\n\n\ndef __transfer_ownership(uid: str, new_owner: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    old_owner = thing_info.get_owner(uid)\n    thing_info.set_owner(uid, new_owner)\n    if thing_info.get_price_amount(uid) > 0:\n        thing_info.set_price(uid, 0, '')\n    __add_to_balance(new_owner)\n    __subtract_from_balance(old_owner)\n\n\ndef __add_to_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 1\n    else:\n        __balances[holder] = __balances[holder] + 1\n\n\ndef __subtract_from_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 0\n    else:\n        __balances[holder] = __balances[holder] - 1\n"
            },
            {
                "key": "con_pixel_frames_master_v0_3.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_master_v0_3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        10,
                        1,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                "value": 4
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:con_pixel_frames_auction_v0_5",
                "value": 0
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:con_pixel_frames_auction_v0_6_1",
                "value": 2
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:con_pixel_frames_auction_v0_7",
                "value": 0
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 32
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": 1
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:f34430e0c1e6976993e225dd8b6dcba5259196a6dcda3dd03036dbd808170cc2",
                "value": 3
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": 4
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:con_pixel_frames_auction_v0_4",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:con_pixel_frames_auction_v0_6",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_master_v0_3.metadata:things_description",
                "value": "Create, Own and Sell unique pixel animations on the Lamden Blockchain!"
            },
            {
                "key": "con_pixel_frames_master_v0_3.metadata:things_name",
                "value": "Pixel Frames Test 2"
            },
            {
                "key": "con_pixel_frames_master_v0_4.S:thing_info_contract",
                "value": "con_pixel_frames_info_v0_3"
            },
            {
                "key": "con_pixel_frames_master_v0_4.__code__",
                "value": "import currency\nI = importlib\n__S = Hash(default_value='', contract='con_pixel_frames_master_v0_4', name='S')\n__balances = Hash(default_value=0, contract='con_pixel_frames_master_v0_4',\n    name='balances')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_master_v0_4',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_info_contract'] = 'con_pixel_frames_info_v0_3'\n    __metadata['operator'] = ctx.caller\n    __metadata['things_name'] = 'Pixel Frames'\n    __metadata['things_description'] = (\n        'Create, Own and Sell unique pixel animations on the Lamden Blockchain!'\n        )\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef create_thing(thing_string: str, name: str, description: str, meta: dict={}\n    ):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    thing_uid = thing_info.add_thing(thing_string, name, description, meta,\n        sender)\n    __add_to_balance(sender)\n    return thing_uid\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef buy_thing(uid: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    owner = thing_info.get_owner(uid)\n    creator = thing_info.get_creator(uid)\n    __assert_already_owned(uid, sender)\n    price_amount = thing_info.get_price_amount(uid)\n    royalty_percent = thing_info.get_royalty_amount(uid)\n    assert price_amount, uid + ' is not for sale'\n    assert price_amount > 0, uid + ' is not for sale'\n    price_hold = thing_info.get_price_hold(uid)\n    if price_hold != '':\n        assert sender == price_hold, uid + ' is being held for ' + price_hold\n    if royalty_percent > 0:\n        royalty_amount = price_amount * (royalty_percent / 100)\n        net_amount = price_amount - royalty_amount\n        currency.transfer_from(royalty_amount, creator, sender)\n    else:\n        net_amount = price_amount\n    currency.transfer_from(net_amount, owner, sender)\n    __transfer_ownership(uid, sender)\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef sell_thing(uid: str, amount: float):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, '')\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef sell_thing_to(uid: str, amount: float, hold: str):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, hold)\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef transfer(uid: str, new_owner: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __assert_already_owned(uid, new_owner)\n    __transfer_ownership(uid, new_owner)\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef approve(uids: list, to: str):\n    sender = ctx.caller\n    for uid in uids:\n        __assert_ownership(uid, sender)\n        __balances[sender, uid, to] = True\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef revoke(uid: str, to: str):\n    __balances[ctx.caller, uid, to] = None\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef transfer_from(uid: str, to: str, main_account: str):\n    sender = ctx.caller\n    assert __balances[main_account, uid, sender\n        ], \"You have not been given approval to transfer this user's item.\"\n    __assert_ownership(uid, main_account)\n    __assert_already_owned(uid, to)\n    __transfer_ownership(uid, to)\n    __balances[main_account, uid, sender] = None\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef like_thing(uid: str):\n    sender = ctx.caller\n    assert __S['liked', uid, sender] == '', sender + ' already liked ' + uid\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.like_thing(uid)\n    __S['liked', uid, sender] = True\n\n\n@__export('con_pixel_frames_master_v0_4')\ndef prove_ownership(uid: str, code: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_proof(uid, code)\n\n\ndef __assert_ownership(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner == sender, uid + ' not owned by ' + sender\n\n\ndef __assert_already_owned(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner != sender, uid + ' already owned by ' + sender\n\n\ndef __transfer_ownership(uid: str, new_owner: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    old_owner = thing_info.get_owner(uid)\n    thing_info.set_owner(uid, new_owner)\n    if thing_info.get_price_amount(uid) > 0:\n        thing_info.set_price(uid, 0, '')\n    __add_to_balance(new_owner)\n    __subtract_from_balance(old_owner)\n\n\ndef __add_to_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 1\n    else:\n        __balances[holder] = __balances[holder] + 1\n\n\ndef __subtract_from_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 0\n    else:\n        __balances[holder] = __balances[holder] - 1\n"
            },
            {
                "key": "con_pixel_frames_master_v0_4.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_master_v0_4.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        8,
                        3,
                        36,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_master_v0_4.balances:3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                "value": 1
            },
            {
                "key": "con_pixel_frames_master_v0_4.balances:con_pixel_frames_auction_v0_8_2",
                "value": 0
            },
            {
                "key": "con_pixel_frames_master_v0_4.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": -1
            },
            {
                "key": "con_pixel_frames_master_v0_4.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce:049f5be10f74f703b8224c1af53baae03c906a562b8ae875137287773c42e1fc:con_pixel_frames_auction_v0_8_1",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_4.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce:1572b652ee3c770bd9bb02a699cd34c481d6236130e059d5c639f1e5cc184b99:con_pixel_frames_auction_v0_8_1",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_4.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce:6bb2473fa76c4647c7b7f494ab608f52c7086499e28019180b2b710e7c3ca7ca:con_pixel_frames_auction_v0_8_1",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_4.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_master_v0_4.metadata:things_description",
                "value": "Create, Own and Sell unique pixel animations on the Lamden Blockchain!"
            },
            {
                "key": "con_pixel_frames_master_v0_4.metadata:things_name",
                "value": "Pixel Frames"
            },
            {
                "key": "con_pow_better2701617.__code__",
                "value": "import currency\n__height = Variable(contract='con_pow_better2701617', name='height')\n__current_hash = Variable(contract='con_pow_better2701617', name='current_hash'\n    )\n__difficulty = Variable(contract='con_pow_better2701617', name='difficulty')\n__last_block_time = Variable(contract='con_pow_better2701617', name=\n    'last_block_time')\n__solutions = Hash(contract='con_pow_better2701617', name='solutions')\n__base_reward = Variable(contract='con_pow_better2701617', name='base_reward')\n\n\ndef ____():\n    random.seed()\n    __height.set(0)\n    initial_hash = hex(random.randint(0, 2 ** 256 - 1))\n    __difficulty.set(initial_hash)\n    __current_hash.set(initial_hash)\n    __last_block_time.set(now)\n    __base_reward.set(5)\n\n\n@__export('con_pow_better2701617')\ndef submit_it(key: str, extra_data: str, solution: str, solution_height: int):\n    current_height = __height.get()\n    assert solution_height == current_height, 'Wrong block height'\n    assert len(extra_data) < 100, 'Extra data is too long'\n    assert len(key) == 64, 'Key is not 64 characters'\n    assert len(solution) == 64, 'Solution is not 64 characters'\n    current_difficulty = __difficulty.get()\n    if int(solution, 16) < int(current_difficulty, 16):\n        computed_hash = __compute_hash(key, __current_hash.get(), extra_data)\n        assert computed_hash == solution, 'Hash does not match solution'\n        reward_amount = __calculate_reward()\n        __solutions[current_height] = {'problem': __current_hash.get(),\n            'extra_data': extra_data, 'key': key, 'solution': solution,\n            'timestamp': now, 'difficulty': current_difficulty,\n            'reward_amount': reward_amount}\n        __retarget_difficulty()\n        __height.set(current_height + 1)\n        __current_hash.set(solution)\n        __last_block_time.set(now)\n        currency.transfer(amount=reward_amount, to=ctx.caller)\n        return True\n    return False\n\n\ndef __compute_hash(key: str, message: str, extra_data: str):\n    full_message = __construct_message(message, extra_data)\n    computed_hash = crypto.randomx_hash(key, full_message)\n    return computed_hash\n\n\ndef __calculate_reward():\n    __stamps_hash = ForeignHash(foreign_contract='stamp_cost', foreign_name\n        ='S', contract='con_pow_better2701617', name='stamps_hash')\n    stamp_cost = __stamps_hash['value']\n    xian_txn_cost = 1400 / stamp_cost\n    reward_amount = xian_txn_cost + __base_reward.get()\n    return reward_amount\n\n\ndef __construct_message(message, extra_data):\n    return f'{message}_{extra_data}'\n\n\ndef __retarget_difficulty():\n    current_height = __height.get()\n    if current_height % 3 == 0 and current_height > 0:\n        time_taken = (now - __solutions[current_height - 3]['timestamp']\n            ).seconds\n        expected_time = 2 * 60 * 3\n        adjustment_factor = time_taken / expected_time\n        new_difficulty = int(int(__difficulty.get(), 16) * adjustment_factor)\n        __difficulty.set(hex(new_difficulty))\n"
            },
            {
                "key": "con_pow_better2701617.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pow_better2701617.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        24,
                        10,
                        42,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_pow_better2701617.base_reward",
                "value": 5
            },
            {
                "key": "con_pow_better2701617.current_hash",
                "value": "0xd84b3b7547d852f05f116cb6cdc0d7a88f9425ce73b094162358469c4afd99e4"
            },
            {
                "key": "con_pow_better2701617.difficulty",
                "value": "0xd84b3b7547d852f05f116cb6cdc0d7a88f9425ce73b094162358469c4afd99e4"
            },
            {
                "key": "con_pow_better2701617.height",
                "value": 0
            },
            {
                "key": "con_pow_better2701617.last_block_time",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        24,
                        10,
                        42,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_pow_better2757584.__code__",
                "value": "I = importlib\n\n\n@__export('con_pow_better2757584')\ndef send(addresses: list, amounts: list, contract: str):\n    assert len(addresses) == len(amounts\n        ), 'Addresses and amounts must have the same length'\n    token = I.import_module(contract)\n    for address, amount in zip(addresses, amounts):\n        assert len(address) > 0, 'Address cannot be empty'\n        assert amount > 0, 'Amount must be greater than 0'\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_pow_better2757584.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pow_better2757584.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        24,
                        10,
                        45,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_pow_better2947106.__code__",
                "value": "import currency\n__height = Variable(contract='con_pow_better2947106', name='height')\n__current_hash = Variable(contract='con_pow_better2947106', name='current_hash'\n    )\n__difficulty = Variable(contract='con_pow_better2947106', name='difficulty')\n__last_block_time = Variable(contract='con_pow_better2947106', name=\n    'last_block_time')\n__solutions = Hash(contract='con_pow_better2947106', name='solutions')\n__base_reward = Variable(contract='con_pow_better2947106', name='base_reward')\n\n\ndef ____():\n    random.seed()\n    __height.set(0)\n    initial_hash = hex(random.randint(0, 2 ** 256 - 1))\n    __difficulty.set(initial_hash)\n    __current_hash.set(initial_hash)\n    __last_block_time.set(now)\n    __base_reward.set(5)\n\n\n@__export('con_pow_better2947106')\ndef submit_it(key: str, extra_data: str, solution: str, solution_height: int):\n    current_height = __height.get()\n    assert solution_height == current_height, 'Wrong block height'\n    assert len(extra_data) < 100, 'Extra data is too long'\n    assert len(key) == 64, 'Key is not 64 characters'\n    assert len(solution) == 64, 'Solution is not 64 characters'\n    current_difficulty = __difficulty.get()\n    if int(solution, 16) < int(current_difficulty, 16):\n        computed_hash = __compute_hash(key, __current_hash.get(), extra_data)\n        assert computed_hash == solution, 'Hash does not match solution'\n        reward_amount = __calculate_reward()\n        __solutions[current_height] = {'problem': __current_hash.get(),\n            'extra_data': extra_data, 'key': key, 'solution': solution,\n            'timestamp': now, 'difficulty': current_difficulty,\n            'reward_amount': reward_amount}\n        __retarget_difficulty()\n        __height.set(current_height + 1)\n        __current_hash.set(solution)\n        __last_block_time.set(now)\n        currency.transfer(amount=reward_amount, to=ctx.caller)\n        return True\n    return False\n\n\ndef __compute_hash(key: str, message: str, extra_data: str):\n    full_message = __construct_message(message, extra_data)\n    computed_hash = crypto.randomx_hash(key, full_message)\n    return computed_hash\n\n\ndef __calculate_reward():\n    __stamps_hash = ForeignHash(foreign_contract='stamp_cost', foreign_name\n        ='S', contract='con_pow_better2947106', name='stamps_hash')\n    stamp_cost = __stamps_hash['value']\n    xian_txn_cost = 1400 / stamp_cost\n    reward_amount = xian_txn_cost + __base_reward.get()\n    return reward_amount\n\n\ndef __construct_message(message, extra_data):\n    return f'{message}_{extra_data}'\n\n\ndef __retarget_difficulty():\n    current_height = __height.get()\n    if current_height % 3 == 0 and current_height > 0:\n        time_taken = (now - __solutions[current_height - 3]['timestamp']\n            ).seconds\n        expected_time = 2 * 60 * 3\n        adjustment_factor = time_taken / expected_time\n        new_difficulty = int(int(__difficulty.get(), 16) * adjustment_factor)\n        __difficulty.set(hex(new_difficulty))\n"
            },
            {
                "key": "con_pow_better2947106.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pow_better2947106.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        24,
                        10,
                        43,
                        40,
                        0
                    ]
                }
            },
            {
                "key": "con_pow_better2947106.base_reward",
                "value": 5
            },
            {
                "key": "con_pow_better2947106.current_hash",
                "value": "0xeb5687204f4382dabbc05e4913ad7d20de7b6aa1758e5b04b6a08036a456aa53"
            },
            {
                "key": "con_pow_better2947106.difficulty",
                "value": "0xeb5687204f4382dabbc05e4913ad7d20de7b6aa1758e5b04b6a08036a456aa53"
            },
            {
                "key": "con_pow_better2947106.height",
                "value": 0
            },
            {
                "key": "con_pow_better2947106.last_block_time",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        24,
                        10,
                        43,
                        40,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_dato.__code__",
                "value": "__presale_active = Variable(contract='con_presale_dato', name='presale_active')\n__token_price = Variable(contract='con_presale_dato', name='token_price')\n__tokens_sold = Variable(contract='con_presale_dato', name='tokens_sold')\n__presale_cap = Variable(contract='con_presale_dato', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_presale_dato', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_presale_dato', name='xian_balances')\n__token_contract = Variable(contract='con_presale_dato', name='token_contract')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_dato')\n\n\n@__export('con_presale_dato')\ndef start_presale(token_contract_name: str, price: float):\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    assert price > 0, 'Token price must be greater than 0'\n    __token_contract.set(token_contract_name)\n    __token_price.set(price)\n    __presale_active.set(True)\n\n\n@__export('con_presale_dato')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount * price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    assert __xian_balances[ctx.caller] >= amount, 'Insufficient XIAN balance'\n    xian = importlib.import_module('currency')\n    xian.approve(amount=amount)\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_presale_dato')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_presale_dato')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_presale_dato')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n"
            },
            {
                "key": "con_presale_dato.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_presale_dato.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        4,
                        1,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_dato.presale_active",
                "value": true
            },
            {
                "key": "con_presale_dato.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_presale_dato.token_contract",
                "value": "con_dato"
            },
            {
                "key": "con_presale_dato.token_price",
                "value": 1000
            },
            {
                "key": "con_presale_dato.tokens_sold",
                "value": 0
            },
            {
                "key": "con_presale_dato1.__code__",
                "value": "__presale_active = Variable(contract='con_presale_dato1', name='presale_active'\n    )\n__token_price = Variable(contract='con_presale_dato1', name='token_price')\n__tokens_sold = Variable(contract='con_presale_dato1', name='tokens_sold')\n__presale_cap = Variable(contract='con_presale_dato1', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_presale_dato1', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_presale_dato1', name='xian_balances')\n__token_contract = Variable(contract='con_presale_dato1', name='token_contract'\n    )\n__owner = Variable(contract='con_presale_dato1', name='owner')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_dato')\n    __owner.set(ctx.caller)\n\n\n@__export('con_presale_dato1')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount * price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    assert __xian_balances[ctx.caller] >= amount, 'Insufficient XIAN balance'\n    xian = importlib.import_module('currency')\n    xian.transfer_from(amount=amount, to=__owner.get(), main_account=ctx.caller\n        )\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_presale_dato1')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_presale_dato1')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_presale_dato1')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n"
            },
            {
                "key": "con_presale_dato1.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_presale_dato1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        4,
                        19,
                        50,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_dato1.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_presale_dato1.presale_active",
                "value": true
            },
            {
                "key": "con_presale_dato1.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_presale_dato1.token_contract",
                "value": "con_dato"
            },
            {
                "key": "con_presale_dato1.token_price",
                "value": 1000
            },
            {
                "key": "con_presale_dato1.tokens_sold",
                "value": 0
            },
            {
                "key": "con_presale_dato2.__code__",
                "value": "__presale_active = Variable(contract='con_presale_dato2', name='presale_active'\n    )\n__token_price = Variable(contract='con_presale_dato2', name='token_price')\n__tokens_sold = Variable(contract='con_presale_dato2', name='tokens_sold')\n__presale_cap = Variable(contract='con_presale_dato2', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_presale_dato2', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_presale_dato2', name='xian_balances')\n__token_contract = Variable(contract='con_presale_dato2', name='token_contract'\n    )\n__owner = Variable(contract='con_presale_dato2', name='owner')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_dato')\n    __owner.set(ctx.caller)\n\n\n@__export('con_presale_dato2')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is not active'\n    assert amount > 1, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount * price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    assert __xian_balances[ctx.caller] >= amount, 'Insufficient XIAN balance'\n    xian = importlib.import_module('currency')\n    xian.transfer_from(amount=amount, to=__owner.get(), main_account=ctx.caller\n        )\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_presale_dato2')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_presale_dato2')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_presale_dato2')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n"
            },
            {
                "key": "con_presale_dato2.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_presale_dato2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        4,
                        40,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_dato2.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_presale_dato2.presale_active",
                "value": true
            },
            {
                "key": "con_presale_dato2.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_presale_dato2.token_contract",
                "value": "con_dato"
            },
            {
                "key": "con_presale_dato2.token_price",
                "value": 1000
            },
            {
                "key": "con_presale_dato2.tokens_sold",
                "value": 0
            },
            {
                "key": "con_presale_dato4.__code__",
                "value": "__presale_active = Variable(contract='con_presale_dato4', name='presale_active'\n    )\n__token_price = Variable(contract='con_presale_dato4', name='token_price')\n__tokens_sold = Variable(contract='con_presale_dato4', name='tokens_sold')\n__presale_cap = Variable(contract='con_presale_dato4', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_presale_dato4', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_presale_dato4', name='xian_balances')\n__token_contract = Variable(contract='con_presale_dato4', name='token_contract'\n    )\n__owner = Variable(contract='con_presale_dato4', name='owner')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_dato')\n    __owner.set(ctx.caller)\n\n\n@__export('con_presale_dato4')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount * price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    assert __xian_balances[ctx.caller] >= amount, 'Insufficient XIAN balance'\n    xian = importlib.import_module('currency')\n    xian.transfer_from(amount=amount, to=__owner.get(), main_account=ctx.caller\n        )\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_presale_dato4')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_presale_dato4')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_presale_dato4')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n"
            },
            {
                "key": "con_presale_dato4.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_presale_dato4.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        5,
                        6,
                        16,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_dato4.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_presale_dato4.presale_active",
                "value": true
            },
            {
                "key": "con_presale_dato4.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_presale_dato4.token_contract",
                "value": "con_dato"
            },
            {
                "key": "con_presale_dato4.token_price",
                "value": 1000
            },
            {
                "key": "con_presale_dato4.tokens_sold",
                "value": 0
            },
            {
                "key": "con_presale_dato5.__code__",
                "value": "__presale_active = Variable(contract='con_presale_dato5', name='presale_active'\n    )\n__token_price = Variable(contract='con_presale_dato5', name='token_price')\n__tokens_sold = Variable(contract='con_presale_dato5', name='tokens_sold')\n__presale_cap = Variable(contract='con_presale_dato5', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_presale_dato5', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_presale_dato5', name='xian_balances')\n__token_contract = Variable(contract='con_presale_dato5', name='token_contract'\n    )\n__owner = Variable(contract='con_presale_dato5', name='owner')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_dato')\n    __owner.set(ctx.caller)\n\n\n@__export('con_presale_dato5')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount * price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    assert __xian_balances[ctx.caller] >= amount, 'Insufficient XIAN balance'\n    xian = importlib.import_module('currency')\n    xian.transfer(amount=amount, to=ctx.this)\n    xian.transfer(amount=amount, to=__owner.get())\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_presale_dato5')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_presale_dato5')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_presale_dato5')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n\n\n@__export('con_presale_dato5')\ndef deposit_tokens(amount: float):\n    assert ctx.caller == __owner.get(), 'Only owner can deposit tokens'\n    assert amount > 0, 'Amount must be greater than 0'\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=amount, to=ctx.this)\n    return amount\n"
            },
            {
                "key": "con_presale_dato5.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_dato5.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        8,
                        16,
                        13,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_dato5.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_dato5.presale_active",
                "value": true
            },
            {
                "key": "con_presale_dato5.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_presale_dato5.token_contract",
                "value": "con_dato"
            },
            {
                "key": "con_presale_dato5.token_price",
                "value": 1000
            },
            {
                "key": "con_presale_dato5.tokens_sold",
                "value": 0
            },
            {
                "key": "con_presale_foam.__code__",
                "value": "import currency as xian\n__presale_status = Variable(contract='con_presale_foam', name='presale_status')\n__token_price = Variable(contract='con_presale_foam', name='token_price')\n__owner = Variable(contract='con_presale_foam', name='owner')\n__default_tokens = Variable(contract='con_presale_foam', name='default_tokens')\nTOKEN_RATE = 100\n__token_contract = Variable(contract='con_presale_foam', name='token_contract')\n__token_symbol = Variable(contract='con_presale_foam', name='token_symbol')\n\n\ndef ____():\n    __presale_status.set('Active')\n    __token_price.set(1 / TOKEN_RATE)\n    __owner.set(ctx.caller)\n    __default_tokens.set(0)\n\n\n@__export('con_presale_foam')\ndef set_target_token(contract: str, symbol: str):\n    assert __owner.get() == ctx.caller, 'Only owner can set target token'\n    __token_contract.set(contract)\n    __token_symbol.set(symbol)\n\n\n@__export('con_presale_foam')\ndef get_target_token():\n    return {'contract': __token_contract.get(), 'symbol': __token_symbol.get()}\n\n\n@__export('con_presale_foam')\ndef deposit(amount: float):\n    assert __token_contract.get() is not None, 'Target token not set'\n    assert ctx.caller == __owner.get(), 'Only owner can deposit tokens'\n    token = importlib.import_module(__token_contract.get())\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __default_tokens.set(__default_tokens.get() + amount)\n\n\n@__export('con_presale_foam')\ndef buy_tokens(amount: float):\n    assert __presale_status.get() == 'Active', 'Presale is not Active'\n    assert amount > 0, 'Amount must be greater than 0'\n    current_tokens = __default_tokens.get()\n    assert current_tokens > 0, 'No tokens available for sale'\n    tokens_to_receive = amount * TOKEN_RATE\n    assert tokens_to_receive <= current_tokens, 'Not enough tokens remaining'\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __default_tokens.set(current_tokens - tokens_to_receive)\n\n\n@__export('con_presale_foam')\ndef get_remaining_tokens():\n    return __default_tokens.get()\n\n\n@__export('con_presale_foam')\ndef get_presale_status():\n    return __presale_status.get()\n\n\n@__export('con_presale_foam')\ndef get_token_price():\n    return __token_price.get()\n\n\n@__export('con_presale_foam')\ndef set_presale_status(status: str):\n    assert __owner.get() == ctx.caller, 'Only owner can change status'\n    __presale_status.set(status)\n\n\n@__export('con_presale_foam')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_presale_foam')\ndef withdraw_xian_all():\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_presale_foam')\ndef withdraw_any_token(amount: float, contract_name: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(contract_name).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_presale_foam.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_foam.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        16,
                        5,
                        17,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_foam.default_tokens",
                "value": 9999700
            },
            {
                "key": "con_presale_foam.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_foam.presale_status",
                "value": "Active"
            },
            {
                "key": "con_presale_foam.token_contract",
                "value": "con_foam"
            },
            {
                "key": "con_presale_foam.token_price",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "con_presale_foam.token_symbol",
                "value": "Foam"
            },
            {
                "key": "con_presale_foams.__code__",
                "value": "import currency as xian\n__presale_status = Variable(contract='con_presale_foams', name='presale_status'\n    )\n__token_price = Variable(contract='con_presale_foams', name='token_price')\n__owner = Variable(contract='con_presale_foams', name='owner')\n__default_tokens = Variable(contract='con_presale_foams', name='default_tokens'\n    )\nTOKEN_RATE = 15\n__token_contract = Variable(contract='con_presale_foams', name='token_contract'\n    )\n__token_symbol = Variable(contract='con_presale_foams', name='token_symbol')\n\n\ndef ____():\n    __presale_status.set('Active')\n    __token_price.set(1 / TOKEN_RATE)\n    __owner.set(ctx.caller)\n    __default_tokens.set(decimal('0.0'))\n\n\n@__export('con_presale_foams')\ndef set_target_token(contract: str, symbol: str):\n    assert __owner.get() == ctx.caller, 'Only owner can set target token'\n    __token_contract.set(contract)\n    __token_symbol.set(symbol)\n\n\n@__export('con_presale_foams')\ndef get_target_token():\n    return {'contract': __token_contract.get(), 'symbol': __token_symbol.get()}\n\n\n@__export('con_presale_foams')\ndef deposit(amount: float):\n    assert __token_contract.get() is not None, 'Target token not set'\n    assert ctx.caller == __owner.get(), 'Only owner can deposit tokens'\n    token = importlib.import_module(__token_contract.get())\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __default_tokens.set(__default_tokens.get() + amount)\n\n\n@__export('con_presale_foams')\ndef buy_tokens(amount: float):\n    assert __presale_status.get() == 'Active', 'Presale is not Active'\n    assert amount > 0, 'Amount must be greater than 0'\n    current_tokens = __default_tokens.get()\n    assert current_tokens > 0, 'No tokens available for sale'\n    tokens_to_receive = amount * TOKEN_RATE\n    assert tokens_to_receive <= current_tokens, 'Not enough tokens remaining'\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=tokens_to_receive, to=ctx.caller)\n    __default_tokens.set(current_tokens - tokens_to_receive)\n\n\n@__export('con_presale_foams')\ndef get_remaining_tokens():\n    return __default_tokens.get()\n\n\n@__export('con_presale_foams')\ndef get_presale_status():\n    return __presale_status.get()\n\n\n@__export('con_presale_foams')\ndef get_token_price():\n    return __token_price.get()\n\n\n@__export('con_presale_foams')\ndef set_presale_status(status: str):\n    assert __owner.get() == ctx.caller, 'Only owner can change status'\n    __presale_status.set(status)\n\n\n@__export('con_presale_foams')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_presale_foams')\ndef withdraw_xian_all():\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_presale_foams')\ndef withdraw_any_token(amount: float, contract_name: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(contract_name).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_presale_foams.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_foams.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        16,
                        6,
                        1,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_foams.default_tokens",
                "value": {
                    "__fixed__": "10047525"
                }
            },
            {
                "key": "con_presale_foams.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_foams.presale_status",
                "value": "Active"
            },
            {
                "key": "con_presale_foams.token_contract",
                "value": "con_foam"
            },
            {
                "key": "con_presale_foams.token_price",
                "value": {
                    "__fixed__": "0.06666666666666667"
                }
            },
            {
                "key": "con_presale_foams.token_symbol",
                "value": "Foam"
            },
            {
                "key": "con_presale_teto.__code__",
                "value": "__presale_active = Variable(contract='con_presale_teto', name='presale_active')\n__token_price = Variable(contract='con_presale_teto', name='token_price')\n__tokens_sold = Variable(contract='con_presale_teto', name='tokens_sold')\n__presale_cap = Variable(contract='con_presale_teto', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_presale_teto', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_presale_teto', name='xian_balances')\n__token_contract = Variable(contract='con_presale_teto', name='token_contract')\n__owner = Variable(contract='con_presale_teto', name='owner')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_teto')\n    __owner.set(ctx.caller)\n\n\n@__export('con_presale_teto')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount * price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    assert __xian_balances[ctx.caller] >= amount, 'Insufficient XIAN balance'\n    xian = importlib.import_module('currency')\n    xian.transfer(amount=amount, to=ctx.this)\n    xian.transfer(amount=amount, to=__owner.get())\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_presale_teto')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_presale_teto')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_presale_teto')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n\n\n@__export('con_presale_teto')\ndef deposit_tokens(amount: float):\n    assert ctx.caller == __owner.get(), 'Only owner can deposit tokens'\n    assert amount > 0, 'Amount must be greater than 0'\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=amount, to=ctx.this)\n    return amount\n"
            },
            {
                "key": "con_presale_teto.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_teto.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        8,
                        19,
                        36,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_teto.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_teto.presale_active",
                "value": true
            },
            {
                "key": "con_presale_teto.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_presale_teto.token_contract",
                "value": "con_teto"
            },
            {
                "key": "con_presale_teto.token_price",
                "value": 1000
            },
            {
                "key": "con_presale_teto.tokens_sold",
                "value": 0
            },
            {
                "key": "con_presale_teto2.__code__",
                "value": "__presale_active = Variable(contract='con_presale_teto2', name='presale_active'\n    )\n__token_price = Variable(contract='con_presale_teto2', name='token_price')\n__tokens_sold = Variable(contract='con_presale_teto2', name='tokens_sold')\n__presale_cap = Variable(contract='con_presale_teto2', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_presale_teto2', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_presale_teto2', name='xian_balances')\n__token_contract = Variable(contract='con_presale_teto2', name='token_contract'\n    )\n__owner = Variable(contract='con_presale_teto2', name='owner')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_teto')\n    __owner.set(ctx.caller)\n\n\n@__export('con_presale_teto2')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount * price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    assert __xian_balances[ctx.caller] >= amount, 'Insufficient XIAN balance'\n    xian = importlib.import_module('currency')\n    xian.transfer(amount=amount, to=ctx.this)\n    xian.transfer(amount=amount, to=__owner.get())\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_presale_teto2')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_presale_teto2')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_presale_teto2')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n\n\n@__export('con_presale_teto2')\ndef deposit_tokens(amount: float):\n    assert ctx.caller == __owner.get(), 'Only owner can deposit tokens'\n    assert amount > 0, 'Amount must be greater than 0'\n    token = importlib.import_module(__token_contract.get())\n    __token_balances = ForeignHash(foreign_contract=__token_contract.get(),\n        foreign_name='balances', contract='con_presale_teto2', name=\n        'token_balances')\n    assert __token_balances[ctx.caller] >= amount, 'Insufficient token balance'\n    __approved = ForeignHash(foreign_contract=__token_contract.get(),\n        foreign_name='allowances', contract='con_presale_teto2', name=\n        'approved')\n    assert __approved[ctx.caller, ctx.this\n        ] >= amount, 'Contract not approved to spend tokens'\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    return amount\n"
            },
            {
                "key": "con_presale_teto2.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_teto2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        8,
                        26,
                        22,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_teto2.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_teto2.presale_active",
                "value": true
            },
            {
                "key": "con_presale_teto2.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_presale_teto2.token_contract",
                "value": "con_teto"
            },
            {
                "key": "con_presale_teto2.token_price",
                "value": 1000
            },
            {
                "key": "con_presale_teto2.tokens_sold",
                "value": 0
            },
            {
                "key": "con_presale_teto3.__code__",
                "value": "__presale_active = Variable(contract='con_presale_teto3', name='presale_active'\n    )\n__token_price = Variable(contract='con_presale_teto3', name='token_price')\n__tokens_sold = Variable(contract='con_presale_teto3', name='tokens_sold')\n__presale_cap = Variable(contract='con_presale_teto3', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_presale_teto3', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_presale_teto3', name='xian_balances')\n__token_contract = Variable(contract='con_presale_teto3', name='token_contract'\n    )\n__owner = Variable(contract='con_presale_teto3', name='owner')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_teto')\n    __owner.set(ctx.caller)\n\n\n@__export('con_presale_teto3')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is not active'\n    assert amount > 0, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount * price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    buyer_balance = __xian_balances[ctx.caller] or 0\n    assert buyer_balance >= amount, 'Insufficient XIAN balance'\n    token = importlib.import_module(__token_contract.get())\n    contract_token_balance = ForeignHash(foreign_contract=__token_contract.\n        get(), foreign_name='balances')[ctx.this] or 0\n    assert contract_token_balance >= token_amount, 'Insufficient tokens in contract'\n    xian = importlib.import_module('currency')\n    xian.transfer(amount=amount, to=ctx.this)\n    xian.transfer(amount=amount, to=__owner.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_presale_teto3')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_presale_teto3')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_presale_teto3')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n\n\n@__export('con_presale_teto3')\ndef deposit_tokens(amount: float):\n    assert ctx.caller == __owner.get(), 'Only owner can deposit tokens'\n    assert amount > 0, 'Amount must be greater than 0'\n    token = importlib.import_module(__token_contract.get())\n    __token_balances = ForeignHash(foreign_contract=__token_contract.get(),\n        foreign_name='balances', contract='con_presale_teto3', name=\n        'token_balances')\n    assert __token_balances[ctx.caller] >= amount, 'Insufficient token balance'\n    __approved = ForeignHash(foreign_contract=__token_contract.get(),\n        foreign_name='allowances', contract='con_presale_teto3', name=\n        'approved')\n    assert __approved[ctx.caller, ctx.this\n        ] >= amount, 'Contract not approved to spend tokens'\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    return amount\n"
            },
            {
                "key": "con_presale_teto3.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_teto3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        8,
                        29,
                        25,
                        0
                    ]
                }
            },
            {
                "key": "con_presale_teto3.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_presale_teto3.presale_active",
                "value": true
            },
            {
                "key": "con_presale_teto3.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_presale_teto3.token_contract",
                "value": "con_teto"
            },
            {
                "key": "con_presale_teto3.token_price",
                "value": 1000
            },
            {
                "key": "con_presale_teto3.tokens_sold",
                "value": 0
            },
            {
                "key": "con_proxythis.__code__",
                "value": "@__export('con_proxythis')\ndef proxythis(con: str):\n    return importlib.import_module(con).getthis()\n"
            },
            {
                "key": "con_proxythis.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_proxythis.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        31,
                        9,
                        52,
                        23,
                        0
                    ]
                }
            },
            {
                "key": "con_prueba1.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_prueba1', name='movement')\n__winner = Variable(contract='con_prueba1', name='winner')\n__owner = Variable(contract='con_prueba1', name='owner')\n__player = Variable(contract='con_prueba1', name='player')\n__computer = Variable(contract='con_prueba1', name='computer')\n__prize = Variable(contract='con_prueba1', name='prize')\n__cost = Variable(contract='con_prueba1', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('2.0'))\n    __cost.set(decimal('1.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_prueba1')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    __player.set(move)\n    __computer.set(random.randint(1, 3))\n    currency.transfer_from(amount=__cost.get(), to=__owner.get(),\n        main_account=ctx.caller)\n    if __player.get() == __computer.get():\n        currency.transfer_from(amount=__cost.get(), to=ctx.caller,\n            main_account=__owner.get())\n        return 'Draw'\n    elif __player.get() == __movement['rock'] and __computer.get(\n        ) == __movement['scissors'] or __player.get() == __movement['paper'\n        ] and __computer.get() == __movement['rock'] or __player.get(\n        ) == __movement['scissors'] and __computer.get() == __movement['paper'\n        ]:\n        currency.transfer_from(amount=__prize.get(), to=ctx.caller,\n            main_account=__owner.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        __computer.set(random.randint(1, 3))\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_prueba1')\ndef change_cost(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n\n\n@__export('con_prueba1')\ndef change_price(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __prize.set(amount)\n"
            },
            {
                "key": "con_prueba1.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_prueba1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        58,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_prueba1.computer",
                "value": 2
            },
            {
                "key": "con_prueba1.cost",
                "value": 1
            },
            {
                "key": "con_prueba1.movement:paper",
                "value": 2
            },
            {
                "key": "con_prueba1.movement:rock",
                "value": 1
            },
            {
                "key": "con_prueba1.movement:scissors",
                "value": 3
            },
            {
                "key": "con_prueba1.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_prueba1.player",
                "value": 2
            },
            {
                "key": "con_prueba1.prize",
                "value": 3
            },
            {
                "key": "con_prueba1.winner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_prueba2.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_prueba2', name='movement')\n__winner = Variable(contract='con_prueba2', name='winner')\n__owner = Variable(contract='con_prueba2', name='owner')\n__player = Variable(contract='con_prueba2', name='player')\n__computer = Variable(contract='con_prueba2', name='computer')\n__prize = Variable(contract='con_prueba2', name='prize')\n__cost = Variable(contract='con_prueba2', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('2.0'))\n    __cost.set(decimal('1.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_prueba2')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    __player.set(move)\n    __computer.set(random.randint(1, 3))\n    currency.transfer_from(amount=__cost.get(), to=__owner.get(),\n        main_account=ctx.caller)\n    if __player.get() == __computer.get():\n        currency.transfer_from(amount=__cost.get(), to=ctx.caller,\n            main_account=__owner.get())\n        return 'Draw'\n    elif __player.get() == __movement['rock'] and __computer.get(\n        ) == __movement['scissors'] or __player.get() == __movement['paper'\n        ] and __computer.get() == __movement['rock'] or __player.get(\n        ) == __movement['scissors'] and __computer.get() == __movement['paper'\n        ]:\n        currency.transfer_from(amount=__prize.get(), to=ctx.caller,\n            main_account=__owner.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_prueba2')\ndef change_cost(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n\n\n@__export('con_prueba2')\ndef change_price(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __prize.set(amount)\n"
            },
            {
                "key": "con_prueba2.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_prueba2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        4,
                        2,
                        26,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_prueba2.computer",
                "value": 1
            },
            {
                "key": "con_prueba2.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_prueba2.movement:paper",
                "value": 2
            },
            {
                "key": "con_prueba2.movement:rock",
                "value": 1
            },
            {
                "key": "con_prueba2.movement:scissors",
                "value": 3
            },
            {
                "key": "con_prueba2.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_prueba2.player",
                "value": 1
            },
            {
                "key": "con_prueba2.prize",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_prueba3.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_prueba3', name='movement')\n__winner = Variable(contract='con_prueba3', name='winner')\n__owner = Variable(contract='con_prueba3', name='owner')\n__player = Variable(contract='con_prueba3', name='player')\n__computer = Variable(contract='con_prueba3', name='computer')\n__prize = Variable(contract='con_prueba3', name='prize')\n__cost = Variable(contract='con_prueba3', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('3.0'))\n    __cost.set(decimal('1.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_prueba3')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    __player.set(move)\n    __computer.set(random.randint(1, 3))\n    currency.transfer_from(amount=__cost.get(), to=__owner.get(),\n        main_account=ctx.caller)\n    if __player.get() == __computer.get():\n        currency.transfer_from(amount=__cost.get(), to=ctx.caller,\n            main_account=__owner.get())\n        return 'Draw'\n    elif __player.get() == __movement['rock'] and __computer.get(\n        ) == __movement['scissors'] or __player.get() == __movement['paper'\n        ] and __computer.get() == __movement['rock'] or __player.get(\n        ) == __movement['scissors'] and __computer.get() == __movement['paper'\n        ]:\n        currency.transfer_from(amount=__prize.get(), to=ctx.caller,\n            main_account=__owner.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_prueba3')\ndef change_cost(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n\n\n@__export('con_prueba3')\ndef change_price(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __prize.set(amount)\n"
            },
            {
                "key": "con_prueba3.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_prueba3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        4,
                        2,
                        29,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_prueba3.computer",
                "value": 2
            },
            {
                "key": "con_prueba3.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_prueba3.movement:paper",
                "value": 2
            },
            {
                "key": "con_prueba3.movement:rock",
                "value": 1
            },
            {
                "key": "con_prueba3.movement:scissors",
                "value": 3
            },
            {
                "key": "con_prueba3.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_prueba3.player",
                "value": 2
            },
            {
                "key": "con_prueba3.prize",
                "value": {
                    "__fixed__": "3"
                }
            },
            {
                "key": "con_prueba3.winner",
                "value": "c0476b987deee6d9d5eddbae604bf80fc442066f32954ef7120549ff4e51dfd9"
            },
            {
                "key": "con_pruebas.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_pruebas', name='movement')\n__winner = Variable(contract='con_pruebas', name='winner')\n__propietario = Variable(contract='con_pruebas', name='propietario')\n__jugador = Variable(contract='con_pruebas', name='jugador')\n__computadora = Variable(contract='con_pruebas', name='computadora')\n__premio = Variable(contract='con_pruebas', name='premio')\n__coste = Variable(contract='con_pruebas', name='coste')\n\n\ndef ____():\n    __movement['piedra'] = 1\n    __movement['papel'] = 2\n    __movement['tijera'] = 3\n    __jugador.set(__movement['piedra'])\n    __computadora.set(__movement['piedra'])\n    __propietario.set(ctx.caller)\n    __premio.set(decimal('5.0'))\n    __coste.set(decimal('3.0'))\n\n\n@__export('con_pruebas')\ndef Jugar(movimiento: int):\n    assert movimiento < 4, 'No puedes hacer ese movimiento!'\n    __jugador.set(movimiento)\n    __computadora.set(random.randint(1, 3))\n    if __jugador.get() == __computadora.get():\n        return 'Empate'\n    elif __jugador.get() == __movement['piedra'] and __computadora.get(\n        ) == __movement['tijera'] or __jugador.get() == __movement['papel'\n        ] and __computadora.get() == __movement['piedra'] or __jugador.get(\n        ) == __movement['tijera'] and __computadora.get() == __movement['papel'\n        ]:\n        currency.transfer_from(amount=__premio.get(), to=ctx.caller,\n            main_account=__propietario.get())\n        __winner.set(ctx.caller)\n        return (\n            f'Ganaste revisa tu billetera {__winner.get()} tu premio es de {__premio.get()}'\n            )\n    else:\n        currency.transfer_from(amount=__coste.get(), to=__propietario.get(),\n            main_account=ctx.caller)\n        __winner.set(__propietario.get())\n        return f'Perdiste, gano el dueno del contrato {__winner.get()}'\n\n\n@__export('con_pruebas')\ndef computadora():\n    return str(__computadora.get())\n"
            },
            {
                "key": "con_pruebas.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        20,
                        53,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_pruebas.computadora",
                "value": 1
            },
            {
                "key": "con_pruebas.coste",
                "value": {
                    "__fixed__": "3"
                }
            },
            {
                "key": "con_pruebas.jugador",
                "value": 1
            },
            {
                "key": "con_pruebas.movement:papel",
                "value": 2
            },
            {
                "key": "con_pruebas.movement:piedra",
                "value": 1
            },
            {
                "key": "con_pruebas.movement:tijera",
                "value": 3
            },
            {
                "key": "con_pruebas.premio",
                "value": {
                    "__fixed__": "5"
                }
            },
            {
                "key": "con_pruebas.propietario",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas2.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_pruebas2', name='movement')\n__winner = Variable(contract='con_pruebas2', name='winner')\n__owner = Variable(contract='con_pruebas2', name='owner')\n__player = Variable(contract='con_pruebas2', name='player')\n__computer = Variable(contract='con_pruebas2', name='computer')\n__prize = Variable(contract='con_pruebas2', name='prize')\n__cost = Variable(contract='con_pruebas2', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('5.0'))\n    __cost.set(decimal('3.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_pruebas2')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    __player.set(move)\n    __computer.set(random.randint(1, 3))\n    if __player.get() == __computer.get():\n        return 'Draw'\n    elif __player.get() == __movement['rock'] and __computer.get(\n        ) == __movement['scissors'] or __player.get() == __movement['paper'\n        ] and __computer.get() == __movement['rock'] or __player.get(\n        ) == __movement['scissors'] and __computer.get() == __movement['paper'\n        ]:\n        currency.transfer_from(amount=__prize.get(), to=ctx.caller,\n            main_account=__owner.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        currency.transfer_from(amount=__cost.get(), to=__owner.get(),\n            main_account=ctx.caller)\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_pruebas2')\ndef change_cost(amount: int):\n    assert ctx.owner == ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n"
            },
            {
                "key": "con_pruebas2.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        24,
                        55,
                        0
                    ]
                }
            },
            {
                "key": "con_pruebas2.computer",
                "value": 1
            },
            {
                "key": "con_pruebas2.cost",
                "value": {
                    "__fixed__": "3"
                }
            },
            {
                "key": "con_pruebas2.movement:paper",
                "value": 2
            },
            {
                "key": "con_pruebas2.movement:rock",
                "value": 1
            },
            {
                "key": "con_pruebas2.movement:scissors",
                "value": 3
            },
            {
                "key": "con_pruebas2.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas2.player",
                "value": 1
            },
            {
                "key": "con_pruebas2.prize",
                "value": {
                    "__fixed__": "5"
                }
            },
            {
                "key": "con_pruebas3.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_pruebas3', name='movement')\n__winner = Variable(contract='con_pruebas3', name='winner')\n__owner = Variable(contract='con_pruebas3', name='owner')\n__player = Variable(contract='con_pruebas3', name='player')\n__computer = Variable(contract='con_pruebas3', name='computer')\n__prize = Variable(contract='con_pruebas3', name='prize')\n__cost = Variable(contract='con_pruebas3', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('5.0'))\n    __cost.set(decimal('3.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_pruebas3')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    __player.set(move)\n    __computer.set(random.randint(1, 3))\n    if __player.get() == __computer.get():\n        return 'Draw'\n    elif __player.get() == __movement['rock'] and __computer.get(\n        ) == __movement['scissors'] or __player.get() == __movement['paper'\n        ] and __computer.get() == __movement['rock'] or __player.get(\n        ) == __movement['scissors'] and __computer.get() == __movement['paper'\n        ]:\n        currency.transfer_from(amount=__prize.get(), to=ctx.caller,\n            main_account=__owner.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        currency.transfer_from(amount=__cost.get(), to=__owner.get(),\n            main_account=ctx.caller)\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_pruebas3')\ndef change_cost(amount: int):\n    assert ctx.owner != ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n"
            },
            {
                "key": "con_pruebas3.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        26,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_pruebas3.computer",
                "value": 1
            },
            {
                "key": "con_pruebas3.cost",
                "value": 1000
            },
            {
                "key": "con_pruebas3.movement:paper",
                "value": 2
            },
            {
                "key": "con_pruebas3.movement:rock",
                "value": 1
            },
            {
                "key": "con_pruebas3.movement:scissors",
                "value": 3
            },
            {
                "key": "con_pruebas3.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas3.player",
                "value": 1
            },
            {
                "key": "con_pruebas3.prize",
                "value": {
                    "__fixed__": "5"
                }
            },
            {
                "key": "con_pruebas4.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_pruebas4', name='movement')\n__winner = Variable(contract='con_pruebas4', name='winner')\n__owner = Variable(contract='con_pruebas4', name='owner')\n__player = Variable(contract='con_pruebas4', name='player')\n__computer = Variable(contract='con_pruebas4', name='computer')\n__prize = Variable(contract='con_pruebas4', name='prize')\n__cost = Variable(contract='con_pruebas4', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('6.0'))\n    __cost.set(decimal('3.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_pruebas4')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    currency.transfer_from(amount=__cost.get(), to=__owner.get(),\n        main_account=ctx.caller)\n    __player.set(move)\n    __computer.set(random.randint(1, 3))\n    if __player.get() == __computer.get():\n        return 'Draw'\n    elif __player.get() == __movement['rock'] and __computer.get(\n        ) == __movement['scissors'] or __player.get() == __movement['paper'\n        ] and __computer.get() == __movement['rock'] or __player.get(\n        ) == __movement['scissors'] and __computer.get() == __movement['paper'\n        ]:\n        currency.transfer_from(amount=__prize.get(), to=ctx.caller,\n            main_account=__owner.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_pruebas4')\ndef change_cost(amount: int):\n    assert ctx.owner != ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n"
            },
            {
                "key": "con_pruebas4.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas4.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        30,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_pruebas4.computer",
                "value": 3
            },
            {
                "key": "con_pruebas4.cost",
                "value": 5
            },
            {
                "key": "con_pruebas4.movement:paper",
                "value": 2
            },
            {
                "key": "con_pruebas4.movement:rock",
                "value": 1
            },
            {
                "key": "con_pruebas4.movement:scissors",
                "value": 3
            },
            {
                "key": "con_pruebas4.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas4.player",
                "value": 1
            },
            {
                "key": "con_pruebas4.prize",
                "value": {
                    "__fixed__": "6"
                }
            },
            {
                "key": "con_pruebas4.winner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas5.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_pruebas5', name='movement')\n__winner = Variable(contract='con_pruebas5', name='winner')\n__owner = Variable(contract='con_pruebas5', name='owner')\n__player = Variable(contract='con_pruebas5', name='player')\n__computer = Variable(contract='con_pruebas5', name='computer')\n__prize = Variable(contract='con_pruebas5', name='prize')\n__cost = Variable(contract='con_pruebas5', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('6.0'))\n    __cost.set(decimal('3.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_pruebas5')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    currency.transfer_from(amount=__cost.get(), to=__owner.get(),\n        main_account=ctx.caller)\n    __player.set(move)\n    if __player.get() == __computer.get():\n        return 'Draw'\n    elif __computer.set(random.randint(1, 3))(__player.get() == __movement[\n        'rock'] and __computer.get() == __movement['scissors']\n        ) or __player.get() == __movement['paper'] and __computer.get(\n        ) == __movement['rock'] or __player.get() == __movement['scissors'\n        ] and __computer.get() == __movement['paper']:\n        currency.transfer_from(amount=__prize.get(), to=ctx.caller,\n            main_account=__owner.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        __computer.set(random.randint(1, 3))\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_pruebas5')\ndef change_cost(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n"
            },
            {
                "key": "con_pruebas5.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas5.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        41,
                        33,
                        0
                    ]
                }
            },
            {
                "key": "con_pruebas5.computer",
                "value": 1
            },
            {
                "key": "con_pruebas5.cost",
                "value": 3
            },
            {
                "key": "con_pruebas5.movement:paper",
                "value": 2
            },
            {
                "key": "con_pruebas5.movement:rock",
                "value": 1
            },
            {
                "key": "con_pruebas5.movement:scissors",
                "value": 3
            },
            {
                "key": "con_pruebas5.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas5.player",
                "value": 1
            },
            {
                "key": "con_pruebas5.prize",
                "value": {
                    "__fixed__": "6"
                }
            },
            {
                "key": "con_pruebas6.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_pruebas6', name='movement')\n__winner = Variable(contract='con_pruebas6', name='winner')\n__owner = Variable(contract='con_pruebas6', name='owner')\n__player = Variable(contract='con_pruebas6', name='player')\n__computer = Variable(contract='con_pruebas6', name='computer')\n__prize = Variable(contract='con_pruebas6', name='prize')\n__cost = Variable(contract='con_pruebas6', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('2.0'))\n    __cost.set(decimal('1.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_pruebas6')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    __player.set(move)\n    currency.transfer_from(amount=coste.get(), to=propietario.get(),\n        main_account=ctx.caller)\n    if __player.get() == __computer.get():\n        currency.transfer_from(amount=coste.get(), to=ctx.caller,\n            main_account=propietario.get())\n        return 'Draw'\n    elif __computer.set(random.randint(1, 3))(__player.get() == __movement[\n        'rock'] and __computer.get() == __movement['scissors']\n        ) or __player.get() == __movement['paper'] and __computer.get(\n        ) == __movement['rock'] or __player.get() == __movement['scissors'\n        ] and __computer.get() == __movement['paper']:\n        currency.transfer_from(amount=premio.get(), to=ctx.caller,\n            main_account=propietario.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        __computer.set(random.randint(1, 3))\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_pruebas6')\ndef change_cost(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n\n\n@__export('con_pruebas6')\ndef change_price(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __prize.set(amount)\n"
            },
            {
                "key": "con_pruebas6.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas6.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        45,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_pruebas6.computer",
                "value": 1
            },
            {
                "key": "con_pruebas6.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_pruebas6.movement:paper",
                "value": 2
            },
            {
                "key": "con_pruebas6.movement:rock",
                "value": 1
            },
            {
                "key": "con_pruebas6.movement:scissors",
                "value": 3
            },
            {
                "key": "con_pruebas6.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas6.player",
                "value": 1
            },
            {
                "key": "con_pruebas6.prize",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_pruebas7.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_pruebas7', name='movement')\n__winner = Variable(contract='con_pruebas7', name='winner')\n__owner = Variable(contract='con_pruebas7', name='owner')\n__player = Variable(contract='con_pruebas7', name='player')\n__computer = Variable(contract='con_pruebas7', name='computer')\n__prize = Variable(contract='con_pruebas7', name='prize')\n__cost = Variable(contract='con_pruebas7', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('2.0'))\n    __cost.set(decimal('1.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_pruebas7')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    __player.set(move)\n    currency.transfer_from(amount=__cost.get(), to=propietario.get(),\n        main_account=ctx.caller)\n    if __player.get() == __computer.get():\n        currency.transfer_from(amount=__cost.get(), to=ctx.caller,\n            main_account=propietario.get())\n        return 'Draw'\n    elif __computer.set(random.randint(1, 3))(__player.get() == __movement[\n        'rock'] and __computer.get() == __movement['scissors']\n        ) or __player.get() == __movement['paper'] and __computer.get(\n        ) == __movement['rock'] or __player.get() == __movement['scissors'\n        ] and __computer.get() == __movement['paper']:\n        currency.transfer_from(amount=premio.get(), to=ctx.caller,\n            main_account=propietario.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        __computer.set(random.randint(1, 3))\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_pruebas7')\ndef change_cost(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n\n\n@__export('con_pruebas7')\ndef change_price(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __prize.set(amount)\n"
            },
            {
                "key": "con_pruebas7.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas7.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        51,
                        19,
                        0
                    ]
                }
            },
            {
                "key": "con_pruebas7.computer",
                "value": 1
            },
            {
                "key": "con_pruebas7.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_pruebas7.movement:paper",
                "value": 2
            },
            {
                "key": "con_pruebas7.movement:rock",
                "value": 1
            },
            {
                "key": "con_pruebas7.movement:scissors",
                "value": 3
            },
            {
                "key": "con_pruebas7.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas7.player",
                "value": 1
            },
            {
                "key": "con_pruebas7.prize",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_pruebas8.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_pruebas8', name='movement')\n__winner = Variable(contract='con_pruebas8', name='winner')\n__owner = Variable(contract='con_pruebas8', name='owner')\n__player = Variable(contract='con_pruebas8', name='player')\n__computer = Variable(contract='con_pruebas8', name='computer')\n__prize = Variable(contract='con_pruebas8', name='prize')\n__cost = Variable(contract='con_pruebas8', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('2.0'))\n    __cost.set(decimal('1.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_pruebas8')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    __player.set(move)\n    currency.transfer_from(amount=__cost.get(), to=__owner.get(),\n        main_account=ctx.caller)\n    if __player.get() == __computer.get():\n        currency.transfer_from(amount=__cost.get(), to=ctx.caller,\n            main_account=__owner.get())\n        return 'Draw'\n    elif __computer.set(random.randint(1, 3))(__player.get() == __movement[\n        'rock'] and __computer.get() == __movement['scissors']\n        ) or __player.get() == __movement['paper'] and __computer.get(\n        ) == __movement['rock'] or __player.get() == __movement['scissors'\n        ] and __computer.get() == __movement['paper']:\n        currency.transfer_from(amount=__prize.get(), to=ctx.caller,\n            main_account=__owner.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        __computer.set(random.randint(1, 3))\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_pruebas8')\ndef change_cost(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n\n\n@__export('con_pruebas8')\ndef change_price(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __prize.set(amount)\n"
            },
            {
                "key": "con_pruebas8.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas8.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        52,
                        22,
                        0
                    ]
                }
            },
            {
                "key": "con_pruebas8.computer",
                "value": 1
            },
            {
                "key": "con_pruebas8.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_pruebas8.movement:paper",
                "value": 2
            },
            {
                "key": "con_pruebas8.movement:rock",
                "value": 1
            },
            {
                "key": "con_pruebas8.movement:scissors",
                "value": 3
            },
            {
                "key": "con_pruebas8.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas8.player",
                "value": 1
            },
            {
                "key": "con_pruebas8.prize",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_pruebas9.__code__",
                "value": "random.seed()\nimport currency\n__movement = Hash(default_value=0, contract='con_pruebas9', name='movement')\n__winner = Variable(contract='con_pruebas9', name='winner')\n__owner = Variable(contract='con_pruebas9', name='owner')\n__player = Variable(contract='con_pruebas9', name='player')\n__computer = Variable(contract='con_pruebas9', name='computer')\n__prize = Variable(contract='con_pruebas9', name='prize')\n__cost = Variable(contract='con_pruebas9', name='cost')\n\n\ndef ____():\n    __movement['rock'] = 1\n    __movement['paper'] = 2\n    __movement['scissors'] = 3\n    __player.set(__movement['rock'])\n    __computer.set(__movement['rock'])\n    __owner.set(ctx.caller)\n    __prize.set(decimal('2.0'))\n    __cost.set(decimal('1.0'))\n\n\ndef __move_to_text(move: int) ->str:\n    if move == 1:\n        return 'rock'\n    elif move == 2:\n        return 'paper'\n    elif move == 3:\n        return 'scissors'\n    else:\n        return 'Invalid move'\n\n\n@__export('con_pruebas9')\ndef Play(move: int):\n    assert move < 4, 'Invalid move!'\n    assert move > 0, 'Invalid move!'\n    __player.set(move)\n    computadora.set(random.randint(1, 3))\n    currency.transfer_from(amount=__cost.get(), to=__owner.get(),\n        main_account=ctx.caller)\n    if __player.get() == __computer.get():\n        currency.transfer_from(amount=__cost.get(), to=ctx.caller,\n            main_account=__owner.get())\n        return 'Draw'\n    elif __player.get() == __movement['rock'] and __computer.get(\n        ) == __movement['scissors'] or __player.get() == __movement['paper'\n        ] and __computer.get() == __movement['rock'] or __player.get(\n        ) == __movement['scissors'] and __computer.get() == __movement['paper'\n        ]:\n        currency.transfer_from(amount=__prize.get(), to=ctx.caller,\n            main_account=__owner.get())\n        __winner.set(ctx.caller)\n        return (\n            f'You won! Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n    else:\n        __computer.set(random.randint(1, 3))\n        __winner.set(__owner.get())\n        return (\n            f'You lost, Your movement was {__move_to_text(__player.get())} and the computer was {__move_to_text(__computer.get())}'\n            )\n\n\n@__export('con_pruebas9')\ndef change_cost(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __cost.set(amount)\n\n\n@__export('con_pruebas9')\ndef change_price(amount: int):\n    assert __owner.get() == ctx.caller, 'Only owner can change!'\n    __prize.set(amount)\n"
            },
            {
                "key": "con_pruebas9.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas9.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        2,
                        21,
                        56,
                        16,
                        0
                    ]
                }
            },
            {
                "key": "con_pruebas9.computer",
                "value": 1
            },
            {
                "key": "con_pruebas9.cost",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_pruebas9.movement:paper",
                "value": 2
            },
            {
                "key": "con_pruebas9.movement:rock",
                "value": 1
            },
            {
                "key": "con_pruebas9.movement:scissors",
                "value": 3
            },
            {
                "key": "con_pruebas9.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_pruebas9.player",
                "value": 1
            },
            {
                "key": "con_pruebas9.prize",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_race.__code__",
                "value": "__owner = Variable(contract='con_race', name='owner')\n__race_counter = Variable(contract='con_race', name='race_counter')\n__min_bet = Variable(contract='con_race', name='min_bet')\n__max_bet = Variable(contract='con_race', name='max_bet')\n__min_snails = Variable(contract='con_race', name='min_snails')\n__max_snails = Variable(contract='con_race', name='max_snails')\n__house_fee = Variable(contract='con_race', name='house_fee')\n__race_checkpoints = Variable(contract='con_race', name='race_checkpoints')\n__betting_period = Variable(contract='con_race', name='betting_period')\n__total_races = Variable(contract='con_race', name='total_races')\n__total_volume = Variable(contract='con_race', name='total_volume')\n__races = Hash(contract='con_race', name='races')\n__race_bets = Hash(contract='con_race', name='race_bets')\n__race_snails = Hash(contract='con_race', name='race_snails')\n__player_stats = Hash(contract='con_race', name='player_stats')\n__active_race = Variable(contract='con_race', name='active_race')\n__race_progress = Hash(contract='con_race', name='race_progress')\n__snail_odds = Hash(contract='con_race', name='snail_odds')\n__race_winners = Hash(contract='con_race', name='race_winners')\n__daily_winners = Hash(contract='con_race', name='daily_winners')\n__race_players = Hash(contract='con_race', name='race_players')\n__RaceStarted = LogEvent(event='RaceStarted', params={'race_id': {'type':\n    int, 'idx': True}, 'snail_count': {'type': int, 'idx': False},\n    'timestamp': {'type': str, 'idx': False}}, contract='con_race', name=\n    'RaceStarted')\n__OddsUpdated = LogEvent(event='OddsUpdated', params={'race_id': {'type':\n    int, 'idx': True}, 'snail': {'type': int, 'idx': True}, 'odds': {'type':\n    str, 'idx': False}, 'total_bets': {'type': str, 'idx': False}},\n    contract='con_race', name='OddsUpdated')\n__RaceFinished = LogEvent(event='RaceFinished', params={'race_id': {'type':\n    int, 'idx': True}, 'winner_snail': {'type': int, 'idx': False},\n    'timestamp': {'type': str, 'idx': True}, 'total_payout': {'type': str,\n    'idx': False}}, contract='con_race', name='RaceFinished')\n__PlayerWon = LogEvent(event='PlayerWon', params={'player': {'type': str,\n    'idx': True}, 'race_id': {'type': int, 'idx': True}, 'amount_won': {\n    'type': str, 'idx': False}, 'profit': {'type': str, 'idx': False}},\n    contract='con_race', name='PlayerWon')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __race_counter.set(0)\n    __min_bet.set(decimal('1.0'))\n    __max_bet.set(decimal('100.0'))\n    __min_snails.set(3)\n    __max_snails.set(6)\n    __house_fee.set(decimal('0.05'))\n    __race_checkpoints.set(5)\n    __betting_period.set(120)\n    __total_races.set(0)\n    __total_volume.set(decimal('0.0'))\n    __active_race.set(0)\n\n\n@__export('con_race')\ndef start_race(num_snails: int):\n    assert ctx.caller == __owner.get(), 'Only owner can start races'\n    assert __active_race.get() == 0, 'Race already active'\n    assert num_snails >= __min_snails.get(), 'Too few snails'\n    assert num_snails <= __max_snails.get(), 'Too many snails'\n    race_id = __race_counter.get() + 1\n    __race_counter.set(race_id)\n    __active_race.set(race_id)\n    betting_deadline = now + datetime.timedelta(seconds=__betting_period.get())\n    __races[race_id] = {'num_snails': num_snails, 'state': 'betting',\n        'created_at': str(now), 'betting_deadline': str(betting_deadline),\n        'total_pot': decimal('0.0'), 'winner': None, 'total_bets': 0,\n        'player_count': 0}\n    __race_players[race_id] = []\n    random.seed(str(block_hash) + str(race_id))\n    for i in range(num_snails):\n        __race_snails[race_id][i + 1] = {'number': i + 1, 'speed': random.\n            randint(3, 8), 'acceleration': random.randint(1, 5), 'stamina':\n            random.randint(5, 10), 'consistency': random.randint(3, 8),\n            'luck': random.randint(1, 5), 'position': 0, 'total_bets':\n            decimal('0.0'), 'bet_count': 0}\n        __snail_odds[race_id][i + 1] = 'Even'\n    __RaceStarted({'race_id': race_id, 'snail_count': num_snails,\n        'timestamp': str(now)})\n    return race_id\n\n\n@__export('con_race')\ndef place_bet(snail_number: int, amount: float):\n    race_id = __active_race.get()\n    assert race_id > 0, 'No active race'\n    race = __races[race_id]\n    assert race is not None, 'Race not found'\n    assert race['state'] == 'betting', 'Betting closed'\n    deadline = datetime.datetime.fromisoformat(race['betting_deadline'])\n    assert now <= deadline, 'Betting period ended'\n    assert amount >= __min_bet.get(), 'Bet too small'\n    assert amount <= __max_bet.get(), 'Bet too large'\n    assert snail_number >= 1, 'Invalid snail'\n    assert snail_number <= race['num_snails'], 'Invalid snail'\n    existing_bet = __race_bets[race_id][ctx.caller]\n    if existing_bet is None:\n        race['player_count'] = race['player_count'] + 1\n        current_players = __race_players[race_id]\n        current_players.append(ctx.caller)\n        __race_players[race_id] = current_players\n    else:\n        assert existing_bet['snail'] == snail_number, 'Cannot change snail'\n    currency = importlib.import_module('currency')\n    if existing_bet is not None:\n        additional = amount - existing_bet['amount']\n        assert additional > 0, 'Must increase bet'\n        currency.transfer_from(amount=additional, to=ctx.this, main_account\n            =ctx.caller)\n        race['total_pot'] = race['total_pot'] + additional\n        existing_bet['amount'] = existing_bet['amount'] + additional\n        __race_bets[race_id][ctx.caller] = existing_bet\n    else:\n        currency.transfer_from(amount=amount, to=ctx.this, main_account=ctx\n            .caller)\n        __race_bets[race_id][ctx.caller] = {'snail': snail_number, 'amount':\n            amount, 'timestamp': str(now)}\n        race['total_pot'] = race['total_pot'] + amount\n        race['total_bets'] = race['total_bets'] + 1\n    __races[race_id] = race\n    snail = __race_snails[race_id][snail_number]\n    snail['total_bets'] = snail['total_bets'] + amount\n    snail['bet_count'] = snail['bet_count'] + 1\n    __race_snails[race_id][snail_number] = snail\n    __update_all_odds(race_id)\n    __total_volume.set(__total_volume.get() + amount)\n    return {'bet_placed': True, 'snail': snail_number, 'amount': str(amount\n        ), 'current_odds': __calculate_odds(race_id, snail_number)}\n\n\n@__export('con_race')\ndef run_race():\n    race_id = __active_race.get()\n    assert race_id > 0, 'No active race'\n    assert ctx.caller == __owner.get(), 'Only owner can run race'\n    race = __races[race_id]\n    assert race['state'] == 'betting', 'Race not in betting state'\n    deadline = datetime.datetime.fromisoformat(race['betting_deadline'])\n    assert now > deadline, 'Betting period not ended'\n    assert race['total_bets'] > 0, 'No bets placed'\n    race['state'] = 'racing'\n    __races[race_id] = race\n    num_checkpoints = __race_checkpoints.get()\n    finish_line = 100\n    random.seed(str(block_hash) + str(block_num) + str(race_id))\n    for checkpoint in range(1, num_checkpoints + 1):\n        checkpoint_positions = {}\n        for snail_num in range(1, race['num_snails'] + 1):\n            snail = __race_snails[race_id][snail_num]\n            progress_factor = checkpoint / num_checkpoints\n            if progress_factor <= decimal('0.3'):\n                speed_modifier = snail['acceleration'] / 5\n            elif progress_factor <= decimal('0.7'):\n                speed_modifier = decimal('1.0')\n            else:\n                speed_modifier = snail['stamina'] / 10\n            base_move = snail['speed'] * speed_modifier\n            consistency_factor = snail['consistency'] / 10\n            random_factor = random.randint(-3, 3) * (1 - consistency_factor)\n            if random.randint(1, 20) <= snail['luck']:\n                base_move = base_move * decimal('1.5')\n            movement = max(1, base_move + random_factor)\n            new_position = min(finish_line, snail['position'] + movement)\n            snail['position'] = new_position\n            checkpoint_positions[snail_num] = int(new_position)\n            __race_snails[race_id][snail_num] = snail\n        __race_progress[race_id][checkpoint] = checkpoint_positions\n    winner = None\n    max_pos = 0\n    for snail_num in range(1, race['num_snails'] + 1):\n        snail = __race_snails[race_id][snail_num]\n        if snail['position'] >= max_pos:\n            max_pos = snail['position']\n            winner = snail_num\n    race['state'] = 'finished'\n    race['winner'] = winner\n    race['finished_at'] = str(now)\n    __races[race_id] = race\n    total_payout = __distribute_winnings(race_id, winner)\n    __active_race.set(0)\n    __total_races.set(__total_races.get() + 1)\n    __RaceFinished({'race_id': race_id, 'winner_snail': winner, 'timestamp':\n        str(now), 'total_payout': str(total_payout)})\n    return {'winner': winner, 'total_payout': str(total_payout),\n        'checkpoints': get_race_checkpoints(race_id)}\n\n\n@__export('con_race')\ndef get_race_checkpoints(race_id: int):\n    checkpoints = []\n    num_checkpoints = __race_checkpoints.get()\n    for i in range(1, num_checkpoints + 1):\n        checkpoint_data = __race_progress[race_id][i]\n        if checkpoint_data is not None:\n            checkpoints.append({'checkpoint': i, 'positions': checkpoint_data})\n    return checkpoints\n\n\n@__export('con_race')\ndef get_live_odds():\n    race_id = __active_race.get()\n    if race_id == 0:\n        return {'active': False}\n    race = __races[race_id]\n    if race['state'] != 'betting':\n        return {'active': False, 'reason': 'Betting closed'}\n    odds_data = []\n    for i in range(1, race['num_snails'] + 1):\n        snail = __race_snails[race_id][i]\n        odds_data.append({'snail': i, 'odds': __calculate_odds(race_id, i),\n            'total_bets': str(snail['total_bets']), 'bet_count': snail[\n            'bet_count']})\n    deadline = datetime.datetime.fromisoformat(race['betting_deadline'])\n    time_remaining = max(0, (deadline - now).seconds)\n    return {'active': True, 'race_id': race_id, 'total_pot': str(race[\n        'total_pot']), 'total_bets': race['total_bets'], 'player_count':\n        race['player_count'], 'odds': odds_data, 'time_remaining':\n        time_remaining}\n\n\n@__export('con_race')\ndef get_winners_by_date(start_date: str, end_date: str):\n    winners_data = {}\n    start = datetime.datetime.fromisoformat(start_date)\n    end = datetime.datetime.fromisoformat(end_date)\n    for race_id in range(1, __race_counter.get() + 1):\n        race = __races[race_id]\n        if race is not None and race['state'] == 'finished':\n            race_date = datetime.datetime.fromisoformat(race['finished_at'])\n            if start <= race_date <= end:\n                winner_data = __race_winners[race_id]\n                if winner_data is not None:\n                    for player in winner_data['players']:\n                        if player not in winners_data:\n                            winners_data[player] = {'total_won': decimal(\n                                '0.0'), 'races_won': 0, 'total_profit':\n                                decimal('0.0')}\n                        player_win = winner_data['payouts'][player]\n                        winners_data[player]['total_won'] += player_win[\n                            'amount']\n                        winners_data[player]['total_profit'] += player_win[\n                            'profit']\n                        winners_data[player]['races_won'] += 1\n    winners_list = []\n    for player, data in winners_data.items():\n        winners_list.append({'player': player, 'total_won': str(data[\n            'total_won']), 'races_won': data['races_won'], 'total_profit':\n            str(data['total_profit']), 'total_won_decimal': data['total_won']})\n    sorted_winners = __sort_winners_by_amount(winners_list)\n    for winner in sorted_winners:\n        del winner['total_won_decimal']\n    return {'start_date': start_date, 'end_date': end_date, 'winners':\n        sorted_winners}\n\n\n@__export('con_race')\ndef get_my_stats():\n    stats = __player_stats[ctx.caller]\n    if stats is None:\n        return {'races': 0, 'wins': 0, 'total_bet': '0.0', 'total_won':\n            '0.0', 'profit': '0.0', 'win_rate': '0.0'}\n    win_rate = decimal('0.0')\n    if stats['races'] > 0:\n        win_rate = stats['wins'] / stats['races'] * decimal('100.0')\n    return {'races': stats['races'], 'wins': stats['wins'], 'total_bet':\n        str(stats['total_bet']), 'total_won': str(stats['total_won']),\n        'profit': str(stats['profit']), 'win_rate': f'{win_rate:.1f}'}\n\n\n@__export('con_race')\ndef get_race_info(race_id: int):\n    race = __races[race_id]\n    if race is None:\n        return None\n    snails_data = []\n    for i in range(1, race['num_snails'] + 1):\n        snail = __race_snails[race_id][i]\n        if snail is not None:\n            snails_data.append({'number': i, 'total_bets': str(snail[\n                'total_bets']), 'bet_count': snail['bet_count'],\n                'final_position': snail['position'] if race['state'] ==\n                'finished' else 0})\n    return {'race_id': race_id, 'state': race['state'], 'num_snails': race[\n        'num_snails'], 'total_pot': str(race['total_pot']), 'total_bets':\n        race['total_bets'], 'player_count': race['player_count'], 'winner':\n        race['winner'], 'snails': snails_data, 'created_at': race[\n        'created_at'], 'finished_at': race.get('finished_at', None)}\n\n\ndef __calculate_odds(race_id: int, snail_number: int):\n    race = __races[race_id]\n    snail = __race_snails[race_id][snail_number]\n    if race['total_pot'] == 0 or snail['total_bets'] == 0:\n        return 'Even'\n    implied_prob = snail['total_bets'] / race['total_pot']\n    if implied_prob > 0:\n        payout = (decimal('1.0') - __house_fee.get()) / implied_prob\n        return f'{payout:.2f}x'\n    return 'Even'\n\n\ndef __update_all_odds(race_id: int):\n    race = __races[race_id]\n    for i in range(1, race['num_snails'] + 1):\n        snail = __race_snails[race_id][i]\n        odds = __calculate_odds(race_id, i)\n        __snail_odds[race_id][i] = odds\n        __OddsUpdated({'race_id': race_id, 'snail': i, 'odds': odds,\n            'total_bets': str(snail['total_bets'])})\n\n\ndef __sort_winners_by_amount(winners_list: list):\n    n = len(winners_list)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if winners_list[j]['total_won_decimal'] < winners_list[j + 1][\n                'total_won_decimal']:\n                temp = winners_list[j]\n                winners_list[j] = winners_list[j + 1]\n                winners_list[j + 1] = temp\n    return winners_list\n\n\ndef __distribute_winnings(race_id: int, winner: int):\n    race = __races[race_id]\n    currency = importlib.import_module('currency')\n    house_take = race['total_pot'] * __house_fee.get()\n    prize_pool = race['total_pot'] - house_take\n    winners_list = []\n    payouts = {}\n    winning_bets_total = decimal('0.0')\n    total_distributed = decimal('0.0')\n    today = str(now.date())\n    race_player_list = __race_players[race_id]\n    for player in race_player_list:\n        bet = __race_bets[race_id][player]\n        if bet is not None and bet['snail'] == winner:\n            winners_list.append(player)\n            winning_bets_total += bet['amount']\n    if len(winners_list) > 0 and winning_bets_total > 0:\n        for player in winners_list:\n            bet = __race_bets[race_id][player]\n            share = bet['amount'] / winning_bets_total\n            payout = prize_pool * share\n            profit = payout - bet['amount']\n            currency.transfer(amount=payout, to=player)\n            total_distributed += payout\n            payouts[player] = {'amount': payout, 'profit': profit, 'bet':\n                bet['amount']}\n            __update_player_stats(player, True, bet['amount'], payout)\n            if __daily_winners[today][player] is None:\n                __daily_winners[today][player] = decimal('0.0')\n            __daily_winners[today][player] += payout\n            __PlayerWon({'player': player, 'race_id': race_id, 'amount_won':\n                str(payout), 'profit': str(profit)})\n    __race_winners[race_id] = {'winning_snail': winner, 'players':\n        winners_list, 'payouts': payouts, 'total_payout': total_distributed}\n    for player in race_player_list:\n        if player not in winners_list:\n            bet = __race_bets[race_id][player]\n            if bet is not None:\n                __update_player_stats(player, False, bet['amount'], decimal\n                    ('0.0'))\n    return total_distributed\n\n\ndef __update_player_stats(player: str, won: bool, bet_amount: decimal,\n    payout: decimal):\n    stats = __player_stats[player]\n    if stats is None:\n        stats = {'races': 0, 'wins': 0, 'total_bet': decimal('0.0'),\n            'total_won': decimal('0.0'), 'profit': decimal('0.0')}\n    stats['races'] += 1\n    stats['total_bet'] = stats['total_bet'] + bet_amount\n    if won:\n        stats['wins'] += 1\n        stats['total_won'] = stats['total_won'] + payout\n        stats['profit'] = stats['profit'] + (payout - bet_amount)\n    else:\n        stats['profit'] = stats['profit'] - bet_amount\n    __player_stats[player] = stats\n\n\n@__export('con_race')\ndef set_race_params(checkpoints: int, betting_time: int):\n    assert ctx.caller == __owner.get(), 'Only owner'\n    assert checkpoints >= 3 and checkpoints <= 10, 'Checkpoints 3-10'\n    assert betting_time >= 60 and betting_time <= 300, 'Betting time 60-300s'\n    __race_checkpoints.set(checkpoints)\n    __betting_period.set(betting_time)\n\n\n@__export('con_race')\ndef set_bet_limits(min_amount: str, max_amount: str):\n    assert ctx.caller == __owner.get(), 'Only owner'\n    min_amount = decimal(min_amount)\n    max_amount = decimal(max_amount)\n    assert min_amount > 0, 'Min must be positive'\n    assert max_amount > min_amount, 'Max must be greater than min'\n    __min_bet.set(min_amount)\n    __max_bet.set(max_amount)\n\n\n@__export('con_race')\ndef withdraw_fees(amount: str):\n    assert ctx.caller == __owner.get(), 'Only owner'\n    amount = decimal(amount)\n    currency = importlib.import_module('currency')\n    currency.transfer(amount=amount, to=__owner.get())\n"
            },
            {
                "key": "con_race.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_race.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        19,
                        20,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "con_race.active_race",
                "value": 0
            },
            {
                "key": "con_race.betting_period",
                "value": 120
            },
            {
                "key": "con_race.house_fee",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "con_race.max_bet",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_race.max_snails",
                "value": 6
            },
            {
                "key": "con_race.min_bet",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_race.min_snails",
                "value": 3
            },
            {
                "key": "con_race.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_race.race_checkpoints",
                "value": 5
            },
            {
                "key": "con_race.race_counter",
                "value": 0
            },
            {
                "key": "con_race.total_races",
                "value": 0
            },
            {
                "key": "con_race.total_volume",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_race2.__code__",
                "value": "__owner = Variable(contract='con_race2', name='owner')\n__race_counter = Variable(contract='con_race2', name='race_counter')\n__min_bet = Variable(contract='con_race2', name='min_bet')\n__max_bet = Variable(contract='con_race2', name='max_bet')\n__min_snails = Variable(contract='con_race2', name='min_snails')\n__max_snails = Variable(contract='con_race2', name='max_snails')\n__house_fee = Variable(contract='con_race2', name='house_fee')\n__race_checkpoints = Variable(contract='con_race2', name='race_checkpoints')\n__betting_period = Variable(contract='con_race2', name='betting_period')\n__total_races = Variable(contract='con_race2', name='total_races')\n__total_volume = Variable(contract='con_race2', name='total_volume')\n__active_race = Variable(contract='con_race2', name='active_race')\n__races = Hash(contract='con_race2', name='races')\n__race_bets = Hash(contract='con_race2', name='race_bets')\n__race_snails = Hash(contract='con_race2', name='race_snails')\n__race_progress = Hash(contract='con_race2', name='race_progress')\n__snail_odds = Hash(contract='con_race2', name='snail_odds')\n__race_winners = Hash(contract='con_race2', name='race_winners')\n__daily_winners = Hash(contract='con_race2', name='daily_winners')\n__player_stats = Hash(contract='con_race2', name='player_stats')\n__race_players = Hash(contract='con_race2', name='race_players')\n__RaceStarted = LogEvent(event='RaceStarted', params={'race_id': {'type':\n    int, 'idx': True}, 'snail_count': {'type': int, 'idx': False},\n    'timestamp': {'type': str, 'idx': True}}, contract='con_race2', name=\n    'RaceStarted')\n__OddsUpdated = LogEvent(event='OddsUpdated', params={'race_id': {'type':\n    int, 'idx': True}, 'snail': {'type': int, 'idx': True}, 'odds': {'type':\n    str, 'idx': False}, 'total_bets': {'type': (int, float, decimal), 'idx':\n    False}}, contract='con_race2', name='OddsUpdated')\n__RaceFinished = LogEvent(event='RaceFinished', params={'race_id': {'type':\n    int, 'idx': True}, 'winner_snail': {'type': int, 'idx': False},\n    'timestamp': {'type': str, 'idx': True}, 'total_payout': {'type': (int,\n    float, decimal), 'idx': False}}, contract='con_race2', name='RaceFinished')\n__PlayerWon = LogEvent(event='PlayerWon', params={'player': {'type': str,\n    'idx': True}, 'race_id': {'type': int, 'idx': True}, 'amount_won': {\n    'type': (int, float, decimal), 'idx': False}, 'profit': {'type': (int,\n    float, decimal), 'idx': False}}, contract='con_race2', name='PlayerWon')\n\n\ndef __to_dec(x):\n    if isinstance(x, (int,)):\n        return decimal(str(x))\n    if isinstance(x, float):\n        return decimal(str(x))\n    if isinstance(x, str):\n        return decimal(x)\n    return x\n\n\ndef __now_iso():\n    return str(now)\n\n\ndef __iso_to_dt(s):\n    return datetime.datetime.fromisoformat(s)\n\n\ndef __get_race(race_id):\n    r = __races[race_id]\n    assert r is not None, 'Carrera no encontrada'\n    return r\n\n\ndef __get_snail(race_id, snail):\n    s = __race_snails[race_id, snail]\n    assert s is not None, 'Caracol no encontrado'\n    return s\n\n\ndef __get_bet(race_id, player):\n    return __race_bets[race_id, player]\n\n\ndef __append_player(race_id, player):\n    lst = __race_players[race_id]\n    if lst is None:\n        lst = []\n    if player not in lst:\n        lst.append(player)\n        __race_players[race_id] = lst\n\n\ndef __seed_for_race(race_id):\n    base = str(race_id) + '|' + __races[race_id]['created_at'] + '|' + str(\n        block_num) + '|' + str(block_hash)\n    random.seed(base)\n\n\ndef __calculate_odds(race_id, snail_number):\n    r = __get_race(race_id)\n    s = __get_snail(race_id, snail_number)\n    total_pot = __to_dec(r['total_pot'])\n    tb = __to_dec(s['total_bets'])\n    if total_pot == decimal('0') or tb == decimal('0'):\n        return 'Even'\n    implied = tb / total_pot\n    if implied > decimal('0'):\n        payout = (decimal('1') - __to_dec(__house_fee.get())) / implied\n        q = payout.quantize(decimal('0.01'))\n        return str(q) + 'x'\n    return 'Even'\n\n\ndef __update_all_odds(race_id):\n    r = __get_race(race_id)\n    for i in range(1, r['num_snails'] + 1):\n        odds = __calculate_odds(race_id, i)\n        s = __get_snail(race_id, i)\n        __snail_odds[race_id, i] = odds\n        __OddsUpdated({'race_id': race_id, 'snail': i, 'odds': odds,\n            'total_bets': __to_dec(s['total_bets'])})\n\n\ndef __update_player_stats(player, won, bet_amount, payout):\n    s = __player_stats[player]\n    if s is None:\n        s = {'races': 0, 'wins': 0, 'total_bet': decimal('0'), 'total_won':\n            decimal('0'), 'profit': decimal('0')}\n    s['races'] = s['races'] + 1\n    s['total_bet'] = __to_dec(s['total_bet']) + __to_dec(bet_amount)\n    if won:\n        s['wins'] = s['wins'] + 1\n        s['total_won'] = __to_dec(s['total_won']) + __to_dec(payout)\n        s['profit'] = __to_dec(s['profit']) + (__to_dec(payout) - __to_dec(\n            bet_amount))\n    else:\n        s['profit'] = __to_dec(s['profit']) - __to_dec(bet_amount)\n    __player_stats[player] = s\n\n\ndef __distribute_winnings(race_id, winner):\n    r = __get_race(race_id)\n    currency = importlib.import_module('currency')\n    total_pot = __to_dec(r['total_pot'])\n    fee = total_pot * __to_dec(__house_fee.get())\n    pool = total_pot - fee\n    winners = []\n    payouts = {}\n    winners_total = decimal('0')\n    distributed = decimal('0')\n    today = str(now.date())\n    players = __race_players[race_id]\n    if players is None:\n        players = []\n    for p in players:\n        b = __get_bet(race_id, p)\n        if b is not None and b['snail'] == winner:\n            winners.append(p)\n            winners_total = winners_total + __to_dec(b['amount'])\n    if len(winners) > 0 and winners_total > decimal('0'):\n        for p in winners:\n            b = __get_bet(race_id, p)\n            share = __to_dec(b['amount']) / winners_total\n            pay = (pool * share).quantize(decimal('0.00000001'))\n            profit = pay - __to_dec(b['amount'])\n            currency.transfer(amount=pay, to=p)\n            distributed = distributed + pay\n            payouts[p] = {'amount': pay, 'profit': profit, 'bet': __to_dec(\n                b['amount'])}\n            __update_player_stats(p, True, __to_dec(b['amount']), pay)\n            if __daily_winners[today, p] is None:\n                __daily_winners[today, p] = decimal('0')\n            __daily_winners[today, p] = __to_dec(__daily_winners[today, p]\n                ) + pay\n            __PlayerWon({'player': p, 'race_id': race_id, 'amount_won': pay,\n                'profit': profit})\n    __race_winners[race_id] = {'winning_snail': winner, 'players': winners,\n        'payouts': payouts, 'total_payout': distributed}\n    for p in players:\n        if p not in winners:\n            b = __get_bet(race_id, p)\n            if b is not None:\n                __update_player_stats(p, False, __to_dec(b['amount']),\n                    decimal('0'))\n    return distributed\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __race_counter.set(0)\n    __min_bet.set(decimal('1'))\n    __max_bet.set(decimal('100'))\n    __min_snails.set(3)\n    __max_snails.set(6)\n    __house_fee.set(decimal('0.05'))\n    __race_checkpoints.set(5)\n    __betting_period.set(120)\n    __total_races.set(0)\n    __total_volume.set(decimal('0'))\n    __active_race.set(0)\n\n\n@__export('con_race2')\ndef start_race(num_snails: int):\n    assert ctx.caller == __owner.get(), 'Solo owner'\n    assert __active_race.get() == 0, 'Carrera activa'\n    assert num_snails >= __min_snails.get(), 'Pocos caracoles'\n    assert num_snails <= __max_snails.get(), 'Demasiados caracoles'\n    race_id = __race_counter.get() + 1\n    __race_counter.set(race_id)\n    __active_race.set(race_id)\n    created_at = __now_iso()\n    deadline = __iso_to_dt(created_at) + datetime.timedelta(seconds=\n        __betting_period.get())\n    __races[race_id] = {'num_snails': num_snails, 'state': 'betting',\n        'created_at': created_at, 'betting_deadline': str(deadline),\n        'total_pot': decimal('0'), 'winner': None, 'total_bets': 0,\n        'player_count': 0}\n    __race_players[race_id] = []\n    __seed_for_race(race_id)\n    for i in range(1, num_snails + 1):\n        __race_snails[race_id, i] = {'number': i, 'speed': random.randint(3,\n            8), 'acceleration': random.randint(1, 5), 'stamina': random.\n            randint(5, 10), 'consistency': random.randint(3, 8), 'luck':\n            random.randint(1, 5), 'position': 0, 'total_bets': decimal('0'),\n            'bet_count': 0}\n        __snail_odds[race_id, i] = 'Even'\n    __RaceStarted({'race_id': race_id, 'snail_count': num_snails,\n        'timestamp': created_at})\n    return race_id\n\n\n@__export('con_race2')\ndef place_bet(snail_number: int, amount: str):\n    race_id = __active_race.get()\n    assert race_id > 0, 'Sin carrera activa'\n    r = __get_race(race_id)\n    assert r['state'] == 'betting', 'Apuestas cerradas'\n    deadline = __iso_to_dt(r['betting_deadline'])\n    assert now <= deadline, 'Periodo de apuestas termin\u00f3'\n    amt = __to_dec(amount)\n    assert amt >= __to_dec(__min_bet.get()), 'Apuesta baja'\n    assert amt <= __to_dec(__max_bet.get()), 'Apuesta alta'\n    assert 1 <= snail_number <= r['num_snails'], 'Caracol inv\u00e1lido'\n    b = __get_bet(race_id, ctx.caller)\n    currency = importlib.import_module('currency')\n    if b is None:\n        currency.transfer_from(amount=amt, to=ctx.this, main_account=ctx.caller\n            )\n        __race_bets[race_id, ctx.caller] = {'snail': snail_number, 'amount':\n            amt, 'timestamp': __now_iso()}\n        r['total_pot'] = __to_dec(r['total_pot']) + amt\n        r['total_bets'] = r['total_bets'] + 1\n        r['player_count'] = r['player_count'] + 1\n        __append_player(race_id, ctx.caller)\n        s = __get_snail(race_id, snail_number)\n        s['total_bets'] = __to_dec(s['total_bets']) + amt\n        s['bet_count'] = s['bet_count'] + 1\n        __race_snails[race_id, snail_number] = s\n    else:\n        assert b['snail'] == snail_number, 'No puedes cambiar de caracol'\n        assert amt > __to_dec(b['amount']), 'Debes aumentar'\n        additional = amt - __to_dec(b['amount'])\n        currency.transfer_from(amount=additional, to=ctx.this, main_account\n            =ctx.caller)\n        b['amount'] = amt\n        __race_bets[race_id, ctx.caller] = b\n        r['total_pot'] = __to_dec(r['total_pot']) + additional\n        s = __get_snail(race_id, snail_number)\n        s['total_bets'] = __to_dec(s['total_bets']) + additional\n        __race_snails[race_id, snail_number] = s\n    __races[race_id] = r\n    __update_all_odds(race_id)\n    __total_volume.set(__to_dec(__total_volume.get()) + amt)\n    return {'bet_placed': True, 'snail': snail_number, 'amount': str(amt),\n        'current_odds': __calculate_odds(race_id, snail_number)}\n\n\n@__export('con_race2')\ndef run_race():\n    race_id = __active_race.get()\n    assert race_id > 0, 'Sin carrera activa'\n    assert ctx.caller == __owner.get(), 'Solo owner'\n    r = __get_race(race_id)\n    assert r['state'] == 'betting', 'Estado inv\u00e1lido'\n    deadline = __iso_to_dt(r['betting_deadline'])\n    assert now > deadline, 'A\u00fan en periodo de apuestas'\n    assert r['total_bets'] > 0, 'No hay apuestas'\n    r['state'] = 'racing'\n    __races[race_id] = r\n    __seed_for_race(race_id)\n    cps = __race_checkpoints.get()\n    finish_line = 100\n    for cp in range(1, cps + 1):\n        positions = {}\n        for sn in range(1, r['num_snails'] + 1):\n            s = __get_snail(race_id, sn)\n            progress = cp / cps\n            if progress <= decimal('0.3'):\n                speed_mod = s['acceleration'] / 5\n            elif progress <= decimal('0.7'):\n                speed_mod = decimal('1.0')\n            else:\n                speed_mod = s['stamina'] / 10\n            base_move = s['speed'] * speed_mod\n            consistency = s['consistency'] / 10\n            random_factor = random.randint(-3, 3) * (1 - consistency)\n            if random.randint(1, 20) <= s['luck']:\n                base_move = base_move * decimal('1.5')\n            move = max(1, int(base_move + random_factor))\n            new_pos = min(finish_line, int(s['position']) + move)\n            s['position'] = new_pos\n            positions[sn] = new_pos\n            __race_snails[race_id, sn] = s\n        __race_progress[race_id, cp] = positions\n    winner = 1\n    max_pos = -1\n    for sn in range(1, r['num_snails'] + 1):\n        pos = __get_snail(race_id, sn)['position']\n        if pos >= max_pos:\n            max_pos = pos\n            winner = sn\n    r['state'] = 'finished'\n    r['winner'] = winner\n    r['finished_at'] = __now_iso()\n    __races[race_id] = r\n    total_payout = __distribute_winnings(race_id, winner)\n    __active_race.set(0)\n    __total_races.set(__total_races.get() + 1)\n    __RaceFinished({'race_id': race_id, 'winner_snail': winner, 'timestamp':\n        r['finished_at'], 'total_payout': __to_dec(total_payout)})\n    return {'winner': winner, 'total_payout': str(__to_dec(total_payout)),\n        'checkpoints': get_race_checkpoints(race_id)}\n\n\n@__export('con_race2')\ndef get_race_checkpoints(race_id: int):\n    __get_race(race_id)\n    res = []\n    for i in range(1, __race_checkpoints.get() + 1):\n        data = __race_progress[race_id, i]\n        if data is not None:\n            res.append({'checkpoint': i, 'positions': data})\n    return res\n\n\n@__export('con_race2')\ndef get_live_odds():\n    race_id = __active_race.get()\n    if race_id == 0:\n        return {'active': False}\n    r = __get_race(race_id)\n    if r['state'] != 'betting':\n        return {'active': False, 'reason': 'Betting closed'}\n    odds_data = []\n    for i in range(1, r['num_snails'] + 1):\n        s = __get_snail(race_id, i)\n        odds_data.append({'snail': i, 'odds': __calculate_odds(race_id, i),\n            'total_bets': str(__to_dec(s['total_bets'])), 'bet_count': s[\n            'bet_count']})\n    remaining = max(0, int((__iso_to_dt(r['betting_deadline']) - now).\n        total_seconds()))\n    return {'active': True, 'race_id': race_id, 'total_pot': str(__to_dec(r\n        ['total_pot'])), 'total_bets': r['total_bets'], 'player_count': r[\n        'player_count'], 'odds': odds_data, 'time_remaining': remaining}\n\n\n@__export('con_race2')\ndef get_winners_by_date(start_date: str, end_date: str):\n    start = __iso_to_dt(start_date)\n    end = __iso_to_dt(end_date)\n    agg = {}\n    for rid in range(1, __race_counter.get() + 1):\n        rr = __races[rid]\n        if rr is None or rr.get('state') != 'finished':\n            continue\n        rdt = __iso_to_dt(rr['finished_at'])\n        if not start <= rdt <= end:\n            continue\n        rw = __race_winners[rid]\n        if rw is None:\n            continue\n        for p in rw['players']:\n            if p not in agg:\n                agg[p] = {'total_won': decimal('0'), 'races_won': 0,\n                    'total_profit': decimal('0')}\n            pt = rw['payouts'][p]\n            agg[p]['total_won'] = agg[p]['total_won'] + __to_dec(pt['amount'])\n            agg[p]['total_profit'] = agg[p]['total_profit'] + __to_dec(pt[\n                'profit'])\n            agg[p]['races_won'] = agg[p]['races_won'] + 1\n    lst = []\n    for p, d in agg.items():\n        lst.append({'player': p, 'total_won': str(d['total_won']),\n            'races_won': d['races_won'], 'total_profit': str(d[\n            'total_profit']), '_sort': d['total_won']})\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if lst[j]['_sort'] < lst[j + 1]['_sort']:\n                tmp = lst[j]\n                lst[j] = lst[j + 1]\n                lst[j + 1] = tmp\n    for x in lst:\n        del x['_sort']\n    return {'start_date': start_date, 'end_date': end_date, 'winners': lst}\n\n\n@__export('con_race2')\ndef get_my_stats():\n    s = __player_stats[ctx.caller]\n    if s is None:\n        return {'races': 0, 'wins': 0, 'total_bet': '0', 'total_won': '0',\n            'profit': '0', 'win_rate': '0.0'}\n    races_cnt = s['races']\n    win_rate = s['wins'] / races_cnt * decimal('100.0'\n        ) if races_cnt > 0 else decimal('0.0')\n    return {'races': s['races'], 'wins': s['wins'], 'total_bet': str(\n        __to_dec(s['total_bet'])), 'total_won': str(__to_dec(s['total_won']\n        )), 'profit': str(__to_dec(s['profit'])), 'win_rate': format(\n        win_rate, '.1f')}\n\n\n@__export('con_race2')\ndef get_race_info(race_id: int):\n    r = __races[race_id]\n    if r is None:\n        return None\n    snails = []\n    for i in range(1, r['num_snails'] + 1):\n        s = __race_snails[race_id, i]\n        if s is not None:\n            snails.append({'number': i, 'total_bets': str(__to_dec(s[\n                'total_bets'])), 'bet_count': s['bet_count'],\n                'final_position': s['position'] if r['state'] == 'finished'\n                 else 0})\n    return {'race_id': race_id, 'state': r['state'], 'num_snails': r[\n        'num_snails'], 'total_pot': str(__to_dec(r['total_pot'])),\n        'total_bets': r['total_bets'], 'player_count': r['player_count'],\n        'winner': r['winner'], 'snails': snails, 'created_at': r[\n        'created_at'], 'finished_at': r.get('finished_at', None)}\n\n\n@__export('con_race2')\ndef set_race_params(checkpoints: int, betting_time: int):\n    assert ctx.caller == __owner.get(), 'Solo owner'\n    assert 3 <= checkpoints <= 10, 'Checkpoints 3-10'\n    assert 60 <= betting_time <= 300, 'Tiempo 60-300s'\n    __race_checkpoints.set(checkpoints)\n    __betting_period.set(betting_time)\n\n\n@__export('con_race2')\ndef set_bet_limits(min_amount: str, max_amount: str):\n    assert ctx.caller == __owner.get(), 'Solo owner'\n    mn = __to_dec(min_amount)\n    mx = __to_dec(max_amount)\n    assert mn > decimal('0'), 'Min > 0'\n    assert mx > mn, 'Max > Min'\n    __min_bet.set(mn)\n    __max_bet.set(mx)\n\n\n@__export('con_race2')\ndef withdraw_fees(amount: str):\n    assert ctx.caller == __owner.get(), 'Solo owner'\n    amt = __to_dec(amount)\n    currency = importlib.import_module('currency')\n    currency.transfer(amount=amt, to=__owner.get())\n"
            },
            {
                "key": "con_race2.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_race2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        20,
                        15,
                        55,
                        0
                    ]
                }
            },
            {
                "key": "con_race2.active_race",
                "value": 0
            },
            {
                "key": "con_race2.betting_period",
                "value": 120
            },
            {
                "key": "con_race2.house_fee",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "con_race2.max_bet",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_race2.max_snails",
                "value": 6
            },
            {
                "key": "con_race2.min_bet",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_race2.min_snails",
                "value": 3
            },
            {
                "key": "con_race2.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_race2.race_checkpoints",
                "value": 5
            },
            {
                "key": "con_race2.race_counter",
                "value": 0
            },
            {
                "key": "con_race2.total_races",
                "value": 0
            },
            {
                "key": "con_race2.total_volume",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_ref.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_ref', name='balances')\n__t_balances = Hash(default_value=0, contract='con_ref', name='t_balances')\n__metadata = Hash(contract='con_ref', name='metadata')\n__excluded = Hash(default_value=False, contract='con_ref', name='excluded')\n__r_total = Variable(contract='con_ref', name='r_total')\n__t_total = Variable(contract='con_ref', name='t_total')\n__approved = Hash(default_value=0, contract='con_ref', name='approved')\nBURN_BPS = 200\nREFLECTION_BPS = 300\nTOTAL_BPS = 10000\nBURN_ADDRESS = '0' * 64\n\n\ndef ____():\n    initial_supply = 100000000\n    r_initial = initial_supply * 10 ** 18\n    __balances[ctx.caller] = r_initial\n    __r_total.set(r_initial)\n    __t_total.set(initial_supply)\n    __excluded[ctx.this] = True\n    __excluded[BURN_ADDRESS] = True\n    __t_balances[BURN_ADDRESS] = 0\n    __metadata['token_name'] = 'REFLECT TOKEN'\n    __metadata['token_symbol'] = 'RFT'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_ref')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can change metadata!'\n    __metadata[key] = value\n\n\n@__export('con_ref')\ndef transfer(amount: int, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    from_excluded = __excluded[ctx.caller]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() * TOTAL_BPS // __t_total.get()\n    if not from_excluded:\n        assert __balances[ctx.caller\n            ] >= amount * rate // TOTAL_BPS, 'Not enough coins to send!'\n        r_amount = amount * rate // TOTAL_BPS\n    else:\n        assert __t_balances[ctx.caller] >= amount, 'Not enough coins to send!'\n        r_amount = amount * rate // TOTAL_BPS\n    burn_amount = amount * BURN_BPS // TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS // TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[ctx.caller] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[ctx.caller] -= amount\n            __balances[to] += transfer_amount * rate // TOTAL_BPS\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[ctx.caller] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[ctx.caller] -= r_amount\n        __balances[to] += transfer_amount * rate // TOTAL_BPS\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount - reflection_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) *\n        rate // TOTAL_BPS)\n    return f'Transferred {amount}'\n\n\n@__export('con_ref')\ndef approve(amount: int, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    __approved[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_ref')\ndef transfer_from(amount: int, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __approved[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved!'\n    from_excluded = __excluded[main_account]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() * TOTAL_BPS // __t_total.get()\n    if not from_excluded:\n        assert __balances[main_account\n            ] >= amount * rate // TOTAL_BPS, 'Not enough coins!'\n        r_amount = amount * rate // TOTAL_BPS\n    else:\n        assert __t_balances[main_account] >= amount, 'Not enough coins!'\n        r_amount = amount * rate // TOTAL_BPS\n    burn_amount = amount * BURN_BPS // TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS // TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    __approved[main_account, ctx.caller] -= amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[main_account] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[main_account] -= amount\n            __balances[to] += transfer_amount * rate // TOTAL_BPS\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[main_account] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[main_account] -= r_amount\n        __balances[to] += transfer_amount * rate // TOTAL_BPS\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount - reflection_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) *\n        rate // TOTAL_BPS)\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_ref')\ndef balance_of(address: str):\n    if __excluded[address]:\n        return __t_balances[address]\n    return __balances[address] * __t_total.get() // __r_total.get()\n\n\n@__export('con_ref')\ndef allowance(owner: str, spender: str):\n    return __approved[owner, spender]\n\n\n@__export('con_ref')\ndef get_total_supply():\n    return __t_total.get()\n\n\n@__export('con_ref')\ndef exclude_from_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can exclude!'\n    assert not __excluded[address], 'Address already excluded!'\n    __excluded[address] = True\n    t_amount = balance_of(address)\n    __balances[address] = 0\n    __t_balances[address] = t_amount\n\n\n@__export('con_ref')\ndef include_in_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can include!'\n    assert __excluded[address], 'Address not excluded!'\n    t_amount = __t_balances[address]\n    rate = __r_total.get() * TOTAL_BPS // __t_total.get()\n    __excluded[address] = False\n    __t_balances[address] = 0\n    __balances[address] = t_amount * rate // TOTAL_BPS\n"
            },
            {
                "key": "con_ref.__developer__",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_ref.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        1,
                        0,
                        0,
                        52,
                        0
                    ]
                }
            },
            {
                "key": "con_ref.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": {
                    "__big_int__": "47265433000000000000000000"
                }
            },
            {
                "key": "con_ref.balances:7fe83202b3130727ca8af23c25d282ccc0b6e49f1c5d57379175991bad1021f6",
                "value": {
                    "__big_int__": "1172839000000000000000000"
                }
            },
            {
                "key": "con_ref.balances:7fe83202b3130727ca8af23c25d282ccc0b6e49f1c5d57379175991bad1021f7",
                "value": {
                    "__big_int__": "475000000000000000000000"
                }
            },
            {
                "key": "con_ref.balances:8bf21c7dc3a4ff32996bf56a665e1efe3c9261cc95bbf82552c328585c863829",
                "value": {
                    "__big_int__": "950000000000000000000000"
                }
            },
            {
                "key": "con_ref.balances:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f8",
                "value": {
                    "__big_int__": "47500000000000000000000000"
                }
            },
            {
                "key": "con_ref.excluded:0000000000000000000000000000000000000000000000000000000000000000",
                "value": true
            },
            {
                "key": "con_ref.excluded:submission",
                "value": true
            },
            {
                "key": "con_ref.metadata:operator",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_ref.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_ref.metadata:token_name",
                "value": "REFLECT TOKEN"
            },
            {
                "key": "con_ref.metadata:token_symbol",
                "value": "RFT"
            },
            {
                "key": "con_ref.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_ref.r_total",
                "value": {
                    "__big_int__": "97363272000000000000000000"
                }
            },
            {
                "key": "con_ref.t_balances:0000000000000000000000000000000000000000000000000000000000000000",
                "value": 1054691
            },
            {
                "key": "con_ref.t_total",
                "value": 97363272
            },
            {
                "key": "con_reflec.__code__",
                "value": "__balances = Hash(default_value=decimal('0'), contract='con_reflec', name=\n    'balances')\n__t_balances = Hash(default_value=decimal('0'), contract='con_reflec', name\n    ='t_balances')\n__metadata = Hash(contract='con_reflec', name='metadata')\n__excluded = Hash(default_value=False, contract='con_reflec', name='excluded')\n__r_total = Variable(contract='con_reflec', name='r_total')\n__t_total = Variable(contract='con_reflec', name='t_total')\n__approved = Hash(default_value=decimal('0'), contract='con_reflec', name=\n    'approved')\nBURN_BPS = decimal('200')\nREFLECTION_BPS = decimal('300')\nTOTAL_BPS = decimal('10000')\nBURN_ADDRESS = '0' * 64\n\n\ndef ____(initial_supply: int):\n    initial_supply = decimal(initial_supply)\n    r_initial = initial_supply * decimal('1000000000000000000')\n    __balances[ctx.caller] = r_initial\n    __r_total.set(r_initial)\n    __t_total.set(initial_supply)\n    __excluded[ctx.this] = True\n    __excluded[BURN_ADDRESS] = True\n    __t_balances[BURN_ADDRESS] = decimal('0')\n    __metadata['token_name'] = 'REFLECT TOKEN'\n    __metadata['token_symbol'] = 'RFT'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_reflec')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can change metadata!'\n    __metadata[key] = value\n\n\n@__export('con_reflec')\ndef transfer(amount: float, to: str):\n    assert decimal(amount) > decimal('0'), 'Cannot send negative balances!'\n    from_excluded = __excluded[ctx.caller]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() / __t_total.get()\n    if not from_excluded:\n        assert __balances[ctx.caller\n            ] >= amount * rate, 'Not enough coins to send!'\n        r_amount = amount * rate\n    else:\n        assert __t_balances[ctx.caller] >= amount, 'Not enough coins to send!'\n        r_amount = amount * rate\n    burn_amount = amount * BURN_BPS / TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS / TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[ctx.caller] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[ctx.caller] -= amount\n            __balances[to] += transfer_amount * rate\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[ctx.caller] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[ctx.caller] -= r_amount\n        __balances[to] += transfer_amount * rate\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) * rate)\n    return f'Transferred {amount}'\n\n\n@__export('con_reflec')\ndef approve(amount: float, to: str):\n    assert decimal(amount) > decimal('0'), 'Cannot approve negative balances!'\n    __approved[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_reflec')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert decimal(amount) > decimal('0'), 'Cannot send negative balances!'\n    assert __approved[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved!'\n    from_excluded = __excluded[main_account]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() / __t_total.get()\n    if not from_excluded:\n        assert __balances[main_account] >= amount * rate, 'Not enough coins!'\n        r_amount = amount * rate\n    else:\n        assert __t_balances[main_account] >= amount, 'Not enough coins!'\n        r_amount = amount * rate\n    burn_amount = amount * BURN_BPS / TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS / TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    __approved[main_account, ctx.caller] -= amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[main_account] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[main_account] -= amount\n            __balances[to] += transfer_amount * rate\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[main_account] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[main_account] -= r_amount\n        __balances[to] += transfer_amount * rate\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) * rate)\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_reflec')\ndef balance_of(address: str):\n    if __excluded[address]:\n        return __t_balances[address]\n    return __balances[address] * __t_total.get() / __r_total.get()\n\n\n@__export('con_reflec')\ndef allowance(owner: str, spender: str):\n    return __approved[owner, spender]\n\n\n@__export('con_reflec')\ndef get_total_supply():\n    return __t_total.get()\n\n\n@__export('con_reflec')\ndef exclude_from_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can exclude!'\n    assert not __excluded[address], 'Address already excluded!'\n    __excluded[address] = True\n    t_amount = balance_of(address)\n    __balances[address] = decimal('0')\n    __t_balances[address] = t_amount\n\n\n@__export('con_reflec')\ndef include_in_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can include!'\n    assert __excluded[address], 'Address not excluded!'\n    t_amount = __t_balances[address]\n    rate = __r_total.get() / __t_total.get()\n    __excluded[address] = False\n    __t_balances[address] = decimal('0')\n    __balances[address] = t_amount * rate\n"
            },
            {
                "key": "con_reflec.__developer__",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_reflec.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        6,
                        22,
                        41,
                        44,
                        0
                    ]
                }
            },
            {
                "key": "con_reflec.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": {
                    "__fixed__": "1E+26"
                }
            },
            {
                "key": "con_reflec.excluded:0000000000000000000000000000000000000000000000000000000000000000",
                "value": true
            },
            {
                "key": "con_reflec.excluded:submission",
                "value": true
            },
            {
                "key": "con_reflec.metadata:operator",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_reflec.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_reflec.metadata:token_name",
                "value": "REFLECT TOKEN"
            },
            {
                "key": "con_reflec.metadata:token_symbol",
                "value": "RFT"
            },
            {
                "key": "con_reflec.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_reflec.r_total",
                "value": {
                    "__fixed__": "1E+26"
                }
            },
            {
                "key": "con_reflec.t_balances:0000000000000000000000000000000000000000000000000000000000000000",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_reflec.t_total",
                "value": {
                    "__fixed__": "1E+8"
                }
            },
            {
                "key": "con_reflection.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_reflection', name='balances')\n__t_balances = Hash(default_value=0, contract='con_reflection', name=\n    't_balances')\n__metadata = Hash(contract='con_reflection', name='metadata')\n__excluded = Hash(default_value=False, contract='con_reflection', name=\n    'excluded')\n__r_total = Variable(contract='con_reflection', name='r_total')\n__t_total = Variable(contract='con_reflection', name='t_total')\n__approved = Hash(default_value=0, contract='con_reflection', name='approved')\nBURN_BPS = 200\nREFLECTION_BPS = 300\nTOTAL_BPS = 10000\nBURN_ADDRESS = '0' * 64\n\n\ndef ____():\n    initial_supply = 100000000\n    r_initial = initial_supply * 10 ** 18\n    __balances[ctx.caller] = r_initial\n    __r_total.set(r_initial)\n    __t_total.set(initial_supply)\n    __excluded[ctx.this] = True\n    __excluded[BURN_ADDRESS] = True\n    __t_balances[BURN_ADDRESS] = 0\n    __metadata['token_name'] = 'REFLECT TOKEN'\n    __metadata['token_symbol'] = 'RFT'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_reflection')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can change metadata!'\n    __metadata[key] = value\n\n\n@__export('con_reflection')\ndef transfer(amount: int, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    from_excluded = __excluded[ctx.caller]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() * TOTAL_BPS // __t_total.get()\n    if not from_excluded:\n        assert __balances[ctx.caller\n            ] >= amount * rate // TOTAL_BPS, 'Not enough coins to send!'\n        r_amount = amount * rate // TOTAL_BPS\n    else:\n        assert __t_balances[ctx.caller] >= amount, 'Not enough coins to send!'\n        r_amount = amount * rate // TOTAL_BPS\n    burn_amount = amount * BURN_BPS // TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS // TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[ctx.caller] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[ctx.caller] -= amount\n            __balances[to] += transfer_amount * rate // TOTAL_BPS\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[ctx.caller] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[ctx.caller] -= r_amount\n        __balances[to] += transfer_amount * rate // TOTAL_BPS\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) *\n        rate // TOTAL_BPS)\n    return f'Transferred {amount}'\n\n\n@__export('con_reflection')\ndef approve(amount: int, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    __approved[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_reflection')\ndef transfer_from(amount: int, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __approved[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved!'\n    from_excluded = __excluded[main_account]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() * TOTAL_BPS // __t_total.get()\n    if not from_excluded:\n        assert __balances[main_account\n            ] >= amount * rate // TOTAL_BPS, 'Not enough coins!'\n        r_amount = amount * rate // TOTAL_BPS\n    else:\n        assert __t_balances[main_account] >= amount, 'Not enough coins!'\n        r_amount = amount * rate // TOTAL_BPS\n    burn_amount = amount * BURN_BPS // TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS // TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    __approved[main_account, ctx.caller] -= amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[main_account] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[main_account] -= amount\n            __balances[to] += transfer_amount * rate // TOTAL_BPS\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[main_account] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[main_account] -= r_amount\n        __balances[to] += transfer_amount * rate // TOTAL_BPS\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) *\n        rate // TOTAL_BPS)\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_reflection')\ndef balance_of(address: str):\n    if __excluded[address]:\n        return __t_balances[address]\n    return __balances[address] * __t_total.get() // __r_total.get()\n\n\n@__export('con_reflection')\ndef allowance(owner: str, spender: str):\n    return __approved[owner, spender]\n\n\n@__export('con_reflection')\ndef get_total_supply():\n    return __t_total.get()\n\n\n@__export('con_reflection')\ndef exclude_from_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can exclude!'\n    assert not __excluded[address], 'Address already excluded!'\n    __excluded[address] = True\n    t_amount = balance_of(address)\n    __balances[address] = 0\n    __t_balances[address] = t_amount\n\n\n@__export('con_reflection')\ndef include_in_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can include!'\n    assert __excluded[address], 'Address not excluded!'\n    t_amount = __t_balances[address]\n    rate = __r_total.get() * TOTAL_BPS // __t_total.get()\n    __excluded[address] = False\n    __t_balances[address] = 0\n    __balances[address] = t_amount * rate // TOTAL_BPS\n"
            },
            {
                "key": "con_reflection.__developer__",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_reflection.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        1,
                        1,
                        17,
                        29,
                        0
                    ]
                }
            },
            {
                "key": "con_reflection.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": {
                    "__big_int__": "86160028325883692293126128"
                }
            },
            {
                "key": "con_reflection.balances:7fe83202b3130727ca8af23c25d282ccc0b6e49f1c5d57379175991bad1021f6",
                "value": {
                    "__big_int__": "11723116518511139459060117"
                }
            },
            {
                "key": "con_reflection.balances:7fe83202b3130727ca8af23c25d282ccc0b6e49f1c5d57379175991bad1021f7",
                "value": {
                    "__big_int__": "474857471494298859771952"
                }
            },
            {
                "key": "con_reflection.balances:8bf21c7dc3a4ff32996bf56a665e1efe3c9261cc95bbf82552c328585c863829",
                "value": {
                    "__big_int__": "950000000000000000000000"
                }
            },
            {
                "key": "con_reflection.excluded:0000000000000000000000000000000000000000000000000000000000000000",
                "value": true
            },
            {
                "key": "con_reflection.excluded:submission",
                "value": true
            },
            {
                "key": "con_reflection.metadata:operator",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_reflection.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_reflection.metadata:token_name",
                "value": "REFLECT TOKEN"
            },
            {
                "key": "con_reflection.metadata:token_symbol",
                "value": "RFT"
            },
            {
                "key": "con_reflection.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_reflection.r_total",
                "value": {
                    "__big_int__": "99308002315889130611958198"
                }
            },
            {
                "key": "con_reflection.t_balances:0000000000000000000000000000000000000000000000000000000000000000",
                "value": 276913
            },
            {
                "key": "con_reflection.t_total",
                "value": 99723087
            },
            {
                "key": "con_relay.__code__",
                "value": "__transactions = Hash(default_value=None, contract='con_relay', name=\n    'transactions')\n__relayer = Variable(contract='con_relay', name='relayer')\n__tx_count = Variable(contract='con_relay', name='tx_count')\n\n\ndef ____():\n    __tx_count.set(0)\n    __relayer.set(ctx.caller)\n\n\n@__export('con_relay')\ndef add_tx(tx_data: dict):\n    assert tx_data != {}, \"Data can't be empty\"\n    assert ctx.caller == __relayer.get(\n        ), 'Only the relayer can add transactions'\n    tx_counter = __tx_count.get() + 1\n    __transactions[tx_counter] = tx_data\n    __tx_count.set(tx_counter)\n"
            },
            {
                "key": "con_relay.__developer__",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_relay.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        19,
                        16,
                        51,
                        55,
                        0
                    ]
                }
            },
            {
                "key": "con_relay.relayer",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_relay.transactions:1",
                "value": {
                    "accessList": [],
                    "blockHash": "0x8cf8759be48025a271de60677642dee15dec6273a30843cba0ef35e20b80afb9",
                    "blockNumber": "0x2e2c497",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x69fe2561bd7b1d66d3ecf5553080c9c36beac65360c3cf6702894b1a867fb0ad",
                    "input": "0xa9059cbb00000000000000000000000020516c76848f88a1255c782cf911efacc8e9f8d0000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd72",
                    "r": "0x48dd3e13c14f8bbdef70bc9d51176a8921745520722dc511b1178d6c3558290e",
                    "s": "0x47163605125a33d103d722a3abd2e77c2d1b2dfd15bafb991f88be0a09a93de6",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:10",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4f3492715fda6404ef0ddcd6f68f9a1a2088d5bb68d808d221a8549835935eba",
                    "blockNumber": "0x2e2c522",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9a04e3e814038d920f110b03e250db30ca7dbd8057bcdfba163da4091fb5a0e3",
                    "input": "0xa9059cbb00000000000000000000000040f2333d20b4ea29477f2ea47d2c18d3cb94f489000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd7e",
                    "r": "0x5eecd83426f5004fe66db58d96a0221fa66e01fd2d7181f7cf6a854aecf4405e",
                    "s": "0x5a66504c9bb8a8a9b2f820f14d543bfbbf5e5338fb23ba8578caf5765dae4e78",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:100",
                "value": {
                    "accessList": [],
                    "blockHash": "0xec0139f90252f0dfd7bec0c796315038a00bd53120d805a370c4bcc0294d9b54",
                    "blockNumber": "0x2e2c8e6",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9f8c70338bdc9c673472bfd34cf32b09543ad6ae6feec7fd97a42b0673061912",
                    "input": "0xa9059cbb000000000000000000000000b79e1f28e3ec2974deb239003e6609fc584d40b4000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde5",
                    "r": "0x3d19c92cc40370f7ce3fc0c1edf123e9a945abb94ceb12aafaa05317b28a6fb8",
                    "s": "0x33693714b8a5fcb9d683b4d879a44bf059f52ff942a3441bd885217b2c1a8d67",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:101",
                "value": {
                    "accessList": [],
                    "blockHash": "0x91b690602d81fe01104fc7e408e40170594665d5eced20bac344e31377aed5c8",
                    "blockNumber": "0x2e2c8f5",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xaaa0df36bd9bd08b5e37813c1505be5cd0c21ee5b589b08cd60350d364002e46",
                    "input": "0xa9059cbb0000000000000000000000001a4b8e639ca71766f641a51768dfff8340fe1a8c000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde7",
                    "r": "0x4264dff519feb00c62d5ca2c2b9a619d2ab21d5bcecfe19d22e9f3c69de76e5a",
                    "s": "0x76f00b825ecbba50daf4a3bf86db6608aa5374f1a5f43755ab69baa004067e0c",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:102",
                "value": {
                    "accessList": [],
                    "blockHash": "0x94a51e803894768657d1abd0994619d66a5ce1f65dab73dff22a589c1058fd92",
                    "blockNumber": "0x2e2c8f7",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa19e9fa6f2849ba001640a90f5b676efc1de5649e119bcded6ba90340ab990ad",
                    "input": "0xa9059cbb00000000000000000000000052422b8dce70990b6aa0f523e99f9883009456d6000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde8",
                    "r": "0xe9313e3f8eb7f8f1df8e0a71e6946c0493240f5a76ee80ca966f01b471cb030",
                    "s": "0x3a22df0cc14a3078711cae76ab7e9505b644a243ff03468ec54915a35b98784f",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:103",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7a46e97de0bce2ee9b625648c465bf17b5330a36a1551ba62d9af495d314fee4",
                    "blockNumber": "0x2e2c905",
                    "chainId": "0x61",
                    "from": "0x1a4b8e639ca71766f641a51768dfff8340fe1a8c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1ac25556a6dabc2a7d568a9f0a0cf39175acb94afb081e6d7a60a755efd5ba0e",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000001a4b8e639ca71766f641a51768dfff8340fe1a8c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x13a",
                    "r": "0x7fd5fb5727490a9db9415becd9024e3c0322e3d095c52d2e03dfb7afaaeccd19",
                    "s": "0x2284b243ea79222140c7ee664a184809c00fe8f50a0b771947c6a46200d60a2d",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:104",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe9c5d5e264a184c097c305af83c339e07d6adc861480da0291ff79005755064a",
                    "blockNumber": "0x2e2c907",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe6170bc77144321a7b32d7a33e3aa4ba20a85cfe81ee8f1f1a7f2f9644a96cf0",
                    "input": "0xa9059cbb000000000000000000000000c63d9eef47d64e41f3b5c5f0697166c386575392000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde9",
                    "r": "0x52279c8ebec503e07006a4d4cffdd97ea6efc946f6133fd8beef77a9540e85c1",
                    "s": "0x3bd18a3568b1ec73727dcbf1b543bbfbc3d7a3ebfdef81f6a42aecca8437f3e5",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:105",
                "value": {
                    "accessList": [],
                    "blockHash": "0x23d0e9fdaa5b3412f0611cc666514a76ad67e30e51daf938f0e2fffc13807cbb",
                    "blockNumber": "0x2e2c90c",
                    "chainId": "0x61",
                    "from": "0x2f0c21ca931f5e712718c641082de9b35d0965b4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x482637ed39e2330990c5a51b8d922d8e1f8d6cf2683134bb6ada0d344c7b6323",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000002f0c21ca931f5e712718c641082de9b35d0965b4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x297",
                    "r": "0x2c5d74a8a8f8bab35e69e3448d0b17ba0b3bd0e76c2a7a1312ca5dbdb9728c6e",
                    "s": "0xa15727c1f45cce257964e94b6d6ca9a9aa9e39b73e041257d2350ca5924c2db",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:106",
                "value": {
                    "accessList": [],
                    "blockHash": "0x77d31ee33772e1607ee4c0ab61a1615d98fd11b2de62b5d7901e62cce5e62f72",
                    "blockNumber": "0x2e2c91c",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x6aa89a517d06f641ef8b2a28df640c129c64b85697e5aa765fa349825e848ccc",
                    "input": "0xa9059cbb000000000000000000000000453f6e24e5c4cf1e9654ca905eb89aab54c297c6000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddee",
                    "r": "0x9f70a4a9cfbc0292ad37061ed17038a9e7a3c1b8ea2fc73aa2a985e5d7a155",
                    "s": "0x40e3e294dba104a8c7a9dc4a665fbd4f46d31097cf334a6b73de91537e0710ec",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:107",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7626a53e92dd6820bf78a06281a8602eb17a4f2199b52130a3ca9040c2863a75",
                    "blockNumber": "0x2e2c92c",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd968a59ed610c6383027390760f24a8e453dc53161935366928d2c538ab3e6c0",
                    "input": "0xa9059cbb000000000000000000000000130ca1e9318296c164ff89434ccaf352f5db0872000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddf0",
                    "r": "0x8f9e77d58e8cf76e48ecd42ebf8edd5d902ef7e6d5c368f0e72b7b0026f15d03",
                    "s": "0x43bc360d991fddf22df7033dc0b78a8e52ec72898bdc6b60b114414ab65d8adb",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:108",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf3e46e709629e6a992b4d0540b2ad680fe7c6ece01e1bdc04fc312e91c54941c",
                    "blockNumber": "0x2e2c935",
                    "chainId": "0x61",
                    "from": "0x2f0c21ca931f5e712718c641082de9b35d0965b4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5aeb1e837748429c1cf149e85b9ae3b9211bb3fe6dbf957828928d793de2845a",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000002f0c21ca931f5e712718c641082de9b35d0965b4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x29b",
                    "r": "0x6a4f4f649d641ee4dec5db2047b2c4ef9aba09c58d3def8a2fa93f9a3ace4b49",
                    "s": "0x47441aa134a903db538772b676ca7f2b650777fbd41bc1497152d3253416f8fb",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x9",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:109",
                "value": {
                    "accessList": [],
                    "blockHash": "0x223256a4a9f856d59ca00f5d9cae45c5d31fde541e8c7eb909398415b7a883bc",
                    "blockNumber": "0x2e2c955",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8602f1d10482a103ebdcd10694c2baa875ff742fa75bd85d17143f1442688aba",
                    "input": "0xa9059cbb0000000000000000000000007e5893befb4413f79748d3aff87a575446c0e98f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddf2",
                    "r": "0x165ff36207a25f23513aa3e7528b33b6349086ed7fd75c69f0ce7a8c2b23961e",
                    "s": "0x78ab6c3aba9c5a701c3361ca7c2b69aaf58522c841fb04342719c4256db6185b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:11",
                "value": {
                    "accessList": [],
                    "blockHash": "0xefb32e7f8c3f53ae78f283d6b2476ca2239a28259b616db444aaef12c3fe51ee",
                    "blockNumber": "0x2e2c52b",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd881531652ba0cff708a26f613be8cb44a4c2798ed730e28fbc1c2e92bfbc0d2",
                    "input": "0xa9059cbb0000000000000000000000004750e6e1859e143b9c503d5dccbdd32a194bad73000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd7f",
                    "r": "0x3427ce60fba1fca385620ad9915894541ceb9d28db8d7f0cd7204541f663ce8b",
                    "s": "0x78aec6413585e105b01d3a8947fc06c3425ee46c480826397036915fa5b0de08",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:110",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd90ac8a373bbbb121ad901c005a271e0286e2d568deddba884b030073909ed77",
                    "blockNumber": "0x2e2c956",
                    "chainId": "0x61",
                    "from": "0x2f0c21ca931f5e712718c641082de9b35d0965b4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x18cbd7d424e96705fd4e3ec91cc78156b48eab3669dee180aedaa4688b76a919",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000002f0c21ca931f5e712718c641082de9b35d0965b4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x29f",
                    "r": "0x1c171223c479f468fbb3f0fab64004ab403e68635c200ba8fe912f07f4b5959e",
                    "s": "0x73e2445cfc0b53eb70f573f3fbd3bf9074ab102f6a14e53b175fcdaaead6478",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:111",
                "value": {
                    "accessList": [],
                    "blockHash": "0x1cf70b7b5b3940fa168f26296725e7e7aed3498c7997b48e1128121b0d29a6e7",
                    "blockNumber": "0x2e2c964",
                    "chainId": "0x61",
                    "from": "0x6e9b32bd3089d82e6fb2f24e1622b688b60ff09a",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa63958f26e37af497bbf94a5baa67b3bd4e768df7c9c36fef072090d1154b338",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000006e9b32bd3089d82e6fb2f24e1622b688b60ff09a",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xa",
                    "r": "0xf786234d2b228885615ac1c1f36ead84a14d0d3741b8b47e54f5fa75bc2a1f94",
                    "s": "0x4c27818ba27abba550b80b16ae17ea2935c3c068aecf79345b12391e71b80252",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:112",
                "value": {
                    "accessList": [],
                    "blockHash": "0x5c2c21617261fe50ed3d97835833037522b161756dc4fdb6b69d1e6074d4d5ef",
                    "blockNumber": "0x2e2c966",
                    "chainId": "0x61",
                    "from": "0x2f0c21ca931f5e712718c641082de9b35d0965b4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x55ed4b8349e1f4e627ca05f4146dcbe497fcdf89595349ea51787af2ebef9d8f",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000002f0c21ca931f5e712718c641082de9b35d0965b4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2a1",
                    "r": "0xaaa1d3f90f16e182b8f7c9034e649b12a27cc7ddc8cce95c94a78ed6e89ee844",
                    "s": "0x125b84d19f07229a70d9a6f57247bc7c5afd27171f0ab4e79b2973aaafeaafb0",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:113",
                "value": {
                    "accessList": [],
                    "blockHash": "0x57cb3f2ac6733bd1068a78ec50954966295ec76ad303ae3bafe09da7b463bd20",
                    "blockNumber": "0x2e2c985",
                    "chainId": "0x61",
                    "from": "0x2f0c21ca931f5e712718c641082de9b35d0965b4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2611016536646321d73f836f756f9f0a5f7d8893ae2d9cfe8bcf51eb9c8c42b5",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000002f0c21ca931f5e712718c641082de9b35d0965b4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2a3",
                    "r": "0x7533a442c0001318640312eb01caaa078368fa5da0d3861df425f3e5a38c35d1",
                    "s": "0x2057a851550a2975eab364e88ae55e6cd570368df10753bc677ac16045cf6469",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:114",
                "value": {
                    "accessList": [],
                    "blockHash": "0xdedb54de05db6fd300dfafdd0b63ab16ccc93f6547952aa0b556ce3424447305",
                    "blockNumber": "0x2e2c98a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x54c721513b6aa0c0d926db7fdac559da5c6c4ae60d4c689d86c4589d24fcae73",
                    "input": "0xa9059cbb000000000000000000000000581cf2419bc908cd7215b6d60deeac97683ff3d2000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddf8",
                    "r": "0x15a91743f7ad22fc30563a4f0db7cc54522c05596f0d8334a4bb974098fc7e8b",
                    "s": "0x73b2d0819b055724b9f34ff891429af37c69566fea0dd3396a76d93e86421cc8",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x7",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:115",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf4080da6b52ce23eac53c73c6eb49264ca6a5925509185f85057fdb10cdce4d4",
                    "blockNumber": "0x2e2c98b",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf350d883f804fe200fdcac785c01270cb64ffa683c373f6e1a6a16c5f4584c39",
                    "input": "0xa9059cbb000000000000000000000000fd851546fe85900764cc63aaec13495f4d87ebeb000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddf9",
                    "r": "0xfcd534b42cee55a27db1207dfad37e2034ef4ef72330bd9b26c2d08135483af2",
                    "s": "0x7c8723e6bd6475708557c5d061b56fa40243107d67c4a1bb14bab77d5cbd363d",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:116",
                "value": {
                    "accessList": [],
                    "blockHash": "0x3abdd5c9b0391f1199b1601d7553e618d9258dd5dca94e7248142494b235374c",
                    "blockNumber": "0x2e2c995",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x104268c6579ddddfbbfea0408d0e085a93484e9158141f2fd2d9f17cc59f6e02",
                    "input": "0xa9059cbb00000000000000000000000062c46e82a040093947784e17d490d81cf6a2a23c000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddfc",
                    "r": "0xa046882a6e6a6cd7c8e4ff9bda96a21e5c3a670500a217914942016bdc233b1b",
                    "s": "0x4d0d22f52575f53ca9077df06b745ea7b9bf6d9db5f16697601b2b48b0269066",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:117",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4251d8460cc0338cbf710686dbe812204c4fbd30320b151b51eaa7ea7faf7cdd",
                    "blockNumber": "0x2e2c9a2",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x241a3a0c8043d1eed2826f2d875718e47053dc467edad9ddf6747f140d768919",
                    "input": "0xa9059cbb000000000000000000000000498788e9d6eb7ae3972a035538d6ff012fc156c4000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddfe",
                    "r": "0x1727d7ed385bf116b5e5b5710c56d9acccdbabdc5730bf9e52b130ed0a8732a9",
                    "s": "0x475b6b9f62dad33d9d4b6758d387c3605e60ab5a790eba4f49c1ad5dad204ae4",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:118",
                "value": {
                    "accessList": [],
                    "blockHash": "0x0771b33af19ade024105b56fbba33365c9a49db1f5dd184ba3dcb409fcd5f597",
                    "blockNumber": "0x2e2c9a5",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5b733a31bfe878639070c37a280ece8a7781deac7e868d5f325910e991edfdb7",
                    "input": "0xa9059cbb000000000000000000000000af85c116f45057e90a5378e25f7591af9c8adb7f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddff",
                    "r": "0x41a2cf35445ac87347d64ceec3cf6b336763bffc7ab9856ac412d552e4e070f4",
                    "s": "0x4d653c74167c45b7166c696d4fba59551e8803bf506635b5ecc16c3df2dfeab7",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:119",
                "value": {
                    "accessList": [],
                    "blockHash": "0xfa81a89f7720dd6458de8a38a332dcd29a5ade7332fc2e85d8713b193750bc29",
                    "blockNumber": "0x2e2c9ab",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x6cee55e81f0e2137e25094611673027822504a9de3b3a956c1e2b36ce11ee227",
                    "input": "0xa9059cbb000000000000000000000000534a5fa71e99492e1999e8dab0f9ba0adb94c65a000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de01",
                    "r": "0x1da721c5e3848af58263fb1dcaccda35e1102f3b3701dee3dbb5073f0eaf7c2e",
                    "s": "0x27433326250b19ecac191ff3d6ebb599ef6f41bd85a2ad8237624613efa14071",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:12",
                "value": {
                    "accessList": [],
                    "blockHash": "0x5efb72e697e5fae557280a8d3e33e6fe329bcf9395b92378aa0b58a547587adf",
                    "blockNumber": "0x2e2c52c",
                    "chainId": "0x61",
                    "from": "0x295683dcda311500e3365107c1780d82e5a1df64",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1e4a60baa9f0dd6a302d6c13a58896b7b3343c2d3b752cf07484f4a6750eda53",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000001f86db21bca000000000000000000000000000295683dcda311500e3365107c1780d82e5a1df64",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x17",
                    "r": "0x819409bf13385787989337d39252d0669807a854f29f70ca85161f0b7ca1b685",
                    "s": "0x6d6b531351f786ff2e7357397fb7e12e45ad353782eb781fe08beabeea95748",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:120",
                "value": {
                    "accessList": [],
                    "blockHash": "0x2e7cf8b66d86b5d0856645c7f8c538035b34ff71a85eceeea5e9f838d457e6f2",
                    "blockNumber": "0x2e2c9ae",
                    "chainId": "0x61",
                    "from": "0x62c46e82a040093947784e17d490d81cf6a2a23c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x860dcdc0460f37d32f5b8d876ce674f1471c2c0196d14ee13b551af9fba649c7",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000062c46e82a040093947784e17d490d81cf6a2a23c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x77",
                    "r": "0xb6c8a96aedc1bf9983314c149ccdb50c3f50894a35fddda1d893b627777aa4b6",
                    "s": "0x1ed9d655a1e075b9f0de7c3590d9fe99cf8a0185cb2f4d7b7bf7c1218e5a291d",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:121",
                "value": {
                    "accessList": [],
                    "blockHash": "0x760e073b678f6e27ee333773b52f0bcb9e94caa3fc09d51bbb0f6211f265cbbe",
                    "blockNumber": "0x2e2c9b1",
                    "chainId": "0x61",
                    "from": "0xa7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4c7d7e4d6adf0478d56f99c849cd8365699684769834374e16a35c11262f6633",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000a7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x22",
                    "r": "0xbb05c35806723f6779b544dc9148b8606d8ecc8d5dcbd23bffffff40f89ec54e",
                    "s": "0x3640d1e94bf9dafcef38c8515a8471eb3c7a0348eff6501a4fabf996e5e8ebfc",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:122",
                "value": {
                    "accessList": [],
                    "blockHash": "0x00a826143b49c3ceb9311e978a29937730a09796e4da078a12bc275bec339051",
                    "blockNumber": "0x2e2c9b8",
                    "chainId": "0x61",
                    "from": "0xa7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xfbffccbb5e30acc3e67a7515b32f1189f9b22e1ae5eb21d1d19b911d41773036",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000a7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x24",
                    "r": "0x3eeafcbca35a89dc9f3a2f34505a4ea3ba6515904ead4403ff4f5a71a647ab8a",
                    "s": "0x77ce1356736d27b36bb8c0dcccd79c725003a122e292d7fd027bef0e71caeb7c",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:123",
                "value": {
                    "accessList": [],
                    "blockHash": "0x62a561d7ccfc3d1beb4200c67bcbb3f363529996efc1e3e54fbc5ad130ed6a69",
                    "blockNumber": "0x2e2c9bf",
                    "chainId": "0x61",
                    "from": "0x534a5fa71e99492e1999e8dab0f9ba0adb94c65a",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x80d70d31f4953d24ef11b844f9796c3cc339fba1908c373589ae2868eec6e12a",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000534a5fa71e99492e1999e8dab0f9ba0adb94c65a",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x20",
                    "r": "0xdd0a718160690a1490cc6dc811a6ca0586e8474a96fbf7f4119ca05f7c062898",
                    "s": "0x18df5e2157849d616ac69b5b4e325223172045edf25c87acbc5fd03e696eb13f",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:124",
                "value": {
                    "accessList": [],
                    "blockHash": "0x966efa062779a1d8b077060a84ae7ba10323ff49cacae97f3c509ee2bff07289",
                    "blockNumber": "0x2e2c9c4",
                    "chainId": "0x61",
                    "from": "0xbef14cfe801fd76c2829db51f81628d213b54270",
                    "gas": "0x1fd8c",
                    "gasPrice": "0x59682f00",
                    "hash": "0x62ae669602ab39574aed2a5ab216c61ae429e976eb7c6a42b0945e56fb24adf9",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000bef14cfe801fd76c2829db51f81628d213b54270",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0x2c7",
                    "r": "0x5c8f68e87a5153c3ca7d3f891250a64b82c1eb0280fac5146510a8bd49d5102e",
                    "s": "0x41495daa55120621a6ac262ec475c262f75a8762976c47ae99906b95b35cbcfc",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:125",
                "value": {
                    "accessList": [],
                    "blockHash": "0x123550e20963267ca44862da5ca1fef2e50fab2ecfda4fdea875357d9395dd5c",
                    "blockNumber": "0x2e2c9cb",
                    "chainId": "0x61",
                    "from": "0xbef14cfe801fd76c2829db51f81628d213b54270",
                    "gas": "0x1fd8c",
                    "gasPrice": "0x59682f00",
                    "hash": "0xdb6f86608640b0dc66383a849fcee92a2e1ecf269510fc7a437bd19f500a85ce",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000bef14cfe801fd76c2829db51f81628d213b54270",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0x2c8",
                    "r": "0xa4014e842f38b791809640b6bd8eb5036a0282ff363ad3d25467a45a9c116c0",
                    "s": "0x23e48e9a3a504469fccbc14e3de5515b6ae85b1e5bee262101e20cce9cd4ac64",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:126",
                "value": {
                    "accessList": [],
                    "blockHash": "0x66ca0353cda6b622ec33163933706bd0c1a4d35d5263581f148660b24aea1b7c",
                    "blockNumber": "0x2e2c9cf",
                    "chainId": "0x61",
                    "from": "0xa7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x673f6aada9928cefd79d48cde6aeec5baff0edbb9e5a682594af3e90202206be",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000a7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2a",
                    "r": "0xa0225b04275c8d2ea431ebed13d16ad0ce5ac589578082a7b632bd4c2e70fa98",
                    "s": "0x7b37318ba0bb60ce300c894023b741b0dad2270bfc29811df9304aaccf2dda6c",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:127",
                "value": {
                    "accessList": [],
                    "blockHash": "0x736f1775e256ac5fadd3e65fe2fb335d6d293bcef0f7f04b8591533c1fdb13c0",
                    "blockNumber": "0x2e2c9db",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x694da4c860a6d55c021234c8585de7f67ea61037d29967b9d4cd1d29adac63a1",
                    "input": "0xa9059cbb000000000000000000000000ee81b9b2a8e5343f4103e6ae2daf335bea32f9af000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de05",
                    "r": "0xa7c740b6dafe672fe1f264715023b98dd18b097eeb2f2db1ada227a416bf9b20",
                    "s": "0x1dde267dbe35e2351d346e2682a4f7581596fd8f7331788a5455536c1848a95c",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:128",
                "value": {
                    "accessList": [],
                    "blockHash": "0xee04c27ec24c6735a8285a0bf18888c0bf32796e120ef3d7f281ebee8c9db6d0",
                    "blockNumber": "0x2e2c9dd",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5ead95c0bea89b0f3ccf0e4b42a659ecc7e50c30b72fa56243d574bf28e65b6e",
                    "input": "0xa9059cbb0000000000000000000000005fd182ee3aea4f1e954b94a9508b6ee705dae07a000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de06",
                    "r": "0xde36a1daac438eef3c3bddfcb2c8dd7b4ac940cecb5bfc6276e0bb707580e711",
                    "s": "0x4b6e04129219d678b45eedd3f4b72d9ff9d7d3ffb4b57a4e804494e468481541",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:129",
                "value": {
                    "accessList": [],
                    "blockHash": "0xee04c27ec24c6735a8285a0bf18888c0bf32796e120ef3d7f281ebee8c9db6d0",
                    "blockNumber": "0x2e2c9dd",
                    "chainId": "0x61",
                    "from": "0xa8ee261af16a23a909921d5927fb617936e9dbec",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xad731380",
                    "hash": "0x02555ffb0f70b221b5feb75ca489b09b938a95a615c71f93f65ae65c4051e33b",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000a8ee261af16a23a909921d5927fb617936e9dbec",
                    "maxFeePerGas": "0xad731380",
                    "maxPriorityFeePerGas": "0xad731380",
                    "nonce": "0x4b",
                    "r": "0x5a91c21aca738df16d28aaf36016300a1ee1956a29278889e4657da59a058a11",
                    "s": "0x7ef18075d0ddcd75378e968f93459c003e8f2b31c4fcea3f76719a0184c01547",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:13",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9483f2aee12eb6bcaa1e2fa512770cf042b081444e233d004ef2c0b003e0cfdd",
                    "blockNumber": "0x2e2c540",
                    "chainId": "0x61",
                    "from": "0x40f2333d20b4ea29477f2ea47d2c18d3cb94f489",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x84fde7436003c502952b07b2df1840d1ea6d3cdaffa4e4604ec1387a32b756b3",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000040f2333d20b4ea29477f2ea47d2c18d3cb94f489",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1a",
                    "r": "0xadbebb14cc1e689a357a3b3eca8cad3cc862e0d2c249d77d42fa9e3527950684",
                    "s": "0x1e971a98d1cd60f0c82ebea70b9a62e12209160f2d2cf37b06b15d3bcf79b073",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:130",
                "value": {
                    "accessList": [],
                    "blockHash": "0x58fa06156397c62292c79d00c2e81cfd79a9935fb4ff20a7e63b36a8b95cae42",
                    "blockNumber": "0x2e2c9df",
                    "chainId": "0x61",
                    "from": "0xa7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5e1a2fdc88394607b61ea0d634c10e69bcd3cc056c4526fad0d9ce3adeae0d9f",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000a7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2e",
                    "r": "0x647d41d5de18d0504a6551e027c0f4de8e96e9def206d4873e9c50d78f516bc0",
                    "s": "0x4d6a92bee4073c19bf8be011b9e09d657578839dca85bfa9f8cec0afbf3e1642",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:131",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbb10f1572e8f523b86cb5f1fac804501ba9f0cbe457ed7eab876218c669fa32c",
                    "blockNumber": "0x2e2c9eb",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xfb31d7bb09cc7ced6754b753ceeaa467f18500dddcd98d91a2c089f933c6f0c3",
                    "input": "0xa9059cbb0000000000000000000000005bc2ca28d6c4f860700dcfc7f5feb2bf6bb843d4000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de0a",
                    "r": "0xb1190bff828ce815f6bbb41566b02052b2efa00b01694d767ff6a8902f00e4e4",
                    "s": "0x5a587a065e19788cfae46ee367ae13a77c68f2dfc8ecdf06ab57e9552c09f6c4",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x8",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:132",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa7925f77eecdef918449376d498f403b41809b8def37a65d5c2673f334f1e556",
                    "blockNumber": "0x2e2c9ed",
                    "chainId": "0x61",
                    "from": "0xa7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf05372e18a016fef406799ee21a413aa9cf1915d90603c8228b0bcd0bc3bbb93",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000a7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x32",
                    "r": "0x69db637649702aa08509852100aaaf514f624f2bd6d60fd044d7d96a5903f0",
                    "s": "0x1ac583830b039099a08098516eb268ad7cb4a8db49f7c04a8a53b5ea373c74ef",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:133",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe307f2ee26b29373088e5ee3883394aeff58ee0ccb42854cad8d666a10128f26",
                    "blockNumber": "0x2e2c9f2",
                    "chainId": "0x61",
                    "from": "0xa7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9779c8bf2c637f99b4d11ba20bfa68b2ccee347525183dec2683440879fa5ed5",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000a7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x34",
                    "r": "0xee38738671fbac45893dc13bfcb4b76d999de62f1e8fe3e6b0c22dfce9359b8d",
                    "s": "0x6f2897184fb02d31766907f653b5a61d41a4a8479ab977dc6b6f6834dab9cd08",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:134",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd1d19de21ebdd0cbc130311a7de3e3d13f4d311fb52fb4eb366c2b2b2796860d",
                    "blockNumber": "0x2e2c9f8",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd49a4f135e9b1ba6a6f3f78df10e8a72f9aa6605728c5c96e997cf94aa1252ee",
                    "input": "0xa9059cbb000000000000000000000000f2b0c6493859f067879b896139a3ca976f34fbd4000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de0c",
                    "r": "0x43532027f996ba99f5b7e5c805902e0aae03ee01172ec4cac673de6551510582",
                    "s": "0x549bdf6afa4418e0d7aeb1633a4028f4027c86f8fae4958a964aac4f6d704d5f",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:135",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd3b35d7d94acab4779a5d8734aaa2cf464ef27c9ca14ffc99315660c8beb7857",
                    "blockNumber": "0x2e2ca02",
                    "chainId": "0x61",
                    "from": "0xe56a4358971ef078d69ba74ce65714e061d66336",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8ce6eda08d8a4d298caba0ff7b4518a06b5fd453eaadb673c40f598aa48a39b8",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000003468dda7ba0000000000000000000000000000e56a4358971ef078d69ba74ce65714e061d66336",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1b",
                    "r": "0xd30cba49369fafc2ccc81c5b9bcc6ceda773bbf079cffba3d576dd253182b72a",
                    "s": "0x58971d540991fb8e905e300edba48e0bcef49a23d46fd3c909a4f85bde3f13a6",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:136",
                "value": {
                    "accessList": [],
                    "blockHash": "0x2efbe36ad5dc634caa7c582f6c113f45950a85207e287d73dbb3eae55fdd5ec9",
                    "blockNumber": "0x2e2ca03",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x05b290f92230b02489a42ecb7613c61509c060cdfa6a4bcf8da69d8e40c5693d",
                    "input": "0xa9059cbb000000000000000000000000ed8666e1de7ed9fbd119f372a59763d82cb94230000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de10",
                    "r": "0x63cef1358d8b67d0c721a3857705103d351f391b44a07fde2a5844736be56604",
                    "s": "0x305ee1814004cc0fb31da330708ffe0562c7affdba16813fd02de3898d8382af",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:137",
                "value": {
                    "accessList": [],
                    "blockHash": "0xafc8f9bf06210ecfd0414b789b1678fbe7e274417347369f1d21fbbab54f1e96",
                    "blockNumber": "0x2e2ca10",
                    "chainId": "0x61",
                    "from": "0xf2b0c6493859f067879b896139a3ca976f34fbd4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa7b18f440c6bd27b4f79346784e21370584fbf4427b8a5f8a5827b8942621698",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000f2b0c6493859f067879b896139a3ca976f34fbd4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x5",
                    "r": "0x933cb7837718ab458a9aed7d1d17fbf765da8ddd8eb7209df776af7f966647b7",
                    "s": "0x73142f5bf7887f38cf59d50f77c41af9586c094f9213a4a8f71a11c18dbda26a",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:138",
                "value": {
                    "accessList": [],
                    "blockHash": "0x809d29272c107635b5d1b6466c3082828d341d44401c8a3bb726dfdbf58c36af",
                    "blockNumber": "0x2e2ca19",
                    "chainId": "0x61",
                    "from": "0xf4566a6dcffb53b20503b5a73e379c74f4cc80d6",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa70f7b184bcdee71793061a848b357751bfba1fa9ec53b4a144a565ea3965036",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000027147114878000000000000000000000000000f4566a6dcffb53b20503b5a73e379c74f4cc80d6",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x24",
                    "r": "0x8a9d8d09c952ba69215f246cfdff9d15813d85d3a434f4f23f32a5e3f3526287",
                    "s": "0x303c426a85ef4e3ffa0705d6fb0fb6f0bc70351cc9757801da98ae68ec55c4f3",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:139",
                "value": {
                    "accessList": [],
                    "blockHash": "0x70d6b685886bc13f469bd1dca86aaca08a74c9335126da17f442845466e658a4",
                    "blockNumber": "0x2e2ca25",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe95a58f06fb642f2cd070d3e0b239f82ae09f47b90d21c9e7d117b873e7915bd",
                    "input": "0xa9059cbb000000000000000000000000bb825e08fb17f72ce921fe40d10ce78e9507bfca000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de15",
                    "r": "0xe9c0393f51920bed1de40e4ecceffbe61ef362431cc8db8fa37d380520c39377",
                    "s": "0x4a492cfa516a117cac8597f1d52dd3be70fb36d5894d976ccbbdf625f36744ed",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:14",
                "value": {
                    "accessList": [],
                    "blockHash": "0xacdc6f7a35d66b160f08a7e19aa25d82411bef6ee5ff2fcfa6d3ba651af02643",
                    "blockNumber": "0x2e2c547",
                    "chainId": "0x61",
                    "from": "0x02a78510576e7ae3ecf8cd8858715082b812ae4e",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x73a20d00",
                    "hash": "0xe9f6a20670be482e6efcd112f171ddeef78842fc26c9db9c68cfe291dc5f4790",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000044364c5bb000000000000000000000000000002a78510576e7ae3ecf8cd8858715082b812ae4e",
                    "maxFeePerGas": "0x73a20d00",
                    "maxPriorityFeePerGas": "0x73a20d00",
                    "nonce": "0x44",
                    "r": "0x5d34757794f3e6f281ab5f5c56a5e99596ba7d9faac6a713a862b658e41358e1",
                    "s": "0x5637986552a4ad2aedee98f5aa35e44c332923163900421aa536b5ff6156db3d",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:140",
                "value": {
                    "blockHash": "0xd3fe3a7ff832abc8d85a202888988e4f0cf2b2cc60750ef0e2d134185315fda8",
                    "blockNumber": "0x2e2ca2f",
                    "chainId": "0x61",
                    "from": "0x5bc2ca28d6c4f860700dcfc7f5feb2bf6bb843d4",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x2d1375900",
                    "hash": "0x31ae6a18e6fc8a7e67e18f5a6a12244b58ae68fce874ff116fe1b789d528a75d",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000005bc2ca28d6c4f860700dcfc7f5feb2bf6bb843d4",
                    "nonce": "0x28",
                    "r": "0x24e623de3d181d4fa54a005e76f4dd5ff8aad868b79229e72ef50506d34a75a",
                    "s": "0x8e3ea62bbaa9338c1fe9b4fa3c91e45edbbacb1801939f15b5129e268555a52",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:141",
                "value": {
                    "accessList": [],
                    "blockHash": "0x869b52162c985ddbb2298003e1c44efb4aa4eb94eb5f774460509935be0d3b6f",
                    "blockNumber": "0x2e2ca3a",
                    "chainId": "0x61",
                    "from": "0xc8db72ea17eeec2223c05f04efd63a86f52f0271",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xdc68b6f6fd4b4d1df4becd23ce9d95b252e2a4256b5caee73ba62562518eec9d",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000c8db72ea17eeec2223c05f04efd63a86f52f0271",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xcc",
                    "r": "0xe02a1d461ae3bae3552baa3e7a4f6618ff6a40ec0ced6330a72a734bb024bb70",
                    "s": "0x7a2a550581cd4128a4bcc8b1e2c77bfb4c8ba07626bc0d7e958e5c134e20b216",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:142",
                "value": {
                    "blockHash": "0xcb9f77ccf55473c7211e859ee92e225b18077f3817d8dc25d8ecb0648fec954d",
                    "blockNumber": "0x2e2ca3e",
                    "chainId": "0x61",
                    "from": "0x4f8820731d919547a5f8b7c2143a18051f48e0f9",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x312c80400",
                    "hash": "0xf55dcc7ae5efb6e0a1b79e3bceeb18196f41434f5a79c76a632ec56170858a1e",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000004f8820731d919547a5f8b7c2143a18051f48e0f9",
                    "nonce": "0x16a",
                    "r": "0xe4ebe947c63852d30e873ac25f42fe5de78b53c08d7d3ba43c5d1bc90efa1aa3",
                    "s": "0x4e7419c6897cfa04e3f1027b18f67af6068641798fb9c25f3a3e5926bd20b866",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:143",
                "value": {
                    "blockHash": "0xf47d28df645508032308cc06c91c37695ab542190dcac4da3cc167b83ff02d9e",
                    "blockNumber": "0x2e2ca4b",
                    "chainId": "0x61",
                    "from": "0xbb825e08fb17f72ce921fe40d10ce78e9507bfca",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x2d1375900",
                    "hash": "0x7d09e2303d006b177f020e92e63cea0f849c58290b18948014b8147404f3e513",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000bb825e08fb17f72ce921fe40d10ce78e9507bfca",
                    "nonce": "0x61",
                    "r": "0x9d9722bbab73a7950ffd39068f8e898e59a69e4b7c997c6e701ca90ac659a62e",
                    "s": "0x74b8b21e962b3b8c1620d80cd041423bb81851b02f3250321adbd933c4d435ee",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:144",
                "value": {
                    "accessList": [],
                    "blockHash": "0x5a4f52a5f13e86d62e917f98f7726c836f967f17f5b708a2f447e15e95887269",
                    "blockNumber": "0x2e2ca4f",
                    "chainId": "0x61",
                    "from": "0x89cd630a22f9803b8cf62ce94d514fd44cd8fad4",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xaa044815b263450331195cf278fad589e3f739cb053e40fa80ce940492e052fb",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000001f9e80ba80400000000000000000000000000089cd630a22f9803b8cf62ce94d514fd44cd8fad4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x21",
                    "r": "0x2fae68c60fb443eb46a64de80e82979b2e6035cfda7fe82a845d33e52fdc3e3a",
                    "s": "0x2233b4492e6ed2bebe1d5253516978a301d5d31452fe660450a4f965e9fb6164",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:145",
                "value": {
                    "accessList": [],
                    "blockHash": "0x23c08cb54cb6de27fcf5d4534edce0bfd20f114c97e81cbe2b49873bb1ad99af",
                    "blockNumber": "0x2e2ca51",
                    "chainId": "0x61",
                    "from": "0xdd8ce6c6fe3cfe51cefdf63ce01d37e58112dd53",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xaf635fe354c6fdd4e0fcfda8cc236a2f61411bc375dd0096131e8d58dada436a",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000dd8ce6c6fe3cfe51cefdf63ce01d37e58112dd53",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x77",
                    "r": "0x2b8e7aaa2b6137eb41c59765a6909874ba1e12e31cc90d33c061e1d4434ffc3e",
                    "s": "0x729dcc10bc7be3e305796afbee8cd2ba3fe74457b25ab68ff7082b74e3873a9e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:146",
                "value": {
                    "accessList": [],
                    "blockHash": "0x2cd78bee7c411afe4a526c6493a2aa642e065c50438f16a50d092aaa81834a08",
                    "blockNumber": "0x2e2ca55",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x265ff198e0054607b10555d88905a86b7792948024e8560b5e45e727e100900b",
                    "input": "0xa9059cbb0000000000000000000000009f5f25305be641812f427ba7c7297863d7d9a0d1000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de18",
                    "r": "0x8bbae286fe2720d498234f59d6327b54c0933266517a3a702d8a65f485d81826",
                    "s": "0x2aba57ec41c563b51d7535e0384a6d0e56fbddfb599866854d95b4171f7c0a98",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:147",
                "value": {
                    "blockHash": "0xc0a69e1e369ff8acdba33b61cba92a33561cfb4b5bf6b2dc83bcfec615d3b063",
                    "blockNumber": "0x2e2ca58",
                    "chainId": "0x61",
                    "from": "0x4f8820731d919547a5f8b7c2143a18051f48e0f9",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x312c80400",
                    "hash": "0x613c7226e4bff675143ab17ea71b856663b7568ad2c1ab901e5369c37a56a23c",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000004f8820731d919547a5f8b7c2143a18051f48e0f9",
                    "nonce": "0x16e",
                    "r": "0x8e9e3a94bc11c2aa27644a5858b29dbd07f575576ecc7a9840a26620b93bf614",
                    "s": "0x4bacf2d573c8bc72e5f17dc567cc5dcb6c8bee524d2671704e268d4767d20d6e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:148",
                "value": {
                    "accessList": [],
                    "blockHash": "0xb70fe4332cd442cb1c89090ad053b6af7b771f207646d5eb21adf2fb8efccc15",
                    "blockNumber": "0x2e2ca5a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe193c1f5d0daa8eaeb3378f284b8e1d49875cf6ea70baf35804b066f948340d9",
                    "input": "0xa9059cbb000000000000000000000000415ca2c9b31fd4d488dea43cb36b31542b91a727000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de1a",
                    "r": "0x4716a30c2387b1f204bc0816a269767acb51cc85b2fd621bf4b117dc68ab6cd3",
                    "s": "0x5b9fd982488edb44dc8d22431e8c8fd3b2f4e33a687bcfb10eb301823e650b1d",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:149",
                "value": {
                    "blockHash": "0xa24a8588206fe80b6884ec84bef1bdc725449d928d4b01f536746bcf203a2406",
                    "blockNumber": "0x2e2ca6a",
                    "chainId": "0x61",
                    "from": "0x4f8820731d919547a5f8b7c2143a18051f48e0f9",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x312c80400",
                    "hash": "0x70781afa125831adffd7bfef2371eb021901e55111528adbffb10ba02bb9c6aa",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000004f8820731d919547a5f8b7c2143a18051f48e0f9",
                    "nonce": "0x170",
                    "r": "0x1b8a1684388c83e1c064b494c6f80eb31e3764f150893afcbb2dc13e59e95004",
                    "s": "0x37fc13dbc80ebdcfffbe2b34b64d00c69128bc4926db0822de98252b231b08fd",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:15",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd85efa9f41136fac4a403b7ab39383f7982ef567827766cc2ca04571e43c3951",
                    "blockNumber": "0x2e2c562",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xbf6a2564d3c84e0610c6d423b0b05180885a22f0b8b6c1218e5d6c7f3616200f",
                    "input": "0xa9059cbb0000000000000000000000004ebfb243bb2a2b7f9c92e27833b9ed86d1e974df000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd83",
                    "r": "0x4302664b3884e6d405633e4724a924f4f77433c8847bdde573e99510d03d13eb",
                    "s": "0x7337c2c0f9fdabccc66c9c03710d83da3202779a930a6b2f44e83bff1c221d76",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:150",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa24a8588206fe80b6884ec84bef1bdc725449d928d4b01f536746bcf203a2406",
                    "blockNumber": "0x2e2ca6a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4c5d52849c5b915dc11ac33a6e7dafc9e18a23b6c3599908748b4c899ef50477",
                    "input": "0xa9059cbb0000000000000000000000008906c711cda9f48fdea0e678aa969aa270220e6f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de1b",
                    "r": "0x512b1255ecfbf7bc1854695aa4e954ab087961c4db62953ef781a7da40e31c66",
                    "s": "0x48b7b5270ead8410b64acf7e4640c9f127721d663a95f75ec5f742fb13966897",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:151",
                "value": {
                    "accessList": [],
                    "blockHash": "0x753e41cd07a4b6a74743c8f2c0f8a9ac8cc40234e36f79a5d23416ac07d912d9",
                    "blockNumber": "0x2e2ca70",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x46698523692f787bb33c8c52af0c47a7cc3195eeda8f1e2725e57ef6ca64012a",
                    "input": "0xa9059cbb00000000000000000000000014bfeba4968050a8f156f922941d82c9ef6ea484000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de1d",
                    "r": "0x9682ffcaaa5b161297872d87f2733e0fdb18a11742fb3fbd1dc2cb2de2084718",
                    "s": "0x218347d0b3013f5eb6c657451dffe172ed2efe9883f1ec1787965102ee983d0f",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:152",
                "value": {
                    "accessList": [],
                    "blockHash": "0x6782141f3dc0da873a5af05617e0e6d34e27632398408d2378b6ebf051ecd036",
                    "blockNumber": "0x2e2ca71",
                    "chainId": "0x61",
                    "from": "0xc8db72ea17eeec2223c05f04efd63a86f52f0271",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2c0a47556775937f1bf34497967f22787f4eae259089fa12944c2d1ddedcb434",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000c8db72ea17eeec2223c05f04efd63a86f52f0271",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xd2",
                    "r": "0xa7c69ac1f71b8664d43c49d4eb409b254c3cba501d7a6d41da7c8c2f1ee3eea3",
                    "s": "0x4dbb90b1ff755908673548f2f2703f63c82ed785f3f3b80b63583aefb039327b",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:153",
                "value": {
                    "accessList": [],
                    "blockHash": "0x860a265a6fcdbda66c0391be67e486b30e7f5bfc40ef9f715ebc5af72f3e08d7",
                    "blockNumber": "0x2e2ca83",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8a6fc2649a77c8052155e14d353156e2298d467ce486c37a98fbd24ed6259d55",
                    "input": "0xa9059cbb0000000000000000000000008906c711cda9f48fdea0e678aa969aa270220e6f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de1f",
                    "r": "0x8f4828a6c85d9dbb16832823e081aa468cd0aa13472ccc044d0467e7dda632b8",
                    "s": "0x74d079156f8e44e5eb017c6795c7a4c3338e829c487f6416a7491dd8fb008e0",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:154",
                "value": {
                    "accessList": [],
                    "blockHash": "0x2952adde7a42ebbcf497f70969c37dc4a542a284655323bc1295c7b67021b154",
                    "blockNumber": "0x2e2ca8e",
                    "chainId": "0x61",
                    "from": "0xed8666e1de7ed9fbd119f372a59763d82cb94230",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8a33e06b45388deb25be14dcad23db9b5d9c01bef8051e263310d45209e63c56",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000ed8666e1de7ed9fbd119f372a59763d82cb94230",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x7",
                    "r": "0xd2d488d72d650e18332d0dccdc4319d73c801e33be1b03dabd42875b2af6e359",
                    "s": "0x756d033b9c7b10cb19b4086d4b284ffa1a68f23035f37e21d429585ee2f1861c",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:155",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd67704869c49616d87a56baad118f36566108613ff0f27c2c126d79f7a3c0320",
                    "blockNumber": "0x2e2ca94",
                    "chainId": "0x61",
                    "from": "0x8906c711cda9f48fdea0e678aa969aa270220e6f",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x73cb1d89f888ccaa4b0bb3ceb97e9fd869b36a60594884f27e22d74c40049e5a",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000001c6bf526340000000000000000000000000008906c711cda9f48fdea0e678aa969aa270220e6f",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x21",
                    "r": "0x4b9e320fa013ecc258ebebad26ba7c0550b37be9a6e28e26bf65f6619a9b6a2d",
                    "s": "0x1882a7faf1dbee500f65eec59496c01f6462d4f3f580456da0c27b3bd9068051",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:156",
                "value": {
                    "accessList": [],
                    "blockHash": "0x870adfb3d6fc748f1254585958bb389e8f611e7d1d76cdc3ffb567bceb806b69",
                    "blockNumber": "0x2e2ca9f",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x0fb2ef6a591c633f98251cd3587d8e7e27e56217d5ded0ed2f8ac046d42c5c53",
                    "input": "0xa9059cbb000000000000000000000000f45c3a949968266d1f6dfbf5e489344a2525b68d000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de22",
                    "r": "0x23c0980ebb79ae0149c9efc5a2c231d11233a98e52c226a6edc19730b924d3e3",
                    "s": "0x62f514b8ab68ea7cb64ac1f4b635076a8e570242969182de507635934ed54c89",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:157",
                "value": {
                    "accessList": [],
                    "blockHash": "0x73389aff01016771620d1ea814d022b65cfe345d6e082c63518fba4fb209f59e",
                    "blockNumber": "0x2e2caad",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1b6affea63cfb4c3b26f1190b7e7914eb396efd2afccce7f78cd89c606a9f376",
                    "input": "0xa9059cbb00000000000000000000000050f002202a163a07e1b66869db09f20e33e7417c000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de23",
                    "r": "0xa2a411cd69542504e75ab08bde6a71884b0af500b587dad23fec1507a1b23a5a",
                    "s": "0x57e4a9a13611b014014dd5abc404935d2b7d641c6f5ccf6277f5f98a96679a32",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:158",
                "value": {
                    "accessList": [],
                    "blockHash": "0x8f3b8a6adb4a3ecfd32ec072e912eefaae87441368b3cfeaa7e28403e6b957eb",
                    "blockNumber": "0x2e2cac1",
                    "chainId": "0x61",
                    "from": "0x9d223c40342454b73b998eda82cbf45e1d53462c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x26ea69a72dcca30ac38cd6816b450406938834858495af995bf86e14d9ed397f",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000009d223c40342454b73b998eda82cbf45e1d53462c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x76",
                    "r": "0x1bc3b13cc1a0b373bcf76950a2a793d0fb5327d9d3a2de726c1938888355f955",
                    "s": "0x4debb85dfd51bbe9d33624fbcbaccf86476104025326938d38fc1bcd9653e81",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:159",
                "value": {
                    "accessList": [],
                    "blockHash": "0x09b8fb0006904a889335100e063d50571acc313a20c7b23021cbaab68bbce1b1",
                    "blockNumber": "0x2e2caca",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc39b3e1bfc5b74635992e77cfacf3d229899da15e97506b08f99207b372158e5",
                    "input": "0xa9059cbb000000000000000000000000d191d5b796c4e28de9d3a845da89bb6923c67d1e000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de25",
                    "r": "0x51bf3ad342fc5a6d0371d436849826061f8b080191581da12fa9fe85ad01592d",
                    "s": "0x66d58d2dd4979b65588059d31d1900708c40eafefcaeed1c7ce9ac82a8757568",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:16",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa1a311027e08e75e7883021c0aa19bc7638cfc85ad042e8183517bf12684a826",
                    "blockNumber": "0x2e2c56a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x01d333e4aaac03b2062eacaa300d0843791717d5ea338ae5d97e02a5daa2d4b1",
                    "input": "0xa9059cbb0000000000000000000000002a74e806f2007cee3ce52c470d2db5ab14766fc6000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd87",
                    "r": "0x445dfb2cdea07c9cf9f8abe4cab4c38a056600b710d020a7bc82d0b336c03ce7",
                    "s": "0x1985359995d20808bf8f5825d0b1cd7362bddf7e97b7434a1006cb966f2dd314",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:160",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf256ce29eb7d7386643bbbd92a134103a58653dfefd528345d7f4ce44f4984c0",
                    "blockNumber": "0x2e2cad9",
                    "chainId": "0x61",
                    "from": "0x9d223c40342454b73b998eda82cbf45e1d53462c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xeb27cd493c62aa64391048329de06e3dd9fc232579ecc5473e40dcac5a313d25",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000009d223c40342454b73b998eda82cbf45e1d53462c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x78",
                    "r": "0xf8785b4dc0af22c8308d663253f53c8150a0a59854d35efe2e635144938ecd8",
                    "s": "0x1500a5137fbb5d366d1f923fb0c17f3a3939d8f9cf4aff1ffc0e1777b0803410",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:161",
                "value": {
                    "accessList": [],
                    "blockHash": "0x69326b2d8fda4f1892b6cf453b1ee64580fb89fbbd4b75d51ba49f6760c7421b",
                    "blockNumber": "0x2e2cae6",
                    "chainId": "0x61",
                    "from": "0x798537aa29127872bc17c73e5de56a4a590d7038",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1e34782efbec8f50e99301da1679a9b49e1edd408fb640c05f4d7519e3673f1b",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000798537aa29127872bc17c73e5de56a4a590d7038",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xf7",
                    "r": "0x5a98b5e421c0d060327ff27e71eb13e66c8c93b9e879e181ffb943f945ac67c7",
                    "s": "0x2f813df6b519c5ae20de8be1d64bba8a5bc4d6fa99c6ac314b7d930d2d524e33",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:162",
                "value": {
                    "blockHash": "0x6333d5f905ea123b4631d52c032e5f442e1cfa368108cbe0f8678140953204ad",
                    "blockNumber": "0x2e2caea",
                    "chainId": "0x61",
                    "from": "0x36fdc3962fa113e1269b506aa52f52dffeb39bcb",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x35a4e9000",
                    "hash": "0xa3c2f0f7886e854b96b9c4b0c4ee4431e7b4a448228e8f5969bb110851be8401",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000036fdc3962fa113e1269b506aa52f52dffeb39bcb",
                    "nonce": "0x45",
                    "r": "0x485acb67698fe2d0ee8f209ffd726456429c236f84c1494dde225a37ace1f7f6",
                    "s": "0x73611182b70910d63d7cd8782e6e290109814023f1fc9153e5244d0466f5a163",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:163",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4b37d4bf67877894b0bcc10d9ae86f3d221f2b9cc0180aea8ac8ea673bc54cc6",
                    "blockNumber": "0x2e2caed",
                    "chainId": "0x61",
                    "from": "0x9a1150867609ec63306dba24a507639c0896bac5",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5168379e9d3760611b0f9eeeed529129497de7c4cc6c2ce653c60e13bc3d91bf",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000009a1150867609ec63306dba24a507639c0896bac5",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6f",
                    "r": "0xde3a314f47a2d881ad6060e6763929538fd61ffba8787a54704ea93ed7a127eb",
                    "s": "0x691f6bdbd4ae4f1362106bbf7dbf3a2e70dd7abe5ca2064a0271d519730ba35e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:164",
                "value": {
                    "accessList": [],
                    "blockHash": "0x3dd49be5b26ce43f1b488f2992e032338716f9a5ea67b8834de2d4003202ae6a",
                    "blockNumber": "0x2e2cb10",
                    "chainId": "0x61",
                    "from": "0x50f002202a163a07e1b66869db09f20e33e7417c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5e8e8b11a2de605d184610b1542f63fafaf639894f379cdd87f11febb0ed37ad",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000050f002202a163a07e1b66869db09f20e33e7417c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xb",
                    "r": "0xedff4638798dfc3275aec279d1c077465487f643eff7355fe0c20b155bbfc613",
                    "s": "0x3858a54b39295f034bb32c50c3f2ca8bb407e5b07e89d9706553da2c26989193",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:165",
                "value": {
                    "accessList": [],
                    "blockHash": "0x275074056d6287a8593853b96424ca39752242c31cb70deb373349bc73cbc17b",
                    "blockNumber": "0x2e2cb13",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb71d30280ae63eb94d3adc237c4ef49d768083e909746275dcbde704df487f48",
                    "input": "0xa9059cbb0000000000000000000000002343744579d6400cc6691b5a067849d5a6c18fdc000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de28",
                    "r": "0x844202572392063867737bf1e04d33960bac07dc3c29957b096591f9182477cb",
                    "s": "0x52b26a2e2ce2f07c5f12d87daf0e65aee3fe905a6d24949f8325e4c047626100",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:166",
                "value": {
                    "accessList": [],
                    "blockHash": "0x966f76dfb2d0e2ea6407668639c2e7c54a440f5684b11a0df206d9341fe36d99",
                    "blockNumber": "0x2e2cb31",
                    "chainId": "0x61",
                    "from": "0xf45c3a949968266d1f6dfbf5e489344a2525b68d",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd7e10a67882f7825e488e735e499c6d403858166f5a0e33777e461df0e2b472d",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000f45c3a949968266d1f6dfbf5e489344a2525b68d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2f",
                    "r": "0x98ece11f9d08cb3760ff9eae1bed8a55d854bb0f830ea687ba38a2fe4a1e19f2",
                    "s": "0x4822763fedf3859cc5fe5d58fdc7480f24bbb8033ceb6b23d5c66270ad43bbdf",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:167",
                "value": {
                    "accessList": [],
                    "blockHash": "0x6ed0cfdbf841ee25dddb5202ba26221938ddc924043508aa6fc235491ee76789",
                    "blockNumber": "0x2e2cb36",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x488103a5d7d944f342fc524c96a939fb9ef843286757bcf6ded87aec2c29a7a7",
                    "input": "0xa9059cbb00000000000000000000000087540eb7bfa6b31922d9f42517505f4270d797b8000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de2a",
                    "r": "0xb2b194b12146dc95c4c2b9877cdf0557c6b414e61f04268384c4a3bcef7e1e89",
                    "s": "0x25db7ebeec57322329d618ad66a3b1064427b9d621a18fce15b6b4205c7de902",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:17",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf54b02ebc09cb880b30da1487c5fafcee5cbe79625040d397acbb5b9dae08193",
                    "blockNumber": "0x2e2c572",
                    "chainId": "0x61",
                    "from": "0x6f5a09c3e1577890b97e5ced744f423afefb1c19",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x57c8dddea8431b57652ae09d4228b94db48fa1c8c1826228849fda273d8d1f82",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000006f5a09c3e1577890b97e5ced744f423afefb1c19",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x11",
                    "r": "0xa1464918186814c2cc497a07512bd75e05a00ced21d34b23bd8d51499898d99c",
                    "s": "0xc454e2e7692d9476d8b9e08c53e858b89e1845e3ad360582ce7477192ae9bbf",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:18",
                "value": {
                    "accessList": [],
                    "blockHash": "0x70c73a5fa33e08fa422be92b580945d31d6ae1aa20c45e33d46db417e134e0a7",
                    "blockNumber": "0x2e2c582",
                    "chainId": "0x61",
                    "from": "0xcab32f5a55950798e9274407c526694664cf731a",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xea15b9229ecc7d7037ce5d19165c931e3361b474380f5095d25076a388aa5daf",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000cab32f5a55950798e9274407c526694664cf731a",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6b",
                    "r": "0xc7647aa13674ebee937c315285feaf2784c8282d3a3073b44818cecca89e4da",
                    "s": "0x1508e9a6c2f698a1cd161c52961aedeef6062543e9ff63b6de255e742261bef8",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:19",
                "value": {
                    "accessList": [],
                    "blockHash": "0xadc5a1d8733b77a91e580d2ceb35fcd18525bed1b89e415ed152405591c10099",
                    "blockNumber": "0x2e2c584",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xbe2281c212011980a0730efec709e924517451f2d97c91efc76315fca39a5bff",
                    "input": "0xa9059cbb00000000000000000000000005d36abcb1710c9edd57f21ec095745cc56eb5e7000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd89",
                    "r": "0x2909f343f4ebaf27fd7e701fb4dc83c84a864260883ed93d13773c9e5a0f63cc",
                    "s": "0x18f348e29a5764482a74a2e3ca6cc7dae88d224d8e6a3a8d7d343b3cae5a5f91",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:2",
                "value": {
                    "accessList": [],
                    "blockHash": "0x3578e5e102aa8f103541904e987286901f68dc8485b4eafc13a1957f0d65b0a9",
                    "blockNumber": "0x2e2c49a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa04af54794a3d5d4017b38c00b25ed9a6572e262f96f2d6dd4a599309a5f5029",
                    "input": "0xa9059cbb000000000000000000000000b588e58d6ba5f40dcad18c6a607fb5f03c1ed798000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd73",
                    "r": "0xf82a92f4d9a03b3e11fecb0a6ccbb2b6e21c52abcef042fbabf91429b75b1f08",
                    "s": "0x5c0080ca9b20eda03c3c39b59a68ce2176fd72cdd5d22dd4204f8b6f6ec8b6b7",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:20",
                "value": {
                    "accessList": [],
                    "blockHash": "0x53decb7783fe94c5d5a4713511b86bcb223b478917dabbd234b3c8c6b31632be",
                    "blockNumber": "0x2e2c58e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x40f3ce21a1bf310e15969c570fd6b16491e644103e583560c318152dd85a83ad",
                    "input": "0xa9059cbb0000000000000000000000008b5fe51d0d672b8872b2c881c57da184489b99ae000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd8b",
                    "r": "0xce98a7a30b7dbe78d5b7c89ad6b76f4e6a6b27f4f6f6a991b9281c8d42470f76",
                    "s": "0x4b1bed4dac650392d9ae34c6cbda9ec670ed3ad257f15a95d79bed37809133a4",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:21",
                "value": {
                    "accessList": [],
                    "blockHash": "0x53decb7783fe94c5d5a4713511b86bcb223b478917dabbd234b3c8c6b31632be",
                    "blockNumber": "0x2e2c58e",
                    "chainId": "0x61",
                    "from": "0xa94214053b7bbaf50bfabbe94c1d26a285caa685",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb6fde5e86728066b6b02701be52b30599ae82e6da57815892f5acc3fab2a7441",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000a94214053b7bbaf50bfabbe94c1d26a285caa685",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x57",
                    "r": "0x48036a6b422df3155b35fa8ad14ae4ebd95b266118d1da4a8d79f4e7e4468d9d",
                    "s": "0x72d52d42f279cf4d28d878b65870fa0349ae79e2c460eb63691865497b9f4989",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:22",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbea1a25d2333f6176aa5601aacf79006764c11af5aee471e1ed2288d9238f093",
                    "blockNumber": "0x2e2c5a2",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5f42644ba59e37ca1226744345b0a2998207d3a938557393ccccbac80e0b07a1",
                    "input": "0xa9059cbb00000000000000000000000094046eccc5174f7814b3799a8c0efb3ec728696d000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd8c",
                    "r": "0x6da95210e0847393d023501a333ac13f807f35a5c05877b408fff4827aa22363",
                    "s": "0x770ebc120ba0d3003f8e95f31e16a9c7ba7ae10cd949ea8b6b6d27e68ed3855b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:23",
                "value": {
                    "blockHash": "0x7ec6f9f529f45cea6f14f635eac2d756b9063dcfa5c88259d1bda05a2dc48377",
                    "blockNumber": "0x2e2c5a8",
                    "chainId": "0x61",
                    "from": "0xf197c2f555114494ea9f8eb99a62772b5f2ac514",
                    "gas": "0x2b6d7",
                    "gasPrice": "0x3e4d64a9e",
                    "hash": "0xd97d0e9a6e9c42d75f0b5db881d5ce6e8ffd8671c400c4551a2b9eb19bbdf5dd",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000f197c2f555114494ea9f8eb99a62772b5f2ac514",
                    "nonce": "0x5a3",
                    "r": "0x58c809d4e2333c2df97e0a18358d2fd55d2c5f2c6684a8e62f8813f4f05af4cf",
                    "s": "0x410b243d125cccf2217e2f4fcd24ba26c88793335176ad9147e09bfcdb047898",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:24",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc972d090b31848d8ec09a354fca4b711aadcc558c8b3dc3560d452e0bbaa8772",
                    "blockNumber": "0x2e2c5b0",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x67feb1c03cd7922eda1389d236b19f241b0131070715d969f812aff45993a1b5",
                    "input": "0xa9059cbb000000000000000000000000ac349a4bc541f52f49e253196a6a04bf101bd97e000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd8e",
                    "r": "0xb3cf831109395aff122330859924cabd264583d72e76f1c13f9ed6d5bd274df9",
                    "s": "0x613124798afd575bf6ea20d96bb4ba17373481d32022a35577d8afbda75a5916",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:25",
                "value": {
                    "accessList": [],
                    "blockHash": "0xfe91399645a06fe071b148777a0049c46c21a07513eabd90368eb6b26cae0c33",
                    "blockNumber": "0x2e2c5bb",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xca4c56c1b64f93ca1e389940830f38a5ac94ae6bf3c6bdcc8d8318fe34e2da39",
                    "input": "0xa9059cbb00000000000000000000000072cb085ecfb912694275e4da22d7d489f5efa91f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd90",
                    "r": "0xbffc99d5acab6ffa4df48a090a9d620b0139c8fa24b3411854fec3996c4aff12",
                    "s": "0x19c6a35f8abbd0b6ce011c2d5be33b9b327318204dd8cba3816807845f8d768b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:26",
                "value": {
                    "blockHash": "0x203757923f731b03997b9b7a08b1f4e78d52214b610c438c25a276f5375fbc07",
                    "blockNumber": "0x2e2c5bf",
                    "chainId": "0x61",
                    "from": "0xf197c2f555114494ea9f8eb99a62772b5f2ac514",
                    "gas": "0x2b6d7",
                    "gasPrice": "0x3e4d64a9e",
                    "hash": "0x8ddc5e77e3be69fd80b53779227185f3713cc667d310b122ecd97ef7f3c2cd67",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000f197c2f555114494ea9f8eb99a62772b5f2ac514",
                    "nonce": "0x5a7",
                    "r": "0x8e8218515c047600e9c4e6bf500c0a4db30de5a869c6bb82080aaef937366970",
                    "s": "0x7e214bb2ae7489c823e04de8656161583ab11173e43328f5ca9047830772f47a",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:27",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4e7792b451feea5d38c722bacbacba407a87fe18cee6f6320011ed25120557c3",
                    "blockNumber": "0x2e2c5da",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x74e39cec30418eab3f2a62eabfb3bdebc10fdc5662cb0d136f1b51d33ab2a028",
                    "input": "0xa9059cbb000000000000000000000000e33e46a2b59e200be5c829ff811c739ed728c640000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd91",
                    "r": "0xd2ee1a9f850d73319ab9b9ed5e11a2d5e7fd39fa6fcb8cbd1e61b8866f006d09",
                    "s": "0x4655eb46b2394e085716987ae82d3d8e85ba49e3b5dc3e706923a515b574cf2b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:28",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4e7792b451feea5d38c722bacbacba407a87fe18cee6f6320011ed25120557c3",
                    "blockNumber": "0x2e2c5da",
                    "chainId": "0x61",
                    "from": "0x72cb085ecfb912694275e4da22d7d489f5efa91f",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xad731380",
                    "hash": "0xc74d07cac7109482642c235da970b0b85261002242f5834b2fcc46d0f7c3b780",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000072cb085ecfb912694275e4da22d7d489f5efa91f",
                    "maxFeePerGas": "0xad731380",
                    "maxPriorityFeePerGas": "0xad731380",
                    "nonce": "0x5f",
                    "r": "0x5574bc5d688ac28a8d266015fdf6d3e0410367d133cffa6028769258231df78b",
                    "s": "0x5faf083ef6f6b9b025c9adf1d95f2444f165efbe048d4a554ef9e73d8a470733",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:29",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf077fb1244ced6b224ca7845ffe357aeaad6aecae0b870764120d92d21530e64",
                    "blockNumber": "0x2e2c5e1",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xbb187411a3ada99f0c85183e5f767ff2c213bfee1fa5b58d6d7e8a16acb11087",
                    "input": "0xa9059cbb000000000000000000000000169852f67f042da3fb49fc1cb5d6d4e4d0aa5582000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd93",
                    "r": "0x3ced6e9855d78cbb2c96155d8f8bc4896a53ff696a49f1e81cb1a1b291856cb3",
                    "s": "0x3173af3c53978af3a0293d0d84042a3803fbedd9f4dcc291ad0d70b313c309c1",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:3",
                "value": {
                    "accessList": [],
                    "blockHash": "0x717a5a4e3147fdff0b2c220cdb05682a74bf0b16943acc919c1a996cf1f8d787",
                    "blockNumber": "0x2e2c4b7",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4a5a87c570f7919aef3e30d16847db7c8fba023b85ad4245d1676dd5f1fa22ba",
                    "input": "0xa9059cbb0000000000000000000000004cda706a2763e9064bdb640502e8a2fd97736960000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd76",
                    "r": "0x2ace0e3f82cdbb24401e1a106c274565632f834de214207e0cc2294b2f313fe5",
                    "s": "0x265cf7a4cb4b5dcef961a4632c3e36fa073b31072b563f8c676c3bd697b24ef2",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:30",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf077fb1244ced6b224ca7845ffe357aeaad6aecae0b870764120d92d21530e64",
                    "blockNumber": "0x2e2c5e1",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf353368da29f92e0cb64b23d92462efc1ad40844f0b97086f429dd41c03fc387",
                    "input": "0xa9059cbb000000000000000000000000724312c324263ede3c9743528c0f2d0c45f2ade6000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd94",
                    "r": "0x97aefb2d02a1ee0e3c42bd3fda6d2d517f10913937182fc55a129d993269f2d3",
                    "s": "0x22479a421589e2f99e98875ce4cd0f96b769a1c99b5a510b1f510751eeb30cd",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:31",
                "value": {
                    "accessList": [],
                    "blockHash": "0x6a30388064be28b01d099fd1a9dc77f5bbe73da5c3d413339f610f13bcbef6e5",
                    "blockNumber": "0x2e2c600",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa36f24ed72e39bd5bb59d27da9a476b5d652eca8f2a93d96b6d8d508e77f7bcc",
                    "input": "0xa9059cbb000000000000000000000000fe7c0b903b6fed1a484f33a803b5534f0a7de83f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd96",
                    "r": "0xa927b3eb5fbdbb1f11964d0616f998ae6033106be0eb15ab243c65ec6316a90c",
                    "s": "0x4102b08fcc0cbe6927847350837bbf1576417574eadb6c9389f89cca955cbc1e",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:32",
                "value": {
                    "accessList": [],
                    "blockHash": "0x2daf1d7bef27ac3542ead0db70132d9387cdcccae927661be1b368643c75d12f",
                    "blockNumber": "0x2e2c603",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x10ccaa85f6e44f6b2179b198efe9edc577b7c737430c4453ac7fe32c7d5a8b42",
                    "input": "0xa9059cbb0000000000000000000000003fecd392799590f4b2441bee58f04d1b789e923e000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd99",
                    "r": "0xa4c50802ed43de20ab56d2ac4e2724cfda084c32f17f67dda99c77341d748e11",
                    "s": "0xda54c025a619d2afc07ef22a29528de756bc74cb2e9c9efea105466f8d497fa",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:33",
                "value": {
                    "accessList": [],
                    "blockHash": "0xb2dbbc107b9c9c0ac638cd9e7cff1ce895752f31fab7999cbcef4479e4917c07",
                    "blockNumber": "0x2e2c604",
                    "chainId": "0x61",
                    "from": "0x828998e191cad602fb38e81de069a5b8bd5e7af3",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x0768bb371d4221b56ccc090b6ada67bfe9c298bd54cb9b4c57fd34ad456ccca9",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000828998e191cad602fb38e81de069a5b8bd5e7af3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x15b",
                    "r": "0x315f9a6b1ecf6838f3dc5c71faa32fe8c8a8b94b668060f67335d6727c53eeff",
                    "s": "0x526bf9d9a979da33ad4077c359b80b990254d474536d3d915bb90d5a87ac82fc",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:34",
                "value": {
                    "accessList": [],
                    "blockHash": "0xb7cb1fb8efb7f25153ab5574872f7d9e2c40f990ae2421b4904fe9069b39ea16",
                    "blockNumber": "0x2e2c61e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x0f6b5ced919d0a71e01c14322b38b4d6743543f3578ad8e36fcbbb7aff3a2415",
                    "input": "0xa9059cbb000000000000000000000000f6b115489f255f7f14e4bb9e80c79e66a140a380000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd9d",
                    "r": "0xf7c66dd2f5f16f1f1155763d94789b4fa5850c7fb77a99cc112b247522453f62",
                    "s": "0x69cc5633d95e4e56c7001f975cea27fdd9059d20a4a5afad2dff5a18956a7e5e",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:35",
                "value": {
                    "accessList": [],
                    "blockHash": "0x24e6458bb5348cdf0412326964832b46c41bccde9817cefcadc96afb0ac36daf",
                    "blockNumber": "0x2e2c621",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x386a495d489c680e9b7b777bfd68ecce24472c9a8296854082602f7754d24c62",
                    "input": "0xa9059cbb00000000000000000000000039eb2b2a35a70169e1ac6bc29adfa24dc8570d8c000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd9e",
                    "r": "0x61a066913e8914d0616539bcff073b3214bfbdc015157422feb603b5d4aa3a59",
                    "s": "0x3405e45eea44672ce0915d4a01ad6fd7c6e978aa0b5887220a84d306ee42320c",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:36",
                "value": {
                    "accessList": [],
                    "blockHash": "0x2806b11b7ce6ccaec3048d23455f9cb7eae30a84d781d60ee5543304f8f06bec",
                    "blockNumber": "0x2e2c628",
                    "chainId": "0x61",
                    "from": "0x828998e191cad602fb38e81de069a5b8bd5e7af3",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x66eed01c2ce126baf6e02adc4adbf90d810ee37f52fb48a1a186866c082709ac",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000828998e191cad602fb38e81de069a5b8bd5e7af3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x15d",
                    "r": "0x36f4376043937b5d75e3076ed84a9f1b4e76b3ca0136a07eb44c4fdd76cd1078",
                    "s": "0x33db15bc5eacf46398f7702b4920591e5fe8a43b11dc378d206296a16ba72ed5",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:37",
                "value": {
                    "blockHash": "0xaba4bab62e9b988b204837290fcd4473f1c238dbe46b3cdb045253eb65953800",
                    "blockNumber": "0x2e2c62f",
                    "chainId": "0x61",
                    "from": "0x39eb2b2a35a70169e1ac6bc29adfa24dc8570d8c",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x43f7568ad",
                    "hash": "0x807b8acb1bda022dc6ff72ea969e20c2be52dbbfff7938ba8725be51853e0b47",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000039eb2b2a35a70169e1ac6bc29adfa24dc8570d8c",
                    "nonce": "0x17c",
                    "r": "0x148632829c76d0a0bade8278829ee882b2abd6fd2942448791c580559cd442c9",
                    "s": "0x2fdfdcedbb7a48255fee0c0b94fd62336ba0174e72a31c9dee95926d0c0a1d0e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:38",
                "value": {
                    "blockHash": "0xe8d1211dd0c174034b94671a58a98201eb877a1db9e357a7c0415ea824110a85",
                    "blockNumber": "0x2e2c636",
                    "chainId": "0x61",
                    "from": "0x39eb2b2a35a70169e1ac6bc29adfa24dc8570d8c",
                    "gas": "0x2b6d7",
                    "gasPrice": "0x43f7568ad",
                    "hash": "0xeeb5d8a7ffc152e5f9b84a017d57e7393deccd1a34411d6414994668c540fde2",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000221b262dd800000000000000000000000000039eb2b2a35a70169e1ac6bc29adfa24dc8570d8c",
                    "nonce": "0x17e",
                    "r": "0x549f663ea30c3a99de103d35dee66cb1b755dbe73934f73103bfea26d4ebca4d",
                    "s": "0x6714c0d69584c16a5d35ba2001ec0622b481add4b7f5cd22ccd389806b71dd93",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:39",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9085aaf7b2bb1bdca29d4eca701b04ba75ab74ce6d3d1502a8b7ebd69f861e26",
                    "blockNumber": "0x2e2c63e",
                    "chainId": "0x61",
                    "from": "0xc7542d47a4ea053d969a434ca0dac6a81e91caaa",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x121152080",
                    "hash": "0x3ae1cd4fb227bc0b393fe3f8bb75e249667a3b0044b7e0335889b1ba2029a804",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000c7542d47a4ea053d969a434ca0dac6a81e91caaa",
                    "maxFeePerGas": "0x121152080",
                    "maxPriorityFeePerGas": "0x121152080",
                    "nonce": "0x80",
                    "r": "0x1f1d222e4fdd315380b534c8af5879829919e14953a0072e824b2827bc52efdb",
                    "s": "0x15cb23f489346a0baddd6d11849b248b991c31255bba40eed50f54e4d3e95e80",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:4",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe497a4978ef904a6dfd9982cabdb03c079151e515166e728c75b6294f758d009",
                    "blockNumber": "0x2e2c4e6",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4050080a8077e4ea61fa2baea07f1e42a857b2b98420221d8b2ceb205c538802",
                    "input": "0xa9059cbb000000000000000000000000a2a52136d18a30a61422c7277b9557eda2bdeb0d000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd79",
                    "r": "0xd23783f0f042752bb68f34e7a3a12c7315840f3eaa2b0d59c730d56c9fdb8e47",
                    "s": "0x6c7262c16e5c71c05b17f5cb43b2a290a5e77be564cea86ff89dcbdf8178d781",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:40",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9085aaf7b2bb1bdca29d4eca701b04ba75ab74ce6d3d1502a8b7ebd69f861e26",
                    "blockNumber": "0x2e2c63e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xefb0b418939166e642829ed2dece98492c755a6054166c1eddb684fb74fc910b",
                    "input": "0xa9059cbb000000000000000000000000f048d4dca6f5b843a85cca458758e26bb60b42dd000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dda3",
                    "r": "0x891e0c43c96f04d8a1f6be1469c79cddbbfff9b364feedfbcb486f9e5f54ff46",
                    "s": "0x5cc215561bf9fa4a04312167fbe09fa0666831cdc09dedd9a6c06848937f6f83",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:41",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa8a57a4dd87c74723409c4e27717a66061713aae504ddaaa0c3e9551c64ca259",
                    "blockNumber": "0x2e2c643",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x522cd88d0aee37c350b2998cb7a655741e0b85a01c5485d549cf235e89554ef3",
                    "input": "0xa9059cbb000000000000000000000000705277e5d8d87c0a25959ae713b720448f8daec8000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dda5",
                    "r": "0x1407e3e8d8de664077f9afefe4a2e2b9733b48e7bcfef1dd34b973ebd31dccc8",
                    "s": "0x3b6f2bd63a36df48868a3785082892b09744933f669bb0c2b588f4ebb76d4257",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:42",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa776e979d349e1dcb17543d9534b241b7cb1f14b6e83061a7a3d5ff22629f3af",
                    "blockNumber": "0x2e2c64a",
                    "chainId": "0x61",
                    "from": "0x1df05deba328873c50e90474649a7b288663c43a",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf81c371da9a05373cfde8f66a4c9d5f1c82079113a43a6121bbd4bf6e8165511",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000001df05deba328873c50e90474649a7b288663c43a",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x4",
                    "r": "0xf23f893e68542071f43adc9a3377ba33f7ed8262d12a22515731b7585bdc1e74",
                    "s": "0x48e511944a66330bf7fcf86e05e1792f07965edb85f8c9513ad30867a1e0d95",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:43",
                "value": {
                    "accessList": [],
                    "blockHash": "0xb5dc9bd3a54e81e3ff69d283e45b005b3204fc0eaea01cf559afecf4098ffa64",
                    "blockNumber": "0x2e2c659",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1d5affc39d54ad44c6322bf6e897610b9c834764fedbf489be7e9ca0d822a153",
                    "input": "0xa9059cbb0000000000000000000000006bfec7c3ca3f9ba319a5426c4f713bea92f29d87000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dda7",
                    "r": "0xd00cf88dc4a2fc20460854d8f51c14ae4362cd86aeae12cd4d8d2333dacbb996",
                    "s": "0x7fde65dd7cd61c39989e6fa0ae073145c13c0b9291d60a409ec1b0d9711c58eb",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:44",
                "value": {
                    "accessList": [],
                    "blockHash": "0x97c0601ce33310f00fa4f186ee09ab8ae1264c35f99c2fc148cb31aea56cf334",
                    "blockNumber": "0x2e2c65e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x924b969c00801fcf895295bb0f2ce8015a4b6c1cc37e4755b4544178a42a0c5a",
                    "input": "0xa9059cbb00000000000000000000000013ba275e400ab6bd124ff76cd84e489de39e8e0f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dda8",
                    "r": "0x451cbd4f01c6c2e40faa85cfe5a97a55cd9c574ca6ee76ce56b25b4ea4401c25",
                    "s": "0x4881e7b379c5ed568d5a18f5e94bf72b7593185764a4de953deb8ec253b4a2dc",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:45",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd79d1ba9ec109805d7ae788fac4c08522a3e5e548fb3e98fd82eb38f12dd0092",
                    "blockNumber": "0x2e2c671",
                    "chainId": "0x61",
                    "from": "0xb29098075c69376f37a3ec5e0e18e029735c2807",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd78dde1abb60088d3c771b34462406ae06b8f97e986fd07d75346e6465ba5545",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000b29098075c69376f37a3ec5e0e18e029735c2807",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2f",
                    "r": "0x5ae55b284005ee8104031def44a39bf9ae6e1538f650862ce2ff0d1a218af161",
                    "s": "0x63fa292bf9a0905ca0d15a6120646cce8aacdff5f1874def99187dff5d949b43",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:46",
                "value": {
                    "accessList": [],
                    "blockHash": "0x0debd6685e2c5d62d58a41db3b2a6f6db3c5bb5dd4834d7346104954d94b6d1e",
                    "blockNumber": "0x2e2c676",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9114e33f5653b2f6e274488155f67defa376a3eaa83c63b25645f7eec8747845",
                    "input": "0xa9059cbb000000000000000000000000892f7cb603a70df24b92c31f3c11063b80f97ec0000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddaa",
                    "r": "0x25caea955dac21878581d6e81f3d5d6f8e2d6c37847aa05979f74e4a6bacd398",
                    "s": "0x1b95561ffaa88f8571914dd37c308bf4249cbe335d88ea613f1c596438b69345",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:47",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf853329d3ef9c228ae58392041ad8199de772095e815a94b401e55e0b431f74c",
                    "blockNumber": "0x2e2c69e",
                    "chainId": "0x61",
                    "from": "0x828998e191cad602fb38e81de069a5b8bd5e7af3",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x92127cfd25806ef39d9a741b59dd2618e0ba97108065f3856b380de8a3f90f71",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000828998e191cad602fb38e81de069a5b8bd5e7af3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x15f",
                    "r": "0xd2816962129655a845b2388e3b50ceba1d64c002141bf4cd65da975653f76bfc",
                    "s": "0x1562109b469256e033b33a79d02f0b058aa9c96663608c242566454dcf05e7f0",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:48",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc681fed57545d46e46c41d4ec99fb7918e9b089f92235f205bbf8c3d69dc56db",
                    "blockNumber": "0x2e2c6cf",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x38d13c5aaa682c6b159008198809e7fb6f9b95ad498930dceafe0d6bc4639b78",
                    "input": "0xa9059cbb0000000000000000000000006390e556da9f5957c5f948729660eac2e792b12f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddb0",
                    "r": "0xd1bf6ac509d2457828e7e3d84ab9e4ea6fad5a0e7433d0b9c2e748fbbc16c7c5",
                    "s": "0x513aa9e8ac7d850ee24f7a07826abc28613cbc0ddd650710c199d6f693bc63e7",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0xd",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:49",
                "value": {
                    "accessList": [],
                    "blockHash": "0x8f68eae7fe39574eab6fc5dc20eda0169681114ca8e0cde583cb5baa57498ae9",
                    "blockNumber": "0x2e2c6e0",
                    "chainId": "0x61",
                    "from": "0xe1f804de3f8ef72284d79394d7fb890ada63ef59",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x6b5583c3eaeb8e35bbdb448907afc6c92f6b53b79cc29a38e9346f1e39e63bb1",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000e1f804de3f8ef72284d79394d7fb890ada63ef59",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6f",
                    "r": "0x395a2acfb2dda39cdfb7bc2deaf5c635b0368b9431ec8b1327c4dd749e64cbb9",
                    "s": "0x2ae0bc5cf0ed2a83c28014e2efd1969056c963d9a8ce7204ed388b5e0ffb1298",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:5",
                "value": {
                    "blockHash": "0xcf89c44e0d67584a93ca9fd6bb42f3e491b72ce5ecbb5ff7757dd94f6c022046",
                    "blockNumber": "0x2e2c4fd",
                    "chainId": "0x61",
                    "from": "0x04b9e4ae35057bd71306d7fd066bf581fa92684c",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x43f7568ad",
                    "hash": "0xa7d4e1cce68cddb20e2f8d33269355d7b5b51e4474f727e3bbb4717cd46de87b",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000004b9e4ae35057bd71306d7fd066bf581fa92684c",
                    "nonce": "0x21",
                    "r": "0x4a9aa538ccd70609a4b60f477db70aced57274fc96b1a7afb4676b86d5fd942b",
                    "s": "0xe60c0c56493b0bad247b250f1c4b12fb01aeabd79a609f2e632676500c268fb",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay.transactions:50",
                "value": {
                    "accessList": [],
                    "blockHash": "0x899660abee4b2f5aedc8f443fe72394c12e459e7c5be76de0a4ef51dffb083e7",
                    "blockNumber": "0x2e2c6e1",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5210684c7c8fd3a10b4158d22c4f46238d6c6c4c5f365af4e8c7285cff1f37e9",
                    "input": "0xa9059cbb0000000000000000000000008de9de5cc72686a98bd2316fe57c513e71f6f695000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddb3",
                    "r": "0x49e1b3109d7a4cc843136082f72003ceb010d4a98702ab0881e0a637a4237a99",
                    "s": "0x429ac9ff1d0d2a8c4cc0675b5d94cab026ee41914d2fc2d9c3fe929b7be32acb",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:51",
                "value": {
                    "accessList": [],
                    "blockHash": "0x91a3cef4a6553c26a099868d6a5dcdba96340a86558dd0045ebc464da425dc2a",
                    "blockNumber": "0x2e2c702",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x841353965b0d5d3c3767b73608ee05da553ee9e79bd8a49f16421186b5252491",
                    "input": "0xa9059cbb000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddb5",
                    "r": "0x31dd88c33642a707beba9aee9a9fb2ebcc5e575af987c3808cf2259d60f5fe2c",
                    "s": "0x4f86649c6001e6b98b442d133a62d438b28e9598090b106382440c974bfef3cf",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:52",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe742bf52781bfdbf56e0c9994def526fa4cf637e52b97803b85d4ba46639c9e3",
                    "blockNumber": "0x2e2c705",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa7cd780970397e067376cfcff41ceb513c4f2e07d0a310f9560b8427341a5faa",
                    "input": "0xa9059cbb000000000000000000000000b8008e575bb6b6ca552224cdfa34a14782b9a68e000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddb6",
                    "r": "0x29325f610436dbfe68cba692599964e84e8b2d6911672d1d1d8050393169466a",
                    "s": "0x37e1469436b5788f5b24bcd9ed9792cd25c7181c02af89437236a3dd04edb90f",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:53",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd95cdd6b1fe93aec2ba8b1deb901542b5ecc04592dc33d98e21ad204b8e68212",
                    "blockNumber": "0x2e2c713",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x17c5f32bdf56d97b51e9fa434f2030a6299f7ff4b50461f499aecc40c35f24f2",
                    "input": "0xa9059cbb000000000000000000000000f78b81f9c0c2f9ec73c56e611795b75c81b94b11000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddb7",
                    "r": "0xff4c857b60e33254f1cd3a0402e9f41caa57907b55b870056ae5a20d0b24d9d5",
                    "s": "0x4243e6ba41099442129f093f3ae78aac1b924eee37cf1a7507a57215657390cf",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:54",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc349f4b6667a89f9154b1cf82636bfa028fefcfe43fd4e221470a03c083a4f61",
                    "blockNumber": "0x2e2c723",
                    "chainId": "0x61",
                    "from": "0x035a6db13aa773f0cd522b6e3f0f968e905626df",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x94bee71881cc5a3d488f56a2c23adc2fc0bc649f9057ad724f8d9332ce3a6970",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000035a6db13aa773f0cd522b6e3f0f968e905626df",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x173",
                    "r": "0xef7962dc279d83693957624ca24443b5d976cec8b095e39216aa0fc6597911eb",
                    "s": "0x240c8957ac93391a6170bf6d3a6152d86fbcca6102b1063a9de7218dd68db667",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:55",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc349f4b6667a89f9154b1cf82636bfa028fefcfe43fd4e221470a03c083a4f61",
                    "blockNumber": "0x2e2c723",
                    "chainId": "0x61",
                    "from": "0xf048d4dca6f5b843a85cca458758e26bb60b42dd",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb627ab4280d5830cecfeee7f7e8b266d9d79530f0ba3104ccab5530f7a12e845",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000f048d4dca6f5b843a85cca458758e26bb60b42dd",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1a5",
                    "r": "0x1da6cdd4cc4f9790b44b29e29c1b236e498484e1a8f948a80903969e6f48204f",
                    "s": "0x4289d0e904f9a43fcb13e57c513a67309ff88a2bb7a25b6f10bd0ac2b5bb3a0e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:56",
                "value": {
                    "accessList": [],
                    "blockHash": "0x051600db07b286cce6eca78ef3084740e99085a604b7272587c12301994e5558",
                    "blockNumber": "0x2e2c72c",
                    "chainId": "0x61",
                    "from": "0xb8008e575bb6b6ca552224cdfa34a14782b9a68e",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x86a920b056b8450d4f23f5b32f15cd415d7b7ed5c8af3473c716641ebd9775d3",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000b8008e575bb6b6ca552224cdfa34a14782b9a68e",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1",
                    "r": "0x1d5ffc69dc57c4e5144b5b2d00931eb16387202341a0b7725c65e4a75f3e2fa1",
                    "s": "0x1d267859df683865ab75805667c0bd2c93590fe604321cf7a097f5eb5dc7f4a5",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:57",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbda35a10300f7e9ab66c8efa85fd06fa12a285b577e02ce12efacbe33b042b57",
                    "blockNumber": "0x2e2c735",
                    "chainId": "0x61",
                    "from": "0xf048d4dca6f5b843a85cca458758e26bb60b42dd",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x366db91c095752f64a2c78cf6c3643431d6284b536bcbc2daeb26ec8402ded31",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000f048d4dca6f5b843a85cca458758e26bb60b42dd",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1a7",
                    "r": "0x415de0e14a36868d4f0ba6ad70b0f4b686e59884eba2e9e5b2c228898de74edb",
                    "s": "0x48ceb22e281302d7cc4abeb720c082ae09dbe38e0723472a4ca58565604c88fe",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:58",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9087435801eee7e155a3e1b71e242287948b0ba717194d936273e7f89a837e3f",
                    "blockNumber": "0x2e2c74b",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x92de29dc01a7abc0161fcaafd1b08ead3a6ef1be4a246c54e8533c584f62bed0",
                    "input": "0xa9059cbb000000000000000000000000967c7f30183a088cf2809805e748a155347760c7000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddbb",
                    "r": "0x601f558089b7d4e8add0a4c5d8a875e8f8336fd36b67e09a832c945e23d7cf6f",
                    "s": "0x747652b09e307665747a83d470f48365b2fb7ffd0829a2816123839f65733d79",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:59",
                "value": {
                    "accessList": [],
                    "blockHash": "0x035e1d7914ac01428c0b22151f0baebfe4d5be9bd42d6b312340cfeaeda71ac9",
                    "blockNumber": "0x2e2c767",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x10b313a419443872fb2b4f1d2b11317aebbc62793544f523170f61051feb7959",
                    "input": "0xa9059cbb000000000000000000000000377b98049e8178fbc6e271e0e3b1c3302e984536000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddbc",
                    "r": "0x18faafe6281e3f69ff6d551a9ee56443789b7d691688e80a22d5a2ac5dffd771",
                    "s": "0x70b4c658c8e7b0dc34a8633837bf0285b512b20e739af8e2f6d26fe309d0ce0c",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:6",
                "value": {
                    "accessList": [],
                    "blockHash": "0xcf89c44e0d67584a93ca9fd6bb42f3e491b72ce5ecbb5ff7757dd94f6c022046",
                    "blockNumber": "0x2e2c4fd",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe2651306e1123998b03c6cfccb6e6814f92c58fb88fd57d7ef81dc165bddb4a4",
                    "input": "0xa9059cbb000000000000000000000000ed67eb7a03ca0b5a7f452e983bc2ad953176a9c2000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd7a",
                    "r": "0x9a6d6c61df87a365e8b6057d3dd7efc11235f26019967cdf5195f7ce1957a437",
                    "s": "0x4c57ece1aec190b368f536845da6777551cc46b3375a4bde83729dbd03956ffc",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:60",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe446df22fbfb668c80ecf3d408e57e433ecac60f2043ce53fc42c1b6ce9bba15",
                    "blockNumber": "0x2e2c76c",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb8f2daf11de22d80d84b43604f5a142b036bfa53738612ff3e6f1300eb3d0c6b",
                    "input": "0xa9059cbb00000000000000000000000096cb50c55cfb27a83925af8eed3456cdc37d4e02000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddbd",
                    "r": "0x5c8c4ef62c33f996924c16c4640b4f9ea60dbc27abbd2678da2e5e58842ae43c",
                    "s": "0x2b81b4898b3110ec4a1414702f911986e95af5a03707d14da9322fafee489b00",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:61",
                "value": {
                    "accessList": [],
                    "blockHash": "0x2014314000e58016cd681d13537212177ef05059d857fa8b9dd72cae2df68cc5",
                    "blockNumber": "0x2e2c76e",
                    "chainId": "0x61",
                    "from": "0x0b1bf465b901ad3b8fae118c6cffd741450c1382",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf2aac1fa34523880f3a4d6d3f2038725e2f9246416756a766bd757ae98bfc124",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000b1bf465b901ad3b8fae118c6cffd741450c1382",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x55",
                    "r": "0x9264c71ec98897b1c37783c5d8fabae282a1847ea1a4035b3d220b28db09bd74",
                    "s": "0x330e24868b99e62a2db390968fb1022488275a6bc8be0b446c6384e6d1d8c06b",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:62",
                "value": {
                    "accessList": [],
                    "blockHash": "0x2014314000e58016cd681d13537212177ef05059d857fa8b9dd72cae2df68cc5",
                    "blockNumber": "0x2e2c76e",
                    "chainId": "0x61",
                    "from": "0x0b1bf465b901ad3b8fae118c6cffd741450c1382",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf2aac1fa34523880f3a4d6d3f2038725e2f9246416756a766bd757ae98bfc124",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000b1bf465b901ad3b8fae118c6cffd741450c1382",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x55",
                    "r": "0x9264c71ec98897b1c37783c5d8fabae282a1847ea1a4035b3d220b28db09bd74",
                    "s": "0x330e24868b99e62a2db390968fb1022488275a6bc8be0b446c6384e6d1d8c06b",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:63",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9ef176118bda6c97ac0c8180b273de6ce54ac346fd0912f9c5649e8deebf1917",
                    "blockNumber": "0x2e2c776",
                    "chainId": "0x61",
                    "from": "0xb12b69af3f8cd318d691336b91b0554882237099",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8b21a5a0413f99c5b13a5de1393ef489c3a9cdef2f3204ffc51be48c9a1af4fb",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000b12b69af3f8cd318d691336b91b0554882237099",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xa2",
                    "r": "0xb3cfc4c15e74b550efc77d90246745391a2b661c2cf1fc2a5b1d7e65a70bc7fa",
                    "s": "0x6312b8ec81a5447b4fac28852ffd7fc53309a6e6f97c3a3cb276fc00aa82166d",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:64",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc5f328f963e5812d193bcb6fd6e8600a9a707e6de6efe8310dd029d6f42b5079",
                    "blockNumber": "0x2e2c782",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf5a3131dceb88df7457f6b4e07174f6fea53b9da2bff6919365a6dd4c3d2c2e6",
                    "input": "0xa9059cbb0000000000000000000000001875aa8ceec9154ecf35debcbea9a954d7f14484000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddbf",
                    "r": "0xc9d1b05fed6cbf09739b012898def53f6758a986d4b37f61888520922601d08a",
                    "s": "0x20f92274f6c395ff1b01906bbe871bcd2141975f09dfd3c3c51e9c823f8c0d7b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:65",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf173b9070ca2a008b51c48aec1024f0883ab093427b7cb51f3f290c2aaece854",
                    "blockNumber": "0x2e2c78a",
                    "chainId": "0x61",
                    "from": "0x309af3883b9f3cd786bb4efcaeae9f871931b903",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd3ad13c2c172c487da2062a7c17aaa24097c28c492d4d4cb1a5e6378acc9f20b",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000309af3883b9f3cd786bb4efcaeae9f871931b903",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xc9",
                    "r": "0xa993111d62a6fc0d5339f311ffafd5f866977ed364da892684df54e7710d5a7c",
                    "s": "0x5cb223517b9a7d96d8cd88d685dde3c7d42abf680b099a1c985e1422d9d7e0d8",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:66",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa90dffd5608974e7dabf674350476527502e7feaaccd97ec58e2c5279c219d8b",
                    "blockNumber": "0x2e2c7a6",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x562d66328b08ae07d3e346f1d9ab764e045198f4b4f084629da3c48e2eaa9370",
                    "input": "0xa9059cbb000000000000000000000000999fe9b5285021ee868e5c6475487a592cca959e000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddc2",
                    "r": "0x250e32ceacb01070603934e51c506681001e4fbd761153222703aebfe4c9ab02",
                    "s": "0x118e97524172f33c6931a0be6d72c6813e14f2d09d99faede1f867c887942330",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:67",
                "value": {
                    "accessList": [],
                    "blockHash": "0xad326dd5be7e02e9bbedb3f9c4216481817eb7ffd29dc26ac564e5876697e044",
                    "blockNumber": "0x2e2c7aa",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe27b3c1534626c6b8c896009a3c23535bba617179ab6bbc5b430b2a6f4f71537",
                    "input": "0xa9059cbb0000000000000000000000007503b39d0281018be8ad1e07fde37a22a9e178ed000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddc3",
                    "r": "0x213d28f945f47f1d607c8a6c066e02aa0098bd8893f078a8c4bf062a77a10534",
                    "s": "0x2d3a17805d1884ed38fe1c15c7236cacb5a1ee81a89eb27b9cb38a68591050d1",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:68",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbaa4e15de605dc7bb22848918e3a84230a25ceb22fdf374dd538e5754b3e3d97",
                    "blockNumber": "0x2e2c7c0",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xee1269e839750356cd1769cfb01264183dce4b6486523363afda715b08abb169",
                    "input": "0xa9059cbb000000000000000000000000dfe412ecf11d24959b1b9fe8b7e21d41f1cdfa21000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddc5",
                    "r": "0x6451cd4aba0635603b5074f22227727fd478d79768e5da328fcd75bab6b1e299",
                    "s": "0x4542755478f5c2c327d91f4fdf6f2929809933f2e4f28cb3fdb701d3d1619eb2",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:69",
                "value": {
                    "accessList": [],
                    "blockHash": "0x956f872d3471ef78b3c2fee16dc06c457aecc518eca62f7e9cf562e8ca756670",
                    "blockNumber": "0x2e2c7c1",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc1ce580cfecff3f1f6958f3cc6728b7797d62183f6cfff01e28641cc4f4f65a8",
                    "input": "0xa9059cbb0000000000000000000000003df7957b77f22a979d5c7db1bf621b9207ecd116000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddc6",
                    "r": "0x8481ce2ac2d1e6675f0252129d4fc5a9aea56ba0c50936829a2996f1709b296",
                    "s": "0x22f2b37b01e98078c743149d8f3c54fd7060917fd2a8266827979439d1ef9f52",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:7",
                "value": {
                    "accessList": [],
                    "blockHash": "0xcf89c44e0d67584a93ca9fd6bb42f3e491b72ce5ecbb5ff7757dd94f6c022046",
                    "blockNumber": "0x2e2c4fd",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x51dc8147e670cf2fb246444b8a7d9f70a78cee597b0a3dc1a03d2e1a37ee85af",
                    "input": "0xa9059cbb000000000000000000000000a308e9ff5a3e26bb317b72734d90ca94ca02f226000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dd7c",
                    "r": "0x9954e6935c267f123161cd319b2d50f26e6f94c6ef84114e916204a9fdc58271",
                    "s": "0x30ac9437c09f67672f47e7ed8fa8c5bdb5a0910cf3764dc72420bebde499bafb",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x7",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:70",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc6d79c35dd3b824b98e319ccc613a926cd750c9e95e6898a722d0ab0655962a9",
                    "blockNumber": "0x2e2c7e3",
                    "chainId": "0x61",
                    "from": "0x0c93ef888d4f672d81837f9f61a596192dde7fae",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb38833df3e6228bcc10171d94329f08959629a236edef66dc2f686b7d92263be",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000c93ef888d4f672d81837f9f61a596192dde7fae",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xd",
                    "r": "0x97bf5955dfc30a8b1f264109508750b8a63643c47e07c6662a5d6f2d208f8875",
                    "s": "0x767a57b5bee1f7778373ec0dce14a8e039ff7d4d4e54982e76a547d61f2f305e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:71",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe7fe28cb3d5ab27f8c857687dd91f5e66f253a9dc60ad9aec229a888a46d9483",
                    "blockNumber": "0x2e2c7f1",
                    "chainId": "0x61",
                    "from": "0x6fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd9a0f238934f7522c185890d0f8315ac28b33c001667f81226a48f1200f595fe",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000006fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xbc",
                    "r": "0x3ba3e20c1ffdd950ab2ccaa70d30527d3ce5d7780eab7615afbebe076387cbca",
                    "s": "0x16f27c2b1d5569505f447bd569888737e4e063f909c94c9133b5abc338a34d89",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:72",
                "value": {
                    "accessList": [],
                    "blockHash": "0xb4773698e35e399c30d828c90bb6513d384bfdd48535ab60ccf570a03b6b20aa",
                    "blockNumber": "0x2e2c7fa",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4a00cd840d7f13305e174d5c94bb64f8344b7e7b839066346764a2cecb9afbc9",
                    "input": "0xa9059cbb000000000000000000000000d37c86e67fa62bdbfc53fbda5d6d6adb52ad71f2000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddca",
                    "r": "0x8395046cb072a71efc679dbb0c585cc954796d81bff8a0c9742e77dc3a1a23ea",
                    "s": "0x4f4081d51e23985b5dcbd5787c80996d18d773b274a53a8644b0ace611a1e35f",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:73",
                "value": {
                    "accessList": [],
                    "blockHash": "0x8d4f82ae6c4efd06dc6eb96cd639103b18eb3ca689c4dccd2361c2053fa979eb",
                    "blockNumber": "0x2e2c804",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x3df4912a97fee0bc908f424acdb0222acaf1cada916dce02e5ff2a3ca73912d5",
                    "input": "0xa9059cbb000000000000000000000000b63879797ea7b1d9fb36e814f6f47a36d704c09c000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddcc",
                    "r": "0x57fd78ba667b510d0f65511c17c1e7b80bbc10252f296b25e598c9fc9470ae2e",
                    "s": "0x6b1f731561c70bcf885de1b412fc5b0404cd6a98770a13a8b5cfaeaff13512b6",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:74",
                "value": {
                    "accessList": [],
                    "blockHash": "0x6de9519365d90d5b26d92484cff56f732b92373fef968e4960f76e1f519bd6af",
                    "blockNumber": "0x2e2c811",
                    "chainId": "0x61",
                    "from": "0xbffedad1335f34d87791c3321cb36a7b7b88d86c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9c45480c50d1c79bbb45e0495bc3e8d29789f76c5cd0cd7b4fce643c3810a65b",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000bffedad1335f34d87791c3321cb36a7b7b88d86c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x88",
                    "r": "0x54534b3659ec0705d85ce983a845e74f59d6d35d94191e0bfeb5595990fbf1c6",
                    "s": "0x498da3da7f06f3cf603f7662a2f32c5e3a5f758e40075b9f8e18ec180d6b5637",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:75",
                "value": {
                    "accessList": [],
                    "blockHash": "0x13cd44cd79340d3ecdbd1f2d1e78f7d6b623cda2df3d5892e70c1954424f87bb",
                    "blockNumber": "0x2e2c82e",
                    "chainId": "0x61",
                    "from": "0x6fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x870bf09d39bb64716e4f3be5fa9679241c0a83a5d7b8b5ea286777e888c99e8c",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000006fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xbe",
                    "r": "0xea6d7841415dfd8551abbab9d4067c5356817e24dfd1e31399699d7671f7e785",
                    "s": "0x605269ab08f995b688ab7229f829003a76c82940cfbcfacf112b37cf2143ed7f",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:76",
                "value": {
                    "accessList": [],
                    "blockHash": "0x13cd44cd79340d3ecdbd1f2d1e78f7d6b623cda2df3d5892e70c1954424f87bb",
                    "blockNumber": "0x2e2c82e",
                    "chainId": "0x61",
                    "from": "0xbffedad1335f34d87791c3321cb36a7b7b88d86c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc406729538761ce9d273bb68ed334fb954e740c3024ad1e929047fdc3aa8057f",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000bffedad1335f34d87791c3321cb36a7b7b88d86c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x8c",
                    "r": "0x1b5037b15e572859d0983b72acd96f16116ca8e946ec880a5f68cb1c786d7f8f",
                    "s": "0x3bda67b939d156b65bbea9738f39283e894a34180dc259f865cdbf887aad7689",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x7",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:77",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd2ab7724802cb81124d99c1fe96dad7f93c91106f8afa88a66ca3b67f7f60b3a",
                    "blockNumber": "0x2e2c836",
                    "chainId": "0x61",
                    "from": "0xd179a20625eb5ed6518817536fe91d57f3b439a1",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb5be90df7c3e17c4cf209cb613b84b904e4f868de69ea147bd2ecf8dad208401",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000d179a20625eb5ed6518817536fe91d57f3b439a1",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x4",
                    "r": "0x484a6bc32890ab4fa73a6e0521f0a8fade9bb75330216f4727452eb100780089",
                    "s": "0x400ffe0201f79d7319b3472bdd187596af7a3ca58f8a41f27ce9d48f39064e46",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:78",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd2ab7724802cb81124d99c1fe96dad7f93c91106f8afa88a66ca3b67f7f60b3a",
                    "blockNumber": "0x2e2c836",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2bf8f1e9ff0aa9118a866c0a3bdbeebaf7a60df44dad10df6b998a843eea6dff",
                    "input": "0xa9059cbb00000000000000000000000032337fb7114eb2c59befcd568e18b0a2f4e7ba32000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddd2",
                    "r": "0x443712a375be33217cc7c38d8edcb084372af3e6849b53f12677e27d21d3c9e5",
                    "s": "0x22a4eee05a1a1744deff1b85e720754f636d7eba36c9eb167a21c28e948dfa74",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:79",
                "value": {
                    "accessList": [],
                    "blockHash": "0x21e982f8be2d68413627d79d581a6d23a520a707823402d9a44137927c057954",
                    "blockNumber": "0x2e2c846",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb70adab12877d847bd28e586314147a9360bcaaf83052f0d0f4a762ed7ddcd22",
                    "input": "0xa9059cbb0000000000000000000000005274595d6f73a2bd4e8eed881e9385eacb9c26fe000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddd4",
                    "r": "0x1623ecadcd9f01f3c010099d34f5af3f3c1ec21c4d4cebb19118be26dc22e77b",
                    "s": "0x6680cfb248df2d24dfdb8d1884fde77cfaeb6b410878a5ff3316d74771a98e5b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:8",
                "value": {
                    "accessList": [],
                    "blockHash": "0x27909183f8bdf09a645652f95b542ffc2b1514e29da7f305ff7e4d8c1ce6b5f0",
                    "blockNumber": "0x2e2c50a",
                    "chainId": "0x61",
                    "from": "0x6e36b3479d7a91fd406efa4208b56dd8a785034f",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4dec0be4a6f4a785755252a5fbc50970f7804c79fadb46df9f30d4c8acecd499",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000006e36b3479d7a91fd406efa4208b56dd8a785034f",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1ac",
                    "r": "0x4c4a6f857fdf3eb3e0a471e3ac2d6088755f83fbc1a26b752d2de1c354e6352b",
                    "s": "0x20292eae48bb806691e1074591d8ca8ce1aff1ee2c215edfc3d4479ae2d5a1c9",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:80",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbdcefa5c8abe10587b690c0e3778e7c1a529847f5176ea920b9aab9f1287ea66",
                    "blockNumber": "0x2e2c853",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x53102bb3d2766e893481b15323f1225a969c3609cc8b3d87865f08d26e82e22e",
                    "input": "0xa9059cbb000000000000000000000000597b9418eeab34178bf0425108c81ff14ce7ad57000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddd7",
                    "r": "0x504c53cda90e3c3a35879d8e4d33580a1ad4c49785927bc0acf9f9948cf8eede",
                    "s": "0x21357cca1b57a4f406cc9475c1d6f6c61654b6d447d52d9ca6048ab548dcfacf",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:81",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc83553fd4bee1c10c259c24d94b2f87c66339433e1643a83cf19ad0ad378e91b",
                    "blockNumber": "0x2e2c85f",
                    "chainId": "0x61",
                    "from": "0x5049eff7346a1767016044b7ba6c2833cffdab94",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x370aff216712a76f78c89003ed695c7bbac2b16eca873edb3d5bf89ad28f3618",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000005049eff7346a1767016044b7ba6c2833cffdab94",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xe4",
                    "r": "0xfa873fb2859a48ba2083634d3239c930deb8cd34bf8bb9cf9773bf859ce998a9",
                    "s": "0x347a95e90d951ebc7142bbddd66c78e8f61b796abb7d116566a3d4ea48157f2",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:82",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf9f2d35b87e858f0df26a3382a369796b2bbdefd99171c896780b862a7e5c78e",
                    "blockNumber": "0x2e2c862",
                    "chainId": "0x61",
                    "from": "0xb2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xad731380",
                    "hash": "0x51ceef3cc5e66ed39e0175bce099f4c47db839f2d7305cca9a2ac6d987aa95db",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000b2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "maxFeePerGas": "0xad731380",
                    "maxPriorityFeePerGas": "0xad731380",
                    "nonce": "0x258",
                    "r": "0x48fbadadd7a527a7608d4750d33e39e6c2882f2b0b28d8e24d803e0026ce2e69",
                    "s": "0x12140397087298097b51b4b2e5a0d65fcb78ebbfcc5d6bce62bb019720939c78",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:83",
                "value": {
                    "accessList": [],
                    "blockHash": "0x35653d17ad83757163230ad01c8639a957517e48fee35153f8eb80a85efb9c68",
                    "blockNumber": "0x2e2c86b",
                    "chainId": "0x61",
                    "from": "0xad1cbd5cdf7c038becf692507292bcd38b1cfa8d",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x60f867480951be532dec24c7d22cb859a28784bec8a703658f36ba28f0059cf3",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000aedbdfc069c00000000000000000000000000ad1cbd5cdf7c038becf692507292bcd38b1cfa8d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1",
                    "r": "0x76c733cadca15f41bb80fa5bcaed02afbff86ca51f14b741e86b29bbe7218efd",
                    "s": "0x6da4fd37d611ba4c67d87866da4ecd37ae1b1c7466b548c6297473793777d22",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:84",
                "value": {
                    "accessList": [],
                    "blockHash": "0xdcff52d3aed4036abd8049afacb63747f566ad8d97cac52ad677e29317c92397",
                    "blockNumber": "0x2e2c86e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9946df6e6fa17344adbebb1e4b495caa1636ce43ccc6dc7178e82d90f7eae39b",
                    "input": "0xa9059cbb00000000000000000000000084ec5f411304491f2ac08d630225725223d7b29d000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddd9",
                    "r": "0x50f2a744e34677c23967a7eae52c9e3f98e10fe54df32c67ee7d09eda8dfb877",
                    "s": "0x1225427317378d2471beef0e145b8d49170342d90e8a65d585e8372ca7ecbd06",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:85",
                "value": {
                    "accessList": [],
                    "blockHash": "0xeb40d08f2ca0d4a572bab0da3545ab2bd3ab2afba8c8442d80e5d30129d2cd3b",
                    "blockNumber": "0x2e2c879",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc30472e350121f35781da494099a9ee18bd7323907466f46390533080424d233",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xf6",
                    "r": "0xb983261e72175114055668f966464324f8b172aa9071986ec0f5c90330d23cb3",
                    "s": "0x74e19e6019974c7b2f09608d2256b7ec2d6e15a7ccdc88b9b589bcef91148f66",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:86",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe27283b224497abe64aea3486b50daa09d9d5858c951bdd46eded4927cd01ad2",
                    "blockNumber": "0x2e2c87d",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb73db707a90b33c4ef6f72208fccaf96cade8db6a22982168a2cf8e5d23daea6",
                    "input": "0xa9059cbb000000000000000000000000a85902da6665d42490bde49e945201eb878cd47f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddda",
                    "r": "0xbbdbeab25d7e142bea8bdc1d733a1a9529116ceacd75cbcf7678091d27af5a05",
                    "s": "0x6daa4f0bc0e0b722eacf9ad4eb2f5ac15cf87ad8ebfdfa71ba451020f02ea316",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:87",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9c61e570e9e2e7d4b2efbf0b3c7658f7f434a0d728c62ab065531a33d58b24d7",
                    "blockNumber": "0x2e2c884",
                    "chainId": "0x61",
                    "from": "0xb2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xad731380",
                    "hash": "0xd77d92379430b3618a444343426b1cf0c858911bb301d2b6516394894948b523",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000b2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "maxFeePerGas": "0xad731380",
                    "maxPriorityFeePerGas": "0xad731380",
                    "nonce": "0x25c",
                    "r": "0xf6ca56509ea196a8b57ab2a7018be8954c1f90acf415f22dcb0681a59bd25fbd",
                    "s": "0x482d66b12a4a4c1f8f1a1b4bdfb0122e8609da89e9e629bce70e429d2152dc79",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:88",
                "value": {
                    "accessList": [],
                    "blockHash": "0x432e1b56ffc2fd6fc14dd85d3264065fca9d17d100034f0248e6c4690d58be1e",
                    "blockNumber": "0x2e2c887",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb1c868ccbbaf12cf749012f940744921c354a5d78e1d571865c92dca8d0321e6",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xf8",
                    "r": "0x6e58d7b348c7e39014abdb1dea62925b1ab83fe5a3ae896a5c68fe51891fb529",
                    "s": "0x7191e168ebe1213ce9839eabcb41fa6cebbf0722d6d8a068c78319eac187c6ba",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:89",
                "value": {
                    "accessList": [],
                    "blockHash": "0x5a36a5f6932731661d49de6f2d4a7250b2a8f8fea9cb2a34fcd4b1f245752583",
                    "blockNumber": "0x2e2c88f",
                    "chainId": "0x61",
                    "from": "0xd792f6c17fb119b144eced9186140a6e9d54331c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc9d239b968c1b0ae1a33bbf73d706361d6293f3512c6bace82c231cb39c7dd06",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000d792f6c17fb119b144eced9186140a6e9d54331c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x62",
                    "r": "0x6a276b6ee5fa7b2d6b1f752e6bebed2b1e5f64e79ed432ac92d7685dfda0a94e",
                    "s": "0x260c217fb9d9ee483a1ec9351354900be644ab6d403a1e7e90c08a987f5a4800",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:9",
                "value": {
                    "accessList": [],
                    "blockHash": "0x277479f93a81c237311a8568fd4a9a5db0428240c557402bfb3a975a1aff3224",
                    "blockNumber": "0x2e2c51a",
                    "chainId": "0x61",
                    "from": "0x8eee59e87f13cbe3eb6e454025408a93edae6612",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2953b86f7503d65272da13e8435fac241120c7a3de87651335eb522cc9e6c7bd",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000008eee59e87f13cbe3eb6e454025408a93edae6612",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x83",
                    "r": "0x4f379fe596c93cd609e81d1cca9d6dec139e461301676c352a134049b4aaedbb",
                    "s": "0x3529d5f496ed4b562848df3dfebd2ef7c641ccf936c19c641b33de3a7190679e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:90",
                "value": {
                    "accessList": [],
                    "blockHash": "0x13fa03fec16f72ae44bc8e6651f237f329339846f7334f1bb843b612173677fc",
                    "blockNumber": "0x2e2c893",
                    "chainId": "0x61",
                    "from": "0x9935e51e3ac62c731fdbe9a722efb2a78e0cde1c",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa1467beb54507b2fddc9e4279846175c95974eb231ab4eba5c4fac4becbf871f",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000009935e51e3ac62c731fdbe9a722efb2a78e0cde1c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xb3",
                    "r": "0xbd5fb20eaca508116e1621fda260461a62f7fb6e2cdb76dfca62349c6ce8b246",
                    "s": "0x6be7127d3bfe52a370aa0aa9729225f2cb43bb873b3d1f18cbfc2acb1f2ae8c2",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:91",
                "value": {
                    "accessList": [],
                    "blockHash": "0xefb157d41e4cbefcaacabfb34bbe3ee0a8f56d350d456ce00ab094a55229f4ac",
                    "blockNumber": "0x2e2c894",
                    "chainId": "0x61",
                    "from": "0x16bceab1f3407ab888b2ae29a821096fc40c99ac",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5c517021c867768b9f068060befc6ceab1c59d364d775046e607c8b84ef9e9ed",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000016bceab1f3407ab888b2ae29a821096fc40c99ac",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xc",
                    "r": "0x3ebba68be0054a4eeb290f9690c8772747967eb1e7d4b108c3fc2a6e0f253bd5",
                    "s": "0x37627166276e6308a758acb98ef2809601c7d81b34d6f65bc5614b6a023d9a05",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:92",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd1f68b0a1120294551952f7f7f80339d1582b381a23476f6d5ca007220a8f890",
                    "blockNumber": "0x2e2c897",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x973665b9c2bf49eec3f9d490a4cfd2e283940d229c3a100f7ca3fa4ffd976d74",
                    "input": "0xa9059cbb000000000000000000000000a991cac67863bb414adf0cfe482550b4e56934d8000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddde",
                    "r": "0xd4ac7550f74a604baff942a6b98b72ed86caee89f7db05a983e1c1f8ee785669",
                    "s": "0x28091833080791f0a18aa81aba73f749736f4605855fd1a78b81475739f1595d",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:93",
                "value": {
                    "accessList": [],
                    "blockHash": "0x86e553ccb61c457c1d0312d19695a0a0ac29b6c15657c99c83f7d86dd2f78edc",
                    "blockNumber": "0x2e2c89d",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7ff0f0ab2cd16bc6914063c2259d35ab082df4a1f63f30620afe00f276657027",
                    "input": "0xa9059cbb000000000000000000000000c7775b6bd4dee2834021591837ee2f66fe1cbd40000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde1",
                    "r": "0x8ff85f825445c248fb523c24beb85fb77c0927e81b39a2fcc1df594376e449cc",
                    "s": "0x5aaf818ef249f964623c6318d45ec0634eed95d5d9f3f78596ce6187eeb7a4ef",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:94",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf99d20edd5932b2ae193c8940bbd63bf95d4044ea09d7f927acee6503d53fa8d",
                    "blockNumber": "0x2e2c89f",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x67952b06d3cde196ce7b50a822c6dfa92d4d67b92f22c6c55349e87be35fb958",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xfa",
                    "r": "0xb7aa3c1c3ef46d4c043a9304615bec5fc1dff0d59fe2dd7ab9c542a5827fc5bc",
                    "s": "0x45940276051c75c372c3ed3bcf7f94895e78a4ba17aa9d5e389bf7e366d273ee",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:95",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7b0bf607920c1822087cc9fd85af89c9b20e481e4df14a27122223651ebb18e0",
                    "blockNumber": "0x2e2c8ad",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x347e0b3a0d566d178ff3f853c5d206baa345979233c65532bba7bf48ba7afbb6",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xfc",
                    "r": "0x33c93b22d228521140275c585d9e6d53a7aebbb2a1446804a46579824418344a",
                    "s": "0x6569170194b05cb70a8e90975998c6fe712ddadc3b0bf59e3b0cb5ce40f83bcb",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay.transactions:96",
                "value": {
                    "accessList": [],
                    "blockHash": "0x08afa924118e45a7ccda61fcf0b17ad01c2444a51b446270191d9e984ae2aece",
                    "blockNumber": "0x2e2c8b2",
                    "chainId": "0x61",
                    "from": "0x93e92683fe76a22d18f202c731a6b830eb17620d",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x57ce68fe84136827a964e3085518336cf730f47ddabd966cca2e6a3faf2a8a07",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000003faa2522600000000000000000000000000093e92683fe76a22d18f202c731a6b830eb17620d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x13",
                    "r": "0x4486f3a826b42f6124fe361c203cf9397f5f219ecf971d49beadeeff1e72cda8",
                    "s": "0x72779d1bbedc06f3955748fa192ddd6dbecc55dd45be41e3df938260211d2ebc",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:97",
                "value": {
                    "accessList": [],
                    "blockHash": "0x84db2cfec1c0178f592b379966b0f2dcc84771603ff52366e020a7abb23638bf",
                    "blockNumber": "0x2e2c8c4",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x910ae5934be52eccc9be112b54faac50b69bc274b93f0ce26f816bc1bcc951cc",
                    "input": "0xa9059cbb000000000000000000000000811fb9571c56208f4d5390f46edfbe22514e8395000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde2",
                    "r": "0x36b1c4e17f6c2c542e0886d5d3f929920c0c4fb1012b1add9e6d9adc5b46ae0e",
                    "s": "0x148ace4e0cd194e85ee1cd86ee53837f5bac456f556f96685ad1c72d56e0b46f",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:98",
                "value": {
                    "accessList": [],
                    "blockHash": "0xaeb9d592dfc5e2beddca10fc5aca8efccc2f39f6b5274934107abfdeedea35c3",
                    "blockNumber": "0x2e2c8c8",
                    "chainId": "0x61",
                    "from": "0x6fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xca014195f842b3807cd2fafd7cd0f9b7293ef0dc4c9bf5edec79c3e6f7413959",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000006fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xc2",
                    "r": "0xa70a6e0460036ac844ba503cae1908b9a8308fb3785caefc0ebe98ce59cb31e2",
                    "s": "0x5918431557b0741476405da977e2dd350a85cb292d8ff160f4ffd9caf714028e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.transactions:99",
                "value": {
                    "accessList": [],
                    "blockHash": "0x60a7df559d7d2408528aa701b82523ba03c691a4aad2ad59c3da9e132bbf5a87",
                    "blockNumber": "0x2e2c8d1",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9fe155be971772adcc1ba4cb5ec56e1fec2c6ed2f22c78b7eb6f7a1ed405adaf",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xfe",
                    "r": "0xdfa3d0b0596ddb831330bd386975516c90c1897254a13bf3b2b08a92eb8f1fa3",
                    "s": "0x43ab79c92fba462be98905510baa9d2fb13a3eb3090feeb1c313ec8c6fbef61e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay.tx_count",
                "value": 167
            },
            {
                "key": "con_relay2.__code__",
                "value": "__transactions = Hash(default_value=None, contract='con_relay2', name=\n    'transactions')\n__relayer = Variable(contract='con_relay2', name='relayer')\n__tx_count = Variable(contract='con_relay2', name='tx_count')\n\n\ndef ____():\n    __tx_count.set(0)\n    __relayer.set(ctx.caller)\n\n\n@__export('con_relay2')\ndef add_tx(tx_hash: str, tx_data: dict):\n    assert tx_data != {}, \"Data can't be empty\"\n    assert tx_hash != '', 'Tx Hash cant be empty'\n    assert __transactions[tx_hash] == None, 'Transaction already relayed'\n    assert ctx.caller == __relayer.get(\n        ), 'Only the relayer can add transactions'\n    tx_counter = __tx_count.get() + 1\n    __transactions[tx_hash] = tx_data\n    __tx_count.set(tx_counter)\n"
            },
            {
                "key": "con_relay2.__developer__",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_relay2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        19,
                        17,
                        20,
                        13,
                        0
                    ]
                }
            },
            {
                "key": "con_relay2.relayer",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_relay2.transactions:0x01f881c77029c7351193b6bfd77faa1496034491bd702e4d2314c7e43ef4a12d",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4138623fa23bfaa3261d29c1fa1a188a0aacb317eea29152ae50a4efc8004599",
                    "blockNumber": "0x2e2cb8d",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x01f881c77029c7351193b6bfd77faa1496034491bd702e4d2314c7e43ef4a12d",
                    "input": "0xa9059cbb0000000000000000000000007e10fa26eedaed9122ab1a684f711a3067cdab5c000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de37",
                    "r": "0x5f14be2fda3bc3e8e8f54293bc4f43e2dda1c07d4473dde4b575c6f64eeadf96",
                    "s": "0x2a893bebe255274c290af39d9f780d223183136e765b2374eb15d90c93bc146d",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x046afb651c9fa11e5e4314d90b0177b3473f372f23c7d017dd52ff1efba22faf",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbffd32f3aa50934969a85bb6883052393ffdcfd62025c5e9b61601c3c78a6cf2",
                    "blockNumber": "0x2e2ce1f",
                    "chainId": "0x61",
                    "from": "0x26f741f27350894dbffc7001fdd5e10c24e83f9e",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x046afb651c9fa11e5e4314d90b0177b3473f372f23c7d017dd52ff1efba22faf",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000026f741f27350894dbffc7001fdd5e10c24e83f9e",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x7b",
                    "r": "0x422a16507007b39a07f1a812df2ec491ca10f74268bd24daa24de00c9f693f37",
                    "s": "0xabdbc76fdaba648f32e9549f697d69116daa1ad57d0bfd4e4dd022f284e5f06",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x047d7d361d128f3ab201f5a696806e7a23d1890540fce43a3164986d109fd2d7",
                "value": {
                    "accessList": [],
                    "blockHash": "0x6e440bad57e56cb0428faa5fc94dec08b18db74e34a358158c1cca560aec6df1",
                    "blockNumber": "0x2e2cf4e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x047d7d361d128f3ab201f5a696806e7a23d1890540fce43a3164986d109fd2d7",
                    "input": "0xa9059cbb0000000000000000000000009b1a8bc6b6309927fc6a40e6ebc9b9e26de4ac8d000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de96",
                    "r": "0x56b21a8c9a48f8fd9d1ea473853f3d38048d8a2a8cbfd0e2346b2e160d18ac6",
                    "s": "0x1d7584b66bbfd42a4214b1435bfb40c8e5c93bc797fd3cb34eaf70266e9828a8",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x0547a6310e103e9f5ecb846f4ec27dccf4f3e178c400aa349513d228a5be166a",
                "value": {
                    "blockHash": "0x5585518e084a9660e2b626ddc202d09251522e274ff7df521207b1316fdae5ef",
                    "blockNumber": "0x2e2ca37",
                    "chainId": "0x61",
                    "from": "0x4f8820731d919547a5f8b7c2143a18051f48e0f9",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x312c80400",
                    "hash": "0x0547a6310e103e9f5ecb846f4ec27dccf4f3e178c400aa349513d228a5be166a",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000004f8820731d919547a5f8b7c2143a18051f48e0f9",
                    "nonce": "0x168",
                    "r": "0x68f51442e507cee71dc83eeb0125a150b2daae810fac81bba03ccbae4af18c2a",
                    "s": "0x31900dd87b19cb7fcd0523d0e21ae2ab797cad934688331804d5ed58ad82ad82",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x06135b8a69591dc4ef84b09506030c5b8df1e2701720e33432f208b2f2a00389",
                "value": {
                    "accessList": [],
                    "blockHash": "0x0862956a2b8c8800e8ba044d676d7d1deb169db8c4b931f36980b5c3b5cc08a8",
                    "blockNumber": "0x2e2cf1f",
                    "chainId": "0x61",
                    "from": "0x89d6ca75844297c737eda3b690a2c550ef5cec9f",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x06135b8a69591dc4ef84b09506030c5b8df1e2701720e33432f208b2f2a00389",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000014dd765ec4100000000000000000000000000089d6ca75844297c737eda3b690a2c550ef5cec9f",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x29",
                    "r": "0x5b466a701d6735519372c5ec1de2f838ae3cc30a5317dc22dfd22f1b0cc923a9",
                    "s": "0xb71bfe4a243eda598a0422b1295cacec844fc634f7a287d9220807a45aa8ceb",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x0941204f0390fe7ad57b447474ebb34c6b47e5c484cfd1f0f114f0c597c27924",
                "value": {
                    "accessList": [],
                    "blockHash": "0xecdfde086fa910685e10e7642348d9ea9da0d1138f079c98af6f8e1bd2a5bae1",
                    "blockNumber": "0x2e2cddb",
                    "chainId": "0x61",
                    "from": "0x1af4d9a0261935d59e09e669c0759cd520a35681",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x0941204f0390fe7ad57b447474ebb34c6b47e5c484cfd1f0f114f0c597c27924",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000001af4d9a0261935d59e09e669c0759cd520a35681",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x29",
                    "r": "0x5fc1dc281c8bff0ccd325143690e7318c81d4de2caaa5cf9fde3edd1e0a0c56f",
                    "s": "0x5ff7c13ba68b1ad6378a055f94415b9a17a933cffbdc1d8d6fcd08dda18937ff",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x09f377b7f9a58ead2d66e707f6d078fec65224bcec28fc52de36ed7f78b969f4",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbc7d0e68ccc306ebff1550ad2fc3a408a8c2369966004e3aabeaab1e7402172e",
                    "blockNumber": "0x2e2cd9a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x09f377b7f9a58ead2d66e707f6d078fec65224bcec28fc52de36ed7f78b969f4",
                    "input": "0xa9059cbb000000000000000000000000437a60b636abda8fc623227f9dff100e56886bc9000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de6a",
                    "r": "0xd2362e5ebdbf5d64f1a2fb998d5126a7fcc2a1c06f5796094804fb09d88c2ef1",
                    "s": "0x5b86c55f6b1cc462886776f2b2e0b56d5b13458445ea6bb25aca9118145db686",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x0ba3089ffaf470ce8c57c595e106b82fece10d27fae859d0714476065a45e1f1",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4c878e162b083e3846b64f6131c0c9bfe114241f18651f8b23be132452223f26",
                    "blockNumber": "0x2e2d0fe",
                    "chainId": "0x61",
                    "from": "0xc986a82b62f4ea9ad41df9d3cebba4aad5adaaf4",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x0ba3089ffaf470ce8c57c595e106b82fece10d27fae859d0714476065a45e1f1",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000001e59447d878000000000000000000000000000c986a82b62f4ea9ad41df9d3cebba4aad5adaaf4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x3",
                    "r": "0xb31972cb8389acbde48d2341d7016841fa32c1629ab790477af3305044b5ba7d",
                    "s": "0x177a6b867e66c59a957efe872e58e63cc22e682de35dbcf4272240a299c31187",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x7",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x0d1c1275ce717ac7c3d87c68a789fb2d95a48709ef85bec555254042ad4199b3",
                "value": {
                    "accessList": [],
                    "blockHash": "0xefdd9bc742d3e86368cc6afae4bf9aba1b37ee8177a7a5f325f77cc7f847563c",
                    "blockNumber": "0x2e2ccb9",
                    "chainId": "0x61",
                    "from": "0x113465e5062a655e7503122575af392d55b73b59",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x0d1c1275ce717ac7c3d87c68a789fb2d95a48709ef85bec555254042ad4199b3",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000113465e5062a655e7503122575af392d55b73b59",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x137",
                    "r": "0xe460ea76dbfca60c81f05999a2fc554b5e7e282d93b9be1ae96c099c00929152",
                    "s": "0x1dcba9274b26c27ffb79f470355f9a2164224c988e6d8a5e25a48abfbaa56472",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x0d3bfc5d86c83859712f972a9bec41e4f3d9ca59834623d91df3da50a90e742c",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc3d28643fa56e8a7308d57f6d772b47c77c57cd42fe0967477fbc6bed52b082f",
                    "blockNumber": "0x2e2ce9a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x0d3bfc5d86c83859712f972a9bec41e4f3d9ca59834623d91df3da50a90e742c",
                    "input": "0xa9059cbb000000000000000000000000edd2fef698816ac50cfe55c8b09d5efcb75fe693000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de84",
                    "r": "0x12beee0a3e44a28a214a252fecf52615d76516872fa238421694bd881f86f0f7",
                    "s": "0x77f74ce11c2c6ec9c74d823d60a8e1e325ded31858c8f2f0b6496e14b48f48b7",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x0e1cef64582806d5814e7a3df730d3e3856d6ce3f97461f5220455063bde0c32",
                "value": {
                    "accessList": [],
                    "blockHash": "0xfceff7e66ef6b187f44b915ecd9be42167e1824b1db39e04bca1317132884c56",
                    "blockNumber": "0x2e2cf1a",
                    "chainId": "0x61",
                    "from": "0xbf3adec8c1c6276f146749226e21b0c5a7fa718b",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x0e1cef64582806d5814e7a3df730d3e3856d6ce3f97461f5220455063bde0c32",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000775f05a074000000000000000000000000000bf3adec8c1c6276f146749226e21b0c5a7fa718b",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x7",
                    "r": "0x61ff80991d722604a6ede092dd39b91b65d23abace1003d83fd03629bb6a8555",
                    "s": "0x426788596a1b1c120611dda196116259570e900021ea8768a2d9c363a3aa3711",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x128cc78f31345e155a1c653807e4014ee548e8d02287c20f9226185223a01e51",
                "value": {
                    "accessList": [],
                    "blockHash": "0xba99e6be8099d9e026a2551fd5f63f03a188e296ad326c03dbdb738f8c37bd4f",
                    "blockNumber": "0x2e2cb78",
                    "chainId": "0x61",
                    "from": "0x8f3201feebdb700c6a295ae31ab8f0eeaabc96c2",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x128cc78f31345e155a1c653807e4014ee548e8d02287c20f9226185223a01e51",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002882b44f06dc000000000000000000000000008f3201feebdb700c6a295ae31ab8f0eeaabc96c2",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xc",
                    "r": "0xbb11b6ae6098bacefdf09c0d2aef83eae24465e87b769238d51f9de0b3765081",
                    "s": "0x220e0dbfac1bbcf7af16c4074cd9b834f7b79609e7abb4fd2cc29562e6779",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x12accbb4bc08245580d34f6bcea26a1a6369387c6971b4aedebdc87022942592",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf960a4fdea8ec62d7a7f957f5d3cbeee350639c7a7cfb1e55eb0a354375abd1a",
                    "blockNumber": "0x2e2ccf1",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x12accbb4bc08245580d34f6bcea26a1a6369387c6971b4aedebdc87022942592",
                    "input": "0xa9059cbb000000000000000000000000501cc578bf9dc7cfba1be3c6439cfa87b1e48efc000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de58",
                    "r": "0xf3c2c2b9ae5add544fc77df5f7e2924380bedc968456185335f140dde56a90e9",
                    "s": "0x520c39c6023ea3e87b67bf7386f475b0ca505203cfb1e72291d78f2d47eabb12",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x152de640eb75d0b8361f98077004fbf02e9fb6110c80c30cc35cf416e9f84191",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbf7edab7a9afd65242c7f3503a9e982e67bd562d770e20fc5b883e6b7339dace",
                    "blockNumber": "0x2e2c8a6",
                    "chainId": "0x61",
                    "from": "0xb2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "gas": "0x1fd8c",
                    "gasPrice": "0x59682f00",
                    "hash": "0x152de640eb75d0b8361f98077004fbf02e9fb6110c80c30cc35cf416e9f84191",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000b2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0x260",
                    "r": "0xf04355577196f6c7770e65cfc8ee3c01519e9a27729e3f1b3fd8692590110142",
                    "s": "0x7a954a396b6f539ee26fabfd84715dae869baab7b112f08c1a4c09c2c7d91d78",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x7",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x163cb0b631601c3678f6d2f89d4b7401caa8448b5cf5f6d824fe5a275aecec39",
                "value": {
                    "accessList": [],
                    "blockHash": "0x018b2a4c4d73d6e4bd21035fdc9cff5320f568ec4f7bc9786ec2d9ed2de88fcb",
                    "blockNumber": "0x2e2d00e",
                    "chainId": "0x61",
                    "from": "0x1ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x163cb0b631601c3678f6d2f89d4b7401caa8448b5cf5f6d824fe5a275aecec39",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000007f544a44c0000000000000000000000000001ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x22b",
                    "r": "0xb6d4432c77996b1a15efa8790f9100c5c622cfa1a7cd548b2a70f1bce1366db0",
                    "s": "0x6899facd9f7ccfa3afa5589eb1f3f6d3bd411928619074525f6423eccb642aad",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x16c702ab4763d4583e35c597edcc3357a3bc6a88e9800d02e817b17981be0fce",
                "value": {
                    "accessList": [],
                    "blockHash": "0x826a8a2123163249e1b8c88baa9181a421d926fc8819fd35e590f258e94ae915",
                    "blockNumber": "0x2e2d0c5",
                    "chainId": "0x61",
                    "from": "0x664735d5a9172fb4bf88d6636cef12de267c94e9",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x16c702ab4763d4583e35c597edcc3357a3bc6a88e9800d02e817b17981be0fce",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000664735d5a9172fb4bf88d6636cef12de267c94e9",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x51",
                    "r": "0xfa2aace3d3b6e3759a4b79686b320b9f28826ac7cb34aa161b2e6126bb62839",
                    "s": "0x967b6bbab149e9591e8ef4026484e5c9454985c5bb4da4dded8b7fffe3bc6b0",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x17f57407e9bdf95e54411db6dd66fc3e0ac11be6c209920beac9dd41cab827ef",
                "value": {
                    "accessList": [],
                    "blockHash": "0xcbee07bc9a3d24731ee3972371f5d470e48f5189e6efe3d3c80f65fd39b06293",
                    "blockNumber": "0x2e2cfc6",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x17f57407e9bdf95e54411db6dd66fc3e0ac11be6c209920beac9dd41cab827ef",
                    "input": "0xa9059cbb00000000000000000000000073a9a0b945d32246e3d55fd302bf8b9cd53454d8000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dea9",
                    "r": "0x3320fadb1c4fb722b2990ed275bb11529e14ae3337d68a67ad1164afac0e0e33",
                    "s": "0x123b9798ee91ef0c794af85f9bc5c84a3f3e9fc9264a4e5c0f96279fdc9baa38",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x199e7752b358f6195d5746f558b9583016dcb12b3f248300aae7883e13c19ced",
                "value": {
                    "accessList": [],
                    "blockHash": "0x71de7faa4ce701f641f25d6b0848ea53fb1ff08b964892e3dfeeeb6b65fb5078",
                    "blockNumber": "0x2e2cb4e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x199e7752b358f6195d5746f558b9583016dcb12b3f248300aae7883e13c19ced",
                    "input": "0xa9059cbb0000000000000000000000004822ba86538cf70d6b3c7e6fbafcf3c03ddeba89000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de30",
                    "r": "0x3ea6c10a5695647f5e0264682f5ad36bd3b0271b0e172807f90ecbc47452415d",
                    "s": "0xa3c0b2d8808790d162c640cee2ec81f18e46f84a651233924a5dd81f30004ac",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x1cc5dad6f4a29095073ba93ce8f8e397c4bafeb91f3dd71eff02bb31cd716792",
                "value": {
                    "accessList": [],
                    "blockHash": "0x894dbef7f000fcfe9a09b66109b18f7ffb0c40529d1c2ce80489f42a03e88d32",
                    "blockNumber": "0x2e2cd7a",
                    "chainId": "0x61",
                    "from": "0x971bc77825978f2da46c921fd0c4a98c997e573c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1cc5dad6f4a29095073ba93ce8f8e397c4bafeb91f3dd71eff02bb31cd716792",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000971bc77825978f2da46c921fd0c4a98c997e573c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x319",
                    "r": "0x6aaeb0fff9b3147ecbe49bb6b0a251161f4ddd2f5f929fc91e2cedb7c370c9c",
                    "s": "0x4915eeb6f5899af3670a629ff20b4b8f6aad96f72caf565ef9b8cb62373fb0dd",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x1ccfaa2a394ceb667b865a2f052a7332d650aa477c6c1569d5e8920b9dace640",
                "value": {
                    "accessList": [],
                    "blockHash": "0x3bf028e8d31ff3d7c8be0afbb8c3b8e38619d83cce980f03b9b2440dc6223439",
                    "blockNumber": "0x2e2cd06",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1ccfaa2a394ceb667b865a2f052a7332d650aa477c6c1569d5e8920b9dace640",
                    "input": "0xa9059cbb000000000000000000000000a12b62f7038ce4e2ddf5e91911f65895c671eee4000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de5b",
                    "r": "0xbac15d0b5295538d7c1382a33c622e560a30c7377b0182c0ee653f7c8d2d253",
                    "s": "0x5417c87e8788169c65a1464e632bdc4ce7b4a928a8bd3ef7b61766ad603fb07a",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x1d299ba8fbf09df20eff15918366b568030fa92f2ba156496a162c62d79382d3",
                "value": {
                    "accessList": [],
                    "blockHash": "0x617c3e130cc82749dd7d080a1b51c242b579bf47ef5754f82fcbbdb0c450c232",
                    "blockNumber": "0x2e2d0f8",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1d299ba8fbf09df20eff15918366b568030fa92f2ba156496a162c62d79382d3",
                    "input": "0xa9059cbb00000000000000000000000011faaabaeb1bb184d73e786393e96e10e420c701000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6decb",
                    "r": "0xf09433c061fb13be0f9bfdf7ff88f9a3933feab81b5b7514797c3d9871ba4d2e",
                    "s": "0x5b41d77eb8787a5b817aa54a87f9cc9b1ea5373a780d00e375b894c752c1d781",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x1d65b145da8a2c7ed487d8a4c9d6e87b249c07158ee2cf10e1e4e7ddd599e372",
                "value": {
                    "accessList": [],
                    "blockHash": "0x09c9749da0aed5489029ed3d3ff61469f1940b34b1ff0c676854fca6259b4503",
                    "blockNumber": "0x2e2d097",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1d65b145da8a2c7ed487d8a4c9d6e87b249c07158ee2cf10e1e4e7ddd599e372",
                    "input": "0xa9059cbb00000000000000000000000057b72f91b6f0dd280dd5ee16bf926cfbce5a08cb000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6debe",
                    "r": "0x639b2e26f227563d2544d228bdf263c3df481137b3727f0f933c318a98f88c2d",
                    "s": "0x688ad40abb3f390e400c1be2e3ff95cc8977f06e8f35c053a89225fe61d46db1",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x1e33a6db4b182440409494275dfac13823758b1ebc2074dda2847c99d8d4d7e7",
                "value": {
                    "accessList": [],
                    "blockHash": "0x73783370a255410edec65a0255ecbc493ff62e1f60bca9cadd4dc04727890c03",
                    "blockNumber": "0x2e2cc0a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1e33a6db4b182440409494275dfac13823758b1ebc2074dda2847c99d8d4d7e7",
                    "input": "0xa9059cbb00000000000000000000000018c1557bcbb88d4b599e657fe7212bd5743e2938000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de46",
                    "r": "0x9cda52dc0aaccbb731475e5ce54d6608197be914d7d7a2224fb76bda6b469b3a",
                    "s": "0xeab49fd04f0e0f337698cbd1ded67aad4c40fae892182f75fde6c5e4a320e97",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x1e6459eabe42ccbc7c943dc1cd04dff329b9f641649d4811f7cf4ccab1aff87a",
                "value": {
                    "accessList": [],
                    "blockHash": "0x3131f153768c83207fd40580981bdd4b5d879e8a80f59c00e35c4965f386961c",
                    "blockNumber": "0x2e2ce05",
                    "chainId": "0x61",
                    "from": "0x9b9700973fd31e30a8f4667cbc6bb771d055e727",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x1e6459eabe42ccbc7c943dc1cd04dff329b9f641649d4811f7cf4ccab1aff87a",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000009b9700973fd31e30a8f4667cbc6bb771d055e727",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1f",
                    "r": "0xa48e772ed1954b93b5944d2ae88d64647e42957da763f81d1df4252070ebbd03",
                    "s": "0x166209698fa6d9c6d847281684ac05a51621c9a2c394c5e4cc3f524bd128976f",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x2091ca69d752a83a0b99ce57479459fba93e3c057d438903d798bdfda7e92d88",
                "value": {
                    "accessList": [],
                    "blockHash": "0x5502ff26fc5d8a5b8704bd310d031775b392ca748aa6d933bb550c72db218b7f",
                    "blockNumber": "0x2e2cb9d",
                    "chainId": "0x61",
                    "from": "0x12efee65cae0e0f6d2075ab6fcf793d7718ab6d3",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2091ca69d752a83a0b99ce57479459fba93e3c057d438903d798bdfda7e92d88",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000003e871b540c00000000000000000000000000012efee65cae0e0f6d2075ab6fcf793d7718ab6d3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x34",
                    "r": "0xf8a60b1a80773c24e9bbc40df5f186cca92d1aeac9b8e6523012722d0ddf34fc",
                    "s": "0x585af47ec5687ebd61af38487058e58fb52b3b47a739960238cc19708f82105d",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x20f87ff67f49bd12db1155a09932d0523ec328ac6d9306a8035bd3ed79bb4cb1",
                "value": {
                    "blockHash": "0xa2b837175bd6cf4afd758ef4902b94fff1553f512218e64cba005c2dd2037181",
                    "blockNumber": "0x2e2cc46",
                    "chainId": "0x61",
                    "from": "0xb32d21bc2ab3258cb39a18f9363d82018fc16827",
                    "gas": "0x2b6c5",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x20f87ff67f49bd12db1155a09932d0523ec328ac6d9306a8035bd3ed79bb4cb1",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000fb0dd3ac066046d89acb7cf27ac8d7f1f24e5a4",
                    "nonce": "0x29",
                    "r": "0xb9ed2188b425d6e98c29ac3b173cee780d1531c3c56bc9ac20fa5d80a549e206",
                    "s": "0x322717ef14dd916a6bcdfbbdaa12f6df8c1c36438173a213b1d164dea78724f7",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x2265ca7b360a788709215d191f31ec3d93f526ef2028bba0756c78347c87a8b1",
                "value": {
                    "accessList": [],
                    "blockHash": "0xeb6a65f2c44a227151c7694f9fa9d6b4ac03b97b938462c2351b4e683184ddee",
                    "blockNumber": "0x2e2cf37",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2265ca7b360a788709215d191f31ec3d93f526ef2028bba0756c78347c87a8b1",
                    "input": "0xa9059cbb00000000000000000000000018af7bdc60909eb3e946126b3e614be07ff702d0000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de93",
                    "r": "0x76f51bb1eab2e889e344ebd31042d49ae529e25ddb4c7934c6da5853d2c751ff",
                    "s": "0x6df0e8a50268ec05a10c421835699cdefb65ae8cd3520986a1f860a77d497a96",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x244604329394809641a935d1d72c0df988713d26578c122777cfaea11a960660",
                "value": {
                    "accessList": [],
                    "blockHash": "0xfe65909fccf401546d1435e3d777c8eb897c4c046ed6c14aa14cc18272996c00",
                    "blockNumber": "0x2e2d095",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x244604329394809641a935d1d72c0df988713d26578c122777cfaea11a960660",
                    "input": "0xa9059cbb000000000000000000000000e0353ea4f1d2f6d261569972e2719f1d64bde53b000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6debd",
                    "r": "0x89e496faaf08d2499361fae82dadaec3d19b7d787725aa475ba9775e40f2e69c",
                    "s": "0x39ecf59df408c16448cd20a07c2d89ed9cb9b9cf2088b0d8f460a82d95cf30ed",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x25109cd8a02113135227baac08bfe246405315f81d9519ba40818e16d591c129",
                "value": {
                    "blockHash": "0x2e8537da4b84584fc00a9def901a0530b145d8f4b632eb32357c7fd9f7fa779c",
                    "blockNumber": "0x2e2d12b",
                    "chainId": "0x61",
                    "from": "0x31765eff07c47bb934936e10b1c55015ddf04b96",
                    "gas": "0x2b6d7",
                    "gasPrice": "0x1ad274800",
                    "hash": "0x25109cd8a02113135227baac08bfe246405315f81d9519ba40818e16d591c129",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000011c37937e0800000000000000000000000000031765eff07c47bb934936e10b1c55015ddf04b96",
                    "nonce": "0x3",
                    "r": "0x81cadb118f9aa3d480f006b7c8a8807b107d0777933e58b1783ea97f03d7893d",
                    "s": "0x5cc106e2d339de9410961ccd3d26ad9544c78e3df0e1613e1f3803b42737af6c",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x29fedd3f0c59302f87094271c67ca42c4d649323c15359c5a55bfb8406130f5d",
                "value": {
                    "accessList": [],
                    "blockHash": "0xb41fcae869c45055cf11587ef4307994c1e83b3fce613c9acaea484a297cd347",
                    "blockNumber": "0x2e2cc23",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x29fedd3f0c59302f87094271c67ca42c4d649323c15359c5a55bfb8406130f5d",
                    "input": "0xa9059cbb000000000000000000000000a138775e3f5e6b52731bccba62e0a1b2d3f24e5c000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de47",
                    "r": "0xc6a2af09bec76b37e84c6f4c13a01d25a9b665932fe8e7ba589cbf2d7608d94a",
                    "s": "0x6f6ba7a92633f975e2c1e7e9ecf895a860a6f522b6dd838ed93e7cdf46261487",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x2b52f4eb364654753702a5c71ff0beec1b2200d803a3d1708be548856e80ec98",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd2334680e4d6931bf40a884c2f9624552064f9c443cfe49152d4d1d3c6931924",
                    "blockNumber": "0x2e2d0ab",
                    "chainId": "0x61",
                    "from": "0xe32fbc02a78e3325839550e39d487d15f20e253d",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2b52f4eb364654753702a5c71ff0beec1b2200d803a3d1708be548856e80ec98",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000002d79883d20000000000000000000000000000e32fbc02a78e3325839550e39d487d15f20e253d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x7",
                    "r": "0x56cf2ee267e916b43fdb72f0a74852f287c614701d3b92d65bd8715246c77ce",
                    "s": "0x6741b2d83f509b98ba564a3aed832b1511fe899e239c0ce3e07f51616000592a",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x2b68d5d573f37bec2b6b182dbef655dd1c150f42dd634d96d27d1beded803324",
                "value": {
                    "accessList": [],
                    "blockHash": "0x546a6b187eb96523e511481f7902857e0907a9ebb6ca06fba19c4fbff1c9c59f",
                    "blockNumber": "0x2e2cf9c",
                    "chainId": "0x61",
                    "from": "0x6b1979eac65fa5e62c035045ef0997a2e45c0de7",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2b68d5d573f37bec2b6b182dbef655dd1c150f42dd634d96d27d1beded803324",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000006b1979eac65fa5e62c035045ef0997a2e45c0de7",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x11",
                    "r": "0xfe1f0a94f4e6d8298c6d220e7dc9289fee862ca9ce3151b252a51b836f78516e",
                    "s": "0x2c66363bc3073e2d3ce8d306c33da8f8d4468defd4d3b7045561c023dfdef192",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x2bf8b6d7d7b3739d8a4ac7b1f0dc27d2f24a10a640824ec455dd387b757ed470",
                "value": {
                    "accessList": [],
                    "blockHash": "0x81597aea4762f0e8fedc1d4346043d9a421d53bf827096aa7ef64de6873f80f5",
                    "blockNumber": "0x2e2cee9",
                    "chainId": "0x61",
                    "from": "0x09c2767d5f4b8116d07d41d1bc0144dc97e78127",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2bf8b6d7d7b3739d8a4ac7b1f0dc27d2f24a10a640824ec455dd387b757ed470",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000003691d6afc00000000000000000000000000009c2767d5f4b8116d07d41d1bc0144dc97e78127",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x86",
                    "r": "0x16167e69c056b4a13ca24587035df9d130cef1ffb8d182a4e64acf3f32e6fd15",
                    "s": "0xa116dcc38a0bd16ae22b64295027cb0731b6e4f3ec87cf73793da56b194a9c",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x2c7f285b7cd2fb8a3ba0a50af0a7e0c5264a88d0d85e635537fad647e7f614ed",
                "value": {
                    "blockHash": "0x07d6bdc9c66116f07b89d52759569a027ec3e32930bda83e485cc33cbfeef6d3",
                    "blockNumber": "0x2e2d0ec",
                    "chainId": "0x61",
                    "from": "0x0539b2a025cb1217aba571845dc1930ea8a757eb",
                    "gas": "0x2b6d7",
                    "gasPrice": "0x1ad274800",
                    "hash": "0x2c7f285b7cd2fb8a3ba0a50af0a7e0c5264a88d0d85e635537fad647e7f614ed",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000539b2a025cb1217aba571845dc1930ea8a757eb",
                    "nonce": "0x5",
                    "r": "0x4b883a2c84dbe1d9c0080c96b6991e7e339807add8e2bc8245bf6b5ee32ca705",
                    "s": "0x692f2bb3f37efc861a62a78effe486ff70e9804090885781d4c553c2db39a95d",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x2cb7b16f19d23535019a8252026e7166703586a39488ebc6e6027bef624a2e47",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd9609716d14ad654c48ead8a25528e1cdcb9e5c7ef56cd92e800551793c7290e",
                    "blockNumber": "0x2e2ce03",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2cb7b16f19d23535019a8252026e7166703586a39488ebc6e6027bef624a2e47",
                    "input": "0xa9059cbb000000000000000000000000aa22cd66afd3c7b754ef689f4a633f3351dfb2ec000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de74",
                    "r": "0xdd7e8ba44b3277f769abaf982e21cec4f4d65da38324a9e4033917ca3433ce09",
                    "s": "0x3d9905d2219e337c85474f05a3ef4b4dcb3dee32e6c9a0f764a8a294a7b84014",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x2d341b3bca938478a3abd0db156d11ba55ac8d13fcf0ec43c31447f90c709a9f",
                "value": {
                    "accessList": [],
                    "blockHash": "0x134b99451a1b7cfb8b03bb71c1eabbfa0b03fb1764a5582825d0794bc5d6e6fe",
                    "blockNumber": "0x2e2cbfa",
                    "chainId": "0x61",
                    "from": "0x0d57a9db46856ae16606dd2eeb93eab1f2471db6",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2d341b3bca938478a3abd0db156d11ba55ac8d13fcf0ec43c31447f90c709a9f",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000744f66be83c000000000000000000000000000d57a9db46856ae16606dd2eeb93eab1f2471db6",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x3",
                    "r": "0xc5c643e45333c11873a95713c36286e7bc601b61c10c96682a7d05a07aaa39e3",
                    "s": "0x1a167b4b2a98aa9d32eac3387bfc329fdcfb19f622ff99e5dfba757d70631fb",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x2ffba58cbfee5e50022a360224b61679c304bd2775798de676b2628866e91b96",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc3e726e2885a67d8a54bebe6a8ff948b52f91c283d41525f819d4547f4ed9b6a",
                    "blockNumber": "0x2e2cf9b",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x2ffba58cbfee5e50022a360224b61679c304bd2775798de676b2628866e91b96",
                    "input": "0xa9059cbb0000000000000000000000008a75f3b2ab24140923d80db043e2b7e64f035aee000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dea1",
                    "r": "0x2664fb225aa6fac53aa49c1ece5ab81772b0787b7a023a1b5e8f16dc0a7803b7",
                    "s": "0x7026c41594b4f097453ff3651f58c3c8c16dba9fd665ef80754ed6ec9bfd4cfe",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x3020082e01ca2a20a536d271de512bb190e33e44fc23fa06222202cb77410b60",
                "value": {
                    "blockHash": "0x63fcd81a25a44b4092afcbb0e148b3dc2d3e24f0577f7ab13ccad9528accd338",
                    "blockNumber": "0x2e2cbb1",
                    "chainId": "0x61",
                    "from": "0x0b2fd75e8e05abf3c403a03f69cda538202c3d66",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x2cb417800",
                    "hash": "0x3020082e01ca2a20a536d271de512bb190e33e44fc23fa06222202cb77410b60",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000b2fd75e8e05abf3c403a03f69cda538202c3d66",
                    "nonce": "0x23",
                    "r": "0xf5be81c82212f54e3e27658ff03785d5f0df9f48508940e25624fc0f730b1072",
                    "s": "0x7c9398ab9af16541df8ac91c60c7f3efe37aa51dddc05876574d465c4eb10125",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x305f8184b34b48a264fbe003240d23daea3dd92351cb4514fa936986c6dad64e",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7919bf420dfca1143ff44e8988f4eb2e98027299f01b06bf0f881e338b9538ac",
                    "blockNumber": "0x2e2d19e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x305f8184b34b48a264fbe003240d23daea3dd92351cb4514fa936986c6dad64e",
                    "input": "0xa9059cbb0000000000000000000000001427ea75529752a33f745ea89eed4308cee86e50000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dedf",
                    "r": "0xb0821e7d54d194bf14542165f43ee8265c96c483dccedb87a36f9c0dfb42d8a1",
                    "s": "0x7cece855b3945606c6162153da6c7d830546eaf7c896de6fd6e56e0dc40532c2",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x313621b112bab45d16094ab025dcb27cdd8ee852b05ba3176cc31d180fbad39b",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa84d125484abfd9a430c4c6606933bb39310a64c1b2eb2e2bb117e8816253b36",
                    "blockNumber": "0x2e2cbf0",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x313621b112bab45d16094ab025dcb27cdd8ee852b05ba3176cc31d180fbad39b",
                    "input": "0xa9059cbb000000000000000000000000971bc77825978f2da46c921fd0c4a98c997e573c000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de44",
                    "r": "0x24fb8f8d2a525825e3ad95089e4d8ac1d364b5abd6eb12a48506ade84822aa23",
                    "s": "0x6de206a5e11cc20ff645bad91e964b35e1d41048bef8e094abe91d5b8460fe13",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x3191de2f20503c234a1ed4f9b5a5315104d1b024a9ec34958b1ddf36b4adb31b",
                "value": {
                    "accessList": [],
                    "blockHash": "0x95c43de9768294fad73e726cb63f6aa7b422df1c0899a44c2d63f00078530686",
                    "blockNumber": "0x2e2cd0b",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x3191de2f20503c234a1ed4f9b5a5315104d1b024a9ec34958b1ddf36b4adb31b",
                    "input": "0xa9059cbb00000000000000000000000088bc9b45deea8aef2138a830ad1d18370e94b1a6000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de5c",
                    "r": "0xe8470b0a9cc42ac7bb7772d385ae955aea6864f1e2de73d55780dfbdbb78c6a0",
                    "s": "0xa4ed65927d90076ff2c70b1b5321ae17ccc6a7d0c17ae81a0136376b681e392",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x324f93166bf49249959e8ae10067b8a1c628d04b960d0537a36f84becfb1360e",
                "value": {
                    "accessList": [],
                    "blockHash": "0x23d0e9fdaa5b3412f0611cc666514a76ad67e30e51daf938f0e2fffc13807cbb",
                    "blockNumber": "0x2e2c90c",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x324f93166bf49249959e8ae10067b8a1c628d04b960d0537a36f84becfb1360e",
                    "input": "0xa9059cbb00000000000000000000000081daadb7fe90b9fb2d616159744d85563b1cd565000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddeb",
                    "r": "0x651451a9a846c49446b36bc2a3254b01d584eb8765a2d1d30a573f0c6a123e78",
                    "s": "0x6097d07c84faee62f7c2aa99507c60446ca55a04f7547e49e8b6e26f06f95314",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x36f68d0ebd54603f7f80c16579ac8ee349db0f20719cd08a09a8d3f68c336822",
                "value": {
                    "accessList": [],
                    "blockHash": "0xba64b12e4294550be70c1685f0ece8431029b35f5b6977b9e12528df8b87700c",
                    "blockNumber": "0x2e2ceb2",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x36f68d0ebd54603f7f80c16579ac8ee349db0f20719cd08a09a8d3f68c336822",
                    "input": "0xa9059cbb000000000000000000000000cea8444be9ac08d9e940be0437da86a6655a457d000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de87",
                    "r": "0xc64a81f4978ef1a635b68b09097a0c12ffa2d663f52c9b0a3a4f7fb1110d782a",
                    "s": "0x247cd619a60ac7f849039daf04a1166f6877342a8e8e47bff6d4a14acec97680",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x37a91df5e41915b861f83fc9ebff8368cc17c43cc68351799eb58aa848cb6b17",
                "value": {
                    "accessList": [],
                    "blockHash": "0x37d37d618aa9f8afe0139f83938d7bf47ff56601e39ef01888ac85fd3ec51152",
                    "blockNumber": "0x2e2cfa3",
                    "chainId": "0x61",
                    "from": "0x0d597fd21466a3c6d98f213d6bddd9311ca609a4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x3b9aca00",
                    "hash": "0x37a91df5e41915b861f83fc9ebff8368cc17c43cc68351799eb58aa848cb6b17",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000d597fd21466a3c6d98f213d6bddd9311ca609a4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0x3b9aca00",
                    "nonce": "0x25",
                    "r": "0x5827bc730d176c3d6a283fc31817e170ff176a7695cfa21eb781eca32b9adaa3",
                    "s": "0x761bb160824d6541ad3a1facdf9ba9d8211dab12a1ac7cc59283e0068707be8f",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x38c8175f49243eec88ce5e56bd07d32b81c947d0075abf4a96ea1785ce6cf5eb",
                "value": {
                    "accessList": [],
                    "blockHash": "0x27ba523b2069a04173cef90c50e41309ca6d59715f0bf4ec3d41b12242d76ac7",
                    "blockNumber": "0x2e2c88e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x38c8175f49243eec88ce5e56bd07d32b81c947d0075abf4a96ea1785ce6cf5eb",
                    "input": "0xa9059cbb0000000000000000000000009f091355b345db942dabaef177e4a28e24b28b29000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dddd",
                    "r": "0xe5eb16eadd6520b7c589e52889781b0170186266dfb7646e4a812c9e088d448d",
                    "s": "0x765bc00be393640bf44a02237185c06fc5f53d74dc14dc6363001175b9c45230",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x3a9983a86745ca7df9ea12e773eb34a75a70f06ae33afb64aba11a2624120918",
                "value": {
                    "accessList": [],
                    "blockHash": "0x3edcae50010660ead7fba32a2c5208ebdc4eee967eb10f3ccf626aec6c78515a",
                    "blockNumber": "0x2e2cdcb",
                    "chainId": "0x61",
                    "from": "0xd9c89e6e473dc88aff98a650fc1633e2c5ddd021",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x3a9983a86745ca7df9ea12e773eb34a75a70f06ae33afb64aba11a2624120918",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000d9c89e6e473dc88aff98a650fc1633e2c5ddd021",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x5b7",
                    "r": "0xb24af7d619bab72accd844dd8b3bb4b34fa96b1f33cb544d46bf5d4a6f3ccd9b",
                    "s": "0x640d769fd1575b6736de398f38908f98162ee316785dba236b889da35168443c",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x3ca20f25fe1ad9b167aad1c48a8a859a54cb94c40cc43c5506723f0d0e4b9ce1",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7d85fbbff430254963375afbd8812164b5b99b8fcdbf509e6c5447aaeb10bbe9",
                    "blockNumber": "0x2e2cc2e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x3ca20f25fe1ad9b167aad1c48a8a859a54cb94c40cc43c5506723f0d0e4b9ce1",
                    "input": "0xa9059cbb0000000000000000000000007ed592e435f09efc3bab3fac65cbec9063c4bb38000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de48",
                    "r": "0x4a967f0562412835fcdd198fa2b7dc764559f2698a8a0da01e68b71000b98c83",
                    "s": "0x308e5ff143234219ff2a4dc39f614c5f2f17de2055d80e86ba890fba0290b08",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x3d11450cd59fa6847515e939f1ef0ecb05f0a4d6daa033cbc13380c0c5a850f0",
                "value": {
                    "accessList": [],
                    "blockHash": "0x18df84e32adcc60940099d980603c258bd6bf2c2e5d04e431f2d764db38eb2d9",
                    "blockNumber": "0x2e2c7bf",
                    "chainId": "0x61",
                    "from": "0xfc01286e99d2e453dc1a80ae291eedd28108feeb",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x3d11450cd59fa6847515e939f1ef0ecb05f0a4d6daa033cbc13380c0c5a850f0",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000bc610c0c92000000000000000000000000000fc01286e99d2e453dc1a80ae291eedd28108feeb",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xb",
                    "r": "0xedd7af6ee14c9b906d572771064c06b452fbdc47a5dadb7f933c52b3de97dfc4",
                    "s": "0x5482da132be51788d8179a0deae8bd73dc0f2317625a0d621170d09ca3321008",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x3f00aef361aa3053c0ee47364593f7386c3f3c63805275d00e526ef611801d9e",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbb884c47e821ab3f3a81310ca7142b83463a65252e31230f46fa0002dda67be2",
                    "blockNumber": "0x2e2d1bd",
                    "chainId": "0x61",
                    "from": "0xb5b945a9c5ff8347db50afac755f744bfb4e26ab",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x3f00aef361aa3053c0ee47364593f7386c3f3c63805275d00e526ef611801d9e",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000b5b945a9c5ff8347db50afac755f744bfb4e26ab",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x38",
                    "r": "0xe341a7db868dfd15b7f15251eb9f13bd5df44614c6eb930a77251edfaf9abc4b",
                    "s": "0x52f3a6dc9b4034cbd0d685903a1bb19dc9d473314fd559393709f4ae6fc6d5cb",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x42639f943c55ca7abb006ec836fe69bbf2be599d055939d6ad2e2db17929f5d5",
                "value": {
                    "accessList": [],
                    "blockHash": "0x1e1525e80f16007ea79993f48975ff3d180d6ba29bd4e2bd51ba533951ff2741",
                    "blockNumber": "0x2e2ce0d",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xd693a400",
                    "hash": "0x42639f943c55ca7abb006ec836fe69bbf2be599d055939d6ad2e2db17929f5d5",
                    "input": "0xa9059cbb0000000000000000000000006c29b5371b3816a0e64388e0da73a78e9d652f1b000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x1ad274800",
                    "maxPriorityFeePerGas": "0xd693a400",
                    "nonce": "0x6de77",
                    "r": "0xdb74a33d766ddc1f33a3689556d1dcb1cff49c396521ce209fcf0a2a31f1299c",
                    "s": "0x529115963bb11bf95a807337284d49177c01b7dce0d62c928b5450601c9d6497",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x434d5a5eece83ae79d20674f363df5dac789b4ed97fa47d4e74158d7e503abac",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd80398644cb6ac00be170639e3c4798c2fee42ae41c4ef65cda7a921b36919e9",
                    "blockNumber": "0x2e2cedc",
                    "chainId": "0x61",
                    "from": "0x03b5f14af94105adbaca96a0857b5112c26c79a4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x434d5a5eece83ae79d20674f363df5dac789b4ed97fa47d4e74158d7e503abac",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000003b5f14af94105adbaca96a0857b5112c26c79a4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xa5",
                    "r": "0x3b4215ed27e68aad9726296a5a453a15e144386f28cf7376037271e0a979ac0c",
                    "s": "0x54d60a2ddbc21f3136d930e7c070df27b140345dfe20220c111b8f193e343264",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x4422995df275d418c673f34c80049dd19e7b9867d3ff9accee48c54afc4844dc",
                "value": {
                    "accessList": [],
                    "blockHash": "0x62a561d7ccfc3d1beb4200c67bcbb3f363529996efc1e3e54fbc5ad130ed6a69",
                    "blockNumber": "0x2e2c9bf",
                    "chainId": "0x61",
                    "from": "0xa7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4422995df275d418c673f34c80049dd19e7b9867d3ff9accee48c54afc4844dc",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000a7b2cd5c12c92583c4c5726211819c2d334868ce",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x26",
                    "r": "0xa6e9f39ed0c6ad5bc700c29df0c42027f585a2c4e12156facb9a31dc1e202b29",
                    "s": "0x507044a71ae6dc9f61bccc61e836532d5440008f63faeb71786f10f87d696986",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x4a4047239cd75eb35e64adc8d7ce25e93bb91a9e0dccf0c7c50cc4e0b504d70d",
                "value": {
                    "accessList": [],
                    "blockHash": "0x72b97738fc54160daf7ec61e947d227eae8a1eb2e288f9e92dbd3d166c62a671",
                    "blockNumber": "0x2e2d119",
                    "chainId": "0x61",
                    "from": "0x406e584220b8fb23450c39c249c661fa556ea31e",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4a4047239cd75eb35e64adc8d7ce25e93bb91a9e0dccf0c7c50cc4e0b504d70d",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000013c03eae2a1000000000000000000000000000406e584220b8fb23450c39c249c661fa556ea31e",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2b",
                    "r": "0xfa3fb8639858911e74d410541d056ab458c511ee9b55089023cc22f78a781a7e",
                    "s": "0x797f9521347f340d967e7d54f6113fd4b19101ac853e16852a53ecf132163436",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x4bc75c4557ad08a27842f81ea13551f7b70b2ed146b755f93ba0c7c7fd89dcd9",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe6e072f66f01bb9518ca614acd0974f2dd7820c5f1db168d612e46ceffbed9bb",
                    "blockNumber": "0x2e2c7ed",
                    "chainId": "0x61",
                    "from": "0x377b98049e8178fbc6e271e0e3b1c3302e984536",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4bc75c4557ad08a27842f81ea13551f7b70b2ed146b755f93ba0c7c7fd89dcd9",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000377b98049e8178fbc6e271e0e3b1c3302e984536",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x15",
                    "r": "0xf2beaf4645c07d01c63b9b59e19262e6b030d8a5e2e733a12753d086e70666be",
                    "s": "0x6a74e811e6a38342349f2fe96190aca71e21bc83bf3b42a38939706d5a76286a",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x4c3604952589b6caeda26dde6a8ac40a5f0326bfe5acbc809ae0c07d5f7092a8",
                "value": {
                    "blockHash": "0xd6d05764658d520bb58bd5dd92812a29b82ad29552cae28c1de5d2f951fb4697",
                    "blockNumber": "0x2e2cc5c",
                    "chainId": "0x61",
                    "from": "0x14f4709483ae2fb65f7fe5e9bf8436f2857229bd",
                    "gas": "0x2b6c5",
                    "gasPrice": "0xad731380",
                    "hash": "0x4c3604952589b6caeda26dde6a8ac40a5f0326bfe5acbc809ae0c07d5f7092a8",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000fb0dd3ac066046d89acb7cf27ac8d7f1f24e5a4",
                    "nonce": "0x29",
                    "r": "0x8d6d74b5100997930d4f03190092353d2bac7c700964dd699c3f22d0e6aaf116",
                    "s": "0x40187d67b65b14c351ad9daec98927d610e874938929606a20bc01d44b7f1125",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x4cc91b4d0a6267a65cfe3d8628474231006cd5e9327d38fcfddcf171e761173d",
                "value": {
                    "accessList": [],
                    "blockHash": "0x83fdd058c48aab3372f4d012cb85808ac6d4ad080e5e454bb4e4e7787c7fc25f",
                    "blockNumber": "0x2e2d12e",
                    "chainId": "0x61",
                    "from": "0x3509a317e1dde06b54b9ab12524c1ba09e40587b",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x4cc91b4d0a6267a65cfe3d8628474231006cd5e9327d38fcfddcf171e761173d",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000003509a317e1dde06b54b9ab12524c1ba09e40587b",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x26",
                    "r": "0x2089d6c2597a7a4b21b807e4b5aedac862efa795e739b27b6e3f0e1a83da2a8a",
                    "s": "0x5bc9be502b56c8b232fbfb78273e7cf24d6b7edb09ed8e4f11a6e5567f52b872",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x51988e9be2f3c3a9654d2d20dfe3945f00d9352fb3781ee84a652b633cb4fe52",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd39e60119c73bc03591e43236fc6a8b912a36f2f929d965f57c7d1820f4585e1",
                    "blockNumber": "0x2e2d0a9",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x51988e9be2f3c3a9654d2d20dfe3945f00d9352fb3781ee84a652b633cb4fe52",
                    "input": "0xa9059cbb00000000000000000000000072715e0d182eaff6e6d6daf3277e93991216d367000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6debf",
                    "r": "0xe606a524163c19a010a7034f9c40d9c66d8cafe6fce1420ed2156df07a518a59",
                    "s": "0x393b049a57f6ffec61a3b71c23a4bbbd8b6d00ba93df17242df5faee7158f02e",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x52861bafbc54a4ffbb988a5ad596c995b733b7debf0f049ace60ef4c53406fde",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9ef26bd529031de5c815a707fd1db9e85b531c3e04ce85bd30cb37c049672047",
                    "blockNumber": "0x2e2d1a1",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x52861bafbc54a4ffbb988a5ad596c995b733b7debf0f049ace60ef4c53406fde",
                    "input": "0xa9059cbb000000000000000000000000f54ab9b7a0264c98e214832de7578b7928b0f7ae000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dee0",
                    "r": "0x1a6d44665798d1805ebcffbd565df00f8365d7ea302e3bdb3fef84fe2bbd18c1",
                    "s": "0x544c83e12d14ade1de555368ce82e4486328ed1fdeacdbd71da9114cd471c6ed",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x55eb184c5748798c3acc08bd9a909aeeb58e3166d05f515c9e8a91c861760671",
                "value": {
                    "accessList": [],
                    "blockHash": "0xad74c26938afe8831d3ecb5dc80c7fa842d919a18e10f53fe63b6be237b8ef25",
                    "blockNumber": "0x2e2cbcc",
                    "chainId": "0x61",
                    "from": "0x3827f63894ee1d2384d433de4d82722ec85350a5",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x59682f00",
                    "hash": "0x55eb184c5748798c3acc08bd9a909aeeb58e3166d05f515c9e8a91c861760671",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000003827f63894ee1d2384d433de4d82722ec85350a5",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0x8b",
                    "r": "0xbe09a4dd2c18b7b3d702525f67584a7667218963c003ca77dc81e44baa6822d",
                    "s": "0x48a516981ecc4c9d9a7d32b8f4ba5603f34a0c73325d852e6ab48038faa906f5",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x56a7a1e62431252474e25176980d7e9a2b4e0f13108eeb3475deed9372c9d096",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4ec7e014f5dc4eb82ebd3bdafe4b41d4a4a11daebbb76d702e73f92ad980b85e",
                    "blockNumber": "0x2e2cc8c",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x56a7a1e62431252474e25176980d7e9a2b4e0f13108eeb3475deed9372c9d096",
                    "input": "0xa9059cbb000000000000000000000000581d2deca750375ba739547cc143bfb438404954000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de50",
                    "r": "0x5e2acdd5be6442615db26427b5d4768c72c4532a6f414f4a6e841e27b5d02d16",
                    "s": "0x4eea02fdbfa4d8d8ed44caefed7ae413d79c8eac67f6bea24e7d801bb177bb60",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x588d8b7378566893ff8526da8af7b59389917b6653589d6fc9ec61e8bb97cb0b",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd7fc0841551c7e891e38ca3e64cc2523ad5b010b98761ca3978c5ae56503591a",
                    "blockNumber": "0x2e2cffb",
                    "chainId": "0x61",
                    "from": "0x4fc7d5fd52bb5c2356759aba526b130375f7f394",
                    "gas": "0x1fd65",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x588d8b7378566893ff8526da8af7b59389917b6653589d6fc9ec61e8bb97cb0b",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000004fc7d5fd52bb5c2356759aba526b130375f7f394",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x4a",
                    "r": "0xb25edff89b53ff412c4ad820507bf3c866724cdaa487af35bdd40fb18c91be98",
                    "s": "0x53a9c2313a0fd738ac1ecdaf210517dad8c095b1675f448af5b09cd612c5d3e5",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x593f79822d2f712e17cddae0278a950ac0a04cbe4edc9f72c781aa513c4675de",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa7195e6ababf59e55130854b6fc5be7be0f8bf1b305d4ef1edb09760a9079e70",
                    "blockNumber": "0x2e2cde4",
                    "chainId": "0x61",
                    "from": "0x7df0262497d380b65b3478a4da5d09ecd0b0978f",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x593f79822d2f712e17cddae0278a950ac0a04cbe4edc9f72c781aa513c4675de",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000007df0262497d380b65b3478a4da5d09ecd0b0978f",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x119",
                    "r": "0xdec70fbc6af62ae249cd7474c45870d16c1c970512d0110b604e7b2b143ffef2",
                    "s": "0x7e648683d784f85f7ae68e010e226d71eaca2f7de3effd15d65bec882b78b37f",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x5cc7fa9562b55720320180f4561f8a55bc6365976f3ca38b7e93659266539f9f",
                "value": {
                    "accessList": [],
                    "blockHash": "0x79c6c63c189696f39da76a2c6724e2e63c29be0af4396854046cb48ddea1c1d8",
                    "blockNumber": "0x2e2ccbd",
                    "chainId": "0x61",
                    "from": "0x113465e5062a655e7503122575af392d55b73b59",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5cc7fa9562b55720320180f4561f8a55bc6365976f3ca38b7e93659266539f9f",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000113465e5062a655e7503122575af392d55b73b59",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x138",
                    "r": "0xbb4c936d9d7c092620463dcc1e8c0216ece167efa437a7e58d90ee4c64093f90",
                    "s": "0x1dd0f0f5fcaa6b463b07d119645004bcae5f4382541e4535e05b1ba93dac144e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x5d0fc7d7c040a70e92711e63b7bb4d661d2674af26b29cb33c82dda7403923e2",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7e5a025200d93cad6b1bf29382ba4625aa3d8520f3487422b2b4b7fd561bdfab",
                    "blockNumber": "0x2e2cda7",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5d0fc7d7c040a70e92711e63b7bb4d661d2674af26b29cb33c82dda7403923e2",
                    "input": "0xa9059cbb00000000000000000000000078a72c7033167b86c340994c67fb632b78075e79000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de6b",
                    "r": "0x21c7f6f2b1579ea466d20ed1a028094185f7783b0e03940b8cb403d572fb6957",
                    "s": "0x58ca4c3fc238a6232d5f80b36ef75fc7a7cd55100fd32af2b37ff4a3bab97613",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x5db5139aa72778b74dc86c4f54489f5c00c176c620e5f4b1a5c75e95fd6b2718",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd054dd2b0d652ff2ee876651e1f7d1a2934e288ce69591fc57f45a51b115ce46",
                    "blockNumber": "0x2e2cd94",
                    "chainId": "0x61",
                    "from": "0x29e8ca6dbc20d56cbe1d4ea8e752ddf7fa5c6fbc",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5db5139aa72778b74dc86c4f54489f5c00c176c620e5f4b1a5c75e95fd6b2718",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000029e8ca6dbc20d56cbe1d4ea8e752ddf7fa5c6fbc",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x27",
                    "r": "0xd63b9163b14604c15d3d063a930dc18a702a0449729d871151c426b45bf26b2d",
                    "s": "0x5f79504ebc5ac7bfbec7c9aad3de7284a90ee876174851ff4e928032dcf13a0d",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x13",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x5dc85b0643c78dc2c31afad1736c120339531d27d6727f21a36319f82bd3a190",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf37a6bce1245d99fbb58f931a92f615872d642b2314bdb333551f188b976aff8",
                    "blockNumber": "0x2e2d178",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5dc85b0643c78dc2c31afad1736c120339531d27d6727f21a36319f82bd3a190",
                    "input": "0xa9059cbb000000000000000000000000664735d5a9172fb4bf88d6636cef12de267c94e9000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deda",
                    "r": "0x7b13fa8a69495d0eba0f6d68d0b7700c595f50678bac56f4c7ed4c0e5b349cc5",
                    "s": "0x604a5178af7fd624cc8a04bec76910de4243e06ad0ba478ffab4bfa47a91c854",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x5dec47add0858084e0f515800efde3431a9f6910be3b674094b0cfcf14a29922",
                "value": {
                    "accessList": [],
                    "blockHash": "0x966706d2ae0311f5c6b75c1b7fa052241d54030d6b907dfc2c4da54dfc6b1495",
                    "blockNumber": "0x2e2d0c8",
                    "chainId": "0x61",
                    "from": "0x99df6a7261bf954967d48077c48b6d21fed6c0e1",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5dec47add0858084e0f515800efde3431a9f6910be3b674094b0cfcf14a29922",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000099df6a7261bf954967d48077c48b6d21fed6c0e1",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x55",
                    "r": "0x2970885ae13f88a46dbcc988a024d8a2229f529109d575d83db9c712ea158514",
                    "s": "0x2dc4846157d265f4ccd1edf0e7ed54cf16f2c81ad31e8bf48ba4f721596f6ed7",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x7",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x5efd431a8179d5a9698b0be8ecc72bc23ba34b5d5de43cdb9fd525e9b5397a4b",
                "value": {
                    "accessList": [],
                    "blockHash": "0x99c8271399000945d4d26fe0121d5cd75724bc67456362180175097d01f51472",
                    "blockNumber": "0x2e2cbb7",
                    "chainId": "0x61",
                    "from": "0xf0a30fbd929bf73203a8f88289ea902e4673cbd0",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x5efd431a8179d5a9698b0be8ecc72bc23ba34b5d5de43cdb9fd525e9b5397a4b",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000031b6962e7b3c00000000000000000000000000f0a30fbd929bf73203a8f88289ea902e4673cbd0",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x9",
                    "r": "0x83202b130b3233d299d2edc45048f839445292f836a9840621b123b4a894b222",
                    "s": "0x66f2f689fb9bcd4ac795a26cdc15280c321b6a1df6054d4ce8549c2af36ba72e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x11",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x610817e793ab5026c29d24f77db0659e8b8e6b16176fdcbc5a36e6f51fc96a74",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd3f193692e7cffa55114d494bd35620d6c12796b3cfe58781b9c6ce87548a288",
                    "blockNumber": "0x2e2d036",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x610817e793ab5026c29d24f77db0659e8b8e6b16176fdcbc5a36e6f51fc96a74",
                    "input": "0xa9059cbb000000000000000000000000c986a82b62f4ea9ad41df9d3cebba4aad5adaaf4000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deb9",
                    "r": "0x4be2342d9a0ddea6fb833272499ee5262d25780c1fe73e53d0021d0512994783",
                    "s": "0x5304c0a38668d5bb73c9d9e624a138c1f7e86e5bf8d563c8da442cebb264b233",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x652959f63b210bf5b014c269ceab76cc557025dd5e04f1eb4beea765e920a995",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc006d12e557f0cc904c6b3923845df14dc066ebdeb63a292cf09b924c13d30ae",
                    "blockNumber": "0x2e2ce32",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x652959f63b210bf5b014c269ceab76cc557025dd5e04f1eb4beea765e920a995",
                    "input": "0xa9059cbb0000000000000000000000001062cf3561e79e88ab6ec2651b61595efe88a1ae000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de7b",
                    "r": "0xe94280b07a184c24114d216a554a50e32c38e37bd6f80560f11fb1416fff9f88",
                    "s": "0x74c08cb2095b3d353ff21bb1a07a14d5e65e83aceaa6713cd2621a058ef238c1",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x65a6a67205632b6debde65fc9fc77c87f7389bd0266326667e4938d508bfe4c5",
                "value": {
                    "accessList": [],
                    "blockHash": "0x1cac6327f71c4f1a3610425c0317d59b5b9b67cfea671e53d974c1de03306270",
                    "blockNumber": "0x2e2cbfe",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x65a6a67205632b6debde65fc9fc77c87f7389bd0266326667e4938d508bfe4c5",
                    "input": "0xa9059cbb0000000000000000000000007e5af2ee5186f128afe716dc5157589b252da574000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de45",
                    "r": "0x87b1a60f4214ea5975653062d5d519ad0fb7c51208e497b75272a810793c9af5",
                    "s": "0x54f4b465f41f9bbc4119482a16fec3355dc9cf23f46b1a503ed4eb3ab107eb85",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x663d5daff8dda831d78b039fb6cab2841455a72d0417fb8a4b3a14b043cf33fa",
                "value": {
                    "accessList": [],
                    "blockHash": "0x5d6ce2d3383a5d926b04cd48f73b69148926f36ebe9715f6f841eaa3264055dd",
                    "blockNumber": "0x2e2ca4a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x663d5daff8dda831d78b039fb6cab2841455a72d0417fb8a4b3a14b043cf33fa",
                    "input": "0xa9059cbb00000000000000000000000031803531d641290b4574a25f1a9316d5e40be4ea000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de17",
                    "r": "0x937aba5e79624cfaa4e98154ce6d25874b7250af78856fbed8b471572fcd1a5a",
                    "s": "0x228e044cfa4c1c8bd53df1ac8f3ef8b08f6ead9bb99c7ed64369807b6aa5eb97",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x674ed83595bd2d270bc885c3b9611a284b2c2565dbf3294582d77fc9fd639826",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd364e150a012d4f9fc1722253ca0d2fb8894a18eb17b9e3dab0361d4640115be",
                    "blockNumber": "0x2e2c803",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x674ed83595bd2d270bc885c3b9611a284b2c2565dbf3294582d77fc9fd639826",
                    "input": "0xa9059cbb000000000000000000000000bfe7e60e3af8336f84f1edf0c4aa6dab91f901fd000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddcb",
                    "r": "0x2cf2b26d222dccebede09f9c3780a262e7038dd9e915cd9fdb2b07b2b96adb40",
                    "s": "0x46e9b2f9885af84add9f1df288915681a0bd4efe41e0f9a7285cfae37c74d2fa",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x8",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x679f35286fa5660f8416bdea06b0b58bf1dca044e1b5eab2d621cec9c37529c5",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9fc07e84ce9b4e71e46da4b360f1786c085a41c4890618ec4134287039ff7b86",
                    "blockNumber": "0x2e2cf75",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x679f35286fa5660f8416bdea06b0b58bf1dca044e1b5eab2d621cec9c37529c5",
                    "input": "0xa9059cbb0000000000000000000000003ceea82b79a9c5e43c8461f78695c76d1b47ec81000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de9b",
                    "r": "0x8d246d7c1c428e4fefe78d5f7b29dd81ceb2cd08dc8d78fa126dc57d8237b484",
                    "s": "0x59a016600b149d9d0f9aade0c4ccbb9fd72aaea83466faf0dea50027563339f9",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x683ad3539055d4598b69cc8ea154e4bd50cd083d43ca54a9c48eac5348c0ea0f",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd8e99bcaf5b7789d9a756061649dd706942b295c735a993f587acda6b361ca24",
                    "blockNumber": "0x2e2d173",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x683ad3539055d4598b69cc8ea154e4bd50cd083d43ca54a9c48eac5348c0ea0f",
                    "input": "0xa9059cbb00000000000000000000000022afc43eeb31f72984516407ba57024393024566000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ded7",
                    "r": "0xfd0a39f71903f7acec956c379ae651cbaa847680df1e8b7ed03cf4e2c783c85a",
                    "s": "0x78796fc4e594fd1629db9340bb8ec5432913a571356264ed0a05e7cbc23f913d",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x68e26dcf4fa2eb80cae2197900295e3e925314b9f821583badee06477bff5dd3",
                "value": {
                    "accessList": [],
                    "blockHash": "0x97f4dddeaeab76d1a20a197ae461c69cc3cdd210b5997ea1a0ad9f58e89d5178",
                    "blockNumber": "0x2e2cd54",
                    "chainId": "0x61",
                    "from": "0x971bc77825978f2da46c921fd0c4a98c997e573c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x68e26dcf4fa2eb80cae2197900295e3e925314b9f821583badee06477bff5dd3",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000971bc77825978f2da46c921fd0c4a98c997e573c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x313",
                    "r": "0x72ccce1ab525e5d90bb07702343863ea03f79bb4f38fabf6ac98d90bcf6b61e9",
                    "s": "0x7c3d37f3f1e4774539f02ce6316442844412896c86d2d6b7a5f0998c05792aac",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x6a022fcd6ca6d3d3a8b5d752e8f29116c0bebb79035fead9382222f8f424a012",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf4c26a920409eb4392ff82a4bb4fa55350c83ee49ca74d551793fe81f327a34d",
                    "blockNumber": "0x2e2d0eb",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x6a022fcd6ca6d3d3a8b5d752e8f29116c0bebb79035fead9382222f8f424a012",
                    "input": "0xa9059cbb0000000000000000000000003509a317e1dde06b54b9ab12524c1ba09e40587b000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dec9",
                    "r": "0xdb10a2e2cb34f5de67763c4b5a4e8dcfec04c44dc705e81d6a3e52df778e2d6d",
                    "s": "0x4e0cffaab629d2790de0ae9b3d5a6b9741b7ecce074c8ff5a82fb3ac5df95696",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x6b2563b2f57b9d13659beebf4128b564dee9e5e0a14e8ea38b40f4dbb629dccc",
                "value": {
                    "blockHash": "0x0293cb0dab3c8220f8cbeabd1d5607fbfc3f4d055c208b603c61218e6801eecf",
                    "blockNumber": "0x2e2ce6c",
                    "chainId": "0x61",
                    "from": "0xe5b47889f5b7057b66d0728499f56b4214c2cb58",
                    "gas": "0x2b6d7",
                    "gasPrice": "0x1ad274800",
                    "hash": "0x6b2563b2f57b9d13659beebf4128b564dee9e5e0a14e8ea38b40f4dbb629dccc",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000049e57d6354000000000000000000000000000e5b47889f5b7057b66d0728499f56b4214c2cb58",
                    "nonce": "0x2b",
                    "r": "0x49750a014a1d3fd7342789f5a5f9022cfd087955b6abde1191964f7c82befe8f",
                    "s": "0x50dff2f1d15c829d5d8c3ddb1d48658fceae1beb756f1edd4bc90445b59a9751",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x6b28686d29572feec27943e346c95d0bdb5e3a6ace44e1df62a3bfaf6a015119",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9393374fb21e0709efdec22772ff7a33b4f75cb6f1cfd57185633ee234ae3172",
                    "blockNumber": "0x2e2d139",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x6b28686d29572feec27943e346c95d0bdb5e3a6ace44e1df62a3bfaf6a015119",
                    "input": "0xa9059cbb0000000000000000000000001a9e6dd8ae03c9b884996c24bbd6549629d9de29000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ded0",
                    "r": "0x294436d9e7b8b3433c99ce5f11b6fb0a81fee2639fcb85e6d8e109c104ffa4fe",
                    "s": "0x3ba35d22f1dab86d5c670b64981b887403fa77bad371db9b76f2831a4214df27",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x70c25f60c81511be8f79f8a1506d814017c992ca465752cb4bb8cd382f7542a1",
                "value": {
                    "accessList": [],
                    "blockHash": "0x1365b4bd89d0b15122be326e7c7fce380cf96fd2c102f1c64cc3f0c8d8406070",
                    "blockNumber": "0x2e2d005",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x70c25f60c81511be8f79f8a1506d814017c992ca465752cb4bb8cd382f7542a1",
                    "input": "0xa9059cbb000000000000000000000000c17e6292fe64d678157ab16c1c2e6b93ed44c3bb000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deb2",
                    "r": "0x4ec89e822b9408fa27f17622e7793039cf1aafad1a0d784fed45e3264d898f11",
                    "s": "0x3bf6ec6d88388b075a7e0d0ac123c984a9a56a783b4fcac5770168c449c8a782",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0xb",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x72832b3473f00c697bbe7c56923833201053b867ae32e5fdc032568eb148513a",
                "value": {
                    "accessList": [],
                    "blockHash": "0xde447f63af80c03c47799e5e3fce262d2164bf8a1a7e7b72208e1a2ce8928e63",
                    "blockNumber": "0x2e2d030",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x72832b3473f00c697bbe7c56923833201053b867ae32e5fdc032568eb148513a",
                    "input": "0xa9059cbb0000000000000000000000006bd0b567937ac976a835ba6845906e95e71bbbdf000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deb7",
                    "r": "0x8d1e433586da275e19a5dfd36f0946162b9f542d0819b577549d2b269becde6c",
                    "s": "0x53bbdfde0a7999e8123339db65ae6d1b1dbe47424cdc80070016ce15c8931894",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x7395f83823f07dc07fbe41185ab5bd582a12dee4e4b8bfff98af4408e648d7e3",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9175763043c01efb4ca82fe00fc7c0f57338effd2719f2782939c86b1f8fd66f",
                    "blockNumber": "0x2e2c952",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7395f83823f07dc07fbe41185ab5bd582a12dee4e4b8bfff98af4408e648d7e3",
                    "input": "0xa9059cbb000000000000000000000000c5cecf4c79ea36e6990234c5cb53209327a65ee6000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddf1",
                    "r": "0xefc6cd73de0441eae12cf40ac8b42a56e7ca58952e8ad58c9069bf16421ff452",
                    "s": "0x40c4210782ddbea82b391b72a747f93d3a0ab1d32ea238803c1272334cfd0439",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x76133485459f702c9c9d31db958c52ad77318d107f1efcf3305018a94d14c5b9",
                "value": {
                    "accessList": [],
                    "blockHash": "0xb000730bcd945f8a16ea6ad13f4290bc1d1fb5dbe1fdbe624fc915c0c32b6220",
                    "blockNumber": "0x2e2cf02",
                    "chainId": "0x61",
                    "from": "0x7e6df26695907d6b4ac5a2e9b0c53fa4bbcc0173",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x76133485459f702c9c9d31db958c52ad77318d107f1efcf3305018a94d14c5b9",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000007e6df26695907d6b4ac5a2e9b0c53fa4bbcc0173",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x121",
                    "r": "0xf99f94ce089bd1fe8ea3b622e0facd40d91ece9ab2f3558277f56269bed04996",
                    "s": "0x31c7fe3c17db9520951f0f9f744703214d2ca4e8cb3d1c3a4b9178f36455083f",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x7634802d7dbc4afddfbf3e5f188e15de22eddcf3f97044f0481b087baedcd9b4",
                "value": {
                    "accessList": [],
                    "blockHash": "0xee1ec71f4198656b53c65da9ed27b55f5d960ff0d7861cfd1c3dd54c86c8497a",
                    "blockNumber": "0x2e2ce90",
                    "chainId": "0x61",
                    "from": "0x39afebd9e177d681d7060be8a2170351bf04eabe",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7634802d7dbc4afddfbf3e5f188e15de22eddcf3f97044f0481b087baedcd9b4",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000b5e620f4800000000000000000000000000039afebd9e177d681d7060be8a2170351bf04eabe",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x52",
                    "r": "0xc8608a55105809551b4790a25c0d7896af069c01ec4f0531835579dfb5dbaa79",
                    "s": "0x5c9e2499b59721023bcba6e946e029400b4e41c0b76ef520fc4675e115a9e442",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x7650e643e8626fc5b7b1c8a7c3b3f2a3092560b6f9bb46c3b7697f0b57894ef8",
                "value": {
                    "accessList": [],
                    "blockHash": "0x943478e32930c297559c5a21c55d39f46986b431d3bd8d8a9e0c9cf3c53ebb81",
                    "blockNumber": "0x2e2cd61",
                    "chainId": "0x61",
                    "from": "0x971bc77825978f2da46c921fd0c4a98c997e573c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7650e643e8626fc5b7b1c8a7c3b3f2a3092560b6f9bb46c3b7697f0b57894ef8",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000971bc77825978f2da46c921fd0c4a98c997e573c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x315",
                    "r": "0xddf4c13da8c35e4c79562d92ca0b869d70f31bdcd34a442972866cae67b22920",
                    "s": "0x7424d07cb772e8703fb07e83d827ae25bf02939c0c730490cccca89cbea4cf5e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x76972ddb423fccc7c29d021417f329730513f37461af32eb9dfc3f98d7381a82",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4621d73fbe455a8af305f89279c6e1eabc5ac6f1d51b688be08148acabc0d616",
                    "blockNumber": "0x2e2d0e2",
                    "chainId": "0x61",
                    "from": "0x99df6a7261bf954967d48077c48b6d21fed6c0e1",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x76972ddb423fccc7c29d021417f329730513f37461af32eb9dfc3f98d7381a82",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000099df6a7261bf954967d48077c48b6d21fed6c0e1",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x59",
                    "r": "0x843080d9ced6dbab3218de021e0e807f7de6b817457b749835107319583aea15",
                    "s": "0x38400aab32615d6ff17102ed9e6b1b617580cc42d362b15120bd848a9f88f700",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x76d2d4d7db0495289c1d8a9c982972253d887bdb7edf2028a54170846f30269b",
                "value": {
                    "accessList": [],
                    "blockHash": "0x0096eea6f80f183ef00ed716f09725cac6ee56f76ccadcbd49e4ea90607182fc",
                    "blockNumber": "0x2e2ce51",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x76d2d4d7db0495289c1d8a9c982972253d887bdb7edf2028a54170846f30269b",
                    "input": "0xa9059cbb0000000000000000000000001302f3bb7c47fbfe8291300be4107fc983f030f1000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de7d",
                    "r": "0xbd66096e2139d5ddfcfc7097f0fdbfa946e5c5b3f85fd4d9da876d033533a945",
                    "s": "0x11a6cf18d3d254c5716707a8150201b3dc6d834ed11487482403191387128e9d",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x78ddf8818684d28b3b702e374cd2f1543016a622ef95ca681ddabd113c29ec33",
                "value": {
                    "blockHash": "0x4c769e235e0ab4c2c3702d1cece4469137bb10b3f9f331086ebd747fe3460be8",
                    "blockNumber": "0x2e2d128",
                    "chainId": "0x61",
                    "from": "0x03f584c9a6a31abb737ecddc51c9b95baef5587e",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x1ad274800",
                    "hash": "0x78ddf8818684d28b3b702e374cd2f1543016a622ef95ca681ddabd113c29ec33",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000003f584c9a6a31abb737ecddc51c9b95baef5587e",
                    "nonce": "0x5d",
                    "r": "0xb40a5754d6aaf07c9bc2d06ac109a21b758498b69cc0056b75d2c521e4ce8dd2",
                    "s": "0x18e09b8f4e0dc29f06fdeb01584b14537488ca98886bab79ce8a60402b1b34ad",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x79345e64f98a57e93f25fd792d3a05bf77bc7efc83bbfccd0837fee2ce246f38",
                "value": {
                    "accessList": [],
                    "blockHash": "0x6f874b9c94c565ce58716849920bcbdf3f9e4a8e9717294a4975a2c690cf4764",
                    "blockNumber": "0x2e2cfd0",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x79345e64f98a57e93f25fd792d3a05bf77bc7efc83bbfccd0837fee2ce246f38",
                    "input": "0xa9059cbb00000000000000000000000013b41f07d683b59f6aa05e8781ac7093fc39a681000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deaa",
                    "r": "0x398668e79df4675c930f71c98da5d7fab2672ac6536dbb1ff3f75ca1de721f90",
                    "s": "0x2140b913608295e7684ef660f8cab7fd0109e06d6e30e52d9c03824f077b6748",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x7a43bd753fa41c2502b8a2bae2a1d159dd26010c777bc3b7c4f4591c0c95e17d",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7382d446e39c27f1b7f6e8e3e5e0cca3c34fb57edea6875b8695784dbfed7ac6",
                    "blockNumber": "0x2e2c902",
                    "chainId": "0x61",
                    "from": "0xa984105729d65ba597c1410cfd59ed5be0807b5d",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7a43bd753fa41c2502b8a2bae2a1d159dd26010c777bc3b7c4f4591c0c95e17d",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000a984105729d65ba597c1410cfd59ed5be0807b5d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x7",
                    "r": "0x9d9de833d7f7e9e9aeb814f6c183209c93176726905fa5665d792c9f46786a34",
                    "s": "0x558d8b44ed47e2805ff3c9378da5c58bb81367030d98f13e7e58380e23c37a7b",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x7bbc687407da607ac56a7c7ecb60b16c706751a622aab75be0f08865b312ce56",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbb884c47e821ab3f3a81310ca7142b83463a65252e31230f46fa0002dda67be2",
                    "blockNumber": "0x2e2d1bd",
                    "chainId": "0x61",
                    "from": "0xaeb0b1a4f6d74490fb3294835178740b8af8c03d",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7bbc687407da607ac56a7c7ecb60b16c706751a622aab75be0f08865b312ce56",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000aeb0b1a4f6d74490fb3294835178740b8af8c03d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x48",
                    "r": "0x2120954b50b5a6cad3d928a5464656f795e4fea237db09f2de51e8a48813cc0e",
                    "s": "0x33334b0b056bbc13dfaaf7e6e5addff5aff226f31be30b0ec47a6be235b7d5c7",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x7d20b6adbf52e595a24f41e2368c221e28a3a83e8263aca2ef9e466362c816f0",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4a50d53ba70ecfd25ea720796ca8360e5e56f316b7297383cae8ccfc75e6d4d4",
                    "blockNumber": "0x2e2cdd2",
                    "chainId": "0x61",
                    "from": "0xa14f33fb1c68d3e1c63698c2e74936863ba8da0a",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7d20b6adbf52e595a24f41e2368c221e28a3a83e8263aca2ef9e466362c816f0",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000a14f33fb1c68d3e1c63698c2e74936863ba8da0a",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2b",
                    "r": "0xaddb55b422aa8f27e95cbb3779c78711c65d43704a2275dceb7b2f3e5d1956d8",
                    "s": "0x32496520fc738c03550c1e84654592268f8ed5619561ac39b74f2f073d7c5ad8",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x7d24a24ee92794278175cbb0f19db0918ce2b10872acf0cfa8feda06a754dea1",
                "value": {
                    "accessList": [],
                    "blockHash": "0xceb17a6cd5cd1332fc9818e5567625956d70306a6cd7d4e5f11574d751c6e6d8",
                    "blockNumber": "0x2e2ccc2",
                    "chainId": "0x61",
                    "from": "0x1d2ef8449438015fbf38929bc51c415e46756503",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x59682f00",
                    "hash": "0x7d24a24ee92794278175cbb0f19db0918ce2b10872acf0cfa8feda06a754dea1",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000001d2ef8449438015fbf38929bc51c415e46756503",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0x4c",
                    "r": "0x76f31b59e3668ca8bb21bb704e9b4cdb11dba3b2efe6201b93990160a4f8a105",
                    "s": "0x2e4b67586f558a60ce8081ad0b4be1c212dc097b598c14386ef3d036c3cf4a81",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x7fdd2046cc69e39b246892c01b239c2c8de08652a410873f6d00144e7a8b3ea6",
                "value": {
                    "accessList": [],
                    "blockHash": "0x6381a1f299d0fdb52f99bf3c3730b1986f6becbbb264b23fb2b2c92a1a9fb977",
                    "blockNumber": "0x2e2ceb9",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7fdd2046cc69e39b246892c01b239c2c8de08652a410873f6d00144e7a8b3ea6",
                    "input": "0xa9059cbb00000000000000000000000009c2767d5f4b8116d07d41d1bc0144dc97e78127000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de89",
                    "r": "0x93ccb8797ffb8919845432baa36adb6b97ddb610fbedcd0ed5c33143532c22bb",
                    "s": "0x270c0411ee5d5c3c67372a9c889d13eefffe16db46cc6fd5ea357e981acafecf",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x7fe5a4bedd08ea3aedd253083b155f41f96ab749fb0c82ddae79d232053b2a6a",
                "value": {
                    "accessList": [],
                    "blockHash": "0x415c95fe65053d2c282766fd23122ef6256118d12532b1d89b901b234a89d755",
                    "blockNumber": "0x2e2c810",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7fe5a4bedd08ea3aedd253083b155f41f96ab749fb0c82ddae79d232053b2a6a",
                    "input": "0xa9059cbb000000000000000000000000d179a20625eb5ed6518817536fe91d57f3b439a1000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddcf",
                    "r": "0x7a5a153c0971237960d1dd365cde00eb14af99d98bfa7e4937a3d52b00f00a66",
                    "s": "0x15a778dc30bebcaa44d51bb0e6e237a2c7aa100bf66a6405aa331e69cab72d9a",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x80d820aa3ce1e4008f3bb803760ab8d42eaa3ed3619f9a8420cae0b0da0dd01d",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd17b1272a5a67dcdbb3393dca7aa8aca5d4ce10d67a401e7e163f404261e4641",
                    "blockNumber": "0x2e2c820",
                    "chainId": "0x61",
                    "from": "0xbffedad1335f34d87791c3321cb36a7b7b88d86c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x80d820aa3ce1e4008f3bb803760ab8d42eaa3ed3619f9a8420cae0b0da0dd01d",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000bffedad1335f34d87791c3321cb36a7b7b88d86c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x8a",
                    "r": "0x78a6076ed19bd4f9bec1c7bba13289ff8455abb43ae9fdbbbfd0f0d8c400194f",
                    "s": "0x997137269cc44cee74c239aa7436ce08db158ba44836c7f17faeb9f093d8bcc",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x80fe907a84816d20717ba318a53c3bd884217a1c2d956b626c1db3b7d04b2a99",
                "value": {
                    "accessList": [],
                    "blockHash": "0x697afb967f349e120f460813f0c9aa82d37dc7dd68dcac105d786251800d185b",
                    "blockNumber": "0x2e2cd2a",
                    "chainId": "0x61",
                    "from": "0x798537aa29127872bc17c73e5de56a4a590d7038",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x80fe907a84816d20717ba318a53c3bd884217a1c2d956b626c1db3b7d04b2a99",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000798537aa29127872bc17c73e5de56a4a590d7038",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x103",
                    "r": "0xbf8223b9f0ebf89e8dd503c8d5008ee8c8f796f4374f5a1e91a4019050467a2d",
                    "s": "0x461cd7656230825d36ca258c2c7e7811dcc602a0f1943329e189fa2bfd7e94a4",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x8139aa47bb4a57697dc4122b1a7b26d544c1c7a945eb231d17c3d96e2d78afa5",
                "value": {
                    "accessList": [],
                    "blockHash": "0xeaaa1c5a455ea70bd7bc560c47ebe0b281d23034ef588abb2eac46ce7168f33d",
                    "blockNumber": "0x2e2cbe1",
                    "chainId": "0x61",
                    "from": "0xb04711e39cc6f8b5455c3bff9fb90b59c1e6f938",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8139aa47bb4a57697dc4122b1a7b26d544c1c7a945eb231d17c3d96e2d78afa5",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000277d96a1830400000000000000000000000000b04711e39cc6f8b5455c3bff9fb90b59c1e6f938",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x3",
                    "r": "0xc4677a056d38dd6eecf5df3a54a1a840b1560ff3e0fde312892301a6efb409dd",
                    "s": "0x40425da67dabfe50def3afc2ae14b8a2d2019e6eb0745b9bf219ec8d8a405956",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x81ee70ec5019a123f5734ae5ca4b79a01018393f6abeab95e486efa9f452b9f3",
                "value": {
                    "accessList": [],
                    "blockHash": "0xda68eeadebaa5a68f5a5dd7ff00ec6e37ad3ff320b8c2b37ea234ca1e7ef4287",
                    "blockNumber": "0x2e2cded",
                    "chainId": "0x61",
                    "from": "0xd9c89e6e473dc88aff98a650fc1633e2c5ddd021",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x81ee70ec5019a123f5734ae5ca4b79a01018393f6abeab95e486efa9f452b9f3",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000d9c89e6e473dc88aff98a650fc1633e2c5ddd021",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x5bc",
                    "r": "0x52b93f8d8b66cd1aca9c0727ffb2bda1a94e173f084f8baa97bf59ed39761744",
                    "s": "0x713ba0917beb257217b1fc7b97fb6260eca8d441744347791def44736fc2c98c",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x8217b096b99a21145309866f7597c620d7235082fd03118eace06eac1603ef64",
                "value": {
                    "accessList": [],
                    "blockHash": "0x45f538075194defc11e71348b124159803af3635e77f5fccd6bf9342b1fc5f35",
                    "blockNumber": "0x2e2ced1",
                    "chainId": "0x61",
                    "from": "0x88299b67eeaa87065921c90b7ecf142d9ccbde94",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8217b096b99a21145309866f7597c620d7235082fd03118eace06eac1603ef64",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000c31f0cbb3d40000000000000000000000000088299b67eeaa87065921c90b7ecf142d9ccbde94",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1",
                    "r": "0x263b3db137a00d7d8d7e1280bd597b844657247f762c55fb592f865449a6d95c",
                    "s": "0x305ebfb74f87ef8ad163a47986d001f4d01cef3d08aed55c1058b50663ab4f99",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x82d5b12d309651214d5d3ae00ca6bc260ec13d6e94690d29df545f7a51326b06",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9da9bc5edd018d7bb49612e57d93788289e4ceb0c3331a6d66d3e22187a98f92",
                    "blockNumber": "0x2e2cf8b",
                    "chainId": "0x61",
                    "from": "0x2f32389a57e33c4ead593929b920a25ace20641d",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x82d5b12d309651214d5d3ae00ca6bc260ec13d6e94690d29df545f7a51326b06",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000002f32389a57e33c4ead593929b920a25ace20641d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xcc",
                    "r": "0xd3101c36b7fccbc2b0c8032d20fdf68f3469af9b778f77c741a48c1abe012fdf",
                    "s": "0x4e77be1f9a83d46ace5d3fbf2df1281921e2c32816be216b2942b5a23fc2798",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x843e19432edf1be1ceb29365bce901567266831daef9746a845d17a4f54f0685",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4089cc5a511b0aefd983bf5ec5e5b76e4fe9e9d45d8ba42720dd346e5a9176c9",
                    "blockNumber": "0x2e2d189",
                    "chainId": "0x61",
                    "from": "0xc19c41e199fb275fefbb529216a2632b865cced4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x843e19432edf1be1ceb29365bce901567266831daef9746a845d17a4f54f0685",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000c19c41e199fb275fefbb529216a2632b865cced4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x31",
                    "r": "0xfda37ffd25c3e66fbf67d7c48b42351459b35bd64835d8e1fbe509e93bdacc9",
                    "s": "0xdc2085d03f701960d16741ff01b02877192a03e71d0dced1f492a01d1303818",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x8444da2f41e1e37c42a9fe7e268a016c4224c1cd459a318af5323974e6a4ff2a",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9b7873559c10744a66cb281ebd7e2609a0e237bbe5a3b1b788d5ef6a36dc05fc",
                    "blockNumber": "0x2e2cb98",
                    "chainId": "0x61",
                    "from": "0x0a689b649db799606bd8984ffd7ef595a1cfc648",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8444da2f41e1e37c42a9fe7e268a016c4224c1cd459a318af5323974e6a4ff2a",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000083734dd0b080000000000000000000000000000a689b649db799606bd8984ffd7ef595a1cfc648",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x81",
                    "r": "0x30fe89e3e44008045b1f9d6e02cd1949bc1e9527cc4a8264dcbcc24ff3b1cb62",
                    "s": "0x750c700379b1483b231dcff48eeddfe9846f703b8d6d4043643cb0c4f0f7ac09",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x88a6716ce1fefb9b8fcf7300f3d2975c8a6e33e66ea209543e4ed5ae5dc06efc",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4a5f8d637a25564b6365b7a7c0c55e53901d53b12305aca5306015438ae83855",
                    "blockNumber": "0x2e2ccd1",
                    "chainId": "0x61",
                    "from": "0x1d2ef8449438015fbf38929bc51c415e46756503",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x59682f00",
                    "hash": "0x88a6716ce1fefb9b8fcf7300f3d2975c8a6e33e66ea209543e4ed5ae5dc06efc",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000009184e72a0000000000000000000000000001d2ef8449438015fbf38929bc51c415e46756503",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0x4e",
                    "r": "0x1ddf384c2fa5b67876c93457315f155dec622823166ab2bd6f44a9d109ca8b7",
                    "s": "0x2a3e27e834326150a2b578a53e36db76f75ba169e64f25a9956766102690dbef",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x8901b5a309e03669ef4d181a418b136fd42297be634a672713b245f184be4db4",
                "value": {
                    "accessList": [],
                    "blockHash": "0x36674648d0a31d26d8ee2c052f7b16505d27c9031b86e4c5780b87b9125cc795",
                    "blockNumber": "0x2e2cb0b",
                    "chainId": "0x61",
                    "from": "0x3e3a901dfc227c2964bd9c4f6892cbaf96c49cb4",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xad731380",
                    "hash": "0x8901b5a309e03669ef4d181a418b136fd42297be634a672713b245f184be4db4",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000003e3a901dfc227c2964bd9c4f6892cbaf96c49cb4",
                    "maxFeePerGas": "0xad731380",
                    "maxPriorityFeePerGas": "0xad731380",
                    "nonce": "0xd5",
                    "r": "0x22c8c73f940f43a0ddcb26af617c1d1a2c844e270455ac4a64ceff50ee6364d5",
                    "s": "0x74e0dfec336d1999aaa5f48b55e19fd09c1068bf9fb72d8ae901f05a1f606cbf",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x8b7af248a16e030a44f90b36a76d56ced457d407bd6cb9a3f62cb54c51923044",
                "value": {
                    "accessList": [],
                    "blockHash": "0x17eacd88b1679f2e4dbe704280d56b58289951c910e741e90ea73d2626e24939",
                    "blockNumber": "0x2e2cd97",
                    "chainId": "0x61",
                    "from": "0xd87ded6b0e47c668478c32c8df8efe56331e45e2",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x59682f00",
                    "hash": "0x8b7af248a16e030a44f90b36a76d56ced457d407bd6cb9a3f62cb54c51923044",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000d87ded6b0e47c668478c32c8df8efe56331e45e2",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0xcc",
                    "r": "0x6b78f49632a92a306f441ec5a025cf3b4dab02bd42dcd3655c3e32a47470acb0",
                    "s": "0x59fe4f7bd95e98cbc4664a97cb003949cf2528f673ea3732470770d4b434591e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x8c6ea85bdc92bd900ac0b8d04199b16cb835803a8ffa121a7d56728363ed950e",
                "value": {
                    "accessList": [],
                    "blockHash": "0xba99e6be8099d9e026a2551fd5f63f03a188e296ad326c03dbdb738f8c37bd4f",
                    "blockNumber": "0x2e2cb78",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8c6ea85bdc92bd900ac0b8d04199b16cb835803a8ffa121a7d56728363ed950e",
                    "input": "0xa9059cbb000000000000000000000000c2252f67d2e08d2286ca9014ddcd2faf5928547f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de35",
                    "r": "0x628f144daef24a41aa0b66472f1e4288b53791cc7de458fb781c7f5baae17711",
                    "s": "0x2d731341ad9a95d2c0be1e176f064fddccf654068d98a40937849561ff000da2",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x8cf3183c235898c0ecc23279dbbaab7f174a3661605983e7250d789d8ac2b64e",
                "value": {
                    "accessList": [],
                    "blockHash": "0x5370df7fe9a2bb65b7ccd2cf6611bf1d62fc1ad5bf629491010ac48b0c5d7db7",
                    "blockNumber": "0x2e2cdf4",
                    "chainId": "0x61",
                    "from": "0x7519479934ff6133a5009134ae576077b452017c",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8cf3183c235898c0ecc23279dbbaab7f174a3661605983e7250d789d8ac2b64e",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000b6cef59990000000000000000000000000007519479934ff6133a5009134ae576077b452017c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x3",
                    "r": "0x859b3959eeb8e9c69874dbc2974d067174bd2a1413fa3bfbef24d111a97fcddd",
                    "s": "0x4d0839d66dbee37d075746065d154d5ca54a3c552e996b44be2e2875058cfaf8",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0xd",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x8da5fd2467caf7fc03c6970dc0fe88cce68bbc9dbe9dda8101309e793fab9eca",
                "value": {
                    "blockHash": "0xf7c9830b4e075464fb6a17aeadf2d5ee0b746c8a0b917ef95d0432502a52a4f5",
                    "blockNumber": "0x2e2d1ae",
                    "chainId": "0x61",
                    "from": "0x093070a819af95ced7d65a6770ce89b9bdd10357",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x1ad274800",
                    "hash": "0x8da5fd2467caf7fc03c6970dc0fe88cce68bbc9dbe9dda8101309e793fab9eca",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000093070a819af95ced7d65a6770ce89b9bdd10357",
                    "nonce": "0x20",
                    "r": "0x9f09f4683f5ec6d05d004140188ff2f41cb341889247a0da34c89d9c29ff2d13",
                    "s": "0x6d82845e72e1dc11a888d3e2ce20a224239815bcfbba9e04073601d71124f863",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x8da85d4a144f4f454cef60950db5113b498c766946c062bb3402b40c3357b299",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa4c2d1e41b872279e47b41a68e7eb981ad7ac82ebfc6373fb0107a162d002c49",
                    "blockNumber": "0x2e2cfed",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8da85d4a144f4f454cef60950db5113b498c766946c062bb3402b40c3357b299",
                    "input": "0xa9059cbb000000000000000000000000cf8661c15e8a19e7824c3f2844c681232836fcd2000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deaf",
                    "r": "0x5acefcfdcfb05cbeac1c5b0154f8249ea9d384fe4a6b2b348879f850f94ea347",
                    "s": "0x39483ab4f3461c04bd8b3cba62cdecbae24ab1f7b1fdff5577304b6ad44c0e68",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x916bf3d67930018e1a10511769c874bda08ca64a85a8b7b0d4250edc74bdc5b4",
                "value": {
                    "blockHash": "0x54b0fa242ad7173ecd456e04ded928a83ad0aba050a61afcaeec7cb1894f9f00",
                    "blockNumber": "0x2e2cc33",
                    "chainId": "0x61",
                    "from": "0xe1b5b9f27a5d61c8102fcf04c676cac0edb2eb75",
                    "gas": "0x2b6c5",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x916bf3d67930018e1a10511769c874bda08ca64a85a8b7b0d4250edc74bdc5b4",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000fb0dd3ac066046d89acb7cf27ac8d7f1f24e5a4",
                    "nonce": "0x28",
                    "r": "0x50c9bd4bce43d58d059405aba4d0b82ba9d791d5237321c898559310dadbefbe",
                    "s": "0x687e87cac32ebf6d2ff317df7bf7db0c03f65064b812f2bdc96d7b31cd79cf07",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0x925fb1cb2a736b05e34ec2bd111aca1d7a43443390bc21129787e57d3fef2f4f",
                "value": {
                    "accessList": [],
                    "blockHash": "0x38e9e1d0446c5826b5f3ef6b2be63aca4325450388749b90fcfbb175bf72e5cc",
                    "blockNumber": "0x2e2d0f4",
                    "chainId": "0x61",
                    "from": "0x6c946ba6183bc8f8726baad07672b46382201ba7",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x925fb1cb2a736b05e34ec2bd111aca1d7a43443390bc21129787e57d3fef2f4f",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000006c946ba6183bc8f8726baad07672b46382201ba7",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x9",
                    "r": "0x41fee39e151c4df13bbed738bfe44e54e62288bb17217699f1ed7611ea7441be",
                    "s": "0x59bd613fadb235b7e0b7cea66ba1458b16c8e901ac50c162f199b4dd82ff1963",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x930ccfcc8f18f57bd49c8f0e416a5dcad7b918ca230929e3c2f0493cd410fd8d",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe451da2cc9e47859f66030f5a45fc592d73f0098c022304ffce8eeade1a123b5",
                    "blockNumber": "0x2e2cbdb",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x930ccfcc8f18f57bd49c8f0e416a5dcad7b918ca230929e3c2f0493cd410fd8d",
                    "input": "0xa9059cbb000000000000000000000000019dd2c24445d5896b255afa8dd681a1dcd95f1c000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de40",
                    "r": "0x316c8d8ab8afd5f17c796f0718c42398e0c1db609210f3f59f80cfe398b9aaff",
                    "s": "0x6403b720d793b4e9e013ba1d90b5391f2ed8114af00135a087b7ef66572147d1",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x93ff914a865ae64d3dbff8b90cc31f7b104a74c21f0d782d58a92b037833d544",
                "value": {
                    "accessList": [],
                    "blockHash": "0x88a7caa8b975af12ec10abf0dbe83ccc47866fcfcce0542e5b76a6042b326557",
                    "blockNumber": "0x2e2cda9",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x93ff914a865ae64d3dbff8b90cc31f7b104a74c21f0d782d58a92b037833d544",
                    "input": "0xa9059cbb0000000000000000000000005fb1144dec1b0da752b75ce0c7b834d1260081d2000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de6c",
                    "r": "0x63d4e730708f1f41942762d31f29896312ca764637f5cdf479abcd97cff8e43f",
                    "s": "0x3e15b7b09ac7d5df46677e4ade7f4efa18c73686f6d06b616356310ae9b9180d",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x94565d9cd598a0c9411051690f406940fa4fa63425623a4343c1743653305649",
                "value": {
                    "accessList": [],
                    "blockHash": "0x3483ca50f46718f7145b6e2425b44b8e5e7ab78b698ea8ddd93005b56414f821",
                    "blockNumber": "0x2e2cf68",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0x77359400",
                    "hash": "0x94565d9cd598a0c9411051690f406940fa4fa63425623a4343c1743653305649",
                    "input": "0xa9059cbb0000000000000000000000009994c16b1da5d7635261dec018b8bcc3f120d8db000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0xee6b2800",
                    "maxPriorityFeePerGas": "0x77359400",
                    "nonce": "0x6de99",
                    "r": "0x261719301b94a4d648f5e50aac49b5c0891ea7b0b441df2d433077dba026220f",
                    "s": "0x1ed07005614ad0ea9ee3062e38a78c187558f496d5630193c8f37aa105a14dc1",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x94985b8f368cdb962e738bf647343a0b83fa47d4adf3c23bff5ba1f9b1562df4",
                "value": {
                    "accessList": [],
                    "blockHash": "0x805cf3df05d3ff622978465183b756e59eb0cfbc8437435533e13adbfd84a727",
                    "blockNumber": "0x2e2d0e8",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x94985b8f368cdb962e738bf647343a0b83fa47d4adf3c23bff5ba1f9b1562df4",
                    "input": "0xa9059cbb000000000000000000000000f6042f30af88dc859fac4a1d3e568b1bcbc57213000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dec6",
                    "r": "0x736aaa92ef92b7186dcfb44e59aede34258728e23757ee614ecee17b219d654c",
                    "s": "0x7a15a2d355153f2dd1c5b2a5a4c789315cc5296cb72d4699cf0fad41fa91cf1a",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x97bdab2a25c5ec250b9b326791b24021b29e8553df2831993bf1a128a5052259",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd257c1c013a42614295c99313053ec8d3ff9bc88e89eb70e0fdfaf0f38c8afc5",
                    "blockNumber": "0x2e2d02e",
                    "chainId": "0x61",
                    "from": "0xb47956d3c1e63e85ae3a95148508196017365ee6",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x97bdab2a25c5ec250b9b326791b24021b29e8553df2831993bf1a128a5052259",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000b47956d3c1e63e85ae3a95148508196017365ee6",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2c",
                    "r": "0xcbcffd636738a0cc2df1ac92cbbe8ebe1c81663773980279a38f245ccb870599",
                    "s": "0x15f9a9ea85a6f8be4592f1cfd68c632e16ecb900048d0531104cebd40d92130d",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x989238612671928d5265628627de76784eecb591a8c28f4defbb997b851032fe",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9c0955a0dbed65139aad0a810e4b24ffe02edcff7bfd9e12236883b1e4020291",
                    "blockNumber": "0x2e2d183",
                    "chainId": "0x61",
                    "from": "0x7b6aefdc821dfd153376326a8b1d46663d7e28b5",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x989238612671928d5265628627de76784eecb591a8c28f4defbb997b851032fe",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000013a56ed53c8000000000000000000000000007b6aefdc821dfd153376326a8b1d46663d7e28b5",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xbd4",
                    "r": "0xfe7445f24b28696e9423d43c309449371b52c7ec920166d5dffa106eeb2dc5b2",
                    "s": "0x42f184970c5a07e43457511116e3c81ed9b107074b1068d364126b9944737292",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x9b3a2600786003b813619aa611903e5a39cda46857c6a414e3cf81665bf4ecc8",
                "value": {
                    "accessList": [],
                    "blockHash": "0x42218f9d6eb7ad05622e358b3dfae18385ea5e8b5e3341904c95d2a1626a1be2",
                    "blockNumber": "0x2e2cfd6",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9b3a2600786003b813619aa611903e5a39cda46857c6a414e3cf81665bf4ecc8",
                    "input": "0xa9059cbb000000000000000000000000eafdb2160c779090cffb7f10b7d1d820cc1a20f9000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deac",
                    "r": "0x820183a2c1ea0419300559a1862dcf0a8d95b158f031f1a87faca703d65f6800",
                    "s": "0x336b20a3c04740cfdbb0dd4714e2f3b070cb21ae0e902f9686f272fea2117389",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x9c2cd9c24b230279e09af862cd9971f31e282a4314b101f1550e420e02a37d53",
                "value": {
                    "accessList": [],
                    "blockHash": "0x3df67e92349a6beefe7f6d7c135134f9bf3a328ba3412e5a3529ac891479a818",
                    "blockNumber": "0x2e2c9ff",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9c2cd9c24b230279e09af862cd9971f31e282a4314b101f1550e420e02a37d53",
                    "input": "0xa9059cbb000000000000000000000000e3e3dd6168f063a17a9525baf3338c32e5f9593b000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de0f",
                    "r": "0xf0d189465c4778574ab9af9a6b476fddbb612fed1590d3025a57b81158b2c47d",
                    "s": "0x4f20f601544fb60d607043b6a7de8f5eb0be9686054c4b3b73154fca52691dd7",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x9d1c178338382276b2d58a04313a6a3dc7de4d627c74d1275a18e93e6be520f0",
                "value": {
                    "accessList": [],
                    "blockHash": "0x24a598e84cfdeeff7e2f374278af259ec6e40e6d053f94e0d4b12bef5d0c7306",
                    "blockNumber": "0x2e2cec7",
                    "chainId": "0x61",
                    "from": "0x739ad8c044599b999bfe8fc572cf3c422c2c68c6",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9d1c178338382276b2d58a04313a6a3dc7de4d627c74d1275a18e93e6be520f0",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000012aeb23527bc00000000000000000000000000739ad8c044599b999bfe8fc572cf3c422c2c68c6",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2b",
                    "r": "0xe41db4ae19891f298a447540bd7cb0e53577faad7ce048143a8b7ee7833f877",
                    "s": "0x67133cb2e390264a6f597d2331e318b6cb65c6ea2351a8e32d687bfb31595b15",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x9d84c408dc12bdb16c74fcec2bfe5723ac5fa816754cd681b18861003b2a8cf5",
                "value": {
                    "accessList": [],
                    "blockHash": "0x734bc0b9dd4f958c2aaf252a19ceba224ed00f2a914bae9bde30a8f6ffc42b9a",
                    "blockNumber": "0x2e2cd79",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9d84c408dc12bdb16c74fcec2bfe5723ac5fa816754cd681b18861003b2a8cf5",
                    "input": "0xa9059cbb000000000000000000000000fce7e1e3b5288aba6723035db339d8cf227cfc3f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de68",
                    "r": "0xff894f53d573b18fb333b4b9e74a701648713eb05023ba0f6ec65c6724439b57",
                    "s": "0x70b26edf0e272ce0e8249ddbae62a3f38dd8598944302bd1dfb5a164e988aef",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0x9edbe6bf88db1fc5edaf36e6629cd41a0f3f2f9bbb52273c9ef5b0fe8d76219e",
                "value": {
                    "accessList": [],
                    "blockHash": "0xaf98869874d5aa52c0ccb2a008f129a0494ff1b9a39d4f19f681006a30943808",
                    "blockNumber": "0x2e2d1af",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9edbe6bf88db1fc5edaf36e6629cd41a0f3f2f9bbb52273c9ef5b0fe8d76219e",
                    "input": "0xa9059cbb00000000000000000000000019af4b3282ba1ec541406ba04d9a3c4d6c22d6b7000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dee2",
                    "r": "0xe8e80abeb79ec73cdaccbcbbd782fdfa419b343a4a3b40ca25fbb8581ac8a320",
                    "s": "0x458789c34895c767da1daade455aa155993f6b3f171faed9867dfc58216edde1",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0x9f33c6528481591c72007aa018428ff027ff0ae0aff9386a2253327c1295c066",
                "value": {
                    "accessList": [],
                    "blockHash": "0x414235a361f9a8411a7fef59679a7371d2875f8738d3a5d6c89db562047b3ce8",
                    "blockNumber": "0x2e2d155",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9f33c6528481591c72007aa018428ff027ff0ae0aff9386a2253327c1295c066",
                    "input": "0xa9059cbb0000000000000000000000002c6b5ec5a02c7e96f7feeda66de563cb653931ea000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ded2",
                    "r": "0xb0c569d56d4d3880fca61ab427fa1f99531b156515fb00e5becd1f3f4271528",
                    "s": "0x5652124c8a1deb399a465a1ecf85ed812d3cae94dd1464c129e0c82c2d6a4e1a",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xa1f754b4038273b3293ccfaac8da828f4df4dae0d26215ec9ace5db6843d2c23",
                "value": {
                    "accessList": [],
                    "blockHash": "0x566a813b2ea3f7f2e177ebbe789c59f074acbae2ced70e94f783c8e2fba911cc",
                    "blockNumber": "0x2e2cb3e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa1f754b4038273b3293ccfaac8da828f4df4dae0d26215ec9ace5db6843d2c23",
                    "input": "0xa9059cbb000000000000000000000000d27153a00bd4b808808e17c62d625163d6cf2a2a000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de2d",
                    "r": "0x2d1c1dbdef09a8d88446d9eee07b684ab2c465d18635e836cbe35f59bbed201a",
                    "s": "0x1f9dfcd4d8165002283562cf6aef845d6bee8ec7018336394cda481368374158",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xa26b169f294baf898167e7c9fe409fe822422710b2d17efb0c3e471a074cccb1",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa73ea1113cd068cab5ae6820eaa98317cff93800686ddc81ddeb072f7bbb75ae",
                    "blockNumber": "0x2e2ce21",
                    "chainId": "0x61",
                    "from": "0x6c29b5371b3816a0e64388e0da73a78e9d652f1b",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa26b169f294baf898167e7c9fe409fe822422710b2d17efb0c3e471a074cccb1",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000006c29b5371b3816a0e64388e0da73a78e9d652f1b",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x35",
                    "r": "0xa0ae7e42e864803b59d864cdd8aa3ad36657abce3c4aefa1beaf6c3046a78fe0",
                    "s": "0x264d09f0da00f5a43bf410f432b7f5a0ac5f964dad6ae39ca0fc5bb623e25c32",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xa2834af563645ae1b2f14470e8986875adbaecc38c64dbaea62894e88d9f1d9c",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9029caea1f9db755dff114288c08f5ce87b9ca08e84a8c5a82e2b4fe32281876",
                    "blockNumber": "0x2e2d043",
                    "chainId": "0x61",
                    "from": "0x1ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa2834af563645ae1b2f14470e8986875adbaecc38c64dbaea62894e88d9f1d9c",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000f5904616e0000000000000000000000000001ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x231",
                    "r": "0x67153b6a744b78b21dcc4be7dd9ccb6c8768692edb7d955c2fb183cb4a445310",
                    "s": "0x24cc399ae411d873728ce984c6e826b5c9e33242d9f5342b6cb1516f640dad28",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xa2c1a9b2810dd0c3d298bd0dc6462a4582fc38a25d97525512cd657d33447219",
                "value": {
                    "accessList": [],
                    "blockHash": "0x03b675d266c1761aed99f7ffc4441a2427260b81f6cbbedf57a1b51c9ec85261",
                    "blockNumber": "0x2e2d067",
                    "chainId": "0x61",
                    "from": "0x1ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa2c1a9b2810dd0c3d298bd0dc6462a4582fc38a25d97525512cd657d33447219",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000107c0e2fc20000000000000000000000000001ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x235",
                    "r": "0x802af6c11e4cdc4b9de6cbab8c94bf212432223ed1080e6d2a9553ea2f204a88",
                    "s": "0x670dc0821f7884b43d16dec2774e8d2bfdae6df4483d111eb650a42c1bdcdf28",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xa46371fc05aa80dad834bb1caff4f68c6aced9d2a6c17b1ecf9e18d0840fdca5",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7a740d0314773e8fc473ffbfd207aeaedbe27049e442404fed7d331934c4da0f",
                    "blockNumber": "0x2e2d182",
                    "chainId": "0x61",
                    "from": "0xc8ac82a15d82b5986fcc495286cad8c95fc216b7",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa46371fc05aa80dad834bb1caff4f68c6aced9d2a6c17b1ecf9e18d0840fdca5",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000c8ac82a15d82b5986fcc495286cad8c95fc216b7",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x7d",
                    "r": "0xeea5c1f962426a746bd87bc535ac40ce088249ec30bfffae251601aded096e2",
                    "s": "0x2c700e795d0e224c6f74bd936bce7a2fef0a276cc35e6f21968675dc1ae954d0",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xa59cab763cc76f2cc79688f1d47b13fdf1f360e12e2d698e5c4fcffa337a6964",
                "value": {
                    "accessList": [],
                    "blockHash": "0xdd75d82cb09c5e330791c5ca31e90760af9c74c229b19f4dee649bebab50d617",
                    "blockNumber": "0x2e2cfbf",
                    "chainId": "0x61",
                    "from": "0x5311bae9c70c2aec2429f40b53e20133ca6c9df6",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa59cab763cc76f2cc79688f1d47b13fdf1f360e12e2d698e5c4fcffa337a6964",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000005311bae9c70c2aec2429f40b53e20133ca6c9df6",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x5f",
                    "r": "0x9b19046dced9393daa52d1d4f99dfcd9924a5bd7ea67b538e3c4765cd544b23a",
                    "s": "0x529362d9237296c4f83c3b1fdbce5fc020db9a0f135ee19a0e6c8be98bf8d81f",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xa6fa2138c3c84477a7e07319b9abe234dca71de7ba3dceb6d5e8ec2cee08273e",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe2dbe93d0d72a0389fe09f670ff0b64d66ef98b67a13e40d11f147eea745c3e9",
                    "blockNumber": "0x2e2d057",
                    "chainId": "0x61",
                    "from": "0x1ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa6fa2138c3c84477a7e07319b9abe234dca71de7ba3dceb6d5e8ec2cee08273e",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000a3b5840f40000000000000000000000000001ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x233",
                    "r": "0x334ee0635f3f691bda848575de20e275b8da0203175bc067f0633fc4e4b9d861",
                    "s": "0x796a0cb23de7f974a7ee03a05aa25b0acd46a8e185e5748df60d32d4375e76d8",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xa767d3bd50a6e42bf0853e05270fa00b8112dac7a7cea88ac317067306960491",
                "value": {
                    "accessList": [],
                    "blockHash": "0xad0c5a4f70ff089ab1ac4ef0d2c28024ab5450dce4497b39abf3bb83e9e71f4b",
                    "blockNumber": "0x2e2cfe6",
                    "chainId": "0x61",
                    "from": "0x2f32389a57e33c4ead593929b920a25ace20641d",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa767d3bd50a6e42bf0853e05270fa00b8112dac7a7cea88ac317067306960491",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000002f32389a57e33c4ead593929b920a25ace20641d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xd0",
                    "r": "0xbcb9afd4148685399245839136a4c894d14253b45cb77b283f2ea4087d9810ee",
                    "s": "0x58946bde07833bd1df4f32048b463f70f21744fa138a431f9864bcb3f1dcbbb8",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xab16169717f23838187665155cf232e28d7a655210ccfccef226a2af4f589b3b",
                "value": {
                    "accessList": [],
                    "blockHash": "0x80139f1e63651a118afc34e11c1bfb3321215a9d7b614ed47363d7aa31fb90d4",
                    "blockNumber": "0x2e2cdf2",
                    "chainId": "0x61",
                    "from": "0xd9c89e6e473dc88aff98a650fc1633e2c5ddd021",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xab16169717f23838187665155cf232e28d7a655210ccfccef226a2af4f589b3b",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000d9c89e6e473dc88aff98a650fc1633e2c5ddd021",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x5bd",
                    "r": "0xaa36bab5c105220f64c3836badc5ec7e83d483b301f8e7973476752da2a1a8c7",
                    "s": "0x19e4d7f9fd54f07beb212dc195784fbc5793c194743bf186ffa2d0df94b523",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xac4e9d076257232e22dbf20eaae0e7599b5a9d183d3514721bca21975dbe3f15",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa3d626732970d44c4c1211edc59d1576c3174c635f463f365f42fc198eeae078",
                    "blockNumber": "0x2e2d179",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xac4e9d076257232e22dbf20eaae0e7599b5a9d183d3514721bca21975dbe3f15",
                    "input": "0xa9059cbb000000000000000000000000c674ea8e7176deffb0a0789596c54caf5704f13e000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dedb",
                    "r": "0xf92aad4d3f04ab8c42ab29aa7ffffcaf944e18f836714d10a307bdf62d175fac",
                    "s": "0x236622d256977023fb6b9ec7ff0e6917846b177b7bedfa611ad9262ae8d8fa74",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xac8ddcc03c95487d0a850f4de0c24e2ec14fb821692bdf4263af615f65fe68f4",
                "value": {
                    "accessList": [],
                    "blockHash": "0x8a2d22e989a20610cf98b91ff7557967893d47f29ceb816fcec40a8a6f5d9cc8",
                    "blockNumber": "0x2e2d170",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xac8ddcc03c95487d0a850f4de0c24e2ec14fb821692bdf4263af615f65fe68f4",
                    "input": "0xa9059cbb000000000000000000000000f77489db63a78f97cd59b9e503dbf5691b4b8aea000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ded6",
                    "r": "0x45774f7efa5f36d66500db18f827fcee37be8de9abe480379d71a409778b0a14",
                    "s": "0x1d980673264ff173b7b6be6ac7863544b021c09141f82ffa130f91f024f75327",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xaca48af6b170f9f9d430876893b1df1cf67539dd14c73d5aaad4de3c80956379",
                "value": {
                    "accessList": [],
                    "blockHash": "0x46a742e71ae5cef466c85a36b9612850276826da97560c5b447856441ba9cb09",
                    "blockNumber": "0x2e2ce57",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xaca48af6b170f9f9d430876893b1df1cf67539dd14c73d5aaad4de3c80956379",
                    "input": "0xa9059cbb00000000000000000000000091859256c9a68fa8c01ceab7e932e854a685fd75000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de7e",
                    "r": "0xb6d2511d4a7c3f3c29f881e7a35c6f2a1d60730cb3a518072aaf48df69089154",
                    "s": "0xf01e0fd37f585ab95e07fcdf92544dbe53360f3f176cd58b4f6b72004ed6f47",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xacd8be484505cc23da79ccd565b95dd980919cfc7ba41d63a13be030b88120c0",
                "value": {
                    "accessList": [],
                    "blockHash": "0xafc8edb2b72fe3517797a3f4067bedbfa78c66ad0421eec49839304699c6b993",
                    "blockNumber": "0x2e2cfe1",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xacd8be484505cc23da79ccd565b95dd980919cfc7ba41d63a13be030b88120c0",
                    "input": "0xa9059cbb000000000000000000000000ec303703cca5ddede0c6d39c050bd90ec32580aa000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dead",
                    "r": "0xf3c8ddf0fdab3a97bcaeb6cc3521d491c498fc548482ad8b924b3d2cf53c1aa3",
                    "s": "0x17db173d59cfc3e9334c789846b77cdda69631443183300dffb9c3ddad8e3c7f",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xad0eaff2496cc7b3bed790988b7548b376d431a50e5258e2256208c7427c0401",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa2d290e6eda8907b812d264c011e6af2a60ed80c683a4352e7c5b8a6e532cf54",
                    "blockNumber": "0x2e2cc84",
                    "chainId": "0x61",
                    "from": "0x7ed592e435f09efc3bab3fac65cbec9063c4bb38",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xad0eaff2496cc7b3bed790988b7548b376d431a50e5258e2256208c7427c0401",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000007ed592e435f09efc3bab3fac65cbec9063c4bb38",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x15",
                    "r": "0x98ccbf6fdb405052c176d70a8d188ab0fcef531732819a2265293006c732a2f6",
                    "s": "0x206b5f949b848891653ea8bf54063814fc3379f0a2b05a709d19036c1b95a59e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xaf78154f70b53c109f90b63539134db9383bddb54b0261404d8a1d3e1f3bc043",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4d95c93c2405bc93e10c0b0fe85e2f2f8abf28a65d22f59cf3161d9ecd9fc4e9",
                    "blockNumber": "0x2e2c883",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xaf78154f70b53c109f90b63539134db9383bddb54b0261404d8a1d3e1f3bc043",
                    "input": "0xa9059cbb000000000000000000000000b939f9a7b6f85b5eff022cdaa86654c426d060b2000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dddb",
                    "r": "0xcadf0d712d520367636b3fe36f707df31b55ad1f04c58416401434fc63b19af6",
                    "s": "0x117e0c1478c35982021601e35db3b3e7551369d2127a1c6f56d46b8f965e1721",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xb06bee7e4e3392c0f52acb0e969c09a49058268935c036a82b2386444e588f82",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd64e396e6867d754abd04177ee68f0ce3cf3285014a5f91294ea4cc345769d20",
                    "blockNumber": "0x2e2c970",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb06bee7e4e3392c0f52acb0e969c09a49058268935c036a82b2386444e588f82",
                    "input": "0xa9059cbb00000000000000000000000077f646bf6527ef7a129976b402a3008979d2139e000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddf5",
                    "r": "0xd6902fbc36f849ccaf6c2fb4bcc15a631a383e594e4c87845f88bbd4f6a723df",
                    "s": "0x5baa4e82cd13e25c69d7b7836fb8120ac489bc85c5f0641b7d3f929d7615156e",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xb0989b9c7638ac574a40ad5d20e06ccefe725c3bd746aad29cb301c00be29c99",
                "value": {
                    "accessList": [],
                    "blockHash": "0x97bed1b25f44e715b15d902cfca83d9ff5cf57fba6781420a34a7bd47f0dba21",
                    "blockNumber": "0x2e2cfec",
                    "chainId": "0x61",
                    "from": "0x8c8db8ad2c261b2cac76a70e11a91416f6b1190c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb0989b9c7638ac574a40ad5d20e06ccefe725c3bd746aad29cb301c00be29c99",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000008c8db8ad2c261b2cac76a70e11a91416f6b1190c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x5d",
                    "r": "0xc7232cfded4ea6314b6c0d2002769e25111b2dcbe1cf635a3009141a08176657",
                    "s": "0x142cfda7105cd0bd8f4f3ab204409780c6f97e71b9f4bdf5408061d336b0c1b5",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xb0da95b75e88c5b7b2a0002f9179d584d1c0a8905d6a8d12c0dc482c8040d63c",
                "value": {
                    "accessList": [],
                    "blockHash": "0xdda9cd567ebc9a7be69ac4798dc9a90f67b546f4074f303680eea61c784bc402",
                    "blockNumber": "0x2e2cfad",
                    "chainId": "0x61",
                    "from": "0xd1f653ccd77d6aa6726c27f9506a070c08dc84c3",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb0da95b75e88c5b7b2a0002f9179d584d1c0a8905d6a8d12c0dc482c8040d63c",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000d1f653ccd77d6aa6726c27f9506a070c08dc84c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1a8",
                    "r": "0x62ac055c42e46d7d860763be464dfa1775785ae3f5617a2291cfc1a82c7850e4",
                    "s": "0x7d4ce9208ec6b03cd72ed353c983510e37952914bc06ccc1b810bf3bd5ddec20",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xb352bcc9de3fe5d8b21a78fa04ae3dcad362eb7a3014d0680b23f0d5d0e72b09",
                "value": {
                    "accessList": [],
                    "blockHash": "0xee981d29b493380488d41dda5bb3a2b2c62379e614f9376caa33181e5b9693ec",
                    "blockNumber": "0x2e2cb99",
                    "chainId": "0x61",
                    "from": "0xd27153a00bd4b808808e17c62d625163d6cf2a2a",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb352bcc9de3fe5d8b21a78fa04ae3dcad362eb7a3014d0680b23f0d5d0e72b09",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000d27153a00bd4b808808e17c62d625163d6cf2a2a",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1",
                    "r": "0x673159579c61147f6622d9453c985e83c023dd47afa3db11cc1f70ed6058d10a",
                    "s": "0x7b7762edd0b7b35f0aed45decac712cd434a2c9c6348db78306e76cfc9f02f97",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xb454571543d5653d2b6cbf076630fec50c13f5d67d279eb92e27bc275571869f",
                "value": {
                    "blockHash": "0x9515e9cf0b0e936b6041360184469af570328fcb71bbac797487063090957dd9",
                    "blockNumber": "0x2e2cd4b",
                    "chainId": "0x61",
                    "from": "0x5335219c732e3975c86ce4f5e2c3efd46dcb458d",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x1ad274800",
                    "hash": "0xb454571543d5653d2b6cbf076630fec50c13f5d67d279eb92e27bc275571869f",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000005335219c732e3975c86ce4f5e2c3efd46dcb458d",
                    "nonce": "0x3e",
                    "r": "0xd33c06413a91770bdcd41a1e5b1c501ab3213ed4977b339b741021d3982a74ad",
                    "s": "0x4bb96a8e449dea08692bcbcfed094621f9d66cbdf9a828730d5af8b8ef5a189f",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0xb5b6337cba9093f3c8e1439b53a5054527acdc0df667b6a677a3871a4e22d5e9",
                "value": {
                    "accessList": [],
                    "blockHash": "0x468f38f801caed3e627891bc318fdc0280263b53d956d43758255844b50d4f0a",
                    "blockNumber": "0x2e2d066",
                    "chainId": "0x61",
                    "from": "0x4f18b67214c018d603dff2fa49d527f72a505ae6",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb5b6337cba9093f3c8e1439b53a5054527acdc0df667b6a677a3871a4e22d5e9",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000012bd64c036fc000000000000000000000000004f18b67214c018d603dff2fa49d527f72a505ae6",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1",
                    "r": "0x226bb17b928a583cd04b8618e911ece0d413284f6509236fd2e670470f429bf5",
                    "s": "0x4bdc3d2acda27b2b1f2c60ae21afb297c2a56a2a9346efdb774aed24ce7e23e2",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xb799929bb3d2cee35329f55fa4521a8f7890534287ed9ed5543b90944e9cd3bb",
                "value": {
                    "accessList": [],
                    "blockHash": "0x55cc52c0501465f041af3c8deca98185fc97e7066052772fa68ff1dcc091c640",
                    "blockNumber": "0x2e2ce75",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb799929bb3d2cee35329f55fa4521a8f7890534287ed9ed5543b90944e9cd3bb",
                    "input": "0xa9059cbb0000000000000000000000009dbc4ea74ace3f58c412fe9d5512af45627ac6c1000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de82",
                    "r": "0x8af6af885e9858563d700bcb2c64dd84818be29897c73904d0abe2224518d5ea",
                    "s": "0x6947f0e7d05de97d398dfa5a119bde8c2cdbe3439a92bac269b8dacbbe75d2bf",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xbfd49ed263438385014a6eb65b2384cd2e293cc076808e0e4490837fcb0f456f",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf268d36939857f5d17cab049eba3b2540fa73a5094aa19626af9de42f0ea156d",
                    "blockNumber": "0x2e2cd32",
                    "chainId": "0x61",
                    "from": "0xe3e4045ff1b23ed06f420ca3d8fc4b627d883562",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xbfd49ed263438385014a6eb65b2384cd2e293cc076808e0e4490837fcb0f456f",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000e3e4045ff1b23ed06f420ca3d8fc4b627d883562",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x3f",
                    "r": "0xc0f239edc5be5ff2d94cc6a146e446a034beb2eb356ad5c3d47469631c9916a9",
                    "s": "0x1d0b41326fe91e4a3dc89129a310c3b8a282550cd4dd11ca5028b5cb8844f3df",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xc0a44de89f7838c34d75c6a9bb4e469993266f0a7a1cf275319cd5814f1862fb",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd63302a4f217fb920e485ce53e10e30d5740b4b6f89eb1440d30300e1d30bc71",
                    "blockNumber": "0x2e2cc47",
                    "chainId": "0x61",
                    "from": "0xbc32833509065bd99211b8a92797d35040ca397e",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc0a44de89f7838c34d75c6a9bb4e469993266f0a7a1cf275319cd5814f1862fb",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000517da02c000000000000000000000000000bc32833509065bd99211b8a92797d35040ca397e",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x322",
                    "r": "0x1ae51100ddffcca1686b7741c5da5e79b8ae9f36b0db77d0faf64a80f4fa4dea",
                    "s": "0x1689c79e233b165cf5eb3cb8a1c0e54384a21fbcc6ce3f49cd7919df3701b80b",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xc0db402a5fbf6a176e407f902042e1e2e3fda8937d667fa937b71f31874b7fc1",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4edf249ddcaf40b5983f518e5eee4da770d7532ee6ae66c11b4d9ca6b89cfe61",
                    "blockNumber": "0x2e2cdd1",
                    "chainId": "0x61",
                    "from": "0x7343fd8ddfd61294cfaf7837a9fe572a08b772f5",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x59682f00",
                    "hash": "0xc0db402a5fbf6a176e407f902042e1e2e3fda8937d667fa937b71f31874b7fc1",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000007343fd8ddfd61294cfaf7837a9fe572a08b772f5",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0x88",
                    "r": "0xad4d0600f133f4ce6102c0cb61247934012338ee03ed6ba9c91ca1dda42dc2b6",
                    "s": "0x5434314a507ef89b0126e8020289250aad35cdbac13a5d2829db2b3aecf8ab36",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xc11438da065380c801fcd8139cff74deb257508bfca154e157ab47de3fa7552d",
                "value": {
                    "accessList": [],
                    "blockHash": "0x56b499942928a1eac1915da6f3649f24729adefdbf19fc27b78e0136ae475115",
                    "blockNumber": "0x2e2cc72",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc11438da065380c801fcd8139cff74deb257508bfca154e157ab47de3fa7552d",
                    "input": "0xa9059cbb00000000000000000000000084cc0effaf4d9394ddc5cc37d5fa47ef24dba6e0000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de4f",
                    "r": "0xdf3ad2dc15c84133b8a401f9f82b2bf7a467970ec2d1529697ee855e5960633b",
                    "s": "0x74b36396886a875cdc8bc8a40e41369562267f6fc897054d31c9455cf3037eb2",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xc3f5091dcaf9ff46ded1a8a340e0685f41cabdcc612ed46540b3d15b0cfd2b72",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9ca8151b6fa2a35ae3310bcadbdb63190d09baa2671786bffb7b59b085ae8fe6",
                    "blockNumber": "0x2e2ce5f",
                    "chainId": "0x61",
                    "from": "0x1302f3bb7c47fbfe8291300be4107fc983f030f1",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc3f5091dcaf9ff46ded1a8a340e0685f41cabdcc612ed46540b3d15b0cfd2b72",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000001302f3bb7c47fbfe8291300be4107fc983f030f1",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x7",
                    "r": "0xdd3cc579e133b6d21bb0dac0c90ff49c05203b84f10852b08a9921dd5dfa904e",
                    "s": "0x3f4869253a53bc1682921e16ad5976afe8542fc980a8b3dbe0b620ffb4608ef7",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xc424b340bf8665255de31acb444c4bfc346dfa0bfa5922ccd3ca8d71ab25802c",
                "value": {
                    "accessList": [],
                    "blockHash": "0xda68eeadebaa5a68f5a5dd7ff00ec6e37ad3ff320b8c2b37ea234ca1e7ef4287",
                    "blockNumber": "0x2e2cded",
                    "chainId": "0x61",
                    "from": "0x5f77215648af7523d22134d143e8d97bcb778a03",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc424b340bf8665255de31acb444c4bfc346dfa0bfa5922ccd3ca8d71ab25802c",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000005f77215648af7523d22134d143e8d97bcb778a03",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x36",
                    "r": "0x478c5b4f6510d4d1f1bd15647363c7cb5b9c35ef25ad5adcdba8a39ff891f06b",
                    "s": "0x5f4867e3746bed3fe7f9dbc459755fc2925e8a7376e9abcc49dc1e6c2158cbce",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xc6f580282787109cd1b3896db9862e36b947834fe36343d9eeb3fd7f2c463625",
                "value": {
                    "accessList": [],
                    "blockHash": "0x2e6dd5b44056d4d1914626c8ebdeabf2569a10b9c2849a3fa9377e1ad8cd6c0f",
                    "blockNumber": "0x2e2ccb0",
                    "chainId": "0x61",
                    "from": "0x113465e5062a655e7503122575af392d55b73b59",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc6f580282787109cd1b3896db9862e36b947834fe36343d9eeb3fd7f2c463625",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000113465e5062a655e7503122575af392d55b73b59",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x136",
                    "r": "0x451825829128c9f680a658141c75629a02d2f3718aeade09a73a13da696c6147",
                    "s": "0x2ef2151478e630d3b109759a3e5a819d11dc7cc5ae88ddb6d57f82bb179e76a0",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xc7675880b87ae0a41f4cdb118360501dd4a8d096abcc8ca977aae886054bde77",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa64e50c555f49b76530d5eb2bbc786532e8504fcc5afaa1d4b0aca17c3a501f5",
                    "blockNumber": "0x2e2d15e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc7675880b87ae0a41f4cdb118360501dd4a8d096abcc8ca977aae886054bde77",
                    "input": "0xa9059cbb0000000000000000000000005ee7cc1110efc9e7f87c261c8113fee2458cdd18000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ded3",
                    "r": "0x338c9b214c84de2510704f0e20d598335e9993b507f3340913eca43a4c2dcc4c",
                    "s": "0x3d48c839f0bd82d39786355a87d790b7afb4df3128bfebae2978a131c8edb084",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xc7cf206c03eb867943366c1bab2467e1a6b23014a9e6f81ddd4848d8a1eea138",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf6546398a474b7d5c9b697e2f7b535340c3ef1cf75966dc30838886a7495f26b",
                    "blockNumber": "0x2e2cd33",
                    "chainId": "0x61",
                    "from": "0xa12b62f7038ce4e2ddf5e91911f65895c671eee4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc7cf206c03eb867943366c1bab2467e1a6b23014a9e6f81ddd4848d8a1eea138",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000a12b62f7038ce4e2ddf5e91911f65895c671eee4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x47",
                    "r": "0xe78cd9e59e25af626815d27bd1a22a1817de8a0ebde010b83e4818fbc4ab6dd7",
                    "s": "0x55800e4ce206f1c135f3aac551e99ba78b49053b3d70a3093fb0ba303d29e1e3",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xc912324102b72df56601da42be63281162a48775ad772ebcb54fad215ebe2807",
                "value": {
                    "accessList": [],
                    "blockHash": "0xce8f2e7795534c398975ef2b2f57eaf573a279d56008c9edc8a555199e526843",
                    "blockNumber": "0x2e2d07f",
                    "chainId": "0x61",
                    "from": "0x99df6a7261bf954967d48077c48b6d21fed6c0e1",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc912324102b72df56601da42be63281162a48775ad772ebcb54fad215ebe2807",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000099df6a7261bf954967d48077c48b6d21fed6c0e1",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x4d",
                    "r": "0x86b9bb573fb854aa2dee6d00cbdd3b0faac85d00f97c026be37e47e00ef67805",
                    "s": "0x5a6832aea1a2768d7f847894e9bafb5f822262a2e6c627b79acd0aa0afc617cb",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xc9ee768679abbd1e73537cff3689460b57d38f72e60fa785c530c6fb10e364d4",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe650dc76737cdf20dea97cc277c7f3e3f5a1b3582679340f3f65ac1714928b14",
                    "blockNumber": "0x2e2cb5a",
                    "chainId": "0x61",
                    "from": "0x742c3bc5313f309ad06928e0674d9c41938e422c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc9ee768679abbd1e73537cff3689460b57d38f72e60fa785c530c6fb10e364d4",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000742c3bc5313f309ad06928e0674d9c41938e422c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x3",
                    "r": "0xf86f5c44e66bc08808b2ed4c694700d5167881078c0b109486b76f838b1393f4",
                    "s": "0x1f49ebf3cc0f3627f015e1aabd7b15a12153593ba8ace93f128412aa6306c123",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xcaf84a139b5a07912ed0754000f728a10e166106e6ed16515ad71dc2a24f1ccc",
                "value": {
                    "accessList": [],
                    "blockHash": "0x8b921d75103e1051092b8c548bde9d23a328841c9260c1aada401d7bc7c23aa5",
                    "blockNumber": "0x2e2d0f3",
                    "chainId": "0x61",
                    "from": "0x3d277e7f29f7e8a1918c7f1a15eaeca42d8c8bb3",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xcaf84a139b5a07912ed0754000f728a10e166106e6ed16515ad71dc2a24f1ccc",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000003d277e7f29f7e8a1918c7f1a15eaeca42d8c8bb3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x127",
                    "r": "0x5632ebeaa9869bdd4ac7ec4c7f01a9fcbde0bd30ea95c90fa420d89bf7c77fff",
                    "s": "0x689943e094a6249696f186755a757636790cc1a5fa9a33b172cd5fb6495a4c8c",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xcc08a05bcdb3d573557ffd327d86a9fac9f5f74bfb204436635ff8ff26fc16ff",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe2b73987692f8f42401191f33656ab2c638196dfe81ddc806450f2224ac6158b",
                    "blockNumber": "0x2e2cad7",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xcc08a05bcdb3d573557ffd327d86a9fac9f5f74bfb204436635ff8ff26fc16ff",
                    "input": "0xa9059cbb00000000000000000000000036fdc3962fa113e1269b506aa52f52dffeb39bcb000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de27",
                    "r": "0x9ddaf7f461b91b45d507b93e7b9844aeda9949d03d8b1154d35b1f8bc1acf65d",
                    "s": "0x183dcf5fa04bec0c9e1ba2ecf20cdf4c33314603ac85f72fd3949b63e284d723",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xce50d02657fc8f5385dfaf38eb6ef290cc966db75f6d3c90ae80c9e14ef042ad",
                "value": {
                    "accessList": [],
                    "blockHash": "0x41a0f9a841e5aa6bad28e3948ccb443f01ecbde0e55d43cb3a7b4a27c263c723",
                    "blockNumber": "0x2e2cbda",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xce50d02657fc8f5385dfaf38eb6ef290cc966db75f6d3c90ae80c9e14ef042ad",
                    "input": "0xa9059cbb0000000000000000000000005bd70e3a13627ac7ce8f303d2cf9b872d19005aa000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de3f",
                    "r": "0xd1018a2b238e28fe473c9fa9f01d0b5548a27c04b1eeea5294e9a1545f24131e",
                    "s": "0xea5459603acc97bab0f225c34258c85acf499d167f42da9fb45ad72af8e0ce3",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xcfd50325543fea39d7dc49a01d023c6926ac219fda705595bb94f2ef2623262a",
                "value": {
                    "accessList": [],
                    "blockHash": "0x5a6800a091503913b49597e12aa7f227ee4d42b1a6f5bcadc0cdbb7cb64fcbcc",
                    "blockNumber": "0x2e2c99e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xcfd50325543fea39d7dc49a01d023c6926ac219fda705595bb94f2ef2623262a",
                    "input": "0xa9059cbb0000000000000000000000000742854af9b5e2ea1b211a149945b48589ea5bd2000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddfd",
                    "r": "0x58b1e70eae6e8306672c12cb3fdebcb031ba929e5222fe2f44087c16a1492071",
                    "s": "0x70f1125e1f795bdf14480df495d7f61ff8fa5d7b400b96eab0b7b8ef8baf15d6",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xd0877e7caa951554079b92cd7e87dc94f2f3ea237791b265d1ec9bcdf943ec9d",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9a8942a711854771ba3a3a3fc82202131b9232198b5c9202416eaeae0f96c1d5",
                    "blockNumber": "0x2e2cbc9",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd0877e7caa951554079b92cd7e87dc94f2f3ea237791b265d1ec9bcdf943ec9d",
                    "input": "0xa9059cbb000000000000000000000000c013a1ef1a993511d17ed10b83380b0913d4b22d000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de3d",
                    "r": "0x56d541f9e8b2452c8e140271f80bd669cc067c398053f3f25e2aab9851dbc9cd",
                    "s": "0x1b7f053e69ae3043b1315f2272a45fadb5f2f057ce026e1f2c23b565ed1c5003",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xd50a8f6decf930c3e577705a6115abc58a9a5aa13ac9a3a8964565994d51b7e8",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa9caf31067a15a120142efa49c03ee5a16a6a2190569c88c96ca5b300b7b1d1f",
                    "blockNumber": "0x2e2cd46",
                    "chainId": "0x61",
                    "from": "0x971bc77825978f2da46c921fd0c4a98c997e573c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd50a8f6decf930c3e577705a6115abc58a9a5aa13ac9a3a8964565994d51b7e8",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000971bc77825978f2da46c921fd0c4a98c997e573c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x311",
                    "r": "0xd0545e9e766e51b8e462de2951b21bb740ce19d90d8fccee7c82fd792f206dec",
                    "s": "0x2dd3f166b3dfb7f8da0669535700ae253c3894dfeea5af803ba7ae9429d77eb4",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xd5377b9ab2513d73b3c8585f29dd125e5268798dcd8b03e4dd92bc177a26865a",
                "value": {
                    "accessList": [],
                    "blockHash": "0x762b9338c077616cb0e5bbb45b10bbb5c7df49fd00f4dbbad23c348f5b0232d5",
                    "blockNumber": "0x2e2cd13",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd5377b9ab2513d73b3c8585f29dd125e5268798dcd8b03e4dd92bc177a26865a",
                    "input": "0xa9059cbb00000000000000000000000056c590c4c6a3d6344077bb1e84bc73b5b959f78a000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de5f",
                    "r": "0x8ec09df29090949099e813f3a3a26e234269c0e89f1ef4b114272a728436d952",
                    "s": "0x33b470a75b9ffd96a3f40debdf1c509c22996d4965d8e5166183da30b944d8f5",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xd7dc55cd9b01239f66e71f70f69619c3fbf6f812abc8eb5aab58a4a01f17d5f8",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd72a393b6ffa308864751e909efc7a58f978e2b9f65bdf4cdf8598603dc88982",
                    "blockNumber": "0x2e2ce3c",
                    "chainId": "0x61",
                    "from": "0x8a02e49db7df0ef30adbd0d72341c2d1cba7a030",
                    "gas": "0x1fd8c",
                    "gasPrice": "0x59682f00",
                    "hash": "0xd7dc55cd9b01239f66e71f70f69619c3fbf6f812abc8eb5aab58a4a01f17d5f8",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000008a02e49db7df0ef30adbd0d72341c2d1cba7a030",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0x16b",
                    "r": "0x9c87e58fcd50ef8410866171d05af4a8e854749f1e0349eeb140d2c9dc0595d0",
                    "s": "0x33230f8384a4838fa938ba945daf23157db2a609bbd95d21232c0e98e5bf9a84",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xdae1210bb7e941571578143010aa8b0a9446735d099c4616ea83470fabb32ea5",
                "value": {
                    "blockHash": "0x8af712415d2dc30827a6ca3da34dbaa07ac6a24fdc1253e7186539dbb3cf9b9b",
                    "blockNumber": "0x2e2cd91",
                    "chainId": "0x61",
                    "from": "0x75649bbb1de587fd748d53b8ef6928881774cbbc",
                    "gas": "0x1fd8c",
                    "gasPrice": "0x165a0bc00",
                    "hash": "0xdae1210bb7e941571578143010aa8b0a9446735d099c4616ea83470fabb32ea5",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000eebe0b40e800000000000000000000000000075649bbb1de587fd748d53b8ef6928881774cbbc",
                    "nonce": "0x34",
                    "r": "0x4eacd8776323ddf97fff8af5eb6669ed08b976a355c344807721c67ab56c3fd",
                    "s": "0x4843801d68086bd824ffa0b5a7666e214d55112af41d28067cc1b5924be3bd60",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0xa",
                    "type": "0x0",
                    "v": "0xe6",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0xdcf38bfa043ec22617dbbd1e3e5cbc46ee62f409c77de6eaae2f397b4e0de717",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe0905526056a073214015b72f0c88e00547e773d6feb0dbcf5a65b4d570d1db2",
                    "blockNumber": "0x2e2cf4b",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xdcf38bfa043ec22617dbbd1e3e5cbc46ee62f409c77de6eaae2f397b4e0de717",
                    "input": "0xa9059cbb000000000000000000000000bc1f86a64efd21a0de2805777b8c20ede937ccdb000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de95",
                    "r": "0x38e9fa6c859fc52cb267047e293676e64161b7793146c41b76fc9a6bf05bd522",
                    "s": "0x3909719aa18270ab8c6b76043b5e4d3c3ac48e3142462ff2cc4970eb132b4df0",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xdd82b99034138009b360f641bebb1228febdae8f77b5c78829a78b513038487e",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7d94b8413465d7c6a1f6bceb3e56ede8e55b3f21e96b3a84547f8bbf89929473",
                    "blockNumber": "0x2e2cf8f",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xdd82b99034138009b360f641bebb1228febdae8f77b5c78829a78b513038487e",
                    "input": "0xa9059cbb0000000000000000000000000d597fd21466a3c6d98f213d6bddd9311ca609a4000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de9e",
                    "r": "0x4c99159a59e785c039270bf8de5ee3deb112096711c5fb7efeb9b9d1fe7bfe7d",
                    "s": "0x1b26717d7a6f800b1c4255c4c232cc6b40e858169158b3e0f21b0d7350d38c34",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xde70b30e04b80c04a9e9c0531f3c2f8b55b272531ed0a9f82cab6c21ef552d53",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf6ff38cdcac287c64b79bda0e23488b4c13f1a995123dd69218bc5be26c73580",
                    "blockNumber": "0x2e2cfb5",
                    "chainId": "0x61",
                    "from": "0x9a09646a6b818a042a0429bd3f4af66a28b53b0b",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xde70b30e04b80c04a9e9c0531f3c2f8b55b272531ed0a9f82cab6c21ef552d53",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000001b48eb57e0000000000000000000000000009a09646a6b818a042a0429bd3f4af66a28b53b0b",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x20c",
                    "r": "0x2f5cb772fb7e803ec49f91e72e4495b5133b0a8043bf7400c54f86bb90ee2128",
                    "s": "0x4a8bd7bea0b165d4fe251fc63920440f32ec7a867c0a744f0cdeb628dc10b807",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xe0a3a6f34754df83dd84bdee0fa5b3b203ca1761bce700727195a2697c438219",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa92fbc12cbd4b1488f51c315d75213b1807925886b80f3f5b8459ddbb9d3603c",
                    "blockNumber": "0x2e2cba8",
                    "chainId": "0x61",
                    "from": "0x0b58f667376a3e923e37b880ed8cc6be2234dbed",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe0a3a6f34754df83dd84bdee0fa5b3b203ca1761bce700727195a2697c438219",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000b58f667376a3e923e37b880ed8cc6be2234dbed",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x16f",
                    "r": "0xce4344e9f4c2842dac32f55e5b42720213aae77d396bdc204a47f8d1f5e50ebb",
                    "s": "0x538a8746c9d23f134d5db163524b1ef462782f2d43f063c91ccfe1b1cfc468de",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xe180a175902f2a48e91f6c0710ae1424be32150f4164e661ce97366a338ac1b0",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf8190502988d668ec9baecb7e10b1c8587ced149e160c506454a465910527c46",
                    "blockNumber": "0x2e2d01d",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe180a175902f2a48e91f6c0710ae1424be32150f4164e661ce97366a338ac1b0",
                    "input": "0xa9059cbb000000000000000000000000ab181c9932505ae940b8cd90d2cbccf4f01e9bbf000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deb5",
                    "r": "0x1069b9806b7a3c4183d92d65c1d30b21c45d88d5cad7e0640d6330a887513ddd",
                    "s": "0x2f5abf5b7f003f94a5d8eeb0be9db70b9f88264cbafda00c1793df73d8131747",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xe1d9b95ac914a3f8189c2a9df1c33b867d61f14d44592d5fb505147310c9a1bd",
                "value": {
                    "accessList": [],
                    "blockHash": "0x04b25209400677297080dd73fe907f86dc3ec484cf00e3327ab78f9a22dab56d",
                    "blockNumber": "0x2e2cfa5",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe1d9b95ac914a3f8189c2a9df1c33b867d61f14d44592d5fb505147310c9a1bd",
                    "input": "0xa9059cbb0000000000000000000000004fc7d5fd52bb5c2356759aba526b130375f7f394000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dea3",
                    "r": "0x8fb98572ec5fa8847538ba980a44af60aafe64f9675fd2934d8a33280cdeb18e",
                    "s": "0x3c9f7e37301f43494c049771f802fe902d805315eeaac2d9ab1e166ef6f45eb8",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xe1ec0412604d689797b2b2e724fe35d1322a270889e44f4456453f02fab1bafc",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe2cdc4afc181759649c14b793d9b2e4c8be86253666a8ed69f1b7815df09610f",
                    "blockNumber": "0x2e2cf32",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe1ec0412604d689797b2b2e724fe35d1322a270889e44f4456453f02fab1bafc",
                    "input": "0xa9059cbb0000000000000000000000006b1979eac65fa5e62c035045ef0997a2e45c0de7000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de92",
                    "r": "0x9e4039dd794f078ac60730d772af99462eb3918ce77334e0f5d554dcd363d6f0",
                    "s": "0x2e551e6ac48f124a5cee4e176eee534348ea48d0937ee7bdda5645c954e8c31b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xe56334bca88b1dc67a9e984985a1d3c64a71020c6ca2d676565fadd43ff84e26",
                "value": {
                    "accessList": [],
                    "blockHash": "0xaa6b5f1df4959d56797d270d1533dd661abca3c226b760809f5f397f841257c6",
                    "blockNumber": "0x2e2ceb8",
                    "chainId": "0x61",
                    "from": "0x6417105711eb956cff0d15abf01e5f0bad4552d7",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe56334bca88b1dc67a9e984985a1d3c64a71020c6ca2d676565fadd43ff84e26",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000006417105711eb956cff0d15abf01e5f0bad4552d7",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x5",
                    "r": "0xcd73ddf249d8554d512f4a66efa5e510425581a64ba3980bba74315c941f73fc",
                    "s": "0x1f6ef49309655ee2e04bed88ce5693e37ead132ce591324c49c065877432cb49",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xe5b5484fdf657842422a72c35ff9260fe07420d2a61d9116e847ea8b2e9380e2",
                "value": {
                    "accessList": [],
                    "blockHash": "0xac4f7d973f8c0e43291aee82aac8d19f97d74f7264e1d2c37a923e90964229d9",
                    "blockNumber": "0x2e2d0f7",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe5b5484fdf657842422a72c35ff9260fe07420d2a61d9116e847ea8b2e9380e2",
                    "input": "0xa9059cbb000000000000000000000000727bb53d53aeebd944d6f918ba8d9b88c12792d9000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deca",
                    "r": "0x9e10eaca7a25494adc66a3905ba50ada4d12c711560e1ec1fd4fa3fd1397ccd",
                    "s": "0x53707b626635922d40d85a9120dc63e16d77b5c2592f3225b1d4a471ea910e6",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xe6223d820066913aaa4c55a93c6bbf78085e97376284ad36573fc24b5e95609a",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4b0d62504c8f7f6a8563f3979119c99beb330304e3da58ee65853226eef6fbe9",
                    "blockNumber": "0x2e2cdbf",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe6223d820066913aaa4c55a93c6bbf78085e97376284ad36573fc24b5e95609a",
                    "input": "0xa9059cbb0000000000000000000000003a56aa9a11d1222c5d59cce133f0c74785d0b010000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de6e",
                    "r": "0x903e437097a8f9db1d996f4a45a486efcdb985598cbfe688049ea5a44bf7af0b",
                    "s": "0x6dc18a4c6dc4f3931ffb36223c66c1905e8af20635b7a3f081b3b64f3b9c3c43",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xe750169062c37edb7972aac5a1a9e0512b708e4e1c4ef2e6491f93543d570222",
                "value": {
                    "accessList": [],
                    "blockHash": "0x51a19fadd18fdeb7ca53690403327de3eaa206115e7d2f899da3b407bfaa5666",
                    "blockNumber": "0x2e2d13f",
                    "chainId": "0x61",
                    "from": "0x607045ac137a5f6323c6b267902dcb521eb53f2a",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe750169062c37edb7972aac5a1a9e0512b708e4e1c4ef2e6491f93543d570222",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000607045ac137a5f6323c6b267902dcb521eb53f2a",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x4e",
                    "r": "0x57845fbedcf9f803ba235e5e031ae2d011183b83faea2c6acd1a93455d25deb2",
                    "s": "0x682276ed37d1f8fd5f14867fdfb23a153877ecb1472edff923ffcae19d30a9a7",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xe7c2910a1f8dae045f3aabee5e4737ce0dbc663565c21ed47e23d5d8be027f4a",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7b65668a452809ab722fd7b05ef149a0da0d6b2768623865443e302ad5033af6",
                    "blockNumber": "0x2e2d109",
                    "chainId": "0x61",
                    "from": "0x57b72f91b6f0dd280dd5ee16bf926cfbce5a08cb",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe7c2910a1f8dae045f3aabee5e4737ce0dbc663565c21ed47e23d5d8be027f4a",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000357aff23b5540000000000000000000000000057b72f91b6f0dd280dd5ee16bf926cfbce5a08cb",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x5",
                    "r": "0x2ac147a8838c3bd791889c92eed1f759eb508ff69e4db77b093a9834aa4958d7",
                    "s": "0x33639ac674797b3fc7f971e34ca7af76cfc9a2695fdfd1d5d70e795e13b8b8f6",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xe8a7f6404b607638f6c94e9e86c71a7495e0d1174f3d6bfc7274e924e4485bdf",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9eb17e403802658c83c6999ccdc1c4924a36b8b62f97429f1647c6bfa17b741d",
                    "blockNumber": "0x2e2d1bb",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe8a7f6404b607638f6c94e9e86c71a7495e0d1174f3d6bfc7274e924e4485bdf",
                    "input": "0xa9059cbb0000000000000000000000009d203fffc1ada4be67a8cd53e9af17b6a3717470000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dee4",
                    "r": "0xc8ba902c91e57e244e7bfcb4861f8f85d266a5bd52006896c6b8f08170cd5d7b",
                    "s": "0x70b0955ee9c1d1a043a9dc0db08a56c2f9ce8875445b01a8521ddb8fcad2b4cc",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xec854e0bc50bd8ecc1052c800841c6933ad857be7d98ada6d1e46f9f8fcee45e",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd7fc0841551c7e891e38ca3e64cc2523ad5b010b98761ca3978c5ae56503591a",
                    "blockNumber": "0x2e2cffb",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xec854e0bc50bd8ecc1052c800841c6933ad857be7d98ada6d1e46f9f8fcee45e",
                    "input": "0xa9059cbb000000000000000000000000582c52ea66c513203641dc64b3059b6b3735b315000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6deb1",
                    "r": "0xa5b12a13c230211bb4519913525d924e9ef92504f088df1cc643ecef9ab42a7f",
                    "s": "0x5e20525262ab73d411efd1548e06aee8b2f053096c838b37503e229fac261fde",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xed7e7c4d17a2a48808cdf6026d2ec9cfe5390c631a9c0cf5f3b01c75f81ce905",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4b0d62504c8f7f6a8563f3979119c99beb330304e3da58ee65853226eef6fbe9",
                    "blockNumber": "0x2e2cdbf",
                    "chainId": "0x61",
                    "from": "0xd87ded6b0e47c668478c32c8df8efe56331e45e2",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x59682f00",
                    "hash": "0xed7e7c4d17a2a48808cdf6026d2ec9cfe5390c631a9c0cf5f3b01c75f81ce905",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000d87ded6b0e47c668478c32c8df8efe56331e45e2",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0xce",
                    "r": "0x34abe906dc407ad76e16beb1980bf15d281006e9604c2fcca5864e39556ea661",
                    "s": "0x4a514eb00732a7a390cce468513de9a9da86f93eddcd2e4cc944a8f5d3fc29bf",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xeee6fb6cadcf941e78757f46e7113c93886ec55f47b3738a70e47fd4a14d8676",
                "value": {
                    "accessList": [],
                    "blockHash": "0x47bfdebf9e1ef14d99d8587cba7883c6721903ee924f32f813e6811158d21788",
                    "blockNumber": "0x2e2cce3",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xeee6fb6cadcf941e78757f46e7113c93886ec55f47b3738a70e47fd4a14d8676",
                    "input": "0xa9059cbb000000000000000000000000c0e9d80504a520217ad30e446c738355c8d3cd9d000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de57",
                    "r": "0x38654452bbb538f6fca28ebb1f305a3615b439a21428169e7936b981d1a8b229",
                    "s": "0x1c879eb1cba0126b64f73767cff50f18bbd50f68cfec76b241981b3ad7971781",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xefbd3d80eeed2d3f7115ddcbc4e4db582bff3677666f5393c8bf5a300765fd14",
                "value": {
                    "accessList": [],
                    "blockHash": "0x24a06623ab767edf5f04a784903d9543f1f65a7ac26aec43011137ce10426c04",
                    "blockNumber": "0x2e2cbde",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xefbd3d80eeed2d3f7115ddcbc4e4db582bff3677666f5393c8bf5a300765fd14",
                    "input": "0xa9059cbb000000000000000000000000041987cec9c09ba78c733b871044b9896b05785b000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de43",
                    "r": "0xbe94129486fa2e9324a0c43b652ff513625535ab13c9fdb749b42f1c70f38328",
                    "s": "0x5f25f2f33490c6d214f98b9b1ed5ee422700677761f7e39f0d57f6a5b25aa2f6",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay2.transactions:0xf02af92a1386f278d64579ea4b79c3367d396b447180ec71bd4081d5378da01a",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd4ff64d2dae172bcbdaa78534b9e3035dc370d4d65a762fa923ac2ac77b1452d",
                    "blockNumber": "0x2e2cfd8",
                    "chainId": "0x61",
                    "from": "0x1ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf02af92a1386f278d64579ea4b79c3367d396b447180ec71bd4081d5378da01a",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000006d23ad5f80000000000000000000000000001ef39cd0057fb416bede6f730f049a4c6cf6ed7c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x225",
                    "r": "0xa76d1f0f9a75d3594a788d549f6d7c3e35197ed72bd6525d9a8eea068654ecef",
                    "s": "0x73eca7608902626d82f680b60f58ba0ffb29b1d0fb5d331c3eae19475ea6a170",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xf30620c8dd85ed34cdf42f0372ff3cc3b306682e4fc22bd90f77a97b8c178301",
                "value": {
                    "accessList": [],
                    "blockHash": "0x6d743e3fc3c0f80f2bd137cf79d2f86674333231fe46e0c24adec461a92e9d50",
                    "blockNumber": "0x2e2cfe3",
                    "chainId": "0x61",
                    "from": "0x9a09646a6b818a042a0429bd3f4af66a28b53b0b",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf30620c8dd85ed34cdf42f0372ff3cc3b306682e4fc22bd90f77a97b8c178301",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000009a09646a6b818a042a0429bd3f4af66a28b53b0b",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x20e",
                    "r": "0x32e1070bb262695983820fdf57dfc33fc59a0ab54a16c4afeb7cdb2f12f8ca6d",
                    "s": "0x6a20e4081013a182e1281741978a7866b8b638b1240439cc799265de9e64fb61",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xf6bd55d340611a0a2d199ff127443e168d914d99b028716742ccbe0f9e4a832d",
                "value": {
                    "blockHash": "0x03d41eddab955b6e0179699bfc5a97326efb57afd740d3c6be109ea0d748cbf6",
                    "blockNumber": "0x2e2d052",
                    "chainId": "0x61",
                    "from": "0x86830cde3ea306d89bdd40df0a75b8bab57e22a6",
                    "gas": "0x2b6c5",
                    "gasPrice": "0x1ad274800",
                    "hash": "0xf6bd55d340611a0a2d199ff127443e168d914d99b028716742ccbe0f9e4a832d",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000e35fa931a000000000000000000000000000086830cde3ea306d89bdd40df0a75b8bab57e22a6",
                    "nonce": "0x3",
                    "r": "0x785e44885db9fce79fc6aceffbe820f3164cbe4ff1a7a38aa83b8f67fed1879d",
                    "s": "0x73c1aec42318ece9477eba60e16ded36570fb97d8cb649d8710487071b7067c8",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0xf70805f80c9f88036fb384b3616d76061a84746f6405b82b8697ede7e407440b",
                "value": {
                    "blockHash": "0x2c39e90d52b3651308170dadb7590d44545513ba20a44254c97b59d7f3691897",
                    "blockNumber": "0x2e2cdca",
                    "chainId": "0x61",
                    "from": "0x437a60b636abda8fc623227f9dff100e56886bc9",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf70805f80c9f88036fb384b3616d76061a84746f6405b82b8697ede7e407440b",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000437a60b636abda8fc623227f9dff100e56886bc9",
                    "nonce": "0x6d",
                    "r": "0x2ac5a30bf64580365dba6967d275dbd89316f018cbc97f16f647c831053a73af",
                    "s": "0x295264f623ec526a421b743267a283ee77cd9aca3f5251255d41180dac43b77d",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x0",
                    "type": "0x0",
                    "v": "0xe5",
                    "value": "0x71afd498d0000"
                }
            },
            {
                "key": "con_relay2.transactions:0xf7cbbbbf17fcab693aec07c49be09fbf2b3a4fcae6a4a8d979c9432763f5bd98",
                "value": {
                    "accessList": [],
                    "blockHash": "0xecdfde086fa910685e10e7642348d9ea9da0d1138f079c98af6f8e1bd2a5bae1",
                    "blockNumber": "0x2e2cddb",
                    "chainId": "0x61",
                    "from": "0x93259bc42e4b1e60e5f73bdb6e7be44d48ef8f47",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x59682f00",
                    "hash": "0xf7cbbbbf17fcab693aec07c49be09fbf2b3a4fcae6a4a8d979c9432763f5bd98",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000093259bc42e4b1e60e5f73bdb6e7be44d48ef8f47",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0xc5",
                    "r": "0xd44bbefaa25551329f9111f51f9481b26ea171eef475f55dc11d9e9a9098408f",
                    "s": "0x7a33435a6ed8603ba919b4ccf77664e6fb0fb720f82972d7e383f692b4eafc0f",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xf93421ea7807fe6b802787536982886e42a687aba100b85dbb1534cf6dd3a62b",
                "value": {
                    "accessList": [],
                    "blockHash": "0x4754b8979fc48c4d1d3a36dea1253c8b0b8c72c6f390baf0ae987b1b99999bbf",
                    "blockNumber": "0x2e2cba2",
                    "chainId": "0x61",
                    "from": "0x0b58f667376a3e923e37b880ed8cc6be2234dbed",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf93421ea7807fe6b802787536982886e42a687aba100b85dbb1534cf6dd3a62b",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000b58f667376a3e923e37b880ed8cc6be2234dbed",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x16e",
                    "r": "0x5fb90bbe9cbfb6b95f4c4e065579ec23d88a8d851bb8ec51bf522e5fa185290",
                    "s": "0x9f5d8dd91ec577b7449ddd1eff2ce8b2e4edcdd87f6eb17b429cea1deef217a",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x7",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xf93844524ba4e69bf180b475d5c6b878a730f3e83d14cf8a9a3df1a5509938d9",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd233931a5684b5820757d490f8fc136733eaabe8d87a450fd214f7e2c85a6cb8",
                    "blockNumber": "0x2e2d0dd",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf93844524ba4e69bf180b475d5c6b878a730f3e83d14cf8a9a3df1a5509938d9",
                    "input": "0xa9059cbb000000000000000000000000c3f744d26f23ab1f6b49ca66b7f7b380ef609f04000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dec3",
                    "r": "0x85524cc2c2f1f81d7b8e8c1ad34882d8ab4a2a3b2a419d2d12b332e65ad6f5e4",
                    "s": "0x5eb9ab8a8e18a1893f3837476184492674aa05327f514f582b728d9de5485cda",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xfbd8faf30c00eafeb3f884933ab495aeef6cbd089233aa6d2db96cdcced6c0cf",
                "value": {
                    "accessList": [],
                    "blockHash": "0x50a3c93c99a7277cff29adb0778c0efdf2ca7f6124a4b1b0f5286e86ea202e83",
                    "blockNumber": "0x2e2cb4c",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xfbd8faf30c00eafeb3f884933ab495aeef6cbd089233aa6d2db96cdcced6c0cf",
                    "input": "0xa9059cbb000000000000000000000000b2d890fda45f4959b6a9a75caaa3565fc4a9c126000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6de2f",
                    "r": "0xb5ec532864af8c4b78aa81c5301a734dd7e0d768a95446dc6d4621d344bcc3f2",
                    "s": "0x37ebc7308eedf1bbfb9f5256c4b2051dda6809829e1e030563be2a5ab376d3ee",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xfe0816d2a3814839f05499ba1daf8e5956f8252d848011d014fe25c860282199",
                "value": {
                    "accessList": [],
                    "blockHash": "0x394270a5808bd6311b7552db7fef0c120decb7264b56031af6cbe5758c8aae4a",
                    "blockNumber": "0x2e2cb8f",
                    "chainId": "0x61",
                    "from": "0x0a689b649db799606bd8984ffd7ef595a1cfc648",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xfe0816d2a3814839f05499ba1daf8e5956f8252d848011d014fe25c860282199",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000a689b649db799606bd8984ffd7ef595a1cfc648",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x7f",
                    "r": "0x2f1bb509b724f001ec435c1a186fc75ed87c28fa842dda74767d3b27cc5feb83",
                    "s": "0x70fcf8e757c0e1f5faa24f7773e0c765b7bb2bc8ed9d7089ca7919cacd2b61cc",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xfe11669bc7352721a235e59eee7e0a1f8e5d62f6e919b0eded0f6b310c0d4618",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd9343b635d1afa8294dbb1902509ce0ff7aac71dbfdaa8e488fc3e778f9545f9",
                    "blockNumber": "0x2e2ce7f",
                    "chainId": "0x61",
                    "from": "0x6417105711eb956cff0d15abf01e5f0bad4552d7",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xfe11669bc7352721a235e59eee7e0a1f8e5d62f6e919b0eded0f6b310c0d4618",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000006417105711eb956cff0d15abf01e5f0bad4552d7",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x2",
                    "r": "0x926001bc642ecea989979a58a1c23d9d733d14930a231646682365d8ffba769a",
                    "s": "0x173b40bf6896b79a18943ed9f22dde7ccef9258ceb0a182ba98c6e63e0a650f0",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xfe4f84e81ae901bae0b79c5d685c985e61082f04b5eb6f7e21627e273f654799",
                "value": {
                    "accessList": [],
                    "blockHash": "0x159462e9bdf8eabb4a4dcdcc54104fc64bda9760c00bc7443165f777f83a33c8",
                    "blockNumber": "0x2e2d0e9",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xfe4f84e81ae901bae0b79c5d685c985e61082f04b5eb6f7e21627e273f654799",
                    "input": "0xa9059cbb0000000000000000000000006c946ba6183bc8f8726baad07672b46382201ba7000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dec7",
                    "r": "0x6c716c52ee388d320c379b217b9e3e319513ca4878b251828073386aed0532b4",
                    "s": "0x8798948c8485a21dfa4ab7c134f4834ad48efb75021dd8797010c6e71847a5b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.transactions:0xfef719223f23afba96af1f54d2afb69ae19c6ab3afc9b95a5d6cef9f4c4b0a10",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa7fb3028b7ae124b5b81b898a9ab162d59571f9748c97a972beab6a2646bf1f0",
                    "blockNumber": "0x2e2d0cc",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xfef719223f23afba96af1f54d2afb69ae19c6ab3afc9b95a5d6cef9f4c4b0a10",
                    "input": "0xa9059cbb000000000000000000000000f03f588143ebb1254a2cbe983e9314a30dd14ef8000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dec1",
                    "r": "0x3502aeef88449dc84c68fb70bcaa5b927e119632bf3ca01623ac62860c7711ab",
                    "s": "0x283bc485d2ad669268a53d0b0da07b50e7eaf0ee41b9d8e172b02fd0283b7b5b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay2.tx_count",
                "value": 195
            },
            {
                "key": "con_relay3.__code__",
                "value": "__transactions = Hash(default_value=None, contract='con_relay3', name=\n    'transactions')\n__relayer = Variable(contract='con_relay3', name='relayer')\n__tx_count = Variable(contract='con_relay3', name='tx_count')\n\n\ndef ____():\n    __tx_count.set(0)\n    __relayer.set(ctx.caller)\n\n\n@__export('con_relay3')\ndef add_tx(tx_hash: str, tx_data: dict):\n    assert tx_data != {}, \"Data can't be empty\"\n    assert tx_hash != '', \"Tx Hash can't be empty\"\n    assert __transactions[tx_hash] == None, 'Transaction already relayed'\n    assert ctx.caller == __relayer.get(\n        ), 'Only the relayer can add transactions'\n    tx_counter = __tx_count.get() + 1\n    __transactions[tx_hash] = tx_data\n    __tx_count.set(tx_counter)\n\n\n@__export('con_relay3')\ndef get_tx(tx_hash: str):\n    assert tx_hash != '', \"Tx Hash can't be empty\"\n    return __transactions[tx_hash]\n"
            },
            {
                "key": "con_relay3.__developer__",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_relay3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        19,
                        17,
                        23,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_relay3.relayer",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_relay3.transactions:0x152de640eb75d0b8361f98077004fbf02e9fb6110c80c30cc35cf416e9f84191",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbf7edab7a9afd65242c7f3503a9e982e67bd562d770e20fc5b883e6b7339dace",
                    "blockNumber": "0x2e2c8a6",
                    "chainId": "0x61",
                    "from": "0xb2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "gas": "0x1fd8c",
                    "gasPrice": "0x59682f00",
                    "hash": "0x152de640eb75d0b8361f98077004fbf02e9fb6110c80c30cc35cf416e9f84191",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000b2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "maxFeePerGas": "0x59682f00",
                    "maxPriorityFeePerGas": "0x59682f00",
                    "nonce": "0x260",
                    "r": "0xf04355577196f6c7770e65cfc8ee3c01519e9a27729e3f1b3fd8692590110142",
                    "s": "0x7a954a396b6f539ee26fabfd84715dae869baab7b112f08c1a4c09c2c7d91d78",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x7",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x24c60a9100e689d0e686c223bf8f018d8c0a0a380c42e1f61bafaa09dc37e0c2",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe63f0dbbdba8f828aa1a669f72178a471a5be46010b6386450deb7143b66185c",
                    "blockNumber": "0x2e2c84a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x24c60a9100e689d0e686c223bf8f018d8c0a0a380c42e1f61bafaa09dc37e0c2",
                    "input": "0xa9059cbb0000000000000000000000003cfcbae5b9bbe31e6e1d7ad55e9457b6c3635549000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddd5",
                    "r": "0x5ebbf2201743d76643e184a3c04354a0a0bad9266f5bdc40fbadef8bfe36a721",
                    "s": "0x4c4c1d13648345b26f76bda79900a66f2d222807c54d67bcd054103b77504799",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x3012255bd09e445f6fee9e326f9d25ebae1d5bf26f9f9f2b15f5a0c8ed4b4b8d",
                "value": {
                    "accessList": [],
                    "blockHash": "0x75214e1ac7869327ddc7347f4c9ac767377ab4625dc615196eb7581995e3a277",
                    "blockNumber": "0x2e2c912",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x3012255bd09e445f6fee9e326f9d25ebae1d5bf26f9f9f2b15f5a0c8ed4b4b8d",
                    "input": "0xa9059cbb000000000000000000000000d0a406bc70b22f659e04d68a79ec1a0847b40b2e000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddec",
                    "r": "0x136aed6da8e6adc1dff11bd508c7b9285964a0fb432fa8bfe0f01995321d02e7",
                    "s": "0x47f08303d4b9bcf73a96565df3db5ad4c18a739814b7fb1e38691845dcc467b9",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x347e0b3a0d566d178ff3f853c5d206baa345979233c65532bba7bf48ba7afbb6",
                "value": {
                    "accessList": [],
                    "blockHash": "0x7b0bf607920c1822087cc9fd85af89c9b20e481e4df14a27122223651ebb18e0",
                    "blockNumber": "0x2e2c8ad",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x347e0b3a0d566d178ff3f853c5d206baa345979233c65532bba7bf48ba7afbb6",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xfc",
                    "r": "0x33c93b22d228521140275c585d9e6d53a7aebbb2a1446804a46579824418344a",
                    "s": "0x6569170194b05cb70a8e90975998c6fe712ddadc3b0bf59e3b0cb5ce40f83bcb",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x370aff216712a76f78c89003ed695c7bbac2b16eca873edb3d5bf89ad28f3618",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc83553fd4bee1c10c259c24d94b2f87c66339433e1643a83cf19ad0ad378e91b",
                    "blockNumber": "0x2e2c85f",
                    "chainId": "0x61",
                    "from": "0x5049eff7346a1767016044b7ba6c2833cffdab94",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x370aff216712a76f78c89003ed695c7bbac2b16eca873edb3d5bf89ad28f3618",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000005049eff7346a1767016044b7ba6c2833cffdab94",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xe4",
                    "r": "0xfa873fb2859a48ba2083634d3239c930deb8cd34bf8bb9cf9773bf859ce998a9",
                    "s": "0x347a95e90d951ebc7142bbddd66c78e8f61b796abb7d116566a3d4ea48157f2",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0x38c8175f49243eec88ce5e56bd07d32b81c947d0075abf4a96ea1785ce6cf5eb",
                "value": {
                    "accessList": [],
                    "blockHash": "0x27ba523b2069a04173cef90c50e41309ca6d59715f0bf4ec3d41b12242d76ac7",
                    "blockNumber": "0x2e2c88e",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x38c8175f49243eec88ce5e56bd07d32b81c947d0075abf4a96ea1785ce6cf5eb",
                    "input": "0xa9059cbb0000000000000000000000009f091355b345db942dabaef177e4a28e24b28b29000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dddd",
                    "r": "0xe5eb16eadd6520b7c589e52889781b0170186266dfb7646e4a812c9e088d448d",
                    "s": "0x765bc00be393640bf44a02237185c06fc5f53d74dc14dc6363001175b9c45230",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x41442aac56cfdb0929f2c57b89017a515c7b047c6f5bcb6fbc8c5e4b451e1d4a",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe27283b224497abe64aea3486b50daa09d9d5858c951bdd46eded4927cd01ad2",
                    "blockNumber": "0x2e2c87d",
                    "chainId": "0x61",
                    "from": "0x6fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x41442aac56cfdb0929f2c57b89017a515c7b047c6f5bcb6fbc8c5e4b451e1d4a",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000006fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xc0",
                    "r": "0xdc6c956c4936069cf3176c611a3bcb741df4801f8985f6b2619e745d3e62a823",
                    "s": "0x4fa0903b025646483d756ccc4d642f231c36e2cf3acf168680f02ce7e1f75920",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x7",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x41ae0c10c18ecd1cea099f3438ae9a44020b7c5f18f68da08fe8da11814cf081",
                "value": {
                    "accessList": [],
                    "blockHash": "0x42f55d9bf1fd38bf78aa3c668b830c9e0c8963160994e2ed1862fcfe7432e9bd",
                    "blockNumber": "0x2e2c864",
                    "chainId": "0x61",
                    "from": "0x597b9418eeab34178bf0425108c81ff14ce7ad57",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x41ae0c10c18ecd1cea099f3438ae9a44020b7c5f18f68da08fe8da11814cf081",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000597b9418eeab34178bf0425108c81ff14ce7ad57",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x31",
                    "r": "0x9ebea6af05809e765144416dae82ab336f7d9ffa183ff0920c9f6f8708cc2f9a",
                    "s": "0x640eb6a4172de294c8bafd8086bed91c9377fb48acc67921a750c60f7006045a",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x53102bb3d2766e893481b15323f1225a969c3609cc8b3d87865f08d26e82e22e",
                "value": {
                    "accessList": [],
                    "blockHash": "0xbdcefa5c8abe10587b690c0e3778e7c1a529847f5176ea920b9aab9f1287ea66",
                    "blockNumber": "0x2e2c853",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x53102bb3d2766e893481b15323f1225a969c3609cc8b3d87865f08d26e82e22e",
                    "input": "0xa9059cbb000000000000000000000000597b9418eeab34178bf0425108c81ff14ce7ad57000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddd7",
                    "r": "0x504c53cda90e3c3a35879d8e4d33580a1ad4c49785927bc0acf9f9948cf8eede",
                    "s": "0x21357cca1b57a4f406cc9475c1d6f6c61654b6d447d52d9ca6048ab548dcfacf",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x55784b51ad057c682f60af41f242376c24b643ee4f1010b52721aedf07e2a455",
                "value": {
                    "accessList": [],
                    "blockHash": "0x8038ce4dd0cddd54cd2dfbd83d465eec4dae28f73dbb1fcece8c47419c554ff0",
                    "blockNumber": "0x2e2c916",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x55784b51ad057c682f60af41f242376c24b643ee4f1010b52721aedf07e2a455",
                    "input": "0xa9059cbb000000000000000000000000c59bf9175402ed9d90d576f1cd08b714e624514e000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dded",
                    "r": "0x8ccb8b02a85014276538783ce68f1974b9d1d6c0d04cce544d630d33ba37a908",
                    "s": "0x510a3eae3006e7e2aa15dd3f1caa2f34f9575f6bc77f9ae7eb0a71f10efe1c9d",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x57ce68fe84136827a964e3085518336cf730f47ddabd966cca2e6a3faf2a8a07",
                "value": {
                    "accessList": [],
                    "blockHash": "0x08afa924118e45a7ccda61fcf0b17ad01c2444a51b446270191d9e984ae2aece",
                    "blockNumber": "0x2e2c8b2",
                    "chainId": "0x61",
                    "from": "0x93e92683fe76a22d18f202c731a6b830eb17620d",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x57ce68fe84136827a964e3085518336cf730f47ddabd966cca2e6a3faf2a8a07",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000003faa2522600000000000000000000000000093e92683fe76a22d18f202c731a6b830eb17620d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x13",
                    "r": "0x4486f3a826b42f6124fe361c203cf9397f5f219ecf971d49beadeeff1e72cda8",
                    "s": "0x72779d1bbedc06f3955748fa192ddd6dbecc55dd45be41e3df938260211d2ebc",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0x6018c69973c7133d5139129f767a6cf2e0291dbb5a2e1df480a6ad8b6a9070a7",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa567f46987d65700caeb077f02e7eb39de8b5ce45cc60d0ef9fabebe3d3d5b34",
                    "blockNumber": "0x2e2c88b",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x6018c69973c7133d5139129f767a6cf2e0291dbb5a2e1df480a6ad8b6a9070a7",
                    "input": "0xa9059cbb000000000000000000000000995a34f4b3af3f6eedde3e95ba22510898613583000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dddc",
                    "r": "0xffac146946579fcc9d686bfd48af31074f6c8a106816fe5215c937b9a83234d0",
                    "s": "0x116a9dcddc03894f9be27f088b44a3cf61654661ffb72e0f947611588ab6e02a",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x60f867480951be532dec24c7d22cb859a28784bec8a703658f36ba28f0059cf3",
                "value": {
                    "accessList": [],
                    "blockHash": "0x35653d17ad83757163230ad01c8639a957517e48fee35153f8eb80a85efb9c68",
                    "blockNumber": "0x2e2c86b",
                    "chainId": "0x61",
                    "from": "0xad1cbd5cdf7c038becf692507292bcd38b1cfa8d",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x60f867480951be532dec24c7d22cb859a28784bec8a703658f36ba28f0059cf3",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000aedbdfc069c00000000000000000000000000ad1cbd5cdf7c038becf692507292bcd38b1cfa8d",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x1",
                    "r": "0x76c733cadca15f41bb80fa5bcaed02afbff86ca51f14b741e86b29bbe7218efd",
                    "s": "0x6da4fd37d611ba4c67d87866da4ecd37ae1b1c7466b548c6297473793777d22",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x65e694e0a389432203f58f0c537206bb494609ba72491bdbdddd18be7250331b",
                "value": {
                    "accessList": [],
                    "blockHash": "0x13fa03fec16f72ae44bc8e6651f237f329339846f7334f1bb843b612173677fc",
                    "blockNumber": "0x2e2c893",
                    "chainId": "0x61",
                    "from": "0xb2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xad731380",
                    "hash": "0x65e694e0a389432203f58f0c537206bb494609ba72491bdbdddd18be7250331b",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000b2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "maxFeePerGas": "0xad731380",
                    "maxPriorityFeePerGas": "0xad731380",
                    "nonce": "0x25e",
                    "r": "0x566f1c76bb92667d9b7652bdbb6f1d09c6e26de726cf9f8eadb7bccd6d7f450c",
                    "s": "0x5f26959345e0e7759591b29bf4c174b0b753697ce8285b1ef27368bb77e8afb8",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x9",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x67952b06d3cde196ce7b50a822c6dfa92d4d67b92f22c6c55349e87be35fb958",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf99d20edd5932b2ae193c8940bbd63bf95d4044ea09d7f927acee6503d53fa8d",
                    "blockNumber": "0x2e2c89f",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x67952b06d3cde196ce7b50a822c6dfa92d4d67b92f22c6c55349e87be35fb958",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xfa",
                    "r": "0xb7aa3c1c3ef46d4c043a9304615bec5fc1dff0d59fe2dd7ab9c542a5827fc5bc",
                    "s": "0x45940276051c75c372c3ed3bcf7f94895e78a4ba17aa9d5e389bf7e366d273ee",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0x7506aada102abc59e9d471b15ba72f099dbad0d5dcf1aa204fc95ffd5d4abc24",
                "value": {
                    "accessList": [],
                    "blockHash": "0xf92e760387f24f5173c4bc65030050713eb5833822a3a8c1bdecf259b830040b",
                    "blockNumber": "0x2e2c89c",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7506aada102abc59e9d471b15ba72f099dbad0d5dcf1aa204fc95ffd5d4abc24",
                    "input": "0xa9059cbb000000000000000000000000791263d96c466e9205ea576fa7debeed9bc10573000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde0",
                    "r": "0x12020bfb5e2def0d056a8a26ecbb28e1a6b6ddec2d0a0d144d3cd077f510ac77",
                    "s": "0x3d5467d8a0a72b16ea3043378502c3298930de2d3e9ad8908c100cb1c3024359",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x774befe0c668f3aea339c840dcd26bbdfa1735a2f611ea4a30231a8bbb140826",
                "value": {
                    "accessList": [],
                    "blockHash": "0x74706498bc571e4918c793cdcb64f241925800f7a5efa2ed97064d07d6f3061e",
                    "blockNumber": "0x2e2c8c1",
                    "chainId": "0x61",
                    "from": "0x1570538bd863cda432ccb4bfc50bd77af853f1ec",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x774befe0c668f3aea339c840dcd26bbdfa1735a2f611ea4a30231a8bbb140826",
                    "input": "0x363b2eb2000000000000000000000000000000000000000000000000000000000000008300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000001570538bd863cda432ccb4bfc50bd77af853f1ec",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x7c",
                    "r": "0xafaf0cd9e8200e9d8e9fa5baa6be9c13012a5766f0367c08ee1fd9f1e085f4e1",
                    "s": "0x4c03f142877389d529743956fea5ef04b4440ad2362fbd5de7f7e882f3f88516",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0x7bf3752b6400c43b072b20a28aa98638a9f1fe2b6660e5b3d49dbdf169b593a9",
                "value": {
                    "accessList": [],
                    "blockHash": "0x863f53f82238288c5320c436a507d0e1bf40bd79726472f2100742606fd4d515",
                    "blockNumber": "0x2e2c8d4",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x7bf3752b6400c43b072b20a28aa98638a9f1fe2b6660e5b3d49dbdf169b593a9",
                    "input": "0xa9059cbb0000000000000000000000005e1ba6cff7fb40abdd924b204b0b5808133791be000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde4",
                    "r": "0xd428ff4a0bfd028799a397dae1853eb91422e811704e55525b95f7943c45a1b",
                    "s": "0x18fe1c601adf4b142aaa917a84572f973265001c6a28fdc89ebddc84fae210c7",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0x8623d43b781a61865aad4050b8c24867489e5f40e04d70465bd0dac44d58eafe",
                "value": {
                    "accessList": [],
                    "blockHash": "0xedf703459f374d2d8f3426d99f44edeef1e963fdaeb3c64d2ae2673de48675fc",
                    "blockNumber": "0x2e2c85d",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x8623d43b781a61865aad4050b8c24867489e5f40e04d70465bd0dac44d58eafe",
                    "input": "0xa9059cbb00000000000000000000000049a09fbfc7f293b0753fdfeff648001b761337d1000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddd8",
                    "r": "0x8694bb34e5401c7e5204dc53a13d6c5504d9f7b190dcfa9a8c909ab346f8b30e",
                    "s": "0x1262a7ea8085c74da2e32ad9f5b3fb0c78ef0d245134fa9590dbd1490070e406",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x93a03e6d2fdbcb93a71fb9eabbd4f15c793b1586ea2d0f2410f621a357fa42c4",
                "value": {
                    "accessList": [],
                    "blockHash": "0x21722aa424e2fea307103173aa722d4c0194c7798cc9cea0581ea33504e6f6d4",
                    "blockNumber": "0x2e2c875",
                    "chainId": "0x61",
                    "from": "0xb2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "gas": "0x1fd8c",
                    "gasPrice": "0x73a20d00",
                    "hash": "0x93a03e6d2fdbcb93a71fb9eabbd4f15c793b1586ea2d0f2410f621a357fa42c4",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000b2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "maxFeePerGas": "0x73a20d00",
                    "maxPriorityFeePerGas": "0x73a20d00",
                    "nonce": "0x25a",
                    "r": "0x649ce81e9e32822c3d52fa9c3bc7b86a36ba1121081848012dea9a4a33c25b86",
                    "s": "0x291ebd253cdf3acd90b9d3c812eed9110d9fa8195d8ca028c631aa5f96837268",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x973665b9c2bf49eec3f9d490a4cfd2e283940d229c3a100f7ca3fa4ffd976d74",
                "value": {
                    "accessList": [],
                    "blockHash": "0xd1f68b0a1120294551952f7f7f80339d1582b381a23476f6d5ca007220a8f890",
                    "blockNumber": "0x2e2c897",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x973665b9c2bf49eec3f9d490a4cfd2e283940d229c3a100f7ca3fa4ffd976d74",
                    "input": "0xa9059cbb000000000000000000000000a991cac67863bb414adf0cfe482550b4e56934d8000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddde",
                    "r": "0xd4ac7550f74a604baff942a6b98b72ed86caee89f7db05a983e1c1f8ee785669",
                    "s": "0x28091833080791f0a18aa81aba73f749736f4605855fd1a78b81475739f1595d",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0x9f8c70338bdc9c673472bfd34cf32b09543ad6ae6feec7fd97a42b0673061912",
                "value": {
                    "accessList": [],
                    "blockHash": "0xec0139f90252f0dfd7bec0c796315038a00bd53120d805a370c4bcc0294d9b54",
                    "blockNumber": "0x2e2c8e6",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9f8c70338bdc9c673472bfd34cf32b09543ad6ae6feec7fd97a42b0673061912",
                    "input": "0xa9059cbb000000000000000000000000b79e1f28e3ec2974deb239003e6609fc584d40b4000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde5",
                    "r": "0x3d19c92cc40370f7ce3fc0c1edf123e9a945abb94ceb12aafaa05317b28a6fb8",
                    "s": "0x33693714b8a5fcb9d683b4d879a44bf059f52ff942a3441bd885217b2c1a8d67",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0x9fe155be971772adcc1ba4cb5ec56e1fec2c6ed2f22c78b7eb6f7a1ed405adaf",
                "value": {
                    "accessList": [],
                    "blockHash": "0x60a7df559d7d2408528aa701b82523ba03c691a4aad2ad59c3da9e132bbf5a87",
                    "blockNumber": "0x2e2c8d1",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0x9fe155be971772adcc1ba4cb5ec56e1fec2c6ed2f22c78b7eb6f7a1ed405adaf",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xfe",
                    "r": "0xdfa3d0b0596ddb831330bd386975516c90c1897254a13bf3b2b08a92eb8f1fa3",
                    "s": "0x43ab79c92fba462be98905510baa9d2fb13a3eb3090feeb1c313ec8c6fbef61e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xa1467beb54507b2fddc9e4279846175c95974eb231ab4eba5c4fac4becbf871f",
                "value": {
                    "accessList": [],
                    "blockHash": "0x13fa03fec16f72ae44bc8e6651f237f329339846f7334f1bb843b612173677fc",
                    "blockNumber": "0x2e2c893",
                    "chainId": "0x61",
                    "from": "0x9935e51e3ac62c731fdbe9a722efb2a78e0cde1c",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa1467beb54507b2fddc9e4279846175c95974eb231ab4eba5c4fac4becbf871f",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000009935e51e3ac62c731fdbe9a722efb2a78e0cde1c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xb3",
                    "r": "0xbd5fb20eaca508116e1621fda260461a62f7fb6e2cdb76dfca62349c6ce8b246",
                    "s": "0x6be7127d3bfe52a370aa0aa9729225f2cb43bb873b3d1f18cbfc2acb1f2ae8c2",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x6",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xa19e9fa6f2849ba001640a90f5b676efc1de5649e119bcded6ba90340ab990ad",
                "value": {
                    "accessList": [],
                    "blockHash": "0x94a51e803894768657d1abd0994619d66a5ce1f65dab73dff22a589c1058fd92",
                    "blockNumber": "0x2e2c8f7",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xa19e9fa6f2849ba001640a90f5b676efc1de5649e119bcded6ba90340ab990ad",
                    "input": "0xa9059cbb00000000000000000000000052422b8dce70990b6aa0f523e99f9883009456d6000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde8",
                    "r": "0xe9313e3f8eb7f8f1df8e0a71e6946c0493240f5a76ee80ca966f01b471cb030",
                    "s": "0x3a22df0cc14a3078711cae76ab7e9505b644a243ff03468ec54915a35b98784f",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0xacd7cfd1191c2f76a88de47c350c00e898b8b9cd6bc84ade66ebeb816095919c",
                "value": {
                    "accessList": [],
                    "blockHash": "0x0f88286eb8c1b66b625454d83b0557e73378e9d4ecc5d67bd7e3c409a7d90fd3",
                    "blockNumber": "0x2e2c8f1",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xacd7cfd1191c2f76a88de47c350c00e898b8b9cd6bc84ade66ebeb816095919c",
                    "input": "0xa9059cbb000000000000000000000000a984105729d65ba597c1410cfd59ed5be0807b5d000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde6",
                    "r": "0xa222416b9a189c3d1c980f6acc0f2b6f1546f569f5f7a08d2e8fad778a49c331",
                    "s": "0x6593b319e7334fc070752deec09a008abf47fe72d4db7c20dd37197e2f2574e4",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x5",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0xb70adab12877d847bd28e586314147a9360bcaaf83052f0d0f4a762ed7ddcd22",
                "value": {
                    "accessList": [],
                    "blockHash": "0x21e982f8be2d68413627d79d581a6d23a520a707823402d9a44137927c057954",
                    "blockNumber": "0x2e2c846",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xb70adab12877d847bd28e586314147a9360bcaaf83052f0d0f4a762ed7ddcd22",
                    "input": "0xa9059cbb0000000000000000000000005274595d6f73a2bd4e8eed881e9385eacb9c26fe000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddd4",
                    "r": "0x1623ecadcd9f01f3c010099d34f5af3f3c1ec21c4d4cebb19118be26dc22e77b",
                    "s": "0x6680cfb248df2d24dfdb8d1884fde77cfaeb6b410878a5ff3316d74771a98e5b",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xb8b7c8a2faf75b7f7b90b9b78d124185adc0bb0ad29ffc2f469f60fe21299245",
                "value": {
                    "accessList": [],
                    "blockHash": "0xc1832fbc8a2a9d4b174ca087d6f2a7c957fe6f3521a639081bea6a4eec75d0c2",
                    "blockNumber": "0x2e2c85c",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd8c",
                    "gasPrice": "0x121152080",
                    "hash": "0xb8b7c8a2faf75b7f7b90b9b78d124185adc0bb0ad29ffc2f469f60fe21299245",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0x121152080",
                    "maxPriorityFeePerGas": "0x121152080",
                    "nonce": "0xf4",
                    "r": "0xaa104d3e1f6d6fa607c7636b66f15cd2e5e30d3d42d7f74a65f8b77268d839fd",
                    "s": "0x76ec7b8bdfd2ba787d8c8e2b3550568e252609ebbc136968f7470fa0eb899e39",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xbbd956deb7fb5d1571aa59fa46d933a57c294ce6749658a2c0a1b3b449dbc7c1",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa682cf4bbae6423fa3ee553067312891a7d9aed8715f46d1dc5dd9903166293f",
                    "blockNumber": "0x2e2c84f",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xbbd956deb7fb5d1571aa59fa46d933a57c294ce6749658a2c0a1b3b449dbc7c1",
                    "input": "0xa9059cbb0000000000000000000000001570538bd863cda432ccb4bfc50bd77af853f1ec000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddd6",
                    "r": "0x3a013c4883d696bfe90f974773342afc0e5666f66f8c3bf6271b3953d7265431",
                    "s": "0x79aa98ede9da25cbcf35260e119fa8faaff85427b45ad7ea59a43b2a067fe133",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xc30472e350121f35781da494099a9ee18bd7323907466f46390533080424d233",
                "value": {
                    "accessList": [],
                    "blockHash": "0xeb40d08f2ca0d4a572bab0da3545ab2bd3ab2afba8c8442d80e5d30129d2cd3b",
                    "blockNumber": "0x2e2c879",
                    "chainId": "0x61",
                    "from": "0xa8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xc30472e350121f35781da494099a9ee18bd7323907466f46390533080424d233",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000a8c8fe4db4d8e29ea1f17565be27de304ce872c3",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xf6",
                    "r": "0xb983261e72175114055668f966464324f8b172aa9071986ec0f5c90330d23cb3",
                    "s": "0x74e19e6019974c7b2f09608d2256b7ec2d6e15a7ccdc88b9b589bcef91148f66",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xca014195f842b3807cd2fafd7cd0f9b7293ef0dc4c9bf5edec79c3e6f7413959",
                "value": {
                    "accessList": [],
                    "blockHash": "0xaeb9d592dfc5e2beddca10fc5aca8efccc2f39f6b5274934107abfdeedea35c3",
                    "blockNumber": "0x2e2c8c8",
                    "chainId": "0x61",
                    "from": "0x6fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "gas": "0x1fd72",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xca014195f842b3807cd2fafd7cd0f9b7293ef0dc4c9bf5edec79c3e6f7413959",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000006fd26139f06049c1120e76afdb8de40e5cc1406c",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0xc2",
                    "r": "0xa70a6e0460036ac844ba503cae1908b9a8308fb3785caefc0ebe98ce59cb31e2",
                    "s": "0x5918431557b0741476405da977e2dd350a85cb292d8ff160f4ffd9caf714028e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xd6fc6d66015e918d1ab7e834af4350c1cf68459d050a89834456a54e9249fb55",
                "value": {
                    "accessList": [],
                    "blockHash": "0xa5172cec6c55f93abc41b6ce8d4a174499d1b2572a9858a4d32278670e79bf9f",
                    "blockNumber": "0x2e2c90b",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xd6fc6d66015e918d1ab7e834af4350c1cf68459d050a89834456a54e9249fb55",
                    "input": "0xa9059cbb0000000000000000000000008f48956cdba3c5871df4b018f2c28538ee1f7577000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6ddea",
                    "r": "0x6c118696a09f942791c2e428b23fde908a4ff5048dd944197bf5a33f59d10c78",
                    "s": "0x2dd32c6020c4efde99d68e83eba187a8a9449a5896bc8bbb26549c70fc7f8e3a",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0xd77d92379430b3618a444343426b1cf0c858911bb301d2b6516394894948b523",
                "value": {
                    "accessList": [],
                    "blockHash": "0x9c61e570e9e2e7d4b2efbf0b3c7658f7f434a0d728c62ab065531a33d58b24d7",
                    "blockNumber": "0x2e2c884",
                    "chainId": "0x61",
                    "from": "0xb2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "gas": "0x1fd8c",
                    "gasPrice": "0xad731380",
                    "hash": "0xd77d92379430b3618a444343426b1cf0c858911bb301d2b6516394894948b523",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000b2a5920b40ed87956adcb417eb391cb1b0625e87",
                    "maxFeePerGas": "0xad731380",
                    "maxPriorityFeePerGas": "0xad731380",
                    "nonce": "0x25c",
                    "r": "0xf6ca56509ea196a8b57ab2a7018be8954c1f90acf415f22dcb0681a59bd25fbd",
                    "s": "0x482d66b12a4a4c1f8f1a1b4bdfb0122e8609da89e9e629bce70e429d2152dc79",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x2",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xe6170bc77144321a7b32d7a33e3aa4ba20a85cfe81ee8f1f1a7f2f9644a96cf0",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe9c5d5e264a184c097c305af83c339e07d6adc861480da0291ff79005755064a",
                    "blockNumber": "0x2e2c907",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe6170bc77144321a7b32d7a33e3aa4ba20a85cfe81ee8f1f1a7f2f9644a96cf0",
                    "input": "0xa9059cbb000000000000000000000000c63d9eef47d64e41f3b5c5f0697166c386575392000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dde9",
                    "r": "0x52279c8ebec503e07006a4d4cffdd97ea6efc946f6133fd8beef77a9540e85c1",
                    "s": "0x3bd18a3568b1ec73727dcbf1b543bbfbc3d7a3ebfdef81f6a42aecca8437f3e5",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x4",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x0",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xe6e54d9d9c3629ee06157b0fd3c4aa76e0917798c921c0a775f331d744a030fa",
                "value": {
                    "accessList": [],
                    "blockHash": "0x3b8264a3a2bcd1234a9396045a9df5da00585748f823a70275d1fe2237fa0597",
                    "blockNumber": "0x2e2c8f9",
                    "chainId": "0x61",
                    "from": "0x2f0c21ca931f5e712718c641082de9b35d0965b4",
                    "gas": "0x1fd7f",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xe6e54d9d9c3629ee06157b0fd3c4aa76e0917798c921c0a775f331d744a030fa",
                    "input": "0x363b2eb20000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000002f0c21ca931f5e712718c641082de9b35d0965b4",
                    "maxFeePerGas": "0xb2d05e00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x295",
                    "r": "0x6b1dcb64f78d1045f8e9e5588e59a2f902a844312adb49f3ce0e399c0cae6d15",
                    "s": "0x61b0c62149eede8dc51a25a32baeb866bcd33341ce9cca210795cd94d0ccf62e",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x3",
                    "type": "0x2",
                    "v": "0x0",
                    "value": "0x71afd498d0000",
                    "yParity": "0x0"
                }
            },
            {
                "key": "con_relay3.transactions:0xf3804f4eebee00de577fc9adb034eaba4d84b7352c660bf4d1bfe710b445633e",
                "value": {
                    "accessList": [],
                    "blockHash": "0x197ec283d0488a51b8415127d72ff1acdb0450aaf61a1f773270629d128980ba",
                    "blockNumber": "0x2e2c89a",
                    "chainId": "0x61",
                    "from": "0x3d69eeb2058555ae32b17bf916bfcff536a225ca",
                    "gas": "0x186a0",
                    "gasPrice": "0xb2d05e00",
                    "hash": "0xf3804f4eebee00de577fc9adb034eaba4d84b7352c660bf4d1bfe710b445633e",
                    "input": "0xa9059cbb000000000000000000000000b2a8c99d788f08d1904ffe759fc1c5778146ac0f000000000000000000000000000000000000000000000000002386f26fc10000",
                    "maxFeePerGas": "0x165a0bc00",
                    "maxPriorityFeePerGas": "0xb2d05e00",
                    "nonce": "0x6dddf",
                    "r": "0xca71438320f3a7e12faff35bd72591c30305f8948c5ddc2f97790d0a16046e51",
                    "s": "0x25640ab57d42eae751d624c497dccca956f1a4293603fd625f2a032d32bacdc9",
                    "to": "0xbbf8f565995c3fdf890120e6abc48c4f818b03c2",
                    "transactionIndex": "0x0",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x0",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.transactions:0xf7deaae1b6ecdf2f7711eebff0324146223c61d0b9bff70ef81d898a9553d753",
                "value": {
                    "accessList": [],
                    "blockHash": "0xe63f0dbbdba8f828aa1a669f72178a471a5be46010b6386450deb7143b66185c",
                    "blockNumber": "0x2e2c84a",
                    "chainId": "0x61",
                    "from": "0xb86b18301e1f0daee35410ad7bc0c43d2c92620a",
                    "gas": "0x1fd7f",
                    "gasPrice": "0x121152080",
                    "hash": "0xf7deaae1b6ecdf2f7711eebff0324146223c61d0b9bff70ef81d898a9553d753",
                    "input": "0x363b2eb200000000000000000000000000000000000000000000000000000000000000830000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000b86b18301e1f0daee35410ad7bc0c43d2c92620a",
                    "maxFeePerGas": "0x121152080",
                    "maxPriorityFeePerGas": "0x121152080",
                    "nonce": "0x3",
                    "r": "0xea57be4839a741fc7721be91689702370c677aa44aef720cc7d6fdf4040ae191",
                    "s": "0x2887f32bd76120432bd09ed781dc3eef8226964c10870e2d1020e72c3ce4f5ce",
                    "to": "0xfbbc73da1f8a6c4b0344ef1db01bcb9ac36c3012",
                    "transactionIndex": "0x1",
                    "type": "0x2",
                    "v": "0x1",
                    "value": "0x71afd498d0000",
                    "yParity": "0x1"
                }
            },
            {
                "key": "con_relay3.tx_count",
                "value": 37
            },
            {
                "key": "con_rrr.__code__",
                "value": "__balances = Hash(default_value=decimal('0'), contract='con_rrr', name=\n    'balances')\n__t_balances = Hash(default_value=decimal('0'), contract='con_rrr', name=\n    't_balances')\n__r_total = Variable(contract='con_rrr', name='r_total')\n__t_total = Variable(contract='con_rrr', name='t_total')\n__metadata = Hash(contract='con_rrr', name='metadata')\n__excluded = Hash(default_value=False, contract='con_rrr', name='excluded')\n__approved = Hash(default_value=decimal('0'), contract='con_rrr', name=\n    'approved')\nBURN_BPS = decimal('200')\nREFLECTION_BPS = decimal('300')\nTOTAL_BPS = decimal('10000')\nSCALING_FACTOR = decimal('1000000000000000000')\nBURN_ADDRESS = '0' * 64\n\n\ndef ____(initial_supply: int):\n    user_supply = decimal(initial_supply)\n    r_initial = user_supply * SCALING_FACTOR\n    __balances[ctx.caller] = r_initial\n    __r_total.set(r_initial)\n    __t_total.set(user_supply)\n    __excluded[ctx.this] = True\n    __excluded[BURN_ADDRESS] = True\n    __t_balances[BURN_ADDRESS] = decimal('0')\n    __metadata['token_name'] = 'REFLECT TOKEN'\n    __metadata['token_symbol'] = 'RFT'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_rrr')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can change metadata!'\n    __metadata[key] = value\n\n\n@__export('con_rrr')\ndef transfer(amount: float, to: str):\n    assert decimal(amount) > decimal('0'), 'Cannot send negative balances!'\n    from_excluded = __excluded[ctx.caller]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() / __t_total.get()\n    if not from_excluded:\n        assert __balances[ctx.caller\n            ] >= amount * rate, 'Not enough coins to send!'\n        r_amount = amount * rate\n    else:\n        assert __t_balances[ctx.caller] >= amount, 'Not enough coins to send!'\n        r_amount = amount * rate\n    burn_amount = amount * BURN_BPS / TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS / TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[ctx.caller] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[ctx.caller] -= amount\n            __balances[to] += transfer_amount * rate\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[ctx.caller] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[ctx.caller] -= r_amount\n        __balances[to] += transfer_amount * rate\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) * rate)\n    return f'Transferred {amount}'\n\n\n@__export('con_rrr')\ndef approve(amount: float, to: str):\n    assert decimal(amount) > decimal('0'), 'Cannot approve negative balances!'\n    __approved[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_rrr')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert decimal(amount) > decimal('0'), 'Cannot send negative balances!'\n    assert __approved[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved!'\n    from_excluded = __excluded[main_account]\n    to_excluded = __excluded[to]\n    rate = __r_total.get() / __t_total.get()\n    if not from_excluded:\n        assert __balances[main_account] >= amount * rate, 'Not enough coins!'\n        r_amount = amount * rate\n    else:\n        assert __t_balances[main_account] >= amount, 'Not enough coins!'\n        r_amount = amount * rate\n    burn_amount = amount * BURN_BPS / TOTAL_BPS\n    reflection_amount = amount * REFLECTION_BPS / TOTAL_BPS\n    transfer_amount = amount - burn_amount - reflection_amount\n    __approved[main_account, ctx.caller] -= amount\n    if from_excluded:\n        if to_excluded:\n            __t_balances[main_account] -= amount\n            __t_balances[to] += transfer_amount\n            __t_balances[BURN_ADDRESS] += burn_amount\n        else:\n            __t_balances[main_account] -= amount\n            __balances[to] += transfer_amount * rate\n            __t_balances[BURN_ADDRESS] += burn_amount\n    elif to_excluded:\n        __balances[main_account] -= r_amount\n        __t_balances[to] += transfer_amount\n        __t_balances[BURN_ADDRESS] += burn_amount\n    else:\n        __balances[main_account] -= r_amount\n        __balances[to] += transfer_amount * rate\n        __t_balances[BURN_ADDRESS] += burn_amount\n    __t_total.set(__t_total.get() - burn_amount)\n    __r_total.set(__r_total.get() - (burn_amount + reflection_amount) * rate)\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_rrr')\ndef balance_of(address: str):\n    if __excluded[address]:\n        return __t_balances[address]\n    return __balances[address] * __t_total.get() / __r_total.get()\n\n\n@__export('con_rrr')\ndef allowance(owner: str, spender: str):\n    return __approved[owner, spender]\n\n\n@__export('con_rrr')\ndef get_total_supply():\n    return __t_total.get()\n\n\n@__export('con_rrr')\ndef exclude_from_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can exclude!'\n    assert not __excluded[address], 'Address already excluded!'\n    __excluded[address] = True\n    t_amount = balance_of(address)\n    __balances[address] = decimal('0')\n    __t_balances[address] = t_amount\n\n\n@__export('con_rrr')\ndef include_in_rewards(address: str):\n    assert ctx.caller == __metadata['operator'], 'Only operator can include!'\n    assert __excluded[address], 'Address not excluded!'\n    t_amount = __t_balances[address]\n    rate = __r_total.get() / __t_total.get()\n    __excluded[address] = False\n    __t_balances[address] = decimal('0')\n    __balances[address] = t_amount * rate\n"
            },
            {
                "key": "con_rrr.__developer__",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_rrr.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        6,
                        22,
                        55,
                        33,
                        0
                    ]
                }
            },
            {
                "key": "con_rrr.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a7a",
                "value": {
                    "__fixed__": "759999977199999543999.99087999981759999635199992628"
                }
            },
            {
                "key": "con_rrr.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a8a",
                "value": {
                    "__fixed__": "9.5E+19"
                }
            },
            {
                "key": "con_rrr.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": {
                    "__fixed__": "99999100000024000000480000.0096000001920000038400000776"
                }
            },
            {
                "key": "con_rrr.excluded:0000000000000000000000000000000000000000000000000000000000000000",
                "value": true
            },
            {
                "key": "con_rrr.excluded:submission",
                "value": true
            },
            {
                "key": "con_rrr.metadata:operator",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_rrr.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_rrr.metadata:token_name",
                "value": "REFLECT TOKEN"
            },
            {
                "key": "con_rrr.metadata:token_symbol",
                "value": "RFT"
            },
            {
                "key": "con_rrr.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_rrr.r_total",
                "value": {
                    "__fixed__": "99999955000001200000024000.00048000000960000019200000388"
                }
            },
            {
                "key": "con_rrr.t_balances:0000000000000000000000000000000000000000000000000000000000000000",
                "value": {
                    "__fixed__": "18"
                }
            },
            {
                "key": "con_rrr.t_total",
                "value": {
                    "__fixed__": "99999982"
                }
            },
            {
                "key": "con_s1.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_s1', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_s1', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_s1', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData', 'Red', 'price'] = 10\n    __game['turtleData', 'Red', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Green', 'price'] = 20\n    __game['turtleData', 'Green', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Blue', 'price'] = 15\n    __game['turtleData', 'Blue', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Yellow', 'price'] = 5\n    __game['turtleData', 'Yellow', 'probability'] = decimal('0.15')\n    __game['turtleData', 'Purple', 'price'] = 50\n    __game['turtleData', 'Purple', 'probability'] = decimal('0.15')\n\n\n@__export('con_s1')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert __game['turtleData', turtle_name, 'price'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData', turtle_name, 'price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_s1')\ndef start_race():\n    racing_turtles = []\n    probabilities = []\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __turtleOwners[turtle_name] is not None:\n            racing_turtles.append(turtle_name)\n            probabilities.append(__game['turtleData', turtle_name,\n                'probability'])\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    cumulative_probabilities = []\n    cumulative_sum = 0\n    for probability in probabilities:\n        cumulative_sum += probability\n        cumulative_probabilities.append(cumulative_sum)\n    assert cumulative_sum == 1, 'Probabilities must sum to 1'\n    random_number = random.randint(0, 100) / decimal('100.0')\n    winning_turtle = None\n    index = 0\n    for cumulative_probability in cumulative_probabilities:\n        if random_number <= cumulative_probability:\n            winning_turtle = racing_turtles[index]\n            break\n        index += 1\n    if winning_turtle is None:\n        winning_turtle = racing_turtles[-1]\n    total_bet_pool = 0\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __bets[turtle_name] > 0:\n            total_bet_pool += __bets[turtle_name]\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_s1')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_s1')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_s1.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        35,
                        7,
                        0
                    ]
                }
            },
            {
                "key": "con_s1.bets:Green",
                "value": 20
            },
            {
                "key": "con_s1.bets:Red",
                "value": 10
            },
            {
                "key": "con_s1.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_s1.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s1.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_s1.game:turtleData:Blue:price",
                "value": 15
            },
            {
                "key": "con_s1.game:turtleData:Blue:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_s1.game:turtleData:Green:price",
                "value": 20
            },
            {
                "key": "con_s1.game:turtleData:Green:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s1.game:turtleData:Purple:price",
                "value": 50
            },
            {
                "key": "con_s1.game:turtleData:Purple:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_s1.game:turtleData:Red:price",
                "value": 10
            },
            {
                "key": "con_s1.game:turtleData:Red:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_s1.game:turtleData:Yellow:price",
                "value": 5
            },
            {
                "key": "con_s1.game:turtleData:Yellow:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_s1.turtleOwners:Green",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s1.turtleOwners:Red",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s2.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_s2', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_s2', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_s2', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData', 'Red', 'price'] = 1\n    __game['turtleData', 'Red', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Green', 'price'] = 1\n    __game['turtleData', 'Green', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Blue', 'price'] = 1\n    __game['turtleData', 'Blue', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Yellow', 'price'] = 1\n    __game['turtleData', 'Yellow', 'probability'] = decimal('0.15')\n    __game['turtleData', 'Purple', 'price'] = 1\n    __game['turtleData', 'Purple', 'probability'] = decimal('0.15')\n\n\n@__export('con_s2')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert __game['turtleData', turtle_name, 'price'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData', turtle_name, 'price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_s2')\ndef start_race():\n    racing_turtles = []\n    probabilities = []\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __turtleOwners[turtle_name] is not None:\n            racing_turtles.append(turtle_name)\n            probabilities.append(__game['turtleData', turtle_name,\n                'probability'])\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    cumulative_probabilities = []\n    cumulative_sum = 0\n    for probability in probabilities:\n        cumulative_sum += probability\n        cumulative_probabilities.append(cumulative_sum)\n    random_number = random.randint(0, 100) / decimal('100.0')\n    winning_turtle = None\n    index = 0\n    for cumulative_probability in cumulative_probabilities:\n        if random_number <= cumulative_probability:\n            winning_turtle = racing_turtles[index]\n            break\n        index += 1\n    if winning_turtle is None:\n        winning_turtle = racing_turtles[-1]\n    total_bet_pool = 0\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __bets[turtle_name] > 0:\n            total_bet_pool += __bets[turtle_name]\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_s2')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_s2')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_s2.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        39,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_s2.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_s2.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s2.game:totalRaces",
                "value": 2
            },
            {
                "key": "con_s2.game:turtleData:Blue:price",
                "value": 1
            },
            {
                "key": "con_s2.game:turtleData:Blue:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_s2.game:turtleData:Green:price",
                "value": 1
            },
            {
                "key": "con_s2.game:turtleData:Green:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s2.game:turtleData:Purple:price",
                "value": 1
            },
            {
                "key": "con_s2.game:turtleData:Purple:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_s2.game:turtleData:Red:price",
                "value": 1
            },
            {
                "key": "con_s2.game:turtleData:Red:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_s2.game:turtleData:Yellow:price",
                "value": 1
            },
            {
                "key": "con_s2.game:turtleData:Yellow:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_s3.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_s3', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_s3', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_s3', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData', 'Red', 'price'] = 1\n    __game['turtleData', 'Red', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Green', 'price'] = 1\n    __game['turtleData', 'Green', 'probability'] = decimal('0.3')\n    __game['turtleData', 'Blue', 'price'] = 1\n    __game['turtleData', 'Blue', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Yellow', 'price'] = 1\n    __game['turtleData', 'Yellow', 'probability'] = decimal('0.1')\n    __game['turtleData', 'Purple', 'price'] = 1\n    __game['turtleData', 'Purple', 'probability'] = decimal('0.2')\n\n\n@__export('con_s3')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert __game['turtleData', turtle_name, 'price'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData', turtle_name, 'price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_s3')\ndef start_race():\n    weighted_turtle_list = []\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __turtleOwners[turtle_name] is not None:\n            probability = __game['turtleData', turtle_name, 'probability']\n            repetitions = int(probability * 10)\n            weighted_turtle_list.extend([turtle_name] * repetitions)\n    assert len(weighted_turtle_list) > 0, 'No turtles available to race'\n    assert len(set(__turtleOwners.values())\n        ) >= 2, 'At least two turtles must have different owners'\n    winning_turtle = random.choice(weighted_turtle_list)\n    total_bet_pool = 0\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __bets[turtle_name] > 0:\n            total_bet_pool += __bets[turtle_name]\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_s3')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_s3')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_s3.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        43,
                        5,
                        0
                    ]
                }
            },
            {
                "key": "con_s3.bets:Purple",
                "value": 1
            },
            {
                "key": "con_s3.bets:Yellow",
                "value": 1
            },
            {
                "key": "con_s3.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_s3.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s3.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_s3.game:turtleData:Blue:price",
                "value": 1
            },
            {
                "key": "con_s3.game:turtleData:Blue:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s3.game:turtleData:Green:price",
                "value": 1
            },
            {
                "key": "con_s3.game:turtleData:Green:probability",
                "value": {
                    "__fixed__": "0.3"
                }
            },
            {
                "key": "con_s3.game:turtleData:Purple:price",
                "value": 1
            },
            {
                "key": "con_s3.game:turtleData:Purple:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s3.game:turtleData:Red:price",
                "value": 1
            },
            {
                "key": "con_s3.game:turtleData:Red:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s3.game:turtleData:Yellow:price",
                "value": 1
            },
            {
                "key": "con_s3.game:turtleData:Yellow:probability",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_s3.turtleOwners:Purple",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s3.turtleOwners:Yellow",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s4.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_s4', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_s4', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_s4', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData', 'Red', 'price'] = 1\n    __game['turtleData', 'Red', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Green', 'price'] = 1\n    __game['turtleData', 'Green', 'probability'] = decimal('0.3')\n    __game['turtleData', 'Blue', 'price'] = 1\n    __game['turtleData', 'Blue', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Yellow', 'price'] = 1\n    __game['turtleData', 'Yellow', 'probability'] = decimal('0.1')\n    __game['turtleData', 'Purple', 'price'] = 1\n    __game['turtleData', 'Purple', 'probability'] = decimal('0.2')\n\n\n@__export('con_s4')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert __game['turtleData', turtle_name, 'price'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData', turtle_name, 'price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_s4')\ndef start_race():\n    weighted_turtle_list = []\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __turtleOwners[turtle_name] is not None:\n            probability = __game['turtleData', turtle_name, 'probability']\n            repetitions = int(probability * 10)\n            weighted_turtle_list.extend([turtle_name] * repetitions)\n    assert len(weighted_turtle_list) > 0, 'No turtles available to race'\n    winning_turtle = random.choice(weighted_turtle_list)\n    total_bet_pool = 0\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __bets[turtle_name] > 0:\n            total_bet_pool += __bets[turtle_name]\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_s4')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_s4')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_s4.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s4.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        54,
                        48,
                        0
                    ]
                }
            },
            {
                "key": "con_s4.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_s4.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s4.game:totalRaces",
                "value": 2
            },
            {
                "key": "con_s4.game:turtleData:Blue:price",
                "value": 1
            },
            {
                "key": "con_s4.game:turtleData:Blue:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s4.game:turtleData:Green:price",
                "value": 1
            },
            {
                "key": "con_s4.game:turtleData:Green:probability",
                "value": {
                    "__fixed__": "0.3"
                }
            },
            {
                "key": "con_s4.game:turtleData:Purple:price",
                "value": 1
            },
            {
                "key": "con_s4.game:turtleData:Purple:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s4.game:turtleData:Red:price",
                "value": 1
            },
            {
                "key": "con_s4.game:turtleData:Red:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s4.game:turtleData:Yellow:price",
                "value": 1
            },
            {
                "key": "con_s4.game:turtleData:Yellow:probability",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_s5.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_s5', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_s5', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_s5', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData', 'Red', 'price'] = 1\n    __game['turtleData', 'Red', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Green', 'price'] = 1\n    __game['turtleData', 'Green', 'probability'] = decimal('0.3')\n    __game['turtleData', 'Blue', 'price'] = 1\n    __game['turtleData', 'Blue', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Yellow', 'price'] = 1\n    __game['turtleData', 'Yellow', 'probability'] = decimal('0.1')\n    __game['turtleData', 'Purple', 'price'] = 1\n    __game['turtleData', 'Purple', 'probability'] = decimal('0.2')\n\n\n@__export('con_s5')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert __game['turtleData', turtle_name, 'price'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData', turtle_name, 'price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_s5')\ndef start_race():\n    weighted_turtle_list = []\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __turtleOwners[turtle_name] is not None:\n            probability = __game['turtleData', turtle_name, 'probability']\n            repetitions = int(probability * 10)\n            weighted_turtle_list.extend([turtle_name] * repetitions)\n    assert len(weighted_turtle_list) > 1, 'We need more turtles to race'\n    winning_turtle = random.choice(weighted_turtle_list)\n    total_bet_pool = 0\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __bets[turtle_name] > 0:\n            total_bet_pool += __bets[turtle_name]\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_s5')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_s5')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_s5.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s5.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        4,
                        6,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_s5.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_s5.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_s5.game:totalRaces",
                "value": 1
            },
            {
                "key": "con_s5.game:turtleData:Blue:price",
                "value": 1
            },
            {
                "key": "con_s5.game:turtleData:Blue:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s5.game:turtleData:Green:price",
                "value": 1
            },
            {
                "key": "con_s5.game:turtleData:Green:probability",
                "value": {
                    "__fixed__": "0.3"
                }
            },
            {
                "key": "con_s5.game:turtleData:Purple:price",
                "value": 1
            },
            {
                "key": "con_s5.game:turtleData:Purple:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s5.game:turtleData:Red:price",
                "value": 1
            },
            {
                "key": "con_s5.game:turtleData:Red:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_s5.game:turtleData:Yellow:price",
                "value": 1
            },
            {
                "key": "con_s5.game:turtleData:Yellow:probability",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_sale_dato.__code__",
                "value": "__presale_active = Variable(contract='con_sale_dato', name='presale_active')\n__token_price = Variable(contract='con_sale_dato', name='token_price')\n__tokens_sold = Variable(contract='con_sale_dato', name='tokens_sold')\n__presale_cap = Variable(contract='con_sale_dato', name='presale_cap')\n__token_balance = Hash(default_value=0, contract='con_sale_dato', name=\n    'token_balance')\n__xian_balances = ForeignHash(foreign_contract='currency', foreign_name=\n    'balances', contract='con_sale_dato', name='xian_balances')\n__token_contract = Variable(contract='con_sale_dato', name='token_contract')\n\n\ndef ____():\n    __presale_active.set(True)\n    __token_price.set(1000)\n    __tokens_sold.set(0)\n    __presale_cap.set(1000000)\n    __token_contract.set('con_dato')\n\n\n@__export('con_sale_dato')\ndef start_presale(token_contract_name: str, price: float):\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    assert price > 0, 'Token price must be greater than 0'\n    __token_contract.set(token_contract_name)\n    __token_price.set(price)\n    __presale_active.set(True)\n\n\n@__export('con_sale_dato')\ndef buy_tokens(amount: float):\n    assert __presale_active.get(), 'Presale is active'\n    assert amount > 0, 'Amount must be greater than 0'\n    price = __token_price.get()\n    token_amount = amount / price\n    current_sold = __tokens_sold.get()\n    assert current_sold + token_amount <= __presale_cap.get(\n        ), 'Exceeds presale cap'\n    assert __xian_balances[ctx.caller] >= amount, 'Insufficient XIAN balance'\n    xian = importlib.import_module('currency')\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    token = importlib.import_module(__token_contract.get())\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balance[ctx.caller] = __token_balance[ctx.caller] + token_amount\n    __tokens_sold.set(current_sold + token_amount)\n\n\n@__export('con_sale_dato')\ndef end_presale():\n    assert ctx.caller == ctx.signer, 'Only direct calls allowed'\n    __presale_active.set(False)\n\n\n@__export('con_sale_dato')\ndef get_presale_info():\n    return {'active': __presale_active.get(), 'price': __token_price.get(),\n        'sold': __tokens_sold.get(), 'cap': __presale_cap.get(),\n        'remaining': __presale_cap.get() - __tokens_sold.get()}\n\n\n@__export('con_sale_dato')\ndef get_user_contribution(address: str):\n    return __token_balance[address]\n"
            },
            {
                "key": "con_sale_dato.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_sale_dato.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        3,
                        33,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_sale_dato.presale_active",
                "value": true
            },
            {
                "key": "con_sale_dato.presale_cap",
                "value": 1000000
            },
            {
                "key": "con_sale_dato.token_contract",
                "value": "con_dato"
            },
            {
                "key": "con_sale_dato.token_price",
                "value": 1000
            },
            {
                "key": "con_sale_dato.tokens_sold",
                "value": 0
            },
            {
                "key": "con_sale_foam.__code__",
                "value": "import currency as xian\n__presale_status = Variable(contract='con_sale_foam', name='presale_status')\n__token_price = Variable(contract='con_sale_foam', name='token_price')\n__owner = Variable(contract='con_sale_foam', name='owner')\n__default_tokens = Variable(contract='con_sale_foam', name='default_tokens')\nTOKEN_RATE = 100\n__token_contract = Variable(contract='con_sale_foam', name='token_contract')\n__token_symbol = Variable(contract='con_sale_foam', name='token_symbol')\n\n\ndef ____():\n    __presale_status.set('Active')\n    __token_price.set(1 / TOKEN_RATE)\n    __owner.set(ctx.caller)\n    __default_tokens.set(0)\n\n\n@__export('con_sale_foam')\ndef set_target_token(contract: str, symbol: str):\n    assert __owner.get() == ctx.caller, 'Only owner can set target token'\n    __token_contract.set(contract)\n    __token_symbol.set(symbol)\n\n\n@__export('con_sale_foam')\ndef get_target_token():\n    return {'contract': __token_contract.get(), 'symbol': __token_symbol.get()}\n\n\n@__export('con_sale_foam')\ndef deposit(amount: float):\n    assert __token_contract.get() is not None, 'Target token not set'\n    assert ctx.caller == __owner.get(), 'Only owner can deposit tokens'\n    token = importlib.import_module(__token_contract.get())\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __default_tokens.set(__default_tokens.get() + amount)\n\n\n@__export('con_sale_foam')\ndef buy_tokens(amount: float):\n    assert __presale_status.get() == 'Active', 'Presale is not Active'\n    assert amount > 0, 'Amount must be greater than 0'\n    current_tokens = __default_tokens.get()\n    assert current_tokens > 0, 'No tokens available for sale'\n    tokens_to_receive = amount * TOKEN_RATE\n    assert tokens_to_receive <= current_tokens, 'Not enough tokens remaining'\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __default_tokens.set(current_tokens - tokens_to_receive)\n\n\n@__export('con_sale_foam')\ndef get_remaining_tokens():\n    return __default_tokens.get()\n\n\n@__export('con_sale_foam')\ndef get_presale_status():\n    return __presale_status.get()\n\n\n@__export('con_sale_foam')\ndef get_token_price():\n    return __token_price.get()\n\n\n@__export('con_sale_foam')\ndef set_presale_status(status: str):\n    assert __owner.get() == ctx.caller, 'Only owner can change status'\n    __presale_status.set(status)\n\n\n@__export('con_sale_foam')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_sale_foam')\ndef withdraw_xian_all():\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_sale_foam')\ndef withdraw_any_token(amount: float, contract_name: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(contract_name).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_sale_foam.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_sale_foam.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        16,
                        5,
                        5,
                        3,
                        0
                    ]
                }
            },
            {
                "key": "con_sale_foam.default_tokens",
                "value": 10000000
            },
            {
                "key": "con_sale_foam.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_sale_foam.presale_status",
                "value": "Active"
            },
            {
                "key": "con_sale_foam.token_contract",
                "value": "con_foam"
            },
            {
                "key": "con_sale_foam.token_price",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "con_sale_foam.token_symbol",
                "value": "Foam"
            },
            {
                "key": "con_saled_teto.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_saled_teto', name='owner')\n__allowed_tokens = Hash(default_value=True, contract='con_saled_teto', name\n    ='allowed_tokens')\n__token_symbols = Hash(default_value='', contract='con_saled_teto', name=\n    'token_symbols')\n__token_balances = Hash(default_value=0, contract='con_saled_teto', name=\n    'token_balances')\n__token_prices = Hash(default_value=decimal('0.0'), contract=\n    'con_saled_teto', name='token_prices')\n__token_list = Variable(contract='con_saled_teto', name='token_list')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __token_list.set([])\n\n\n@__export('con_saled_teto')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    if not __allowed_tokens[token_contract]:\n        __allowed_tokens[token_contract] = True\n        __token_symbols[token_contract] = token_symbol\n        __token_balances[token_contract] = 0\n        __token_prices[token_contract] = decimal('0.01')\n        tokens = __token_list.get()\n        tokens.append(token_contract)\n        __token_list.set(tokens)\n    return {'contract': token_contract, 'symbol': token_symbol, 'price':\n        __token_prices[token_contract], 'status': 'added'}\n\n\n@__export('con_saled_teto')\ndef set_token_price(token_contract: str, price_per_xian: float):\n    assert ctx.caller == __owner.get(), 'Only owner can set token price'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    assert price_per_xian > 0, 'Price must be greater than 0'\n    __token_prices[token_contract] = price_per_xian\n\n\n@__export('con_saled_teto')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __token_balances[token_contract] += amount\n    return {'success': True, 'amount': amount, 'token': __token_symbols[\n        token_contract], 'new_balance': __token_balances[token_contract]}\n\n\n@__export('con_saled_teto')\ndef buy_token(token_contract: str, xian_amount: float):\n    assert xian_amount > 0, 'XIAN amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    price = __token_prices[token_contract]\n    assert price > 0, 'Token not for sale'\n    token_amount = xian_amount / price\n    available = __token_balances[token_contract]\n    assert available >= token_amount, 'Not enough tokens in contract'\n    xian.transfer(amount=xian_amount, to=ctx.this)\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balances[token_contract] -= token_amount\n    return {'token': __token_symbols[token_contract], 'xian_paid':\n        xian_amount, 'token_received': token_amount, 'remaining':\n        __token_balances[token_contract]}\n\n\n@__export('con_saled_teto')\ndef get_allowed_tokens():\n    tokens = __token_list.get()\n    result = []\n    for token in tokens:\n        result.append({'contract': token, 'symbol': __token_symbols[token],\n            'balance': __token_balances[token], 'price_per_token':\n            __token_prices[token]})\n    return result\n\n\n@__export('con_saled_teto')\ndef get_token_stats(token_contract: str):\n    return {'symbol': __token_symbols[token_contract], 'remaining':\n        __token_balances[token_contract]}\n\n\n@__export('con_saled_teto')\ndef withdraw_xian(amount: float):\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_saled_teto')\ndef withdraw_xian_all():\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_saled_teto')\ndef withdraw_any_token(amount: float, token_contract: str):\n    assert __owner.get() == ctx.caller, 'Only owner can withdraw tokens'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_saled_teto.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_saled_teto.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        5,
                        7,
                        11,
                        0
                    ]
                }
            },
            {
                "key": "con_saled_teto.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_saled_teto.token_balances:con_teto",
                "value": 1000000
            },
            {
                "key": "con_saled_teto.token_list",
                "value": []
            },
            {
                "key": "con_saled_teto.token_prices:con_teto",
                "value": 100
            },
            {
                "key": "con_sbtraits.__code__",
                "value": "__traits = Hash(contract='con_sbtraits', name='traits')\n\n\n@__export('con_sbtraits')\ndef set_trait(user: str, key: str, value: Any):\n    assert ctx.caller == 'con_reputation_engine', 'Only reputation engine can set traits'\n    __traits[user, key] = value\n\n\n@__export('con_sbtraits')\ndef get_trait(user: str, key: str):\n    return __traits[user, key]\n\n\n@__export('con_sbtraits')\ndef get_all_traits(user: str):\n    keys = ['Tier', 'Score', 'Stake Duration', 'DEX Volume', 'Game Wins',\n        'Bots Created', 'Pulse Influence']\n    out = {}\n    for key in keys:\n        out[key] = __traits[user, key]\n    return out\n"
            },
            {
                "key": "con_sbtraits.__developer__",
                "value": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
            },
            {
                "key": "con_sbtraits.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        8,
                        54,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_sbttest.__code__",
                "value": "__owners = Hash(contract='con_sbttest', name='owners')\n__metadata = Hash(contract='con_sbttest', name='metadata')\n__token_counter = Variable(contract='con_sbttest', name='token_counter')\n__operator = Variable(contract='con_sbttest', name='operator')\n__sbt_holders = Hash(contract='con_sbttest', name='sbt_holders')\n__MintEvent = LogEvent(event='Mint', params={'to': {'type': str, 'idx': \n    True}, 'token_id': {'type': int}}, contract='con_sbttest', name='MintEvent'\n    )\n__UpdateMetadataEvent = LogEvent(event='UpdateMetadata', params={'token_id':\n    {'type': int}, 'uri': {'type': str}}, contract='con_sbttest', name=\n    'UpdateMetadataEvent')\n\n\ndef ____():\n    __operator.set(ctx.caller)\n    __token_counter.set(0)\n\n\n@__export('con_sbttest')\ndef mint(to: str, uri: str):\n    assert ctx.caller == __operator.get(), 'Only operator can mint'\n    assert __owners[to] is None, 'User already has an SBT'\n    token_id = __token_counter.get() + 1\n    __token_counter.set(token_id)\n    __owners[to] = token_id\n    __metadata[token_id] = uri\n    __sbt_holders[to] = True\n    __MintEvent({'to': to, 'token_id': token_id})\n\n\n@__export('con_sbttest')\ndef update_metadata(user: str, new_uri: str):\n    assert ctx.caller == __operator.get(), 'Only operator can update metadata'\n    token_id = __owners[user]\n    assert token_id is not None, 'No SBT exists for this user'\n    __metadata[token_id] = new_uri\n    __UpdateMetadataEvent({'token_id': token_id, 'uri': new_uri})\n\n\n@__export('con_sbttest')\ndef token_of(user: str):\n    return __owners[user]\n\n\n@__export('con_sbttest')\ndef token_uri(token_id: int):\n    return __metadata[token_id]\n\n\n@__export('con_sbttest')\ndef who_am_i():\n    return ctx.caller\n\n\n@__export('con_sbttest')\ndef has_sbt(address: str):\n    return __sbt_holders[address] is not None\n"
            },
            {
                "key": "con_sbttest.__developer__",
                "value": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
            },
            {
                "key": "con_sbttest.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        8,
                        55,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_sbttest.metadata:1",
                "value": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
            },
            {
                "key": "con_sbttest.operator",
                "value": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
            },
            {
                "key": "con_sbttest.owners:77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                "value": 1
            },
            {
                "key": "con_sbttest.sbt_holders:77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                "value": true
            },
            {
                "key": "con_sbttest.token_counter",
                "value": 1
            },
            {
                "key": "con_sbttest1.__code__",
                "value": "__owners = Hash(contract='con_sbttest1', name='owners')\n__metadata = Hash(contract='con_sbttest1', name='metadata')\n__token_counter = Variable(contract='con_sbttest1', name='token_counter')\n__operator = Variable(contract='con_sbttest1', name='operator')\n__sbt_holders = Hash(contract='con_sbttest1', name='sbt_holders')\n__MintEvent = LogEvent(event='Mint', params={'to': {'type': str, 'idx': \n    True}, 'token_id': {'type': int}}, contract='con_sbttest1', name=\n    'MintEvent')\n__UpdateMetadataEvent = LogEvent(event='UpdateMetadata', params={'token_id':\n    {'type': int}, 'uri': {'type': str}}, contract='con_sbttest1', name=\n    'UpdateMetadataEvent')\n\n\ndef ____():\n    __operator.set(ctx.caller)\n    __token_counter.set(0)\n\n\n@__export('con_sbttest1')\ndef mint(to: str, uri: str):\n    assert __owners[ctx.caller] is None, 'User already has an SBT'\n    token_id = __token_counter.get() + 1\n    __token_counter.set(token_id)\n    __owners[to] = token_id\n    __metadata[token_id] = uri\n    __sbt_holders[ctx.caller] = True\n    __MintEvent({'to': ctx.caller, 'token_id': token_id})\n\n\n@__export('con_sbttest1')\ndef update_metadata(user: str, new_uri: str):\n    assert ctx.caller == __operator.get(), 'Only operator can update metadata'\n    token_id = __owners[user]\n    assert token_id is not None, 'No SBT exists for this user'\n    __metadata[token_id] = new_uri\n    __UpdateMetadataEvent({'token_id': token_id, 'uri': new_uri})\n\n\n@__export('con_sbttest1')\ndef token_of(user: str):\n    return __owners[user]\n\n\n@__export('con_sbttest1')\ndef token_uri(token_id: int):\n    return __metadata[token_id]\n\n\n@__export('con_sbttest1')\ndef who_am_i():\n    return ctx.caller\n\n\n@__export('con_sbttest1')\ndef has_sbt(address: str):\n    return __sbt_holders[address] is not None\n"
            },
            {
                "key": "con_sbttest1.__developer__",
                "value": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
            },
            {
                "key": "con_sbttest1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        9,
                        29,
                        51,
                        0
                    ]
                }
            },
            {
                "key": "con_sbttest1.metadata:1",
                "value": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
            },
            {
                "key": "con_sbttest1.metadata:2",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_sbttest1.operator",
                "value": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
            },
            {
                "key": "con_sbttest1.owners:48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                "value": 2
            },
            {
                "key": "con_sbttest1.owners:77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                "value": 1
            },
            {
                "key": "con_sbttest1.sbt_holders:48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                "value": true
            },
            {
                "key": "con_sbttest1.sbt_holders:77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                "value": true
            },
            {
                "key": "con_sbttest1.token_counter",
                "value": 2
            },
            {
                "key": "con_set_value.__code__",
                "value": "__test = Variable(t=int, contract='con_set_value', name='test')\n\n\n@__export('con_set_value')\ndef set(value: int):\n    __test.set(value)\n\n\ndef __get():\n    return __test.get()\n"
            },
            {
                "key": "con_set_value.__developer__",
                "value": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e"
            },
            {
                "key": "con_set_value.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        7,
                        22,
                        37,
                        22,
                        0
                    ]
                }
            },
            {
                "key": "con_set_value.test",
                "value": 123
            },
            {
                "key": "con_set_value2.__code__",
                "value": "__test = Variable(t=str, contract='con_set_value2', name='test')\n\n\n@__export('con_set_value2')\ndef set(value: int):\n    __test.set(value)\n\n\ndef __get():\n    return __test.get()\n"
            },
            {
                "key": "con_set_value2.__developer__",
                "value": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e"
            },
            {
                "key": "con_set_value2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        7,
                        22,
                        51,
                        30,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token', name='balances')\n__metadata = Hash(contract='con_some_other_token', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        9,
                        36,
                        32,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_2ygtob.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_2ygtob', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_2ygtob', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_2ygtob', name='balances')\n__metadata = Hash(contract='con_some_other_token_2ygtob', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_2ygtob')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_2ygtob')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_2ygtob')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_2ygtob')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_2ygtob')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_2ygtob.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_2ygtob.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        19,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_2ygtob.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_2ygtob.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_2ygtob.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_2ygtob.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_4ymc2e.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_4ymc2e', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_4ymc2e', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_4ymc2e', name='balances')\n__metadata = Hash(contract='con_some_other_token_4ymc2e', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_4ymc2e')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_4ymc2e')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_4ymc2e')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_4ymc2e')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_4ymc2e')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_4ymc2e.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_4ymc2e.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        11,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_4ymc2e.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_4ymc2e.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_4ymc2e.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_4ymc2e.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_5qoekn.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_5qoekn', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_5qoekn', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_5qoekn', name='balances')\n__metadata = Hash(contract='con_some_other_token_5qoekn', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_5qoekn')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_5qoekn')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_5qoekn')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_5qoekn')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_5qoekn')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_5qoekn.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_some_other_token_5qoekn.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        30,
                        21,
                        11,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_5qoekn.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_5qoekn.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_some_other_token_5qoekn.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_5qoekn.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_610arp.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_610arp', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_610arp', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_610arp', name='balances')\n__metadata = Hash(contract='con_some_other_token_610arp', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_610arp')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_610arp')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_610arp')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_610arp')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_610arp')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_610arp.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_610arp.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_610arp.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_610arp.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_610arp.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_610arp.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_69js8i.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_69js8i', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_69js8i', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_69js8i', name='balances')\n__metadata = Hash(contract='con_some_other_token_69js8i', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_69js8i')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_69js8i')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_69js8i')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_69js8i')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_69js8i')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_69js8i.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_69js8i.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        25,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_69js8i.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_69js8i.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_69js8i.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_69js8i.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_6yzj.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_6yzj', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_6yzj', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_6yzj', name='balances')\n__metadata = Hash(contract='con_some_other_token_6yzj', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_6yzj')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_6yzj')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_6yzj')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_6yzj')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_6yzj')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_6yzj.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_6yzj.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_6yzj.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_6yzj.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_6yzj.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_6yzj.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_96flqb.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_96flqb', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_96flqb', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_96flqb', name='balances')\n__metadata = Hash(contract='con_some_other_token_96flqb', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_96flqb')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_96flqb')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_96flqb')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_96flqb')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_96flqb')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_96flqb.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_96flqb.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        22,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_96flqb.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_96flqb.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_96flqb.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_96flqb.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_bavd6.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_bavd6', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_bavd6', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_bavd6', name='balances')\n__metadata = Hash(contract='con_some_other_token_bavd6', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_bavd6')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_bavd6')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_bavd6')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_bavd6')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_bavd6')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_bavd6.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_bavd6.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_bavd6.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_bavd6.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_bavd6.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_bavd6.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_cmo2c.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_cmo2c', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_cmo2c', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_cmo2c', name='balances')\n__metadata = Hash(contract='con_some_other_token_cmo2c', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_cmo2c')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_cmo2c')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_cmo2c')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_cmo2c')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_cmo2c')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_cmo2c.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_cmo2c.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_cmo2c.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_cmo2c.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_cmo2c.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_cmo2c.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_f2h9uu.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_f2h9uu', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_f2h9uu', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_f2h9uu', name='balances')\n__metadata = Hash(contract='con_some_other_token_f2h9uu', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_f2h9uu')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_f2h9uu')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_f2h9uu')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_f2h9uu')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_f2h9uu')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_f2h9uu.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_f2h9uu.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        9,
                        37,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_f2h9uu.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_f2h9uu.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_f2h9uu.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_f2h9uu.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_gjilqp.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_gjilqp', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_gjilqp', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_gjilqp', name='balances')\n__metadata = Hash(contract='con_some_other_token_gjilqp', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_gjilqp')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_gjilqp')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_gjilqp')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_gjilqp')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_gjilqp')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_gjilqp.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_gjilqp.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        5,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_gjilqp.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_gjilqp.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_gjilqp.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_gjilqp.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_hdpbly.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_hdpbly', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_hdpbly', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_hdpbly', name='balances')\n__metadata = Hash(contract='con_some_other_token_hdpbly', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_hdpbly')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_hdpbly')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_hdpbly')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_hdpbly')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_hdpbly')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_hdpbly.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_hdpbly.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        58,
                        56,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_hdpbly.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_hdpbly.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_hdpbly.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_hdpbly.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_ib3z2x.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_ib3z2x', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_ib3z2x', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_ib3z2x', name='balances')\n__metadata = Hash(contract='con_some_other_token_ib3z2x', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_ib3z2x')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_ib3z2x')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_ib3z2x')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_ib3z2x')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_ib3z2x')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_ib3z2x.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_ib3z2x.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        26,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_ib3z2x.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_ib3z2x.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_ib3z2x.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_ib3z2x.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_pu2jf.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_pu2jf', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_pu2jf', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_pu2jf', name='balances')\n__metadata = Hash(contract='con_some_other_token_pu2jf', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_pu2jf')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_pu2jf')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_pu2jf')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_pu2jf')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_pu2jf')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_pu2jf.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_pu2jf.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_pu2jf.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_pu2jf.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_pu2jf.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_pu2jf.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_qy7dao.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_qy7dao', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_qy7dao', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_qy7dao', name='balances')\n__metadata = Hash(contract='con_some_other_token_qy7dao', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_qy7dao')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_qy7dao')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_qy7dao')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_qy7dao')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_qy7dao')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_qy7dao.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_qy7dao.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_qy7dao.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_qy7dao.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_qy7dao.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_qy7dao.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_sqszgo.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_sqszgo', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_sqszgo', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_sqszgo', name='balances')\n__metadata = Hash(contract='con_some_other_token_sqszgo', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_sqszgo')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_sqszgo')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_sqszgo')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_sqszgo')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_sqszgo')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_sqszgo.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_sqszgo.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_sqszgo.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_sqszgo.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_sqszgo.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_sqszgo.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_u0ib9q.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_u0ib9q', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_u0ib9q', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_u0ib9q', name='balances')\n__metadata = Hash(contract='con_some_other_token_u0ib9q', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_u0ib9q')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_u0ib9q')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_u0ib9q')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_u0ib9q')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_u0ib9q')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_u0ib9q.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_u0ib9q.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_u0ib9q.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_u0ib9q.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_u0ib9q.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_u0ib9q.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_vfmsa9.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_vfmsa9', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_vfmsa9', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_vfmsa9', name='balances')\n__metadata = Hash(contract='con_some_other_token_vfmsa9', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_vfmsa9')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_vfmsa9')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_vfmsa9')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_vfmsa9')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_vfmsa9')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_vfmsa9.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_vfmsa9.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_vfmsa9.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_vfmsa9.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_vfmsa9.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_vfmsa9.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_x08jho.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_x08jho', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_x08jho', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_x08jho', name='balances')\n__metadata = Hash(contract='con_some_other_token_x08jho', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_x08jho')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_x08jho')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_x08jho')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_x08jho')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_x08jho')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_x08jho.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_x08jho.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_x08jho.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_x08jho.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_x08jho.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_x08jho.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_yc6c5w.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_yc6c5w', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_yc6c5w', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_yc6c5w', name='balances')\n__metadata = Hash(contract='con_some_other_token_yc6c5w', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_yc6c5w')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_yc6c5w')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_yc6c5w')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_yc6c5w')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_yc6c5w')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_yc6c5w.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_yc6c5w.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_yc6c5w.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_yc6c5w.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_yc6c5w.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_yc6c5w.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_yyvav.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_yyvav', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_some_other_token_yyvav', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_some_other_token_yyvav', name='balances')\n__metadata = Hash(contract='con_some_other_token_yyvav', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_some_other_token_yyvav')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_some_other_token_yyvav')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n@__export('con_some_other_token_yyvav')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_yyvav')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_some_other_token_yyvav')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_some_other_token_yyvav.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_yyvav.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        29,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_yyvav.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_yyvav.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_yyvav.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_yyvav.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_stake02.CurrentEpochIndex",
                "value": 0
            },
            {
                "key": "con_stake02.DevRewardPct",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_stake02.DevRewardWallet",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stake02.EmissionRatePerHour",
                "value": 3000
            },
            {
                "key": "con_stake02.EndTime",
                "value": {
                    "__time__": [
                        2022,
                        3,
                        4,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_stake02.EpochMaxRatioIncrease",
                "value": {
                    "__fixed__": "0.5"
                }
            },
            {
                "key": "con_stake02.EpochMinTime",
                "value": 0
            },
            {
                "key": "con_stake02.Epochs:0",
                "value": {
                    "time": {
                        "__time__": [
                            2025,
                            1,
                            9,
                            11,
                            57,
                            38,
                            0
                        ]
                    },
                    "staked": 0,
                    "amt_per_hr": 3000
                }
            },
            {
                "key": "con_stake02.OpenForBusiness",
                "value": true
            },
            {
                "key": "con_stake02.Owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stake02.StakedBalance",
                "value": 0
            },
            {
                "key": "con_stake02.StartTime",
                "value": {
                    "__time__": [
                        2018,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_stake02.WithdrawnBalance",
                "value": 0
            },
            {
                "key": "con_stake02.__code__",
                "value": "import con_stk2\nimport con_stk3\nSTAKING_TOKEN = con_stk2\nYIELD_TOKEN = con_stk3\n__Owner = Variable(contract='con_stake02', name='Owner')\n__DevRewardWallet = Variable(contract='con_stake02', name='DevRewardWallet')\n__EmissionRatePerHour = Variable(contract='con_stake02', name=\n    'EmissionRatePerHour')\n__DevRewardPct = Variable(contract='con_stake02', name='DevRewardPct')\n__StartTime = Variable(contract='con_stake02', name='StartTime')\n__EndTime = Variable(contract='con_stake02', name='EndTime')\n__OpenForBusiness = Variable(contract='con_stake02', name='OpenForBusiness')\n__Deposits = Hash(default_value=False, contract='con_stake02', name='Deposits')\n__Withdrawals = Hash(default_value=0, contract='con_stake02', name=\n    'Withdrawals')\n__CurrentEpochIndex = Variable(contract='con_stake02', name='CurrentEpochIndex'\n    )\n__Epochs = Hash(default_value=False, contract='con_stake02', name='Epochs')\n__StakedBalance = Variable(contract='con_stake02', name='StakedBalance')\n__WithdrawnBalance = Variable(contract='con_stake02', name='WithdrawnBalance')\n__EpochMinTime = Variable(contract='con_stake02', name='EpochMinTime')\n__EpochMaxRatioIncrease = Variable(contract='con_stake02', name=\n    'EpochMaxRatioIncrease')\n__meta = Hash(default_value=False, contract='con_stake02', name='meta')\n__decimal_converter_var = Variable(contract='con_stake02', name=\n    'decimal_converter_var')\n\n\ndef ____():\n    __Owner.set(ctx.caller)\n    __DevRewardWallet.set(ctx.caller)\n    __CurrentEpochIndex.set(0)\n    __StakedBalance.set(0)\n    __WithdrawnBalance.set(0)\n    __EpochMaxRatioIncrease.set(1 / 2)\n    __EpochMinTime.set(0)\n    __Epochs[0] = {'time': now, 'staked': 0, 'amt_per_hr': 3000}\n    __meta['version'] = '0.0.1'\n    __meta['type'] = 'staking_smart_epoch'\n    __meta['STAKING_TOKEN'] = 'con_stk2'\n    __meta['YIELD_TOKEN'] = 'con_stk3'\n    __EmissionRatePerHour.set(3000)\n    __DevRewardPct.set(1 / 10)\n    __StartTime.set(datetime.datetime(year=2018, month=1, day=1, hour=0))\n    __EndTime.set(datetime.datetime(year=2022, month=3, day=4, hour=0))\n    __OpenForBusiness.set(True)\n\n\n@__export('con_stake02')\ndef addStakingTokens(amount: float):\n    assert __OpenForBusiness.get(\n        ) == True, 'This staking pool is not open right now.'\n    assert amount > 0, 'You cannot stake a negative balance.'\n    user = ctx.caller\n    STAKING_TOKEN.transfer_from(amount=amount, to=ctx.this, main_account=user)\n    staked = __StakedBalance.get()\n    new_staked_amount = staked + amount\n    __StakedBalance.set(new_staked_amount)\n    epoch_index = decideIncrementEpoch(new_staked_amount=new_staked_amount)\n    if __Deposits[user] is False:\n        __Deposits[user] = []\n    deposits = __Deposits[user]\n    deposits.append({'starting_epoch': epoch_index, 'time': now, 'amount':\n        amount})\n    __Deposits[user] = deposits\n\n\n@__export('con_stake02')\ndef withdrawYield(amount: float):\n    assert amount > 0, 'You cannot harvest a negative balance'\n    user = ctx.caller\n    deposits = __Deposits[user]\n    assert deposits is not False, 'You have no deposit to withdraw yield from.'\n    withdrawn_yield = __Withdrawals[user]\n    harvestable_yield = 0\n    for d in deposits:\n        harvestable_yield += calculateYield(starting_epoch_index=d[\n            'starting_epoch'], start_time=d['time'], amount=d['amount'])\n    harvestable_yield -= withdrawn_yield\n    yield_to_harvest = (amount if amount < harvestable_yield else\n        harvestable_yield)\n    assert yield_to_harvest > 0, 'There is no yield to harvest right now :('\n    dev_share = yield_to_harvest * __DevRewardPct.get()\n    if dev_share > 0:\n        YIELD_TOKEN.transfer(to=__DevRewardWallet.get(), amount=dev_share)\n    user_share = yield_to_harvest - dev_share\n    YIELD_TOKEN.transfer(to=user, amount=user_share)\n    __Withdrawals[user] = withdrawn_yield + yield_to_harvest\n    new_withdrawn_amount = __WithdrawnBalance.get() + yield_to_harvest\n    __WithdrawnBalance.set(new_withdrawn_amount)\n\n\n@__export('con_stake02')\ndef withdrawTokensAndYield():\n    user = ctx.caller\n    deposits = __Deposits[user]\n    assert deposits is not False, 'You have no deposit to withdraw'\n    withdrawn_yield = __Withdrawals[user]\n    stake_to_return = 0\n    yield_to_harvest = 0\n    for d in deposits:\n        yield_to_harvest += calculateYield(starting_epoch_index=d[\n            'starting_epoch'], start_time=d['time'], amount=d['amount'])\n        stake_to_return += d['amount']\n    STAKING_TOKEN.transfer(to=user, amount=stake_to_return)\n    yield_to_harvest -= withdrawn_yield\n    if yield_to_harvest > 0:\n        dev_share = yield_to_harvest * __DevRewardPct.get()\n        if dev_share > 0:\n            YIELD_TOKEN.transfer(to=__DevRewardWallet.get(), amount=dev_share)\n        user_share = yield_to_harvest - dev_share\n        YIELD_TOKEN.transfer(to=user, amount=user_share)\n    __Deposits[user] = False\n    __Withdrawals[user] = 0\n    new_staked_amount = __StakedBalance.get() - stake_to_return\n    __StakedBalance.set(new_staked_amount)\n    new_withdrawn_amount = __WithdrawnBalance.get() + yield_to_harvest\n    __WithdrawnBalance.set(new_withdrawn_amount)\n"
            },
            {
                "key": "con_stake02.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stake02.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        11,
                        57,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_stake02.meta:STAKING_TOKEN",
                "value": "con_stk2"
            },
            {
                "key": "con_stake02.meta:YIELD_TOKEN",
                "value": "con_stk3"
            },
            {
                "key": "con_stake02.meta:type",
                "value": "staking_smart_epoch"
            },
            {
                "key": "con_stake02.meta:version",
                "value": "0.0.1"
            },
            {
                "key": "con_stake05.DevRewardPct",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_stake05.DevRewardWallet",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stake05.EmissionRatePerHour",
                "value": 3000
            },
            {
                "key": "con_stake05.EndTime",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_stake05.OpenForBusiness",
                "value": true
            },
            {
                "key": "con_stake05.Owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stake05.StakedBalance",
                "value": 0
            },
            {
                "key": "con_stake05.StartTime",
                "value": {
                    "__time__": [
                        2018,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_stake05.WithdrawnBalance",
                "value": 0
            },
            {
                "key": "con_stake05.__code__",
                "value": "import con_stk2\nimport con_stk3\nSTAKING_TOKEN = con_stk2\nYIELD_TOKEN = con_stk3\n__Owner = Variable(contract='con_stake05', name='Owner')\n__DevRewardWallet = Variable(contract='con_stake05', name='DevRewardWallet')\n__EmissionRatePerHour = Variable(contract='con_stake05', name=\n    'EmissionRatePerHour')\n__DevRewardPct = Variable(contract='con_stake05', name='DevRewardPct')\n__StartTime = Variable(contract='con_stake05', name='StartTime')\n__EndTime = Variable(contract='con_stake05', name='EndTime')\n__OpenForBusiness = Variable(contract='con_stake05', name='OpenForBusiness')\n__Deposits = Hash(default_value=False, contract='con_stake05', name='Deposits')\n__Withdrawals = Hash(default_value=0, contract='con_stake05', name=\n    'Withdrawals')\n__StakedBalance = Variable(contract='con_stake05', name='StakedBalance')\n__WithdrawnBalance = Variable(contract='con_stake05', name='WithdrawnBalance')\n\n\ndef ____():\n    __Owner.set(ctx.caller)\n    __DevRewardWallet.set(ctx.caller)\n    __EmissionRatePerHour.set(3000)\n    __DevRewardPct.set(decimal('0.1'))\n    __StartTime.set(datetime.datetime(year=2018, month=1, day=1, hour=0))\n    __EndTime.set(datetime.datetime(year=2025, month=1, day=1, hour=0))\n    __OpenForBusiness.set(True)\n    __StakedBalance.set(0)\n    __WithdrawnBalance.set(0)\n\n\n@__export('con_stake05')\ndef addStakingTokens(amount: float):\n    assert __OpenForBusiness.get(), 'Staking pool is closed.'\n    assert amount > 0, 'Amount must be positive.'\n    user = ctx.caller\n    STAKING_TOKEN.transfer_from(amount=amount, to=ctx.this, main_account=user)\n    __Deposits[user] = __Deposits[user] + amount if __Deposits[user\n        ] else amount\n    __StakedBalance.set(__StakedBalance.get() + amount)\n\n\n@__export('con_stake05')\ndef withdrawYield():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    elapsed_time = (now - __StartTime.get()).total_seconds()\n    emission_rate_per_second = __EmissionRatePerHour.get() / 3600\n    yield_to_harvest = elapsed_time * emission_rate_per_second * (deposited /\n        __StakedBalance.get())\n    dev_share = yield_to_harvest * __DevRewardPct.get()\n    user_share = yield_to_harvest - dev_share\n    YIELD_TOKEN.transfer(to=__DevRewardWallet.get(), amount=dev_share)\n    YIELD_TOKEN.transfer(to=user, amount=user_share)\n    __Withdrawals[user] = __Withdrawals[user] + yield_to_harvest\n    __WithdrawnBalance.set(__WithdrawnBalance.get() + yield_to_harvest)\n\n\n@__export('con_stake05')\ndef withdrawAll():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    withdrawYield()\n    STAKING_TOKEN.transfer(to=user, amount=deposited)\n    __Deposits[user] = False\n    __StakedBalance.set(__StakedBalance.get() - deposited)\n\n\n@__export('con_stake05')\ndef setOwner(new_owner: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __Owner.set(new_owner)\n\n\n@__export('con_stake05')\ndef setDevWallet(new_wallet: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __DevRewardWallet.set(new_wallet)\n\n\n@__export('con_stake05')\ndef setEmissionRate(new_rate: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __EmissionRatePerHour.set(new_rate)\n\n\n@__export('con_stake05')\ndef setDevRewardPct(new_pct: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    assert 0 <= new_pct <= 1, 'Percentage must be between 0 and 1.'\n    __DevRewardPct.set(new_pct)\n\n\n@__export('con_stake05')\ndef allowStaking(is_open: bool):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __OpenForBusiness.set(is_open)\n"
            },
            {
                "key": "con_stake05.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stake05.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        12,
                        8,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_stakeone.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stakeone', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stakeone', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_stakeone', name='balances')\n__metadata = Hash(contract='con_stakeone', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'stakeone'\n    __metadata['token_symbol'] = 'STK'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_stakeone')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    assert __balances[sender] >= amount, 'Not enough CURRENCY to send!'\n    __balances[sender] -= amount\n    __balances[to] += amount\n\n@__export('con_stakeone')\ndef balance_of(address: str):\n    return __balances[address]\n\n@__export('con_stakeone')\ndef allowance(owner: str, spender: str):\n    return __balances[owner, spender]\n\n@__export('con_stakeone')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_stakeone')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})"
            },
            {
                "key": "con_stakeone.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stakeone.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        10,
                        20,
                        20,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_stakeone.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "995783.016836365770817173531127729355"
                }
            },
            {
                "key": "con_stakeone.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_addliquidity",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stakeone.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_multisend1",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stakeone.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swap_one",
                "value": {
                    "__fixed__": "4.7E+2"
                }
            },
            {
                "key": "con_stakeone.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swap_stk",
                "value": {
                    "__fixed__": "4.7E+2"
                }
            },
            {
                "key": "con_stakeone.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swapstk",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_stakeone.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swapstkone",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stakeone.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swapstkthree",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_stakeone.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swapstktwo",
                "value": {
                    "__fixed__": "1.3E+2"
                }
            },
            {
                "key": "con_stakeone.balances:9246ae743f5408cceb767e7197bcce20e34be55f10c8ba0bf3b52b97a0c4a82e",
                "value": 50
            },
            {
                "key": "con_stakeone.balances:con_addliquidity",
                "value": 200
            },
            {
                "key": "con_stakeone.balances:con_swap_one",
                "value": {
                    "__fixed__": "448.575709089898033970432623707148"
                }
            },
            {
                "key": "con_stakeone.balances:con_swap_stk",
                "value": {
                    "__fixed__": "498.407454544331148856036248563497"
                }
            },
            {
                "key": "con_stakeone.balances:con_swapstk",
                "value": 400
            },
            {
                "key": "con_stakeone.balances:con_swapstkone",
                "value": 1000
            },
            {
                "key": "con_stakeone.balances:con_swapstkthree",
                "value": 1000
            },
            {
                "key": "con_stakeone.balances:con_swapstktwo",
                "value": 570
            },
            {
                "key": "con_stakeone.balances:ddd326fddb5d1677595311f298b744a4e9f415b577ac179a6afbf38483dc0791",
                "value": 50
            },
            {
                "key": "con_stakeone.metadata:operator",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stakeone.metadata:token_name",
                "value": "stakeone"
            },
            {
                "key": "con_stakeone.metadata:token_symbol",
                "value": "STK"
            },
            {
                "key": "con_staketoken.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_staketoken', name='balances')\n__metadata = Hash(contract='con_staketoken', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_staketoken', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_staketoken', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'STAKETOKEN'\n    __metadata['token_symbol'] = 'STK'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 1000000\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_staketoken')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_staketoken')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_staketoken')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_staketoken')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_staketoken')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_staketoken.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staketoken.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        17,
                        23,
                        36,
                        6,
                        0
                    ]
                }
            },
            {
                "key": "con_staketoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "999009.774701436489732439977302294698"
                }
            },
            {
                "key": "con_staketoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex_router_n",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_staketoken.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_staketoken.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05:con_dex_router_n",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_staketoken.balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "990.225298563510267560022697705302"
                }
            },
            {
                "key": "con_staketoken.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staketoken.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_staketoken.metadata:token_name",
                "value": "STAKETOKEN"
            },
            {
                "key": "con_staketoken.metadata:token_symbol",
                "value": "STK"
            },
            {
                "key": "con_staketoken.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_staketoken.metadata:total_supply",
                "value": 1000000
            },
            {
                "key": "con_staketwo.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_staketwo', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_staketwo', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_staketwo', name='balances')\n__metadata = Hash(contract='con_staketwo', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'staketwo'\n    __metadata['token_symbol'] = 'STK2'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_staketwo')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    assert __balances[sender] >= amount, 'Not enough CURRENCY to send!'\n    __balances[sender] -= amount\n    __balances[to] += amount\n\n@__export('con_staketwo')\ndef balance_of(address: str):\n    return __balances[address]\n\n@__export('con_staketwo')\ndef allowance(owner: str, spender: str):\n    return __balances[owner, spender]\n\n@__export('con_staketwo')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_staketwo')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})"
            },
            {
                "key": "con_staketwo.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staketwo.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        11,
                        12,
                        43,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_staketwo.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "998607.854230703069377003275429403892"
                }
            },
            {
                "key": "con_staketwo.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_addliquidity",
                "value": {
                    "__fixed__": "2E+2"
                }
            },
            {
                "key": "con_staketwo.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swap_one",
                "value": {
                    "__fixed__": "4.7E+2"
                }
            },
            {
                "key": "con_staketwo.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swap_stk",
                "value": {
                    "__fixed__": "4.7E+2"
                }
            },
            {
                "key": "con_staketwo.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swapstk",
                "value": {
                    "__fixed__": "5E+2"
                }
            },
            {
                "key": "con_staketwo.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swapstkone",
                "value": {
                    "__fixed__": "5E+2"
                }
            },
            {
                "key": "con_staketwo.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swapstkthree",
                "value": {
                    "__fixed__": "2E+3"
                }
            },
            {
                "key": "con_staketwo.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_swapstktwo",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_staketwo.balances:con_swap_one",
                "value": {
                    "__fixed__": "451.609403842161876545073691758978"
                }
            },
            {
                "key": "con_staketwo.balances:con_swap_stk",
                "value": {
                    "__fixed__": "501.778226491290973938970768621086"
                }
            },
            {
                "key": "con_staketwo.balances:con_swapstktwo",
                "value": {
                    "__fixed__": "438.758138963477772512680110216044"
                }
            },
            {
                "key": "con_staketwo.metadata:operator",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staketwo.metadata:token_name",
                "value": "staketwo"
            },
            {
                "key": "con_staketwo.metadata:token_symbol",
                "value": "STK2"
            },
            {
                "key": "con_staking001.DevRewardPct",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_staking001.DevRewardWallet",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking001.EmissionRatePerHour",
                "value": 3000
            },
            {
                "key": "con_staking001.EndTime",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking001.OpenForBusiness",
                "value": true
            },
            {
                "key": "con_staking001.Owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking001.StakedBalance",
                "value": 0
            },
            {
                "key": "con_staking001.StartTime",
                "value": {
                    "__time__": [
                        2018,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking001.WithdrawnBalance",
                "value": 0
            },
            {
                "key": "con_staking001.__code__",
                "value": "import con_stk004\nimport con_stk005\nSTAKING_TOKEN = con_stk004\nYIELD_TOKEN = con_stk005\n__Owner = Variable(contract='con_staking001', name='Owner')\n__DevRewardWallet = Variable(contract='con_staking001', name='DevRewardWallet')\n__EmissionRatePerHour = Variable(contract='con_staking001', name=\n    'EmissionRatePerHour')\n__DevRewardPct = Variable(contract='con_staking001', name='DevRewardPct')\n__StartTime = Variable(contract='con_staking001', name='StartTime')\n__EndTime = Variable(contract='con_staking001', name='EndTime')\n__OpenForBusiness = Variable(contract='con_staking001', name='OpenForBusiness')\n__Deposits = Hash(default_value=False, contract='con_staking001', name=\n    'Deposits')\n__Withdrawals = Hash(default_value=0, contract='con_staking001', name=\n    'Withdrawals')\n__StakedBalance = Variable(contract='con_staking001', name='StakedBalance')\n__WithdrawnBalance = Variable(contract='con_staking001', name=\n    'WithdrawnBalance')\n\n\ndef ____():\n    __Owner.set(ctx.caller)\n    __DevRewardWallet.set(ctx.caller)\n    __EmissionRatePerHour.set(3000)\n    __DevRewardPct.set(decimal('0.1'))\n    __StartTime.set(datetime.datetime(year=2018, month=1, day=1, hour=0))\n    __EndTime.set(datetime.datetime(year=2025, month=1, day=1, hour=0))\n    __OpenForBusiness.set(True)\n    __StakedBalance.set(0)\n    __WithdrawnBalance.set(0)\n\n\n@__export('con_staking001')\ndef addStakingTokens(amount: float):\n    assert __OpenForBusiness.get(), 'Staking pool is closed.'\n    assert amount > 0, 'Amount must be positive.'\n    user = ctx.caller\n    approved_amount = STAKING_TOKEN.balance_of((user, ctx.this))\n    assert approved_amount >= amount, f'Not enough tokens approved. Please approve at least {amount} tokens for the staking contract using STAKING_TOKEN.approve({amount}, con_staking).'\n    STAKING_TOKEN.transfer_from(amount=amount, to=ctx.this, main_account=user)\n    __Deposits[user] = __Deposits[user] + amount if __Deposits[user\n        ] else amount\n    __StakedBalance.set(__StakedBalance.get() + amount)\n\n\n@__export('con_staking001')\ndef withdrawYield():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    elapsed_time = (now - __StartTime.get()).total_seconds()\n    emission_rate_per_second = __EmissionRatePerHour.get() / 3600\n    yield_to_harvest = elapsed_time * emission_rate_per_second * (deposited /\n        __StakedBalance.get())\n    dev_share = yield_to_harvest * __DevRewardPct.get()\n    user_share = yield_to_harvest - dev_share\n    YIELD_TOKEN.transfer(to=__DevRewardWallet.get(), amount=dev_share)\n    YIELD_TOKEN.transfer(to=user, amount=user_share)\n    __Withdrawals[user] = __Withdrawals[user] + yield_to_harvest\n    __WithdrawnBalance.set(__WithdrawnBalance.get() + yield_to_harvest)\n\n\n@__export('con_staking001')\ndef withdrawAll():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    withdrawYield()\n    STAKING_TOKEN.transfer(to=user, amount=deposited)\n    __Deposits[user] = False\n    __StakedBalance.set(__StakedBalance.get() - deposited)\n\n\n@__export('con_staking001')\ndef setOwner(new_owner: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __Owner.set(new_owner)\n\n\n@__export('con_staking001')\ndef setDevWallet(new_wallet: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __DevRewardWallet.set(new_wallet)\n\n\n@__export('con_staking001')\ndef setEmissionRate(new_rate: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __EmissionRatePerHour.set(new_rate)\n\n\n@__export('con_staking001')\ndef setDevRewardPct(new_pct: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    assert 0 <= new_pct <= 1, 'Percentage must be between 0 and 1.'\n    __DevRewardPct.set(new_pct)\n\n\n@__export('con_staking001')\ndef allowStaking(is_open: bool):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __OpenForBusiness.set(is_open)\n"
            },
            {
                "key": "con_staking001.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking001.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        14,
                        27,
                        29,
                        0
                    ]
                }
            },
            {
                "key": "con_staking002.DevRewardPct",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_staking002.DevRewardWallet",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking002.EmissionRatePerHour",
                "value": 3000
            },
            {
                "key": "con_staking002.EndTime",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking002.OpenForBusiness",
                "value": true
            },
            {
                "key": "con_staking002.Owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking002.StakedBalance",
                "value": 0
            },
            {
                "key": "con_staking002.StartTime",
                "value": {
                    "__time__": [
                        2018,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking002.WithdrawnBalance",
                "value": 0
            },
            {
                "key": "con_staking002.__code__",
                "value": "import con_stk004\nimport con_stk005\nSTAKING_TOKEN = con_stk004\nYIELD_TOKEN = con_stk005\n__Owner = Variable(contract='con_staking002', name='Owner')\n__DevRewardWallet = Variable(contract='con_staking002', name='DevRewardWallet')\n__EmissionRatePerHour = Variable(contract='con_staking002', name=\n    'EmissionRatePerHour')\n__DevRewardPct = Variable(contract='con_staking002', name='DevRewardPct')\n__StartTime = Variable(contract='con_staking002', name='StartTime')\n__EndTime = Variable(contract='con_staking002', name='EndTime')\n__OpenForBusiness = Variable(contract='con_staking002', name='OpenForBusiness')\n__Deposits = Hash(default_value=False, contract='con_staking002', name=\n    'Deposits')\n__Withdrawals = Hash(default_value=0, contract='con_staking002', name=\n    'Withdrawals')\n__StakedBalance = Variable(contract='con_staking002', name='StakedBalance')\n__WithdrawnBalance = Variable(contract='con_staking002', name=\n    'WithdrawnBalance')\n\n\ndef ____():\n    __Owner.set(ctx.caller)\n    __DevRewardWallet.set(ctx.caller)\n    __EmissionRatePerHour.set(3000)\n    __DevRewardPct.set(decimal('0.1'))\n    __StartTime.set(datetime.datetime(year=2018, month=1, day=1, hour=0))\n    __EndTime.set(datetime.datetime(year=2025, month=1, day=1, hour=0))\n    __OpenForBusiness.set(True)\n    __StakedBalance.set(0)\n    __WithdrawnBalance.set(0)\n\n\n@__export('con_staking002')\ndef addStakingTokens(amount: float):\n    assert __OpenForBusiness.get(), 'Staking pool is closed.'\n    assert amount > 0, 'Amount must be positive.'\n    user = ctx.caller\n    approved_amount = STAKING_TOKEN.balance_of((user, user))\n    assert approved_amount >= amount, f'Not enough tokens approved. Please approve at least {amount} tokens for the staking contract using STAKING_TOKEN.approve({amount}, con_staking).'\n    STAKING_TOKEN.transfer_from(amount=amount, to=ctx.this, main_account=user)\n    __Deposits[user] = __Deposits[user] + amount if __Deposits[user\n        ] else amount\n    __StakedBalance.set(__StakedBalance.get() + amount)\n\n\n@__export('con_staking002')\ndef withdrawYield():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    elapsed_time = (now - __StartTime.get()).total_seconds()\n    emission_rate_per_second = __EmissionRatePerHour.get() / 3600\n    yield_to_harvest = elapsed_time * emission_rate_per_second * (deposited /\n        __StakedBalance.get())\n    dev_share = yield_to_harvest * __DevRewardPct.get()\n    user_share = yield_to_harvest - dev_share\n    YIELD_TOKEN.transfer(to=__DevRewardWallet.get(), amount=dev_share)\n    YIELD_TOKEN.transfer(to=user, amount=user_share)\n    __Withdrawals[user] = __Withdrawals[user] + yield_to_harvest\n    __WithdrawnBalance.set(__WithdrawnBalance.get() + yield_to_harvest)\n\n\n@__export('con_staking002')\ndef withdrawAll():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    withdrawYield()\n    STAKING_TOKEN.transfer(to=user, amount=deposited)\n    __Deposits[user] = False\n    __StakedBalance.set(__StakedBalance.get() - deposited)\n\n\n@__export('con_staking002')\ndef setOwner(new_owner: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __Owner.set(new_owner)\n\n\n@__export('con_staking002')\ndef setDevWallet(new_wallet: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __DevRewardWallet.set(new_wallet)\n\n\n@__export('con_staking002')\ndef setEmissionRate(new_rate: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __EmissionRatePerHour.set(new_rate)\n\n\n@__export('con_staking002')\ndef setDevRewardPct(new_pct: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    assert 0 <= new_pct <= 1, 'Percentage must be between 0 and 1.'\n    __DevRewardPct.set(new_pct)\n\n\n@__export('con_staking002')\ndef allowStaking(is_open: bool):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __OpenForBusiness.set(is_open)\n"
            },
            {
                "key": "con_staking002.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking002.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        14,
                        52,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_staking003.DevRewardPct",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_staking003.DevRewardWallet",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking003.EmissionRatePerHour",
                "value": 3000
            },
            {
                "key": "con_staking003.EndTime",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking003.OpenForBusiness",
                "value": true
            },
            {
                "key": "con_staking003.Owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking003.StakedBalance",
                "value": 0
            },
            {
                "key": "con_staking003.StartTime",
                "value": {
                    "__time__": [
                        2018,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking003.WithdrawnBalance",
                "value": 0
            },
            {
                "key": "con_staking003.__code__",
                "value": "import con_stk004\nimport con_stk005\nSTAKING_TOKEN = con_stk004\nYIELD_TOKEN = con_stk005\n__Owner = Variable(contract='con_staking003', name='Owner')\n__DevRewardWallet = Variable(contract='con_staking003', name='DevRewardWallet')\n__EmissionRatePerHour = Variable(contract='con_staking003', name=\n    'EmissionRatePerHour')\n__DevRewardPct = Variable(contract='con_staking003', name='DevRewardPct')\n__StartTime = Variable(contract='con_staking003', name='StartTime')\n__EndTime = Variable(contract='con_staking003', name='EndTime')\n__OpenForBusiness = Variable(contract='con_staking003', name='OpenForBusiness')\n__Deposits = Hash(default_value=False, contract='con_staking003', name=\n    'Deposits')\n__Withdrawals = Hash(default_value=0, contract='con_staking003', name=\n    'Withdrawals')\n__StakedBalance = Variable(contract='con_staking003', name='StakedBalance')\n__WithdrawnBalance = Variable(contract='con_staking003', name=\n    'WithdrawnBalance')\n\n\ndef ____():\n    __Owner.set(ctx.caller)\n    __DevRewardWallet.set(ctx.caller)\n    __EmissionRatePerHour.set(3000)\n    __DevRewardPct.set(decimal('0.1'))\n    __StartTime.set(datetime.datetime(year=2018, month=1, day=1, hour=0))\n    __EndTime.set(datetime.datetime(year=2025, month=1, day=1, hour=0))\n    __OpenForBusiness.set(True)\n    __StakedBalance.set(0)\n    __WithdrawnBalance.set(0)\n\n\n@__export('con_staking003')\ndef addStakingTokens(amount: float):\n    assert __OpenForBusiness.get(), 'Staking pool is closed.'\n    assert amount > 0, 'Amount must be positive.'\n    user = ctx.caller\n    STAKING_TOKEN.transfer_from(amount=amount, to=ctx.this, main_account=user)\n    __Deposits[user] = __Deposits[user] + amount if __Deposits[user\n        ] else amount\n    __StakedBalance.set(__StakedBalance.get() + amount)\n\n\n@__export('con_staking003')\ndef withdrawYield():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    elapsed_time = (now - __StartTime.get()).total_seconds()\n    emission_rate_per_second = __EmissionRatePerHour.get() / 3600\n    yield_to_harvest = elapsed_time * emission_rate_per_second * (deposited /\n        __StakedBalance.get())\n    dev_share = yield_to_harvest * __DevRewardPct.get()\n    user_share = yield_to_harvest - dev_share\n    YIELD_TOKEN.transfer(to=__DevRewardWallet.get(), amount=dev_share)\n    YIELD_TOKEN.transfer(to=user, amount=user_share)\n    __Withdrawals[user] = __Withdrawals[user] + yield_to_harvest\n    __WithdrawnBalance.set(__WithdrawnBalance.get() + yield_to_harvest)\n\n\n@__export('con_staking003')\ndef withdrawAll():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    withdrawYield()\n    STAKING_TOKEN.transfer(to=user, amount=deposited)\n    __Deposits[user] = False\n    __StakedBalance.set(__StakedBalance.get() - deposited)\n\n\n@__export('con_staking003')\ndef setOwner(new_owner: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __Owner.set(new_owner)\n\n\n@__export('con_staking003')\ndef setDevWallet(new_wallet: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __DevRewardWallet.set(new_wallet)\n\n\n@__export('con_staking003')\ndef setEmissionRate(new_rate: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __EmissionRatePerHour.set(new_rate)\n\n\n@__export('con_staking003')\ndef setDevRewardPct(new_pct: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    assert 0 <= new_pct <= 1, 'Percentage must be between 0 and 1.'\n    __DevRewardPct.set(new_pct)\n\n\n@__export('con_staking003')\ndef allowStaking(is_open: bool):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __OpenForBusiness.set(is_open)\n"
            },
            {
                "key": "con_staking003.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking003.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        15,
                        26,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_staking004.DevRewardPct",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_staking004.DevRewardWallet",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking004.EmissionRatePerHour",
                "value": 3000
            },
            {
                "key": "con_staking004.EndTime",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking004.OpenForBusiness",
                "value": true
            },
            {
                "key": "con_staking004.Owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking004.StakedBalance",
                "value": 0
            },
            {
                "key": "con_staking004.StartTime",
                "value": {
                    "__time__": [
                        2018,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking004.WithdrawnBalance",
                "value": 0
            },
            {
                "key": "con_staking004.__code__",
                "value": "import con_stk004\nimport con_stk005\nSTAKING_TOKEN = con_stk004\nYIELD_TOKEN = con_stk005\n__Owner = Variable(contract='con_staking004', name='Owner')\n__DevRewardWallet = Variable(contract='con_staking004', name='DevRewardWallet')\n__EmissionRatePerHour = Variable(contract='con_staking004', name=\n    'EmissionRatePerHour')\n__DevRewardPct = Variable(contract='con_staking004', name='DevRewardPct')\n__StartTime = Variable(contract='con_staking004', name='StartTime')\n__EndTime = Variable(contract='con_staking004', name='EndTime')\n__OpenForBusiness = Variable(contract='con_staking004', name='OpenForBusiness')\n__Deposits = Hash(default_value=False, contract='con_staking004', name=\n    'Deposits')\n__Withdrawals = Hash(default_value=0, contract='con_staking004', name=\n    'Withdrawals')\n__StakedBalance = Variable(contract='con_staking004', name='StakedBalance')\n__WithdrawnBalance = Variable(contract='con_staking004', name=\n    'WithdrawnBalance')\n\n\ndef ____():\n    __Owner.set(ctx.caller)\n    __DevRewardWallet.set(ctx.caller)\n    __EmissionRatePerHour.set(3000)\n    __DevRewardPct.set(decimal('0.1'))\n    __StartTime.set(datetime.datetime(year=2018, month=1, day=1, hour=0))\n    __EndTime.set(datetime.datetime(year=2025, month=1, day=1, hour=0))\n    __OpenForBusiness.set(True)\n    __StakedBalance.set(0)\n    __WithdrawnBalance.set(0)\n\n\n@__export('con_staking004')\ndef addStakingTokens(amount: float):\n    assert __OpenForBusiness.get(), 'Staking pool is closed.'\n    assert amount > 0, 'Amount must be positive.'\n    user = ctx.caller\n    approved_amount = STAKING_TOKEN.balance_of((user, ctx.this))\n    assert approved_amount >= amount, f'Not enough tokens approved. Please approve at least {amount} tokens for the staking contract using STAKING_TOKEN.approve({amount}, con_staking).'\n    STAKING_TOKEN.transfer_from(amount=amount, to=ctx.this, main_account=user)\n    __Deposits[user] = __Deposits[user] + amount if __Deposits[user\n        ] else amount\n    __StakedBalance.set(__StakedBalance.get() + amount)\n\n\n@__export('con_staking004')\ndef withdrawYield():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    elapsed_time = (now - __StartTime.get()).total_seconds()\n    emission_rate_per_second = __EmissionRatePerHour.get() / 3600\n    yield_to_harvest = elapsed_time * emission_rate_per_second * (deposited /\n        __StakedBalance.get())\n    dev_share = yield_to_harvest * __DevRewardPct.get()\n    user_share = yield_to_harvest - dev_share\n    YIELD_TOKEN.transfer(to=__DevRewardWallet.get(), amount=dev_share)\n    YIELD_TOKEN.transfer(to=user, amount=user_share)\n    __Withdrawals[user] = __Withdrawals[user] + yield_to_harvest\n    __WithdrawnBalance.set(__WithdrawnBalance.get() + yield_to_harvest)\n\n\n@__export('con_staking004')\ndef withdrawAll():\n    user = ctx.caller\n    deposited = __Deposits[user]\n    assert deposited, 'No tokens staked.'\n    withdrawYield()\n    STAKING_TOKEN.transfer(to=user, amount=deposited)\n    __Deposits[user] = False\n    __StakedBalance.set(__StakedBalance.get() - deposited)\n\n\n@__export('con_staking004')\ndef setOwner(new_owner: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __Owner.set(new_owner)\n\n\n@__export('con_staking004')\ndef setDevWallet(new_wallet: str):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __DevRewardWallet.set(new_wallet)\n\n\n@__export('con_staking004')\ndef setEmissionRate(new_rate: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __EmissionRatePerHour.set(new_rate)\n\n\n@__export('con_staking004')\ndef setDevRewardPct(new_pct: float):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    assert 0 <= new_pct <= 1, 'Percentage must be between 0 and 1.'\n    __DevRewardPct.set(new_pct)\n\n\n@__export('con_staking004')\ndef allowStaking(is_open: bool):\n    assert ctx.caller == __Owner.get(), 'Only the owner can call this.'\n    __OpenForBusiness.set(is_open)\n"
            },
            {
                "key": "con_staking004.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_staking004.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        15,
                        48,
                        36,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_1.__code__",
                "value": "DEX_PAIRS = 'dex_pairs'\n__owner = Variable(contract='con_staking_1', name='owner')\n__deposits = Hash(default_value=False, contract='con_staking_1', name=\n    'deposits')\n__saved_rewards = Hash(default_value=0, contract='con_staking_1', name=\n    'saved_rewards')\n__total_staked = Variable(contract='con_staking_1', name='total_staked')\n__rps = Variable(contract='con_staking_1', name='rps')\n__begtime = Variable(contract='con_staking_1', name='begtime')\n__endtime = Variable(contract='con_staking_1', name='endtime')\n__cum_rpt = Variable(contract='con_staking_1', name='cum_rpt')\n__reward_token = Variable(contract='con_staking_1', name='reward_token')\n__staked_pair = Variable(contract='con_staking_1', name='staked_pair')\n__reward_payed = Variable(contract='con_staking_1', name='reward_payed')\n__total_rewards = Variable(contract='con_staking_1', name='total_rewards')\n__last_update = Variable(contract='con_staking_1', name='last_update')\n__started = Variable(contract='con_staking_1', name='started')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n\n\ndef __PAIRS():\n    return importlib.import_module(DEX_PAIRS)\n\n\ndef __onlyowner():\n    assert __owner.get() == ctx.caller, 'FORBIDDEN'\n\n\ndef __present():\n    assert __started.get() and now >= __begtime.get() and now < __endtime.get(\n        ), 'Not opened!'\n\n\ndef __notpresent():\n    assert not (__started.get() and now >= __begtime.get() and now <\n        __endtime.get()), 'Opened!'\n\n\ndef __beforeend():\n    assert __started.get() and now < __endtime.get(), 'Ended!'\n\n\ndef ____(reward: str, pair: int):\n    __owner.set(ctx.caller)\n    __total_staked.set(decimal('0.0'))\n    __cum_rpt.set(decimal('0.0'))\n    __reward_payed.set(decimal('0.0'))\n    __total_rewards.set(decimal('0.0'))\n    __endtime.set(False)\n    __reward_token.set(reward)\n    __staked_pair.set(pair)\n    __started.set(True)\n\n\n@__export('con_staking_1')\ndef start(beg: datetime.datetime, end: datetime.datetime, reward_per_sec: float\n    ):\n    __onlyowner()\n    assert __endtime.get() == False, 'Already started'\n    assert beg < end, 'Wrong dates!'\n    assert now < beg, 'Begin in past!'\n    delta = end - beg\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert delta.seconds * reward_per_sec <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __begtime.set(beg)\n    __endtime.set(end)\n    __rps.set(reward_per_sec)\n    __last_update.set(beg)\n    __started.set(True)\n\n\ndef __update():\n    cur = min(now, __endtime.get())\n    if __total_staked.get() > 0 and now >= __begtime.get():\n        delta = cur - max(__last_update.get(), __begtime.get())\n        __cum_rpt.set(__cum_rpt.get() + delta.seconds * __rps.get() /\n            __total_staked.get())\n        __total_rewards.set(__total_rewards.get() + delta.seconds * __rps.get()\n            )\n    __last_update.set(cur)\n\n\n@__export('con_staking_1')\ndef getRewards(address: str):\n    deposit = __deposits[address]\n    rewards = __saved_rewards[address]\n    if deposit != False:\n        cum_rpt_now = __cum_rpt.get()\n        if __total_staked.get() > 0 and now >= __begtime.get():\n            delta = min(now, __endtime.get()) - max(__last_update.get(),\n                __begtime.get())\n            cum_rpt_now += delta.seconds * __rps.get() / __total_staked.get()\n        rewards += (cum_rpt_now - deposit['cum_rpt']) * deposit['amount']\n    return rewards\n\n\ndef __harvest():\n    deposit = __deposits[ctx.caller]\n    if deposit != False:\n        __saved_rewards[ctx.caller] += (__cum_rpt.get() - deposit['cum_rpt']\n            ) * deposit['amount']\n\n\n@__export('con_staking_1')\ndef deposit(amount: float):\n    assert amount > 0, 'Invalid amount'\n    __beforeend()\n    __update()\n    __harvest()\n    deposit = __deposits[ctx.caller]\n    cur_amount = decimal('0.0')\n    if deposit != False:\n        cur_amount = deposit['amount']\n    __deposits[ctx.caller] = {'amount': cur_amount + amount, 'cum_rpt':\n        __cum_rpt.get()}\n    __total_staked.set(__total_staked.get() + amount)\n    __PAIRS().liqTransfer_from(pair=__staked_pair.get(), amount=amount, to=\n        ctx.this, main_account=ctx.caller)\n\n\n@__export('con_staking_1')\ndef withdraw(amount: float):\n    assert amount > 0, 'Invalid amount'\n    deposit = __deposits[ctx.caller]\n    assert deposit != False, 'No deposit!'\n    __update()\n    __harvest()\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit!'\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __deposits[ctx.caller] = False\n    else:\n        __deposits[ctx.caller] = {'amount': new_amount, 'cum_rpt':\n            __cum_rpt.get()}\n    __total_staked.set(__total_staked.get() - amount)\n    __PAIRS().liqTransfer(pair=__staked_pair.get(), amount=amount, to=ctx.\n        caller)\n\n\n@__export('con_staking_1')\ndef withdrawRewards(amount: float):\n    assert amount > 0, 'Invalid amount'\n    __update()\n    __harvest()\n    assert amount <= __saved_rewards[ctx.caller], 'Not enough rewards!'\n    __saved_rewards[ctx.caller] -= amount\n    deposit = __deposits[ctx.caller]\n    if deposit != False:\n        new_amount = deposit['amount']\n        __deposits[ctx.caller] = {'amount': new_amount, 'cum_rpt':\n            __cum_rpt.get()}\n    __reward_payed.set(__reward_payed.get() + amount)\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    tok.transfer(amount, ctx.caller)\n\n\n@__export('con_staking_1')\ndef changeRps(reward_per_sec: float):\n    assert reward_per_sec > 0, 'invalid rps'\n    __onlyowner()\n    __present()\n    __update()\n    delta = __endtime.get() - now\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert __total_rewards.get() - __reward_payed.get(\n        ) + delta.seconds * reward_per_sec <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __rps.set(reward_per_sec)\n\n\n@__export('con_staking_1')\ndef extend(end: datetime.datetime):\n    __onlyowner()\n    __present()\n    __update()\n    assert __endtime.get() < end, 'invalid end date'\n    delta = end - now\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert __total_rewards.get() - __reward_payed.get(\n        ) + delta.seconds * __rps.get() <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __endtime.set(end)\n\n\n@__export('con_staking_1')\ndef withdrawRemainingRewards():\n    __onlyowner()\n    __notpresent()\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    towithdraw = tok.balance_of(ctx.this) - (__total_rewards.get() -\n        __reward_payed.get())\n    if towithdraw > 0:\n        tok.transfer(towithdraw, ctx.caller)\n\n\n@__export('con_staking_1')\ndef getInfo(who: str):\n    pair = __staked_pair.get()\n    t = [__begtime.get(), __endtime.get(), __rps.get(), __total_staked.get(\n        ), pair, __reward_token.get()]\n    if who:\n        __phash = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name=\n            'pairs', contract='con_staking_1', name='phash')\n        liq = __phash[pair, 'balances', who]\n        t.append(liq if liq is not None else decimal('0.0'))\n        staked = decimal('0.0')\n        if __deposits[who]:\n            staked = __deposits[who]['amount']\n        t.append(staked)\n        t.append(getRewards(who))\n    return t\n"
            },
            {
                "key": "con_staking_1.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staking_1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        18,
                        21,
                        33,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_1.begtime",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        18,
                        22,
                        10,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_1.cum_rpt",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_staking_1.endtime",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        20,
                        22,
                        10,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_1.last_update",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        18,
                        22,
                        10,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_1.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staking_1.reward_payed",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_staking_1.reward_token",
                "value": "currency"
            },
            {
                "key": "con_staking_1.rps",
                "value": {
                    "__fixed__": "0.00005"
                }
            },
            {
                "key": "con_staking_1.staked_pair",
                "value": 5
            },
            {
                "key": "con_staking_1.started",
                "value": true
            },
            {
                "key": "con_staking_1.total_rewards",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_staking_1.total_staked",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_staking_2.__code__",
                "value": "DEX_PAIRS = 'con_dex_pairs_n'\n__owner = Variable(contract='con_staking_2', name='owner')\n__deposits = Hash(default_value=False, contract='con_staking_2', name=\n    'deposits')\n__saved_rewards = Hash(default_value=0, contract='con_staking_2', name=\n    'saved_rewards')\n__total_staked = Variable(contract='con_staking_2', name='total_staked')\n__rps = Variable(contract='con_staking_2', name='rps')\n__begtime = Variable(contract='con_staking_2', name='begtime')\n__endtime = Variable(contract='con_staking_2', name='endtime')\n__cum_rpt = Variable(contract='con_staking_2', name='cum_rpt')\n__reward_token = Variable(contract='con_staking_2', name='reward_token')\n__staked_pair = Variable(contract='con_staking_2', name='staked_pair')\n__reward_payed = Variable(contract='con_staking_2', name='reward_payed')\n__total_rewards = Variable(contract='con_staking_2', name='total_rewards')\n__last_update = Variable(contract='con_staking_2', name='last_update')\n__started = Variable(contract='con_staking_2', name='started')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n\n\ndef __PAIRS():\n    return importlib.import_module(DEX_PAIRS)\n\n\ndef __onlyowner():\n    assert __owner.get() == ctx.caller, 'FORBIDDEN'\n\n\ndef __present():\n    assert __started.get() and now >= __begtime.get() and now < __endtime.get(\n        ), 'Not opened!'\n\n\ndef __notpresent():\n    assert not (__started.get() and now >= __begtime.get() and now <\n        __endtime.get()), 'Opened!'\n\n\ndef __beforeend():\n    assert __started.get() and now < __endtime.get(), 'Ended!'\n\n\ndef ____(reward: str, pair: int):\n    __owner.set(ctx.caller)\n    __total_staked.set(decimal('0.0'))\n    __cum_rpt.set(decimal('0.0'))\n    __reward_payed.set(decimal('0.0'))\n    __total_rewards.set(decimal('0.0'))\n    __endtime.set(False)\n    __reward_token.set(reward)\n    __staked_pair.set(pair)\n    __started.set(True)\n\n\n@__export('con_staking_2')\ndef start(beg: datetime.datetime, end: datetime.datetime, reward_per_sec: float\n    ):\n    __onlyowner()\n    assert __endtime.get() == False, 'Already started'\n    assert beg < end, 'Wrong dates!'\n    assert now < beg, 'Begin in past!'\n    delta = end - beg\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert delta.seconds * reward_per_sec <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __begtime.set(beg)\n    __endtime.set(end)\n    __rps.set(reward_per_sec)\n    __last_update.set(beg)\n    __started.set(True)\n\n\ndef __update():\n    cur = min(now, __endtime.get())\n    if __total_staked.get() > 0 and now >= __begtime.get():\n        delta = cur - max(__last_update.get(), __begtime.get())\n        __cum_rpt.set(__cum_rpt.get() + delta.seconds * __rps.get() /\n            __total_staked.get())\n        __total_rewards.set(__total_rewards.get() + delta.seconds * __rps.get()\n            )\n    __last_update.set(cur)\n\n\n@__export('con_staking_2')\ndef getRewards(address: str):\n    deposit = __deposits[address]\n    rewards = __saved_rewards[address]\n    if deposit != False:\n        cum_rpt_now = __cum_rpt.get()\n        if __total_staked.get() > 0 and now >= __begtime.get():\n            delta = min(now, __endtime.get()) - max(__last_update.get(),\n                __begtime.get())\n            cum_rpt_now += delta.seconds * __rps.get() / __total_staked.get()\n        rewards += (cum_rpt_now - deposit['cum_rpt']) * deposit['amount']\n    return rewards\n\n\ndef __harvest():\n    deposit = __deposits[ctx.caller]\n    if deposit != False:\n        __saved_rewards[ctx.caller] += (__cum_rpt.get() - deposit['cum_rpt']\n            ) * deposit['amount']\n\n\n@__export('con_staking_2')\ndef deposit(amount: float):\n    assert amount > 0, 'Invalid amount'\n    __beforeend()\n    __update()\n    __harvest()\n    deposit = __deposits[ctx.caller]\n    cur_amount = decimal('0.0')\n    if deposit != False:\n        cur_amount = deposit['amount']\n    __deposits[ctx.caller] = {'amount': cur_amount + amount, 'cum_rpt':\n        __cum_rpt.get()}\n    __total_staked.set(__total_staked.get() + amount)\n    __PAIRS().liqTransfer_from(pair=__staked_pair.get(), amount=amount, to=\n        ctx.this, main_account=ctx.caller)\n\n\n@__export('con_staking_2')\ndef withdraw(amount: float):\n    assert amount > 0, 'Invalid amount'\n    deposit = __deposits[ctx.caller]\n    assert deposit != False, 'No deposit!'\n    __update()\n    __harvest()\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit!'\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __deposits[ctx.caller] = False\n    else:\n        __deposits[ctx.caller] = {'amount': new_amount, 'cum_rpt':\n            __cum_rpt.get()}\n    __total_staked.set(__total_staked.get() - amount)\n    __PAIRS().liqTransfer(pair=__staked_pair.get(), amount=amount, to=ctx.\n        caller)\n\n\n@__export('con_staking_2')\ndef withdrawRewards(amount: float):\n    assert amount > 0, 'Invalid amount'\n    __update()\n    __harvest()\n    assert amount <= __saved_rewards[ctx.caller], 'Not enough rewards!'\n    __saved_rewards[ctx.caller] -= amount\n    deposit = __deposits[ctx.caller]\n    if deposit != False:\n        new_amount = deposit['amount']\n        __deposits[ctx.caller] = {'amount': new_amount, 'cum_rpt':\n            __cum_rpt.get()}\n    __reward_payed.set(__reward_payed.get() + amount)\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    tok.transfer(amount, ctx.caller)\n\n\n@__export('con_staking_2')\ndef changeRps(reward_per_sec: float):\n    assert reward_per_sec > 0, 'invalid rps'\n    __onlyowner()\n    __present()\n    __update()\n    delta = __endtime.get() - now\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert __total_rewards.get() - __reward_payed.get(\n        ) + delta.seconds * reward_per_sec <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __rps.set(reward_per_sec)\n\n\n@__export('con_staking_2')\ndef extend(end: datetime.datetime):\n    __onlyowner()\n    __present()\n    __update()\n    assert __endtime.get() < end, 'invalid end date'\n    delta = end - now\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert __total_rewards.get() - __reward_payed.get(\n        ) + delta.seconds * __rps.get() <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __endtime.set(end)\n\n\n@__export('con_staking_2')\ndef withdrawRemainingRewards():\n    __onlyowner()\n    __notpresent()\n    tok = importlib.import_module(__reward_token.get())\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    towithdraw = tok.balance_of(ctx.this) - (__total_rewards.get() -\n        __reward_payed.get())\n    if towithdraw > 0:\n        tok.transfer(towithdraw, ctx.caller)\n\n\ndef __nonetofalse(x):\n    return False if x is None else x\n\n\n@__export('con_staking_2')\ndef getInfo(who: str):\n    pair = __staked_pair.get()\n    t = [__begtime.get(), __endtime.get(), __rps.get(), __total_staked.get(\n        ), pair, __reward_token.get()]\n    if who:\n        __phash = ForeignHash(foreign_contract=DEX_PAIRS, foreign_name=\n            'pairs', contract='con_staking_2', name='phash')\n        liq = __phash[pair, 'balances', who]\n        t.append(liq if liq is not None else decimal('0.0'))\n        staked = decimal('0.0')\n        if __deposits[who]:\n            staked = __deposits[who]['amount']\n        t.append(staked)\n        t.append(getRewards(who))\n    return t\n"
            },
            {
                "key": "con_staking_2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staking_2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        18,
                        22,
                        31,
                        40,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_2.begtime",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        19,
                        13,
                        10,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_2.cum_rpt",
                "value": {
                    "__fixed__": "0.446586633365137365477683457957"
                }
            },
            {
                "key": "con_staking_2.deposits:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": false
            },
            {
                "key": "con_staking_2.deposits:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "amount": {
                        "__fixed__": "999"
                    },
                    "cum_rpt": {
                        "__fixed__": "0.433773077738026725679595146369"
                    }
                }
            },
            {
                "key": "con_staking_2.endtime",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        23,
                        13,
                        10,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_2.last_update",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        23,
                        13,
                        10,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_2.owner",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staking_2.reward_payed",
                "value": {
                    "__fixed__": "4.472758424056609102319688890783"
                }
            },
            {
                "key": "con_staking_2.reward_token",
                "value": "currency"
            },
            {
                "key": "con_staking_2.rps",
                "value": {
                    "__fixed__": "0.00005"
                }
            },
            {
                "key": "con_staking_2.saved_rewards:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_staking_2.saved_rewards:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "__fixed__": "0.00004950445986173939008782708"
                }
            },
            {
                "key": "con_staking_2.staked_pair",
                "value": 5
            },
            {
                "key": "con_staking_2.started",
                "value": true
            },
            {
                "key": "con_staking_2.total_rewards",
                "value": {
                    "__fixed__": "17.27355"
                }
            },
            {
                "key": "con_staking_2.total_staked",
                "value": {
                    "__fixed__": "999"
                }
            },
            {
                "key": "con_staking_mc2.__code__",
                "value": "@__export('con_staking_mc2')\ndef call(who: str, farms: list):\n    rv = []\n    for f in farms:\n        s = importlib.import_module(f)\n        rv.append([('' if x is None or isinstance(x, bool) and x is False else\n            x) for x in s.getInfo(who)])\n    return rv\n"
            },
            {
                "key": "con_staking_mc2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staking_mc2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        18,
                        21,
                        51,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_mc3.__code__",
                "value": "@__export('con_staking_mc3')\ndef call(who: str, farms: list):\n    rv = []\n    for f in farms:\n        s = importlib.import_module(f)\n        rv.append([('' if x is None or isinstance(x, bool) and x is False else\n            str(x)) for x in s.getInfo(who)])\n    return rv\n"
            },
            {
                "key": "con_staking_mc3.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staking_mc3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        18,
                        22,
                        2,
                        33,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_mc4.__code__",
                "value": "@__export('con_staking_mc4')\ndef call(who: str, farms: list):\n    rv = []\n    for f in farms:\n        s = importlib.import_module(f)\n        rv.append([('' if x is None or isinstance(x, bool) and x is False else\n            str(x)) for x in s.getInfo(who)])\n    return rv\n\n\n@__export('con_staking_mc4')\ndef lpvalue_xian(dexpairs: str, pairs: list):\n    rv = []\n    __phash = ForeignHash(foreign_contract=dexpairs, foreign_name='pairs',\n        contract='con_staking_mc4', name='phash')\n    for p in pairs:\n        if __phash[p, 'totalSupply'] == 0:\n            rv.append(str(decimal('0.0')))\n        else:\n            rv.append(str(__phash[p, 'reserve1'] / __phash[p, 'totalSupply'\n                ] * 2))\n"
            },
            {
                "key": "con_staking_mc4.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staking_mc4.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        21,
                        2,
                        20,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_mc5.__code__",
                "value": "@__export('con_staking_mc5')\ndef call(who: str, farms: list):\n    rv = []\n    for f in farms:\n        s = importlib.import_module(f)\n        rv.append([('' if x is None or isinstance(x, bool) and x is False else\n            str(x)) for x in s.getInfo(who)])\n    return rv\n\n\n@__export('con_staking_mc5')\ndef lpvalue_xian(dexpairs: str, pairs: list):\n    rv = []\n    __phash = ForeignHash(foreign_contract=dexpairs, foreign_name='pairs',\n        contract='con_staking_mc5', name='phash')\n    for p in pairs:\n        if __phash[p, 'totalSupply'] == 0:\n            rv.append(str(decimal('0.0')))\n        else:\n            rv.append(str(__phash[p, 'reserve1'] / __phash[p, 'totalSupply'\n                ] * 2))\n    return rv\n"
            },
            {
                "key": "con_staking_mc5.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staking_mc5.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        21,
                        10,
                        45,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "con_staking_multicall.__code__",
                "value": "@__export('con_staking_multicall')\ndef call(who: str, farms: list):\n    rv = []\n    for f in farms:\n        s = importlib.import_module(f)\n        rv.append(s.getInfo(who))\n    return rv\n"
            },
            {
                "key": "con_staking_multicall.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_staking_multicall.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        18,
                        21,
                        33,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_stellar.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_stellar', name='balances')\n__metadata = Hash(contract='con_stellar', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_stellar', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_stellar', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'xwt'\n    __metadata['token_symbol'] = 'xwt'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 1000000000\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_stellar')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_stellar')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_stellar')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_stellar')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_stellar')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_stellar.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_stellar.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        5,
                        2,
                        49,
                        7,
                        0
                    ]
                }
            },
            {
                "key": "con_stellar.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "997966071.5648148148148148148148146"
                }
            },
            {
                "key": "con_stellar.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_ff1",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stellar.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stellar.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stellar.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff7",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stellar.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff8",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stellar.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_zen4",
                "value": 0
            },
            {
                "key": "con_stellar.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "805025.226851851851851851851851777"
                }
            },
            {
                "key": "con_stellar.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stellar.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stellar.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff7",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stellar.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff8",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_stellar.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_mf_02",
                "value": 2800
            },
            {
                "key": "con_stellar.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_mf_04",
                "value": 0
            },
            {
                "key": "con_stellar.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": 0
            },
            {
                "key": "con_stellar.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a:con_mf_02",
                "value": 0
            },
            {
                "key": "con_stellar.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a:con_mf_04",
                "value": 0
            },
            {
                "key": "con_stellar.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": 18800
            },
            {
                "key": "con_stellar.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_f4",
                "value": 0
            },
            {
                "key": "con_stellar.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_zen4",
                "value": 0
            },
            {
                "key": "con_stellar.balances:con_f4",
                "value": 1100
            },
            {
                "key": "con_stellar.balances:con_ff1",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_stellar.balances:con_fff06",
                "value": {
                    "__fixed__": "2E+2"
                }
            },
            {
                "key": "con_stellar.balances:con_fff5",
                "value": {
                    "__fixed__": "983780.208333333333333333333333623"
                }
            },
            {
                "key": "con_stellar.balances:con_fff7",
                "value": {
                    "__fixed__": "100001"
                }
            },
            {
                "key": "con_stellar.balances:con_fff8",
                "value": {
                    "__fixed__": "113111"
                }
            },
            {
                "key": "con_stellar.balances:con_mf_02",
                "value": 7400
            },
            {
                "key": "con_stellar.balances:con_mf_04",
                "value": 1911
            },
            {
                "key": "con_stellar.balances:con_zen4",
                "value": 1600
            },
            {
                "key": "con_stellar.metadata:operator",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_stellar.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_stellar.metadata:token_name",
                "value": "xwt"
            },
            {
                "key": "con_stellar.metadata:token_symbol",
                "value": "xwt"
            },
            {
                "key": "con_stellar.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_stellar.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_stk001.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_stk001', name='balances')\n__approvals = Hash(default_value=0, contract='con_stk001', name='approvals')\n__metadata = Hash(contract='con_stk001', name='metadata')\n\n\ndef __construct():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'stk2'\n    __metadata['token_symbol'] = 'Stk'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_stk001')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_stk001')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_stk001')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    __approvals[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_stk001')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __approvals[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __approvals[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __approvals[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_stk001')\ndef balance_of(address: str):\n    return __balances[address]\n"
            },
            {
                "key": "con_stk001.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk001.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        13,
                        47,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_stk003.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_stk003', name='balances')\n__approvals = Hash(default_value=0, contract='con_stk003', name='approvals')\n__metadata = Hash(contract='con_stk003', name='metadata')\n\n\ndef __construct():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'stk2'\n    __metadata['token_symbol'] = 'Stk'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_stk003')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_stk003')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_stk003')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    __approvals[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_stk003')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __approvals[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __approvals[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __approvals[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_stk003')\ndef balance_of(address: str):\n    return __balances[address]\n"
            },
            {
                "key": "con_stk003.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk003.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        13,
                        51,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_stk004.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk004', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk004', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_stk004', name='balances')\n__approvals = Hash(default_value=0, contract='con_stk004', name='approvals')\n__metadata = Hash(contract='con_stk004', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'stk2'\n    __metadata['token_symbol'] = 'Stk'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n@__export('con_stk004')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_stk004')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_stk004')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_stk004')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_stk004')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_stk004.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk004.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        13,
                        51,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_stk004.approvals:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:'con_staking001'",
                "value": 1000
            },
            {
                "key": "con_stk004.approvals:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 7900
            },
            {
                "key": "con_stk004.approvals:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:5565f2b994c96776c16c796ed38aa63084ea688b492b27a24fc8a80920f4c0ec",
                "value": 30000
            },
            {
                "key": "con_stk004.approvals:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_multisend1",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_stk004.approvals:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_stake003",
                "value": 10000
            },
            {
                "key": "con_stk004.approvals:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_staking001",
                "value": 500
            },
            {
                "key": "con_stk004.approvals:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_staking002",
                "value": 10000
            },
            {
                "key": "con_stk004.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 996895
            },
            {
                "key": "con_stk004.balances:5258c7a3faa30087bc513da7621f06f95e238c5cefaeaae1e397833bb8b9b9d6",
                "value": 500
            },
            {
                "key": "con_stk004.balances:5565f2b994c96776c16c796ed38aa63084ea688b492b27a24fc8a80920f4c0ec",
                "value": 1105
            },
            {
                "key": "con_stk004.balances:con_staking001",
                "value": 500
            },
            {
                "key": "con_stk004.balances:con_staking003",
                "value": 1000
            },
            {
                "key": "con_stk004.metadata:operator",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk004.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_stk004.metadata:token_name",
                "value": "stk2"
            },
            {
                "key": "con_stk004.metadata:token_symbol",
                "value": "Stk"
            },
            {
                "key": "con_stk004.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_stk005.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_stk005', name='balances')\n__approvals = Hash(default_value=0, contract='con_stk005', name='approvals')\n__metadata = Hash(contract='con_stk005', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'stk3'\n    __metadata['token_symbol'] = 'Stk'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_stk005')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_stk005')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_stk005')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    __approvals[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_stk005')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __approvals[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __approvals[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __approvals[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_stk005')\ndef balance_of(address: str):\n    return __balances[address]\n"
            },
            {
                "key": "con_stk005.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk005.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        13,
                        55,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_stk005.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 1000000
            },
            {
                "key": "con_stk005.metadata:operator",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk005.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_stk005.metadata:token_name",
                "value": "stk3"
            },
            {
                "key": "con_stk005.metadata:token_symbol",
                "value": "Stk"
            },
            {
                "key": "con_stk005.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_stk1.__code__",
                "value": "total_supply = 1000000\n\n\n@__export('con_stk1')\ndef get_balance(owner: str) ->int:\n    \"\"\"Returns the balance of the owner\"\"\"\n    return client.get_variable(f'balance_{owner}')\n\n\n@__export('con_stk1')\ndef transfer(to: str, amount: int):\n    \"\"\"Transfers tokens from the caller to another address\"\"\"\n    from_address = ctx.caller\n    from_balance = client.get_variable(f'balance_{from_address}')\n    if from_balance < amount:\n        raise Exception('Insufficient balance')\n    client.set_variable(f'balance_{from_address}', from_balance - amount)\n    to_balance = client.get_variable(f'balance_{to}')\n    client.set_variable(f'balance_{to}', to_balance + amount)\n\n\n@__export('con_stk1')\ndef mint(to: str, amount: int):\n    \"\"\"Mints new tokens to the specified address\"\"\"\n    total_supply\n    total_supply += amount\n    balance = client.get_variable(f'balance_{to}')\n    client.set_variable(f'balance_{to}', balance + amount)\n"
            },
            {
                "key": "con_stk1.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        1,
                        16,
                        29,
                        50,
                        0
                    ]
                }
            },
            {
                "key": "con_stk2.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk2', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk2', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_stk2', name='balances')\n__metadata = Hash(contract='con_stk2', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'stk2'\n    __metadata['token_symbol'] = 'Stk'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n@__export('con_stk2')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_stk2')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_stk2')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_stk2')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_stk2')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_stk2.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        1,
                        16,
                        47,
                        28,
                        0
                    ]
                }
            },
            {
                "key": "con_stk2.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 999987
            },
            {
                "key": "con_stk2.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:'con_stake02'",
                "value": 1000
            },
            {
                "key": "con_stk2.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 6000
            },
            {
                "key": "con_stk2.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:5565f2b994c96776c16c796ed38aa63084ea688b492b27a24fc8a80920f4c0ec",
                "value": 20
            },
            {
                "key": "con_stk2.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_stake02",
                "value": 1000
            },
            {
                "key": "con_stk2.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_stake05",
                "value": 500
            },
            {
                "key": "con_stk2.balances:5565f2b994c96776c16c796ed38aa63084ea688b492b27a24fc8a80920f4c0ec",
                "value": 13
            },
            {
                "key": "con_stk2.metadata:operator",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk2.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_stk2.metadata:token_name",
                "value": "stk2"
            },
            {
                "key": "con_stk2.metadata:token_symbol",
                "value": "Stk"
            },
            {
                "key": "con_stk2.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_stk3.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk3', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk3', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_stk3', name='balances')\n__metadata = Hash(contract='con_stk3', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'stk3'\n    __metadata['token_symbol'] = 'Stk3'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n@__export('con_stk3')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_stk3')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_stk3')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_stk3')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_stk3')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_stk3.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        16,
                        19,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_stk3.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 1000000000
            },
            {
                "key": "con_stk3.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 50000
            },
            {
                "key": "con_stk3.metadata:operator",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk3.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_stk3.metadata:token_name",
                "value": "stk3"
            },
            {
                "key": "con_stk3.metadata:token_symbol",
                "value": "Stk3"
            },
            {
                "key": "con_stk3.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_stk5.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_stk5', name='balances')\n__approvals = Hash(default_value=0, contract='con_stk5', name='approvals')\n__metadata = Hash(contract='con_stk5', name='metadata')\n\n\ndef __construct():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'stk2'\n    __metadata['token_symbol'] = 'Stk'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_stk5')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_stk5')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_stk5')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    __approvals[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_stk5')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __approvals[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __approvals[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __approvals[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_stk5')\ndef balance_of(address: str):\n    return __balances[address]\n"
            },
            {
                "key": "con_stk5.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk5.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        13,
                        34,
                        24,
                        0
                    ]
                }
            },
            {
                "key": "con_stk5.approvals:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:5565f2b994c96776c16c796ed38aa63084ea688b492b27a24fc8a80920f4c0ec",
                "value": 1000
            },
            {
                "key": "con_stk6.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_stk6', name='balances')\n__approvals = Hash(default_value=0, contract='con_stk6', name='approvals')\n__metadata = Hash(contract='con_stk6', name='metadata')\n\n\ndef __construct():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'stk2'\n    __metadata['token_symbol'] = 'Stk'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_stk6')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_stk6')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_stk6')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot approve negative balances!'\n    __approvals[ctx.caller, to] = amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_stk6')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __approvals[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __approvals[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __approvals[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n\n\n@__export('con_stk6')\ndef balance_of(address: str):\n    return __balances[address]\n"
            },
            {
                "key": "con_stk6.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk6.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        13,
                        46,
                        13,
                        0
                    ]
                }
            },
            {
                "key": "con_stk7.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk7', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk7', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_stk7', name='balances')\n__metadata = Hash(contract='con_stk7', name='metadata')\n__permits = Hash(contract='con_stk7', name='permits')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk7', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk7', name='ApproveEvent')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'CON STK2'\n    __metadata['token_symbol'] = 'CSTK2'\n    __metadata['token_logo_url'] = 'https://example.com/token-logo.png'\n    __metadata['token_website'] = 'https://example.com'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_stk7')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata.'\n    __metadata[key] = value\n\n@__export('con_stk7')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send.'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_stk7')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_stk7')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_stk7')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_stk7.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk7.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        18,
                        32,
                        36,
                        0
                    ]
                }
            },
            {
                "key": "con_stk7.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 1000000
            },
            {
                "key": "con_stk7.metadata:operator",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk7.metadata:token_logo_url",
                "value": "https://example.com/token-logo.png"
            },
            {
                "key": "con_stk7.metadata:token_name",
                "value": "CON STK2"
            },
            {
                "key": "con_stk7.metadata:token_symbol",
                "value": "CSTK2"
            },
            {
                "key": "con_stk7.metadata:token_website",
                "value": "https://example.com"
            },
            {
                "key": "con_stk8.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk8', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk8', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_stk8', name='balances')\n__metadata = Hash(contract='con_stk8', name='metadata')\n__permits = Hash(contract='con_stk8', name='permits')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk8', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_stk8', name='ApproveEvent')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'CON STK3'\n    __metadata['token_symbol'] = 'CSTK3'\n    __metadata['token_logo_url'] = 'https://example.com/token-logo.png'\n    __metadata['token_website'] = 'https://example.com'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_stk8')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata.'\n    __metadata[key] = value\n\n@__export('con_stk8')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send.'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_stk8')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_stk8')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_stk8')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_stk8.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk8.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        8,
                        18,
                        37,
                        33,
                        0
                    ]
                }
            },
            {
                "key": "con_stk8.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 1000000
            },
            {
                "key": "con_stk8.metadata:operator",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_stk8.metadata:token_logo_url",
                "value": "https://example.com/token-logo.png"
            },
            {
                "key": "con_stk8.metadata:token_name",
                "value": "CON STK3"
            },
            {
                "key": "con_stk8.metadata:token_symbol",
                "value": "CSTK3"
            },
            {
                "key": "con_stk8.metadata:token_website",
                "value": "https://example.com"
            },
            {
                "key": "con_stresstest.__code__",
                "value": "__h = Hash(contract='con_stresstest', name='h')\n\n\n@__export('con_stresstest')\ndef test(i: int):\n    for x in range(0, i):\n        __h[x]\n"
            },
            {
                "key": "con_stresstest.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_stresstest.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        15,
                        18,
                        23,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_swap2.__code__",
                "value": "__owner = Variable(contract='con_swap2', name='owner')\n__reserve0 = Variable(contract='con_swap2', name='reserve0')\n__reserve1 = Variable(contract='con_swap2', name='reserve1')\n__price = Variable(contract='con_swap2', name='price')\n__commission = Variable(contract='con_swap2', name='commission')\n__protocol_fee_rate = Variable(contract='con_swap2', name='protocol_fee_rate')\n__protocol_fee0 = Variable(contract='con_swap2', name='protocol_fee0')\n__protocol_fee1 = Variable(contract='con_swap2', name='protocol_fee1')\n__lower_range = Variable(contract='con_swap2', name='lower_range')\n__upper_range = Variable(contract='con_swap2', name='upper_range')\n__global_liquidity = Variable(contract='con_swap2', name='global_liquidity')\n__liquidity_positions = Hash(default_value=0, contract='con_swap2', name=\n    'liquidity_positions')\n__SwapEvent = LogEvent(event='Swap', params={'swapper': {'type': str, 'idx':\n    True}, 'input_token': {'type': str, 'idx': True}, 'input_amount': {\n    'type': int}, 'output_amount': {'type': int}, 'new_price': {'type':\n    float}}, contract='con_swap2', name='SwapEvent')\n__MintEvent = LogEvent(event='Mint', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap2', name='MintEvent')\n__BurnEvent = LogEvent(event='Burn', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap2', name='BurnEvent')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __reserve0.set(0)\n    __reserve1.set(0)\n    __price.set(0)\n    __commission.set(0)\n    __protocol_fee_rate.set(0)\n    __protocol_fee0.set(0)\n    __protocol_fee1.set(0)\n    __lower_range.set(0)\n    __upper_range.set(0)\n    __global_liquidity.set(0)\n\n\n@__export('con_swap2')\ndef mint(token0_amount: int, token1_amount: int):\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    current_price = __price.get()\n    if r0 > 0:\n        expected_token1 = int(token0_amount * current_price)\n        deviation = abs(token1_amount - expected_token1)\n        assert deviation <= expected_token1 // 100, 'Dep\u00f3sito fuera de la proporci\u00f3n requerida'\n    elif token0_amount > 0:\n        __price.set(token1_amount / token0_amount)\n    __reserve0.set(r0 + token0_amount)\n    __reserve1.set(r1 + token1_amount)\n    current_liq = __global_liquidity.get()\n    __global_liquidity.set(current_liq + token0_amount)\n    __liquidity_positions[ctx.caller] = __liquidity_positions[ctx.caller\n        ] + token0_amount\n    __MintEvent({'provider': ctx.caller, 'token0_amount': token0_amount,\n        'token1_amount': token1_amount})\n"
            },
            {
                "key": "con_swap2.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        23,
                        21,
                        44,
                        6,
                        0
                    ]
                }
            },
            {
                "key": "con_swap2.commission",
                "value": 0
            },
            {
                "key": "con_swap2.global_liquidity",
                "value": 0
            },
            {
                "key": "con_swap2.lower_range",
                "value": 0
            },
            {
                "key": "con_swap2.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap2.price",
                "value": 0
            },
            {
                "key": "con_swap2.protocol_fee0",
                "value": 0
            },
            {
                "key": "con_swap2.protocol_fee1",
                "value": 0
            },
            {
                "key": "con_swap2.protocol_fee_rate",
                "value": 0
            },
            {
                "key": "con_swap2.reserve0",
                "value": 0
            },
            {
                "key": "con_swap2.reserve1",
                "value": 0
            },
            {
                "key": "con_swap2.upper_range",
                "value": 0
            },
            {
                "key": "con_swap3.__code__",
                "value": "__owner = Variable(contract='con_swap3', name='owner')\n__reserve0 = Variable(contract='con_swap3', name='reserve0')\n__reserve1 = Variable(contract='con_swap3', name='reserve1')\n__price = Variable(contract='con_swap3', name='price')\n__commission = Variable(contract='con_swap3', name='commission')\n__protocol_fee_rate = Variable(contract='con_swap3', name='protocol_fee_rate')\n__protocol_fee0 = Variable(contract='con_swap3', name='protocol_fee0')\n__protocol_fee1 = Variable(contract='con_swap3', name='protocol_fee1')\n__lower_range = Variable(contract='con_swap3', name='lower_range')\n__upper_range = Variable(contract='con_swap3', name='upper_range')\n__global_liquidity = Variable(contract='con_swap3', name='global_liquidity')\n__liquidity_positions = Hash(default_value=0, contract='con_swap3', name=\n    'liquidity_positions')\n__SwapEvent = LogEvent(event='Swap', params={'swapper': {'type': str, 'idx':\n    True}, 'input_token': {'type': str, 'idx': True}, 'input_amount': {\n    'type': int}, 'output_amount': {'type': int}, 'new_price': {'type':\n    float}}, contract='con_swap3', name='SwapEvent')\n__MintEvent = LogEvent(event='Mint', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap3', name='MintEvent')\n__BurnEvent = LogEvent(event='Burn', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap3', name='BurnEvent')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __reserve0.set(0)\n    __reserve1.set(0)\n    __price.set(0)\n    __commission.set(0)\n    __protocol_fee_rate.set(0)\n    __protocol_fee0.set(0)\n    __protocol_fee1.set(0)\n    __lower_range.set(0)\n    __upper_range.set(0)\n    __global_liquidity.set(0)\n\n\n@__export('con_swap3')\ndef mint(token0_amount: int, token1_amount: int):\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    current_price = __price.get()\n    if r0 > 0:\n        expected_token1 = int(token0_amount * current_price)\n        deviation = abs(token1_amount - expected_token1)\n        assert deviation <= expected_token1 // 100, 'Dep\u00f3sito fuera de la proporci\u00f3n requerida'\n    elif token0_amount > 0:\n        __price.set(token1_amount / token0_amount)\n    __reserve0.set(r0 + token0_amount)\n    __reserve1.set(r1 + token1_amount)\n    current_liq = __global_liquidity.get()\n    __global_liquidity.set(current_liq + token0_amount)\n    __liquidity_positions[ctx.caller] = __liquidity_positions[ctx.caller\n        ] + token0_amount\n    __MintEvent({'provider': ctx.caller, 'token0_amount': token0_amount,\n        'token1_amount': token1_amount})\n\n\n@__export('con_swap3')\ndef burn(liquidity_amount: int) ->dict:\n    prov_liq = __liquidity_positions[ctx.caller]\n    assert liquidity_amount <= prov_liq, 'No posee esa liquidez'\n    total_liq = __global_liquidity.get()\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    share = liquidity_amount / total_liq\n    token0_out = int(r0 * share)\n    token1_out = int(r1 * share)\n    __reserve0.set(r0 - token0_out)\n    __reserve1.set(r1 - token1_out)\n    __global_liquidity.set(total_liq - liquidity_amount)\n    __liquidity_positions[ctx.caller] = prov_liq - liquidity_amount\n    __BurnEvent({'provider': ctx.caller, 'token0_amount': token0_out,\n        'token1_amount': token1_out})\n    return {'token0_out': token0_out, 'token1_out': token1_out}\n"
            },
            {
                "key": "con_swap3.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        23,
                        21,
                        45,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_swap3.commission",
                "value": 0
            },
            {
                "key": "con_swap3.global_liquidity",
                "value": 0
            },
            {
                "key": "con_swap3.lower_range",
                "value": 0
            },
            {
                "key": "con_swap3.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap3.price",
                "value": 0
            },
            {
                "key": "con_swap3.protocol_fee0",
                "value": 0
            },
            {
                "key": "con_swap3.protocol_fee1",
                "value": 0
            },
            {
                "key": "con_swap3.protocol_fee_rate",
                "value": 0
            },
            {
                "key": "con_swap3.reserve0",
                "value": 0
            },
            {
                "key": "con_swap3.reserve1",
                "value": 0
            },
            {
                "key": "con_swap3.upper_range",
                "value": 0
            },
            {
                "key": "con_swap4.__code__",
                "value": "__owner = Variable(contract='con_swap4', name='owner')\n__reserve0 = Variable(contract='con_swap4', name='reserve0')\n__reserve1 = Variable(contract='con_swap4', name='reserve1')\n__price = Variable(contract='con_swap4', name='price')\n__commission = Variable(contract='con_swap4', name='commission')\n__protocol_fee_rate = Variable(contract='con_swap4', name='protocol_fee_rate')\n__protocol_fee0 = Variable(contract='con_swap4', name='protocol_fee0')\n__protocol_fee1 = Variable(contract='con_swap4', name='protocol_fee1')\n__lower_range = Variable(contract='con_swap4', name='lower_range')\n__upper_range = Variable(contract='con_swap4', name='upper_range')\n__global_liquidity = Variable(contract='con_swap4', name='global_liquidity')\n__liquidity_positions = Hash(default_value=0, contract='con_swap4', name=\n    'liquidity_positions')\n__SwapEvent = LogEvent(event='Swap', params={'swapper': {'type': str, 'idx':\n    True}, 'input_token': {'type': str, 'idx': True}, 'input_amount': {\n    'type': int}, 'output_amount': {'type': int}, 'new_price': {'type':\n    float}}, contract='con_swap4', name='SwapEvent')\n__MintEvent = LogEvent(event='Mint', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap4', name='MintEvent')\n__BurnEvent = LogEvent(event='Burn', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap4', name='BurnEvent')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __reserve0.set(0)\n    __reserve1.set(0)\n    __price.set(0)\n    __commission.set(0)\n    __protocol_fee_rate.set(0)\n    __protocol_fee0.set(0)\n    __protocol_fee1.set(0)\n    __lower_range.set(0)\n    __upper_range.set(0)\n    __global_liquidity.set(0)\n\n\n@__export('con_swap4')\ndef mint(token0_amount: int, token1_amount: int):\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    current_price = __price.get()\n    if r0 > 0:\n        expected_token1 = int(token0_amount * current_price)\n        deviation = abs(token1_amount - expected_token1)\n        assert deviation <= expected_token1 // 100, 'Dep\u00f3sito fuera de la proporci\u00f3n requerida'\n    elif token0_amount > 0:\n        __price.set(token1_amount / token0_amount)\n    __reserve0.set(r0 + token0_amount)\n    __reserve1.set(r1 + token1_amount)\n    current_liq = __global_liquidity.get()\n    __global_liquidity.set(current_liq + token0_amount)\n    __liquidity_positions[ctx.caller] = __liquidity_positions[ctx.caller\n        ] + token0_amount\n    __MintEvent({'provider': ctx.caller, 'token0_amount': token0_amount,\n        'token1_amount': token1_amount})\n\n\n@__export('con_swap4')\ndef burn(liquidity_amount: int) ->dict:\n    prov_liq = __liquidity_positions[ctx.caller]\n    assert liquidity_amount <= prov_liq, 'No posee esa liquidez'\n    total_liq = __global_liquidity.get()\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    share = liquidity_amount / total_liq\n    token0_out = int(r0 * share)\n    token1_out = int(r1 * share)\n    __reserve0.set(r0 - token0_out)\n    __reserve1.set(r1 - token1_out)\n    __global_liquidity.set(total_liq - liquidity_amount)\n    __liquidity_positions[ctx.caller] = prov_liq - liquidity_amount\n    __BurnEvent({'provider': ctx.caller, 'token0_amount': token0_out,\n        'token1_amount': token1_out})\n    return {'token0_out': token0_out, 'token1_out': token1_out}\n\n\n@__export('con_swap4')\ndef swap(input_token: str, input_amount: int) ->int:\n    assert input_token == 'token0' or input_token == 'token1', 'Token inv\u00e1lido'\n    assert input_amount > 0, 'El monto debe ser mayor a 0'\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    k = r0 * r1\n    comm = __commission.get()\n    fee_amount = int(input_amount * comm)\n    net_input = input_amount - fee_amount\n    proto_fee = int(fee_amount * __protocol_fee_rate.get())\n    output_amount = 0\n    new_r0 = r0\n    new_r1 = r1\n    if input_token == 'token0':\n        new_r0 = r0 + net_input\n        new_r1 = int(k / new_r0)\n        output_amount = r1 - new_r1\n        __protocol_fee0.set(__protocol_fee0.get() + proto_fee)\n    else:\n        new_r1 = r1 + net_input\n        new_r0 = int(k / new_r1)\n        output_amount = r0 - new_r0\n        __protocol_fee1.set(__protocol_fee1.get() + proto_fee)\n    new_price = new_r1 / new_r0 if new_r0 > 0 else 0\n    assert new_price >= __lower_range.get() and new_price <= __upper_range.get(\n        ), 'Precio fuera del rango permitido'\n    __reserve0.set(new_r0)\n    __reserve1.set(new_r1)\n    __price.set(new_price)\n    __SwapEvent({'swapper': ctx.caller, 'input_token': input_token,\n        'input_amount': input_amount, 'output_amount': output_amount,\n        'new_price': new_price})\n    return output_amount\n"
            },
            {
                "key": "con_swap4.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap4.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        23,
                        21,
                        45,
                        22,
                        0
                    ]
                }
            },
            {
                "key": "con_swap4.commission",
                "value": 0
            },
            {
                "key": "con_swap4.global_liquidity",
                "value": 0
            },
            {
                "key": "con_swap4.lower_range",
                "value": 0
            },
            {
                "key": "con_swap4.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap4.price",
                "value": 0
            },
            {
                "key": "con_swap4.protocol_fee0",
                "value": 0
            },
            {
                "key": "con_swap4.protocol_fee1",
                "value": 0
            },
            {
                "key": "con_swap4.protocol_fee_rate",
                "value": 0
            },
            {
                "key": "con_swap4.reserve0",
                "value": 0
            },
            {
                "key": "con_swap4.reserve1",
                "value": 0
            },
            {
                "key": "con_swap4.upper_range",
                "value": 0
            },
            {
                "key": "con_swap5.__code__",
                "value": "__owner = Variable(contract='con_swap5', name='owner')\n__reserve0 = Variable(contract='con_swap5', name='reserve0')\n__reserve1 = Variable(contract='con_swap5', name='reserve1')\n__price = Variable(contract='con_swap5', name='price')\n__commission = Variable(contract='con_swap5', name='commission')\n__protocol_fee_rate = Variable(contract='con_swap5', name='protocol_fee_rate')\n__protocol_fee0 = Variable(contract='con_swap5', name='protocol_fee0')\n__protocol_fee1 = Variable(contract='con_swap5', name='protocol_fee1')\n__lower_range = Variable(contract='con_swap5', name='lower_range')\n__upper_range = Variable(contract='con_swap5', name='upper_range')\n__global_liquidity = Variable(contract='con_swap5', name='global_liquidity')\n__liquidity_positions = Hash(default_value=0, contract='con_swap5', name=\n    'liquidity_positions')\n__SwapEvent = LogEvent(event='Swap', params={'swapper': {'type': str, 'idx':\n    True}, 'input_token': {'type': str, 'idx': True}, 'input_amount': {\n    'type': int}, 'output_amount': {'type': int}, 'new_price': {'type':\n    float}}, contract='con_swap5', name='SwapEvent')\n__MintEvent = LogEvent(event='Mint', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap5', name='MintEvent')\n__BurnEvent = LogEvent(event='Burn', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap5', name='BurnEvent')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __reserve0.set(0)\n    __reserve1.set(0)\n    __price.set(0)\n    __commission.set(0)\n    __protocol_fee_rate.set(0)\n    __protocol_fee0.set(0)\n    __protocol_fee1.set(0)\n    __lower_range.set(0)\n    __upper_range.set(0)\n    __global_liquidity.set(0)\n\n\n@__export('con_swap5')\ndef mint(token0_amount: int, token1_amount: int):\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    current_price = __price.get()\n    if r0 > 0:\n        expected_token1 = int(token0_amount * current_price)\n        deviation = abs(token1_amount - expected_token1)\n        assert deviation <= expected_token1 // 100, 'Dep\u00f3sito fuera de la proporci\u00f3n requerida'\n    elif token0_amount > 0:\n        __price.set(token1_amount / token0_amount)\n    __reserve0.set(r0 + token0_amount)\n    __reserve1.set(r1 + token1_amount)\n    current_liq = __global_liquidity.get()\n    __global_liquidity.set(current_liq + token0_amount)\n    __liquidity_positions[ctx.caller] = __liquidity_positions[ctx.caller\n        ] + token0_amount\n    __MintEvent({'provider': ctx.caller, 'token0_amount': token0_amount,\n        'token1_amount': token1_amount})\n\n\n@__export('con_swap5')\ndef burn(liquidity_amount: int) ->dict:\n    prov_liq = __liquidity_positions[ctx.caller]\n    assert liquidity_amount <= prov_liq, 'No posee esa liquidez'\n    total_liq = __global_liquidity.get()\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    share = liquidity_amount / total_liq\n    token0_out = int(r0 * share)\n    token1_out = int(r1 * share)\n    __reserve0.set(r0 - token0_out)\n    __reserve1.set(r1 - token1_out)\n    __global_liquidity.set(total_liq - liquidity_amount)\n    __liquidity_positions[ctx.caller] = prov_liq - liquidity_amount\n    __BurnEvent({'provider': ctx.caller, 'token0_amount': token0_out,\n        'token1_amount': token1_out})\n    return {'token0_out': token0_out, 'token1_out': token1_out}\n\n\n@__export('con_swap5')\ndef swap(input_token: str, input_amount: int) ->int:\n    assert input_token == 'token0' or input_token == 'token1', 'Token inv\u00e1lido'\n    assert input_amount > 0, 'El monto debe ser mayor a 0'\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    k = r0 * r1\n    comm = __commission.get()\n    fee_amount = int(input_amount * comm)\n    net_input = input_amount - fee_amount\n    proto_fee = int(fee_amount * __protocol_fee_rate.get())\n    output_amount = 0\n    new_r0 = r0\n    new_r1 = r1\n    if input_token == 'token0':\n        new_r0 = r0 + net_input\n        new_r1 = int(k / new_r0)\n        output_amount = r1 - new_r1\n        __protocol_fee0.set(__protocol_fee0.get() + proto_fee)\n    else:\n        new_r1 = r1 + net_input\n        new_r0 = int(k / new_r1)\n        output_amount = r0 - new_r0\n        __protocol_fee1.set(__protocol_fee1.get() + proto_fee)\n    new_price = new_r1 / new_r0 if new_r0 > 0 else 0\n    assert new_price >= __lower_range.get() and new_price <= __upper_range.get(\n        ), 'Precio fuera del rango permitido'\n    __reserve0.set(new_r0)\n    __reserve1.set(new_r1)\n    __price.set(new_price)\n    __SwapEvent({'swapper': ctx.caller, 'input_token': input_token,\n        'input_amount': input_amount, 'output_amount': output_amount,\n        'new_price': new_price})\n    return output_amount\n"
            },
            {
                "key": "con_swap5.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap5.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        23,
                        21,
                        47,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_swap5.commission",
                "value": 0
            },
            {
                "key": "con_swap5.global_liquidity",
                "value": 0
            },
            {
                "key": "con_swap5.lower_range",
                "value": 0
            },
            {
                "key": "con_swap5.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap5.price",
                "value": 0
            },
            {
                "key": "con_swap5.protocol_fee0",
                "value": 0
            },
            {
                "key": "con_swap5.protocol_fee1",
                "value": 0
            },
            {
                "key": "con_swap5.protocol_fee_rate",
                "value": 0
            },
            {
                "key": "con_swap5.reserve0",
                "value": 0
            },
            {
                "key": "con_swap5.reserve1",
                "value": 0
            },
            {
                "key": "con_swap5.upper_range",
                "value": 0
            },
            {
                "key": "con_swap6.__code__",
                "value": "__owner = Variable(contract='con_swap6', name='owner')\n__token0_address = Variable(contract='con_swap6', name='token0_address')\n__token1_address = Variable(contract='con_swap6', name='token1_address')\n__reserve0 = Variable(contract='con_swap6', name='reserve0')\n__reserve1 = Variable(contract='con_swap6', name='reserve1')\n__price = Variable(contract='con_swap6', name='price')\n__commission = Variable(contract='con_swap6', name='commission')\n__protocol_fee_rate = Variable(contract='con_swap6', name='protocol_fee_rate')\n__protocol_fee0 = Variable(contract='con_swap6', name='protocol_fee0')\n__protocol_fee1 = Variable(contract='con_swap6', name='protocol_fee1')\n__lower_range = Variable(contract='con_swap6', name='lower_range')\n__upper_range = Variable(contract='con_swap6', name='upper_range')\n__global_liquidity = Variable(contract='con_swap6', name='global_liquidity')\n__liquidity_positions = Hash(default_value=0, contract='con_swap6', name=\n    'liquidity_positions')\n__SwapEvent = LogEvent(event='Swap', params={'swapper': {'type': str, 'idx':\n    True}, 'input_token': {'type': str, 'idx': True}, 'input_amount': {\n    'type': int}, 'output_amount': {'type': int}, 'new_price': {'type':\n    float}}, contract='con_swap6', name='SwapEvent')\n__MintEvent = LogEvent(event='Mint', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap6', name='MintEvent')\n__BurnEvent = LogEvent(event='Burn', params={'provider': {'type': str,\n    'idx': True}, 'token0_amount': {'type': int}, 'token1_amount': {'type':\n    int}}, contract='con_swap6', name='BurnEvent')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __token0_address.set('currency')\n    __token1_address.set('con_te')\n    __reserve0.set(0)\n    __reserve1.set(0)\n    __price.set(0)\n    __commission.set(0)\n    __protocol_fee_rate.set(0)\n    __protocol_fee0.set(0)\n    __protocol_fee1.set(0)\n    __lower_range.set(0)\n    __upper_range.set(0)\n    __global_liquidity.set(0)\n\n\n@__export('con_swap6')\ndef mint(token0_amount: int, token1_amount: int):\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    current_price = __price.get()\n    if r0 > 0:\n        expected_token1 = int(token0_amount * current_price)\n        deviation = abs(token1_amount - expected_token1)\n        assert deviation <= expected_token1 // 100, 'Dep\u00f3sito fuera de la proporci\u00f3n requerida'\n    elif token0_amount > 0:\n        __price.set(token1_amount / token0_amount)\n    __reserve0.set(r0 + token0_amount)\n    __reserve1.set(r1 + token1_amount)\n    current_liq = __global_liquidity.get()\n    __global_liquidity.set(current_liq + token0_amount)\n    __liquidity_positions[ctx.caller] = __liquidity_positions[ctx.caller\n        ] + token0_amount\n    __MintEvent({'provider': ctx.caller, 'token0_amount': token0_amount,\n        'token1_amount': token1_amount})\n\n\n@__export('con_swap6')\ndef burn(liquidity_amount: int) ->dict:\n    prov_liq = __liquidity_positions[ctx.caller]\n    assert liquidity_amount <= prov_liq, 'No posee esa liquidez'\n    total_liq = __global_liquidity.get()\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    share = liquidity_amount / total_liq\n    token0_out = int(r0 * share)\n    token1_out = int(r1 * share)\n    __reserve0.set(r0 - token0_out)\n    __reserve1.set(r1 - token1_out)\n    __global_liquidity.set(total_liq - liquidity_amount)\n    __liquidity_positions[ctx.caller] = prov_liq - liquidity_amount\n    __BurnEvent({'provider': ctx.caller, 'token0_amount': token0_out,\n        'token1_amount': token1_out})\n    return {'token0_out': token0_out, 'token1_out': token1_out}\n\n\n@__export('con_swap6')\ndef swap(input_token: str, input_amount: int) ->int:\n    assert input_token == 'token0' or input_token == 'token1', 'Token inv\u00e1lido'\n    assert input_amount > 0, 'El monto debe ser mayor a 0'\n    r0 = __reserve0.get()\n    r1 = __reserve1.get()\n    k = r0 * r1\n    comm = __commission.get()\n    fee_amount = int(input_amount * comm)\n    net_input = input_amount - fee_amount\n    proto_fee = int(fee_amount * __protocol_fee_rate.get())\n    output_amount = 0\n    new_r0 = r0\n    new_r1 = r1\n    if input_token == 'token0':\n        new_r0 = r0 + net_input\n        new_r1 = int(k / new_r0)\n        output_amount = r1 - new_r1\n        __protocol_fee0.set(__protocol_fee0.get() + proto_fee)\n    else:\n        new_r1 = r1 + net_input\n        new_r0 = int(k / new_r1)\n        output_amount = r0 - new_r0\n        __protocol_fee1.set(__protocol_fee1.get() + proto_fee)\n    new_price = new_r1 / new_r0 if new_r0 > 0 else 0\n    assert new_price >= __lower_range.get() and new_price <= __upper_range.get(\n        ), 'Precio fuera del rango permitido'\n    __reserve0.set(new_r0)\n    __reserve1.set(new_r1)\n    __price.set(new_price)\n    __SwapEvent({'swapper': ctx.caller, 'input_token': input_token,\n        'input_amount': input_amount, 'output_amount': output_amount,\n        'new_price': new_price})\n    return output_amount\n"
            },
            {
                "key": "con_swap6.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap6.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        23,
                        21,
                        56,
                        12,
                        0
                    ]
                }
            },
            {
                "key": "con_swap6.commission",
                "value": 0
            },
            {
                "key": "con_swap6.global_liquidity",
                "value": 0
            },
            {
                "key": "con_swap6.lower_range",
                "value": 0
            },
            {
                "key": "con_swap6.owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_swap6.price",
                "value": 0
            },
            {
                "key": "con_swap6.protocol_fee0",
                "value": 0
            },
            {
                "key": "con_swap6.protocol_fee1",
                "value": 0
            },
            {
                "key": "con_swap6.protocol_fee_rate",
                "value": 0
            },
            {
                "key": "con_swap6.reserve0",
                "value": 0
            },
            {
                "key": "con_swap6.reserve1",
                "value": 0
            },
            {
                "key": "con_swap6.token0_address",
                "value": "currency"
            },
            {
                "key": "con_swap6.token1_address",
                "value": "con_te"
            },
            {
                "key": "con_swap6.upper_range",
                "value": 0
            },
            {
                "key": "con_swap_one.LPBalances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "4.5E+2"
                }
            },
            {
                "key": "con_swap_one.LPUsers",
                "value": [
                    "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
                ]
            },
            {
                "key": "con_swap_one.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stakeone",
                    "con_staketwo"
                ]
            },
            {
                "key": "con_swap_one.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swap_one.LiquidityPools:token_a",
                "value": {
                    "__fixed__": "448.485709089898033970432623707148"
                }
            },
            {
                "key": "con_swap_one.LiquidityPools:token_b",
                "value": {
                    "__fixed__": "451.519403842161876545073691758978"
                }
            },
            {
                "key": "con_swap_one.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_swap_one.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_swap_one', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_swap_one', name='LPBalances'\n    )\n__SwapFeePct = Variable(contract='con_swap_one', name='SwapFeePct')\n__LPUsers = Variable(contract='con_swap_one', name='LPUsers')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stakeone',\n        'con_staketwo']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n    __LPUsers.set([])\n\n\n@__export('con_swap_one')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    balances_of_token_a = importlib.import_module(token_contract_a)\n    balances_of_token_b = importlib.import_module(token_contract_b)\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert balances_of_token_a.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert balances_of_token_b.balance_of(ctx.caller\n        ) >= token_b_amount, 'Insufficient Funds for Token B'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    balances_of_token_a.transfer_from(amount=token_a_amount, to=ctx.this,\n        main_account=ctx.signer)\n    balances_of_token_b.transfer_from(amount=token_b_amount, to=ctx.this,\n        main_account=ctx.signer)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    if user not in __LPUsers.get():\n        __LPUsers.set(__LPUsers.get() + [user])\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_swap_one')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    input__token_contract = importlib.import_module(input_contract)\n    output__token_contract = importlib.import_module(output_contract)\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert input__token_contract.balance_of(ctx.caller\n        ) >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    input__token_contract.transfer_from(amount=input_amount, to=ctx.this,\n        main_account=ctx.signer)\n    output__token_contract.transfer(amount=output_amount, to=ctx.caller)\n\n\n@__export('con_swap_one')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    total_lp_tokens = 0\n    for user in __LPUsers.get():\n        total_lp_tokens += __LPBalances[user]\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    if __LPBalances[user] == 0:\n        updated_users = [u for u in __LPUsers.get() if u != user]\n        __LPUsers.set(updated_users)\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_swap_one')\ndef get_lp_balance(account: str):\n    return __LPBalances[account]\n"
            },
            {
                "key": "con_swap_one.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swap_one.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        14,
                        11,
                        12,
                        6,
                        0
                    ]
                }
            },
            {
                "key": "con_swap_stk.LPBalances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "5E+2"
                }
            },
            {
                "key": "con_swap_stk.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stakeone",
                    "con_staketwo"
                ]
            },
            {
                "key": "con_swap_stk.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swap_stk.LiquidityPools:token_a",
                "value": {
                    "__fixed__": "498.317454544331148856036248563497"
                }
            },
            {
                "key": "con_swap_stk.LiquidityPools:token_b",
                "value": {
                    "__fixed__": "501.688226491290973938970768621086"
                }
            },
            {
                "key": "con_swap_stk.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_swap_stk.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_swap_stk', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_swap_stk', name='LPBalances'\n    )\n__SwapFeePct = Variable(contract='con_swap_stk', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stakeone',\n        'con_staketwo']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_swap_stk')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    balances_of_token_a = importlib.import_module(token_contract_a)\n    balances_of_token_b = importlib.import_module(token_contract_b)\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert balances_of_token_a.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert balances_of_token_b.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    balances_of_token_a.transfer_from(amount=token_a_amount, to=ctx.this,\n        main_account=ctx.signer)\n    balances_of_token_b.transfer_from(amount=token_b_amount, to=ctx.this,\n        main_account=ctx.signer)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_swap_stk')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    input__token_contract = importlib.import_module(input_contract)\n    output__token_contract = importlib.import_module(output_contract)\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert input__token_contract.balance_of(ctx.caller\n        ) >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    input__token_contract.transfer_from(amount=input_amount, to=ctx.this,\n        main_account=ctx.signer)\n    output__token_contract.transfer(amount=output_amount, to=ctx.caller)\n\n\n@__export('con_swap_stk')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_swap_stk')\ndef get_lp_balance(account: str):\n    return __LPBalances[account]\n"
            },
            {
                "key": "con_swap_stk.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swap_stk.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        14,
                        11,
                        3,
                        47,
                        0
                    ]
                }
            },
            {
                "key": "con_swapstk.LPBalances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "2E+2"
                }
            },
            {
                "key": "con_swapstk.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stakeone",
                    "con_staketwo"
                ]
            },
            {
                "key": "con_swapstk.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swapstk.LiquidityPools:token_a",
                "value": 200
            },
            {
                "key": "con_swapstk.LiquidityPools:token_b",
                "value": 200
            },
            {
                "key": "con_swapstk.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_swapstk.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_swapstk', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_swapstk', name='LPBalances')\n__SwapFeePct = Variable(contract='con_swapstk', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stakeone',\n        'con_staketwo']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_swapstk')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    balances_of_token_a = importlib.import_module(token_contract_a)\n    balances_of_token_b = importlib.import_module(token_contract_b)\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert balances_of_token_a.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert balances_of_token_b.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    balances_of_token_a.transfer_from(amount=token_a_amount, to=ctx.this,\n        main_account=ctx.signer)\n    balances_of_token_a.transfer_from(amount=token_b_amount, to=ctx.this,\n        main_account=ctx.signer)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_swapstk')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    input__token_contract = importlib.import_module(input_contract)\n    output__token_contract = importlib.import_module(output_contract)\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert input__token_contract.balance_of(ctx.caller\n        ) >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    input__token_contract.transfer_from(amount=input_amount, to=ctx.this,\n        main_account=ctx.signer)\n    output__token_contract.transfer(to=ctx.caller, amount=output_amount)\n\n\n@__export('con_swapstk')\ndef get_lp_balance(account: str):\n    return __LPBalances[account]\n"
            },
            {
                "key": "con_swapstk.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swapstk.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        11,
                        13,
                        36,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_swapstkone.LPBalances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "5E+2"
                }
            },
            {
                "key": "con_swapstkone.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stakeone",
                    "con_staketwo"
                ]
            },
            {
                "key": "con_swapstkone.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swapstkone.LiquidityPools:token_a",
                "value": 500
            },
            {
                "key": "con_swapstkone.LiquidityPools:token_b",
                "value": 500
            },
            {
                "key": "con_swapstkone.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_swapstkone.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_swapstkone', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_swapstkone', name=\n    'LPBalances')\n__SwapFeePct = Variable(contract='con_swapstkone', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stakeone',\n        'con_staketwo']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_swapstkone')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    balances_of_token_a = importlib.import_module(token_contract_a)\n    balances_of_token_b = importlib.import_module(token_contract_b)\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert balances_of_token_a.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert balances_of_token_b.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    balances_of_token_a.transfer_from(amount=token_a_amount, to=ctx.this,\n        main_account=ctx.signer)\n    balances_of_token_a.transfer_from(amount=token_b_amount, to=ctx.this,\n        main_account=ctx.signer)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_swapstkone')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    input__token_contract = importlib.import_module(input_contract)\n    output__token_contract = importlib.import_module(output_contract)\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert input__token_contract.balance_of(ctx.caller\n        ) >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    input__token_contract.transfer_from(amount=input_amount, to=ctx.this,\n        main_account=ctx.signer)\n    output__token_contract.transfer(amount=output_amount, to=ctx.caller)\n\n\n@__export('con_swapstkone')\ndef get_lp_balance(account: str):\n    return __LPBalances[account]\n"
            },
            {
                "key": "con_swapstkone.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swapstkone.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        11,
                        18,
                        35,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_swapstkthree.LPBalances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "5E+2"
                }
            },
            {
                "key": "con_swapstkthree.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stakeone",
                    "con_staketwo"
                ]
            },
            {
                "key": "con_swapstkthree.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swapstkthree.LiquidityPools:token_a",
                "value": 500
            },
            {
                "key": "con_swapstkthree.LiquidityPools:token_b",
                "value": 500
            },
            {
                "key": "con_swapstkthree.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_swapstkthree.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_swapstkthree', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_swapstkthree', name=\n    'LPBalances')\n__SwapFeePct = Variable(contract='con_swapstkthree', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stakeone',\n        'con_staketwo']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_swapstkthree')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    balances_of_token_a = importlib.import_module(token_contract_a)\n    balances_of_token_b = importlib.import_module(token_contract_b)\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert balances_of_token_a.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert balances_of_token_b.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    balances_of_token_a.transfer_from(amount=token_a_amount, to=ctx.this,\n        main_account=ctx.signer)\n    balances_of_token_a.transfer_from(amount=token_b_amount, to=ctx.this,\n        main_account=ctx.signer)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_swapstkthree')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    input__token_contract = importlib.import_module(input_contract)\n    output__token_contract = importlib.import_module(output_contract)\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert input__token_contract.balance_of(ctx.caller\n        ) >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    input__token_contract.transfer_from(amount=input_amount, to=ctx.this,\n        main_account=ctx.signer)\n    output__token_contract.transfer(amount=output_amount, to=ctx.caller)\n\n\n@__export('con_swapstkthree')\ndef removeLiquidity(lp_tokens: float):\n    assert lp_tokens > 0, 'LP token amount must be positive.'\n    user = ctx.caller\n    user_lp_balance = __LPBalances[user]\n    assert lp_tokens <= user_lp_balance, 'Insufficient LP balance.'\n    token_a_reserve = __LiquidityPools['token_a']\n    token_b_reserve = __LiquidityPools['token_b']\n    total_lp_tokens = sum(__LPBalances.values())\n    token_a_share = lp_tokens / total_lp_tokens * token_a_reserve\n    token_b_share = lp_tokens / total_lp_tokens * token_b_reserve\n    __LiquidityPools['token_a'] -= token_a_share\n    __LiquidityPools['token_b'] -= token_b_share\n    __LPBalances[user] -= lp_tokens\n    token_a_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][0])\n    token_b_contract = importlib.import_module(__LiquidityPools[\n        'allowed_token_contracts'][1])\n    token_a_contract.transfer(to=user, amount=token_a_share)\n    token_b_contract.transfer(to=user, amount=token_b_share)\n\n\n@__export('con_swapstkthree')\ndef get_lp_balance(account: str):\n    return __LPBalances[account]\n"
            },
            {
                "key": "con_swapstkthree.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swapstkthree.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        13,
                        23,
                        7,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_swapstktwo.LPBalances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "5E+2"
                }
            },
            {
                "key": "con_swapstktwo.LiquidityPools:allowed_token_contracts",
                "value": [
                    "con_stakeone",
                    "con_staketwo"
                ]
            },
            {
                "key": "con_swapstktwo.LiquidityPools:owner",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swapstktwo.LiquidityPools:token_a",
                "value": {
                    "__fixed__": "569.79"
                }
            },
            {
                "key": "con_swapstktwo.LiquidityPools:token_b",
                "value": {
                    "__fixed__": "438.758138963477772512680110216044"
                }
            },
            {
                "key": "con_swapstktwo.SwapFeePct",
                "value": {
                    "__fixed__": "0.003"
                }
            },
            {
                "key": "con_swapstktwo.__code__",
                "value": "__LiquidityPools = Hash(default_value={'token_a': 0, 'token_b': 0},\n    contract='con_swapstktwo', name='LiquidityPools')\n__LPBalances = Hash(default_value=0, contract='con_swapstktwo', name=\n    'LPBalances')\n__SwapFeePct = Variable(contract='con_swapstktwo', name='SwapFeePct')\n\n\ndef ____():\n    __SwapFeePct.set(decimal('0.003'))\n    __LiquidityPools['owner'] = ctx.caller\n    __LiquidityPools['allowed_token_contracts'] = ['con_stakeone',\n        'con_staketwo']\n    __LiquidityPools['token_a'] = 0\n    __LiquidityPools['token_b'] = 0\n\n\n@__export('con_swapstktwo')\ndef addLiquidity(token_contract_a: str, token_contract_b: str,\n    token_a_amount: float, token_b_amount: float):\n    balances_of_token_a = importlib.import_module(token_contract_a)\n    balances_of_token_b = importlib.import_module(token_contract_b)\n    user = ctx.caller\n    assert token_a_amount > 0 and token_b_amount > 0, 'Amounts must be positive.'\n    assert balances_of_token_a.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert balances_of_token_b.balance_of(ctx.caller\n        ) >= token_a_amount, 'Insufficient Funds for Token A'\n    assert token_contract_a in __LiquidityPools['allowed_token_contracts'\n        ], 'Token A not allowed'\n    assert token_contract_b in __LiquidityPools['allowed_token_contracts'\n        ], 'Token B not allowed'\n    balances_of_token_a.transfer_from(amount=token_a_amount, to=ctx.this,\n        main_account=ctx.signer)\n    balances_of_token_b.transfer_from(amount=token_b_amount, to=ctx.this,\n        main_account=ctx.signer)\n    __LiquidityPools['token_a'] += token_a_amount\n    __LiquidityPools['token_b'] += token_b_amount\n    lp_tokens = (token_a_amount + token_b_amount) / 2\n    __LPBalances[user] += lp_tokens\n\n\n@__export('con_swapstktwo')\ndef swap(input_token: str, output_token: str, input_amount: float):\n    token_map = {'token_a': __LiquidityPools['allowed_token_contracts'][0],\n        'token_b': __LiquidityPools['allowed_token_contracts'][1]}\n    input_contract = token_map[input_token]\n    output_contract = token_map[output_token]\n    input__token_contract = importlib.import_module(input_contract)\n    output__token_contract = importlib.import_module(output_contract)\n    assert input_amount > 0, 'Input amount must be positive.'\n    assert __LiquidityPools[input_token] != 0, 'Invalid input token.'\n    assert __LiquidityPools[output_token] != 0, 'Invalid output token.'\n    assert input__token_contract.balance_of(ctx.caller\n        ) >= input_amount, 'Insufficient Funds'\n    input_reserve = __LiquidityPools[input_token]\n    output_reserve = __LiquidityPools[output_token]\n    fee = input_amount * __SwapFeePct.get()\n    net_input = input_amount - fee\n    output_amount = output_reserve - input_reserve * output_reserve / (\n        input_reserve + net_input)\n    assert output_amount > 0, 'Insufficient liquidity.'\n    __LiquidityPools[input_token] += net_input\n    __LiquidityPools[output_token] -= output_amount\n    input__token_contract.transfer_from(amount=input_amount, to=ctx.this,\n        main_account=ctx.signer)\n    output__token_contract.transfer(amount=output_amount, to=ctx.caller)\n\n\n@__export('con_swapstktwo')\ndef get_lp_balance(account: str):\n    return __LPBalances[account]\n"
            },
            {
                "key": "con_swapstktwo.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_swapstktwo.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        11,
                        18,
                        46,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_te.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_te', name='balances')\n__metadata = Hash(contract='con_te', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_te', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_te', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKENT'\n    __metadata['token_symbol'] = 'TSTT'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_te')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_te')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_te')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_te')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_te')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_te.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_te.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        23,
                        21,
                        47,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_te.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                "value": 1000000
            },
            {
                "key": "con_te.metadata:operator",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_te.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_te.metadata:token_name",
                "value": "TEST TOKENT"
            },
            {
                "key": "con_te.metadata:token_symbol",
                "value": "TSTT"
            },
            {
                "key": "con_te.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_te.metadata:total_supply",
                "value": 1000000
            },
            {
                "key": "con_test.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_test', name='balances')\n__metadata = Hash(contract='con_test', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_test', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_test', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000\n    __metadata['token_name'] = 'test'\n    __metadata['token_symbol'] = 'sym'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 1000\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_test')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_test')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_test')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_test')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_test')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_test.__developer__",
                "value": "9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e"
            },
            {
                "key": "con_test.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        11,
                        20,
                        18,
                        56,
                        0
                    ]
                }
            },
            {
                "key": "con_test.balances:353e39564bd8ed32182fa461baa9598be21cd803f501850f149a6b79819bf51f",
                "value": {
                    "__fixed__": "0.00025004413484330207603082244"
                }
            },
            {
                "key": "con_test.balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e",
                "value": {
                    "__fixed__": "999.999749953250897250840968754232"
                }
            },
            {
                "key": "con_test.balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e:con_dex_router_n",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_test.balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "2.614259447083000423328E-9"
                }
            },
            {
                "key": "con_test.metadata:operator",
                "value": "9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e"
            },
            {
                "key": "con_test.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_test.metadata:token_name",
                "value": "test"
            },
            {
                "key": "con_test.metadata:token_symbol",
                "value": "sym"
            },
            {
                "key": "con_test.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_test.metadata:total_supply",
                "value": 1000
            },
            {
                "key": "con_test1.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_test1', name='balances')\n__metadata = Hash(contract='con_test1', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 9999999999999999\n    __metadata['token_name'] = 'TEST TOKEN1'\n    __metadata['token_symbol'] = 'TST1'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_test1')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n"
            },
            {
                "key": "con_test1.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_test1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        18,
                        13,
                        26,
                        6,
                        0
                    ]
                }
            },
            {
                "key": "con_test1.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": 9999999999999999
            },
            {
                "key": "con_test1.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_test1.metadata:token_name",
                "value": "TEST TOKEN1"
            },
            {
                "key": "con_test1.metadata:token_symbol",
                "value": "TST1"
            },
            {
                "key": "con_test123.__code__",
                "value": "import currency\nI = importlib\n\n\n@__export('con_test123')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_test123.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test123.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        18,
                        36,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_test123456.__code__",
                "value": "__x = Variable(contract='con_test123456', name='x')\n\n\ndef ____():\n    __x.set('test')\n\n\n@__export('con_test123456')\ndef placeholder():\n    __x.set('break')\n\n\n@__export('con_test123456')\ndef placeholder2():\n    pass\n\n\n@__export('con_test123456')\ndef placeholder3():\n    pass\n"
            },
            {
                "key": "con_test123456.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test123456.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        44,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_test123456.x",
                "value": "break"
            },
            {
                "key": "con_test2.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_test2', name='balances')\n__metadata = Hash(contract='con_test2', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 9999999999999999\n    __metadata['token_name'] = 'TEST TOKEN2'\n    __metadata['token_symbol'] = 'TST2'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_test2')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n"
            },
            {
                "key": "con_test2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_test2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        18,
                        13,
                        26,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_test2.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": 9999999999999999
            },
            {
                "key": "con_test2.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_test2.metadata:token_name",
                "value": "TEST TOKEN2"
            },
            {
                "key": "con_test2.metadata:token_symbol",
                "value": "TST2"
            },
            {
                "key": "con_test8.__code__",
                "value": "__x = Variable(contract='con_test8', name='x')\n__y = Hash(contract='con_test8', name='y')\n\n\ndef ____():\n    for __x in range(10):\n        __y[__x] = __x\n\n\n@__export('con_test8')\ndef placeholder():\n    __x.set('break')\n\n\n@__export('con_test8')\ndef placeholder2():\n    pass\n\n\n@__export('con_test8')\ndef placeholder3():\n    pass\n"
            },
            {
                "key": "con_test8.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test8.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        45,
                        29,
                        0
                    ]
                }
            },
            {
                "key": "con_test8.y:0",
                "value": 0
            },
            {
                "key": "con_test8.y:1",
                "value": 1
            },
            {
                "key": "con_test8.y:2",
                "value": 2
            },
            {
                "key": "con_test8.y:3",
                "value": 3
            },
            {
                "key": "con_test8.y:4",
                "value": 4
            },
            {
                "key": "con_test8.y:5",
                "value": 5
            },
            {
                "key": "con_test8.y:6",
                "value": 6
            },
            {
                "key": "con_test8.y:7",
                "value": 7
            },
            {
                "key": "con_test8.y:8",
                "value": 8
            },
            {
                "key": "con_test8.y:9",
                "value": 9
            },
            {
                "key": "con_test81.__code__",
                "value": "random.seed()\n__x = Variable(contract='con_test81', name='x')\n__y = Hash(contract='con_test81', name='y')\n\n\ndef ____():\n    for __x in range(10):\n        __y[__x] = random.randint(0, 1000)\n\n\n@__export('con_test81')\ndef placeholder():\n    __x.set('break')\n\n\n@__export('con_test81')\ndef placeholder2():\n    for __x in range(99):\n        __y[__x] = __x\n\n\n@__export('con_test81')\ndef placeholder3():\n    pass\n"
            },
            {
                "key": "con_test81.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test81.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        47,
                        6,
                        0
                    ]
                }
            },
            {
                "key": "con_test81.y:0",
                "value": 621
            },
            {
                "key": "con_test81.y:1",
                "value": 604
            },
            {
                "key": "con_test81.y:2",
                "value": 556
            },
            {
                "key": "con_test81.y:3",
                "value": 107
            },
            {
                "key": "con_test81.y:4",
                "value": 701
            },
            {
                "key": "con_test81.y:5",
                "value": 981
            },
            {
                "key": "con_test81.y:6",
                "value": 175
            },
            {
                "key": "con_test81.y:7",
                "value": 58
            },
            {
                "key": "con_test81.y:8",
                "value": 75
            },
            {
                "key": "con_test81.y:9",
                "value": 961
            },
            {
                "key": "con_test82.__code__",
                "value": "__x = Variable(contract='con_test82', name='x')\n__y = Hash(contract='con_test82', name='y')\n\n\ndef ____():\n    for __x in range(10):\n        __y[__x] = __x\n\n\n@__export('con_test82')\ndef placeholder():\n    __x.set('break')\n\n\n@__export('con_test82')\ndef placeholder2():\n    for __x in range(99):\n        __y[__x] = __x\n\n\n@__export('con_test82')\ndef placeholder3():\n    pass\n"
            },
            {
                "key": "con_test82.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test82.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        46,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_test82.y:0",
                "value": 0
            },
            {
                "key": "con_test82.y:1",
                "value": 1
            },
            {
                "key": "con_test82.y:10",
                "value": 10
            },
            {
                "key": "con_test82.y:11",
                "value": 11
            },
            {
                "key": "con_test82.y:12",
                "value": 12
            },
            {
                "key": "con_test82.y:13",
                "value": 13
            },
            {
                "key": "con_test82.y:14",
                "value": 14
            },
            {
                "key": "con_test82.y:15",
                "value": 15
            },
            {
                "key": "con_test82.y:16",
                "value": 16
            },
            {
                "key": "con_test82.y:17",
                "value": 17
            },
            {
                "key": "con_test82.y:18",
                "value": 18
            },
            {
                "key": "con_test82.y:19",
                "value": 19
            },
            {
                "key": "con_test82.y:2",
                "value": 2
            },
            {
                "key": "con_test82.y:20",
                "value": 20
            },
            {
                "key": "con_test82.y:21",
                "value": 21
            },
            {
                "key": "con_test82.y:22",
                "value": 22
            },
            {
                "key": "con_test82.y:23",
                "value": 23
            },
            {
                "key": "con_test82.y:24",
                "value": 24
            },
            {
                "key": "con_test82.y:25",
                "value": 25
            },
            {
                "key": "con_test82.y:26",
                "value": 26
            },
            {
                "key": "con_test82.y:27",
                "value": 27
            },
            {
                "key": "con_test82.y:28",
                "value": 28
            },
            {
                "key": "con_test82.y:29",
                "value": 29
            },
            {
                "key": "con_test82.y:3",
                "value": 3
            },
            {
                "key": "con_test82.y:30",
                "value": 30
            },
            {
                "key": "con_test82.y:31",
                "value": 31
            },
            {
                "key": "con_test82.y:32",
                "value": 32
            },
            {
                "key": "con_test82.y:33",
                "value": 33
            },
            {
                "key": "con_test82.y:34",
                "value": 34
            },
            {
                "key": "con_test82.y:35",
                "value": 35
            },
            {
                "key": "con_test82.y:36",
                "value": 36
            },
            {
                "key": "con_test82.y:37",
                "value": 37
            },
            {
                "key": "con_test82.y:38",
                "value": 38
            },
            {
                "key": "con_test82.y:39",
                "value": 39
            },
            {
                "key": "con_test82.y:4",
                "value": 4
            },
            {
                "key": "con_test82.y:40",
                "value": 40
            },
            {
                "key": "con_test82.y:41",
                "value": 41
            },
            {
                "key": "con_test82.y:42",
                "value": 42
            },
            {
                "key": "con_test82.y:43",
                "value": 43
            },
            {
                "key": "con_test82.y:44",
                "value": 44
            },
            {
                "key": "con_test82.y:45",
                "value": 45
            },
            {
                "key": "con_test82.y:46",
                "value": 46
            },
            {
                "key": "con_test82.y:47",
                "value": 47
            },
            {
                "key": "con_test82.y:48",
                "value": 48
            },
            {
                "key": "con_test82.y:49",
                "value": 49
            },
            {
                "key": "con_test82.y:5",
                "value": 5
            },
            {
                "key": "con_test82.y:50",
                "value": 50
            },
            {
                "key": "con_test82.y:51",
                "value": 51
            },
            {
                "key": "con_test82.y:52",
                "value": 52
            },
            {
                "key": "con_test82.y:53",
                "value": 53
            },
            {
                "key": "con_test82.y:54",
                "value": 54
            },
            {
                "key": "con_test82.y:55",
                "value": 55
            },
            {
                "key": "con_test82.y:56",
                "value": 56
            },
            {
                "key": "con_test82.y:57",
                "value": 57
            },
            {
                "key": "con_test82.y:58",
                "value": 58
            },
            {
                "key": "con_test82.y:59",
                "value": 59
            },
            {
                "key": "con_test82.y:6",
                "value": 6
            },
            {
                "key": "con_test82.y:60",
                "value": 60
            },
            {
                "key": "con_test82.y:61",
                "value": 61
            },
            {
                "key": "con_test82.y:62",
                "value": 62
            },
            {
                "key": "con_test82.y:63",
                "value": 63
            },
            {
                "key": "con_test82.y:64",
                "value": 64
            },
            {
                "key": "con_test82.y:65",
                "value": 65
            },
            {
                "key": "con_test82.y:66",
                "value": 66
            },
            {
                "key": "con_test82.y:67",
                "value": 67
            },
            {
                "key": "con_test82.y:68",
                "value": 68
            },
            {
                "key": "con_test82.y:69",
                "value": 69
            },
            {
                "key": "con_test82.y:7",
                "value": 7
            },
            {
                "key": "con_test82.y:70",
                "value": 70
            },
            {
                "key": "con_test82.y:71",
                "value": 71
            },
            {
                "key": "con_test82.y:72",
                "value": 72
            },
            {
                "key": "con_test82.y:73",
                "value": 73
            },
            {
                "key": "con_test82.y:74",
                "value": 74
            },
            {
                "key": "con_test82.y:75",
                "value": 75
            },
            {
                "key": "con_test82.y:76",
                "value": 76
            },
            {
                "key": "con_test82.y:77",
                "value": 77
            },
            {
                "key": "con_test82.y:78",
                "value": 78
            },
            {
                "key": "con_test82.y:79",
                "value": 79
            },
            {
                "key": "con_test82.y:8",
                "value": 8
            },
            {
                "key": "con_test82.y:80",
                "value": 80
            },
            {
                "key": "con_test82.y:81",
                "value": 81
            },
            {
                "key": "con_test82.y:82",
                "value": 82
            },
            {
                "key": "con_test82.y:83",
                "value": 83
            },
            {
                "key": "con_test82.y:84",
                "value": 84
            },
            {
                "key": "con_test82.y:85",
                "value": 85
            },
            {
                "key": "con_test82.y:86",
                "value": 86
            },
            {
                "key": "con_test82.y:87",
                "value": 87
            },
            {
                "key": "con_test82.y:88",
                "value": 88
            },
            {
                "key": "con_test82.y:89",
                "value": 89
            },
            {
                "key": "con_test82.y:9",
                "value": 9
            },
            {
                "key": "con_test82.y:90",
                "value": 90
            },
            {
                "key": "con_test82.y:91",
                "value": 91
            },
            {
                "key": "con_test82.y:92",
                "value": 92
            },
            {
                "key": "con_test82.y:93",
                "value": 93
            },
            {
                "key": "con_test82.y:94",
                "value": 94
            },
            {
                "key": "con_test82.y:95",
                "value": 95
            },
            {
                "key": "con_test82.y:96",
                "value": 96
            },
            {
                "key": "con_test82.y:97",
                "value": 97
            },
            {
                "key": "con_test82.y:98",
                "value": 98
            },
            {
                "key": "con_test_1.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_test_1', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_test_1', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_test_1', name='balances')\n__metadata = Hash(contract='con_test_1', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 10000000\n    __metadata['token_name'] = 'TEST TOKEN1'\n    __metadata['token_symbol'] = 'TST1'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_test_1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_test_1')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_test_1')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_test_1')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_test_1')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_test_1.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_test_1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        18,
                        13,
                        26,
                        44,
                        0
                    ]
                }
            },
            {
                "key": "con_test_1.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "9999994"
                }
            },
            {
                "key": "con_test_1.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex22",
                "value": {
                    "__fixed__": "0.6"
                }
            },
            {
                "key": "con_test_1.balances:con_dex_pairs2",
                "value": {
                    "__fixed__": "6"
                }
            },
            {
                "key": "con_test_1.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_test_1.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_test_1.metadata:token_name",
                "value": "TEST TOKEN1"
            },
            {
                "key": "con_test_1.metadata:token_symbol",
                "value": "TST1"
            },
            {
                "key": "con_test_1.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_test_2.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_test_2', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_test_2', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_test_2', name='balances')\n__metadata = Hash(contract='con_test_2', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 10000000\n    __metadata['token_name'] = 'TEST TOKEN2'\n    __metadata['token_symbol'] = 'TST2'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_test_2')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_test_2')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_test_2')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_test_2')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_test_2')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_test_2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_test_2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        12,
                        18,
                        13,
                        27,
                        40,
                        0
                    ]
                }
            },
            {
                "key": "con_test_2.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "9999998.497746619929894842263395092638"
                }
            },
            {
                "key": "con_test_2.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex22",
                "value": {
                    "__fixed__": "0.3"
                }
            },
            {
                "key": "con_test_2.balances:con_dex_pairs2",
                "value": {
                    "__fixed__": "1.502253380070105157736604907362"
                }
            },
            {
                "key": "con_test_2.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_test_2.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_test_2.metadata:token_name",
                "value": "TEST TOKEN2"
            },
            {
                "key": "con_test_2.metadata:token_symbol",
                "value": "TST2"
            },
            {
                "key": "con_test_2.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_test_busd.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_test_busd', name='balances')\n__metadata = Hash(contract='con_test_busd', name='metadata')\n__owner = Variable(contract='con_test_busd', name='owner')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_test_busd', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_test_busd', name='ApproveEvent')\n\n\ndef ____():\n    __metadata['token_name'] = 'Test BUSD'\n    __metadata['token_symbol'] = 'BUSD'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['operator'] = ctx.caller\n    __owner.set('con_bridge_x')\n\n\n@__export('con_test_busd')\ndef mint(amount: float, to: str):\n    assert ctx.caller == __owner.get(\n        ), f'Only owner can mint! Current owner is {__owner.get()}, Caller is {ctx.caller}'\n    assert amount > 0, 'Cannot mint negative balances!'\n    __balances[to] += amount\n\n\n@__export('con_test_busd')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_test_busd')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_test_busd')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_test_busd')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_test_busd')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_test_busd.__developer__",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_test_busd.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        20,
                        7,
                        32,
                        43,
                        0
                    ]
                }
            },
            {
                "key": "con_test_busd.metadata:operator",
                "value": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae"
            },
            {
                "key": "con_test_busd.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_test_busd.metadata:token_name",
                "value": "Test BUSD"
            },
            {
                "key": "con_test_busd.metadata:token_symbol",
                "value": "BUSD"
            },
            {
                "key": "con_test_busd.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_test_busd.owner",
                "value": "con_bridge_x"
            },
            {
                "key": "con_test_deploy_update.__code__",
                "value": "__version = Variable(contract='con_test_deploy_update', name='version')\n__message = Variable(contract='con_test_deploy_update', name='message')\n\n\ndef ____():\n    __version.set('v2.0')\n    __message.set('Hello from v2!')\n\n\n@__export('con_test_deploy_update')\ndef get_version():\n    return __version.get()\n\n\n@__export('con_test_deploy_update')\ndef get_message():\n    return __message.get()\n"
            },
            {
                "key": "con_test_deploy_update.message",
                "value": "Updated message via patch!"
            },
            {
                "key": "con_test_sale.__code__",
                "value": "import currency as xian\n\n\n@__export('con_test_sale')\ndef pay(amount: float):\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n\n\n@__export('con_test_sale')\ndef deposit(amount: float):\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n\n\n@__export('con_test_sale')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_test_sale')\ndef withdraw_xian_all(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_test_sale')\ndef withdraw_any_token(amount: float, token_contract: str):\n    error = 'Only owner can withdraw tokens'\n    assert owner.get() == ctx.caller, error\n    importlib.import_module(token_contract).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_test_sale.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        11,
                        2,
                        6,
                        59,
                        0
                    ]
                }
            },
            {
                "key": "con_test_sale2.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_test_sale2', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_test_sale2',\n    name='allowed_tokens')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n\n\n@__export('con_test_sale2')\ndef pay(amount: float):\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n\n\n@__export('con_test_sale2')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    __allowed_tokens[token_contract] = token_symbol\n\n\n@__export('con_test_sale2')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract] != False, 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n\n\n@__export('con_test_sale2')\ndef get_allowed_tokens():\n    return __allowed_tokens\n\n\n@__export('con_test_sale2')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_test_sale2')\ndef withdraw_xian_all(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_test_sale2')\ndef withdraw_any_token(amount: float, token_contract: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(token_contract).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_test_sale2.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        11,
                        2,
                        33,
                        55,
                        0
                    ]
                }
            },
            {
                "key": "con_test_sale2.allowed_tokens:con_dato",
                "value": "DATO"
            },
            {
                "key": "con_test_sale2.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale3.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_test_sale3', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_test_sale3',\n    name='allowed_tokens')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n\n\n@__export('con_test_sale3')\ndef pay(amount: float):\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n\n\n@__export('con_test_sale3')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    __allowed_tokens[token_contract] = token_symbol\n\n\n@__export('con_test_sale3')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract] != False, 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.this)\n\n\n@__export('con_test_sale3')\ndef get_allowed_tokens():\n    return __allowed_tokens\n\n\n@__export('con_test_sale3')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_test_sale3')\ndef withdraw_xian_all(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_test_sale3')\ndef withdraw_any_token(amount: float, token_contract: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(token_contract).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_test_sale3.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        11,
                        2,
                        41,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_test_sale3.allowed_tokens:con_dato",
                "value": "DATO"
            },
            {
                "key": "con_test_sale3.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale4.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_test_sale4', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_test_sale4',\n    name='allowed_tokens')\n__token_symbols = Hash(default_value='', contract='con_test_sale4', name=\n    'token_symbols')\n__token_balances = Hash(default_value=0, contract='con_test_sale4', name=\n    'token_balances')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n\n\n@__export('con_test_sale4')\ndef pay(amount: float):\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n\n\n@__export('con_test_sale4')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    __allowed_tokens[token_contract] = True\n    __token_symbols[token_contract] = token_symbol\n    return {'contract': token_contract, 'symbol': token_symbol, 'status':\n        'added'}\n\n\n@__export('con_test_sale4')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract] == True, 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.approve(amount=amount, to=ctx.this)\n    token.transfer(amount=amount, to=ctx.this)\n    __token_balances[token_contract] = __token_balances[token_contract\n        ] + amount\n    return {'amount': amount, 'token': __token_symbols[token_contract],\n        'contract': token_contract}\n\n\n@__export('con_test_sale4')\ndef get_allowed_tokens():\n    tokens = []\n    for contract, symbol in __token_symbols.items():\n        if __allowed_tokens[contract]:\n            tokens.append({'contract': contract, 'symbol': symbol,\n                'balance': __token_balances[contract]})\n    return tokens\n\n\n@__export('con_test_sale4')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_test_sale4')\ndef withdraw_xian_all(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_test_sale4')\ndef withdraw_any_token(amount: float, token_contract: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(token_contract).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_test_sale4.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale4.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        11,
                        3,
                        9,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_test_sale4.allowed_tokens:con_dato",
                "value": true
            },
            {
                "key": "con_test_sale4.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale4.token_symbols:con_dato",
                "value": "DATO"
            },
            {
                "key": "con_test_sale5.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_test_sale5', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_test_sale5',\n    name='allowed_tokens')\n__token_symbols = Hash(default_value='', contract='con_test_sale5', name=\n    'token_symbols')\n__token_balances = Hash(default_value=0, contract='con_test_sale5', name=\n    'token_balances')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n\n\n@__export('con_test_sale5')\ndef pay(amount: float):\n    xian.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n\n\n@__export('con_test_sale5')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    __allowed_tokens[token_contract] = True\n    __token_symbols[token_contract] = token_symbol\n    return {'contract': token_contract, 'symbol': token_symbol, 'status':\n        'added'}\n\n\n@__export('con_test_sale5')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract] == True, 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.this)\n    __token_balances[token_contract] = __token_balances[token_contract\n        ] + amount\n    return {'amount': amount, 'token': __token_symbols[token_contract],\n        'contract': token_contract}\n\n\n@__export('con_test_sale5')\ndef get_allowed_tokens():\n    tokens = []\n    for contract in __allowed_tokens.keys():\n        if __allowed_tokens[contract]:\n            tokens.append({'contract': contract, 'symbol': __token_symbols[\n                contract], 'balance': __token_balances[contract]})\n    return tokens\n\n\n@__export('con_test_sale5')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_test_sale5')\ndef withdraw_xian_all(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_test_sale5')\ndef withdraw_any_token(amount: float, token_contract: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(token_contract).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_test_sale5.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale5.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        11,
                        2,
                        59,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_test_sale5.allowed_tokens:con_dato",
                "value": true
            },
            {
                "key": "con_test_sale5.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale5.token_symbols:con_dato",
                "value": "DATO"
            },
            {
                "key": "con_test_sale6.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_test_sale6', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_test_sale6',\n    name='allowed_tokens')\n__token_symbols = Hash(default_value=None, contract='con_test_sale6', name=\n    'token_symbols')\n__token_balances = Hash(default_value=0, contract='con_test_sale6', name=\n    'token_balances')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n\n\n@__export('con_test_sale6')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    __allowed_tokens[token_contract] = True\n    __token_symbols[token_contract] = token_symbol\n    __token_balances[token_contract] = 0\n    return {'contract': token_contract, 'symbol': token_symbol, 'status':\n        'added'}\n\n\n@__export('con_test_sale6')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract] == True, 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.this)\n    current_balance = __token_balances[token_contract]\n    __token_balances[token_contract] = current_balance + amount\n    return {'success': True, 'amount': amount, 'token': __token_symbols[\n        token_contract], 'new_balance': __token_balances[token_contract]}\n\n\n@__export('con_test_sale6')\ndef get_allowed_tokens():\n    allowed_list = []\n    for token in __allowed_tokens:\n        if __allowed_tokens[token]:\n            allowed_list.append({'contract': token, 'symbol':\n                __token_symbols[token], 'balance': __token_balances[token]})\n    return allowed_list\n\n\n@__export('con_test_sale6')\ndef withdraw_xian(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_test_sale6')\ndef withdraw_xian_all(amount: float):\n    error = 'Only the owner can withdraw XIAN'\n    assert __owner.get() == ctx.caller, error\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_test_sale6')\ndef withdraw_any_token(amount: float, token_contract: str):\n    error = 'Only owner can withdraw tokens'\n    assert __owner.get() == ctx.caller, error\n    importlib.import_module(token_contract).transfer(amount=amount, to=ctx.\n        caller)\n"
            },
            {
                "key": "con_test_sale6.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale6.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        11,
                        3,
                        17,
                        40,
                        0
                    ]
                }
            },
            {
                "key": "con_test_sale6.allowed_tokens:con_dato",
                "value": true
            },
            {
                "key": "con_test_sale6.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale6.token_balances:con_dato",
                "value": 0
            },
            {
                "key": "con_test_sale6.token_symbols:con_dato",
                "value": "DATO"
            },
            {
                "key": "con_test_sale7.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_test_sale7', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_test_sale7',\n    name='allowed_tokens')\n__token_symbols = Hash(default_value='', contract='con_test_sale7', name=\n    'token_symbols')\n__token_balances = Hash(default_value=0, contract='con_test_sale7', name=\n    'token_balances')\n__token_list = Variable(contract='con_test_sale7', name='token_list')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __token_list.set([])\n\n\n@__export('con_test_sale7')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    if not __allowed_tokens[token_contract]:\n        __allowed_tokens[token_contract] = True\n        __token_symbols[token_contract] = token_symbol\n        __token_balances[token_contract] = 0\n        tokens = __token_list.get()\n        tokens.append(token_contract)\n        __token_list.set(tokens)\n    return {'contract': token_contract, 'symbol': token_symbol, 'status':\n        'added'}\n\n\n@__export('con_test_sale7')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract] == True, 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __token_balances[token_contract] += amount\n    return {'success': True, 'amount': amount, 'token': __token_symbols[\n        token_contract], 'new_balance': __token_balances[token_contract]}\n\n\n@__export('con_test_sale7')\ndef get_allowed_tokens():\n    tokens = __token_list.get()\n    result = []\n    for token in tokens:\n        result.append({'contract': token, 'symbol': __token_symbols[token],\n            'balance': __token_balances[token]})\n    return result\n\n\n@__export('con_test_sale7')\ndef withdraw_xian(amount: float):\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_test_sale7')\ndef withdraw_xian_all():\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_test_sale7')\ndef withdraw_any_token(amount: float, token_contract: str):\n    assert __owner.get() == ctx.caller, 'Only owner can withdraw tokens'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_test_sale7.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale7.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        11,
                        3,
                        23,
                        44,
                        0
                    ]
                }
            },
            {
                "key": "con_test_sale7.allowed_tokens:con_dato",
                "value": true
            },
            {
                "key": "con_test_sale7.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_test_sale7.token_balances:con_dato",
                "value": 10000000
            },
            {
                "key": "con_test_sale7.token_list",
                "value": [
                    "con_dato"
                ]
            },
            {
                "key": "con_test_sale7.token_symbols:con_dato",
                "value": "DATO"
            },
            {
                "key": "con_testing_it.__code__",
                "value": "I = importlib\n\n\n@__export('con_testing_it')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_testing_it.__developer__",
                "value": "b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d"
            },
            {
                "key": "con_testing_it.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        14,
                        13,
                        15,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "con_testlast_sale.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_testlast_sale', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_testlast_sale',\n    name='allowed_tokens')\n__token_symbols = Hash(default_value='', contract='con_testlast_sale', name\n    ='token_symbols')\n__token_balances = Hash(default_value=0, contract='con_testlast_sale', name\n    ='token_balances')\n__token_prices = Hash(default_value=decimal('0.0'), contract=\n    'con_testlast_sale', name='token_prices')\n__token_list = Variable(contract='con_testlast_sale', name='token_list')\n__sold_tokens = Hash(default_value=decimal('0.0'), contract=\n    'con_testlast_sale', name='sold_tokens')\n__raised_xian = Hash(default_value=decimal('0.0'), contract=\n    'con_testlast_sale', name='raised_xian')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __token_list.set([])\n\n\n@__export('con_testlast_sale')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    if not __allowed_tokens[token_contract]:\n        __allowed_tokens[token_contract] = True\n        __token_symbols[token_contract] = token_symbol\n        __token_balances[token_contract] = 0\n        __token_prices[token_contract] = decimal('0.01')\n        tokens = __token_list.get()\n        tokens.append(token_contract)\n        __token_list.set(tokens)\n    return {'contract': token_contract, 'symbol': token_symbol, 'price':\n        __token_prices[token_contract], 'status': 'added'}\n\n\n@__export('con_testlast_sale')\ndef set_token_price(token_contract: str, price_per_xian: float):\n    assert ctx.caller == __owner.get(), 'Only owner can set token price'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    assert price_per_xian > 0, 'Price must be greater than 0'\n    __token_prices[token_contract] = price_per_xian\n\n\n@__export('con_testlast_sale')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __token_balances[token_contract] += amount\n    return {'success': True, 'amount': amount, 'token': __token_symbols[\n        token_contract], 'new_balance': __token_balances[token_contract]}\n\n\n@__export('con_testlast_sale')\ndef buy_token(token_contract: str, xian_amount: float):\n    assert xian_amount > 0, 'XIAN amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    price = __token_prices[token_contract]\n    assert price > 0, 'Token not for sale'\n    token_amount = xian_amount / price\n    available = __token_balances[token_contract]\n    assert available >= token_amount, 'Not enough tokens in contract'\n    xian.transfer(amount=xian_amount, to=ctx.this)\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balances[token_contract] -= token_amount\n    __sold_tokens[token_contract] += token_amount\n    __raised_xian[token_contract] += xian_amount\n    return {'token': __token_symbols[token_contract], 'xian_paid':\n        xian_amount, 'token_received': token_amount, 'total_sold':\n        __sold_tokens[token_contract], 'raised': __raised_xian[\n        token_contract], 'remaining': __token_balances[token_contract]}\n\n\n@__export('con_testlast_sale')\ndef get_allowed_tokens():\n    tokens = __token_list.get()\n    result = []\n    for token in tokens:\n        result.append({'contract': token, 'symbol': __token_symbols[token],\n            'balance': __token_balances[token], 'price_per_token':\n            __token_prices[token]})\n    return result\n\n\n@__export('con_testlast_sale')\ndef get_token_stats(token_contract: str):\n    return {'symbol': __token_symbols[token_contract], 'total_sold':\n        __sold_tokens[token_contract], 'raised_xian': __raised_xian[\n        token_contract], 'remaining': __token_balances[token_contract]}\n\n\n@__export('con_testlast_sale')\ndef withdraw_xian(amount: float):\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_testlast_sale')\ndef withdraw_xian_all():\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_testlast_sale')\ndef withdraw_any_token(amount: float, token_contract: str):\n    assert __owner.get() == ctx.caller, 'Only owner can withdraw tokens'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_testlast_sale.__developer__",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_testlast_sale.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        12,
                        16,
                        5,
                        28,
                        0
                    ]
                }
            },
            {
                "key": "con_testlast_sale.allowed_tokens:con_dato",
                "value": true
            },
            {
                "key": "con_testlast_sale.owner",
                "value": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4"
            },
            {
                "key": "con_testlast_sale.token_balances:con_dato",
                "value": 1000000
            },
            {
                "key": "con_testlast_sale.token_list",
                "value": [
                    "con_dato"
                ]
            },
            {
                "key": "con_testlast_sale.token_prices:con_dato",
                "value": 100
            },
            {
                "key": "con_testlast_sale.token_symbols:con_dato",
                "value": "DATO"
            },
            {
                "key": "con_teststststs.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_teststststs', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_teststststs', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_teststststs', name='balances')\n__metadata = Hash(contract='con_teststststs', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1111\n    __metadata['token_name'] = 'Teststststs'\n    __metadata['token_symbol'] = 'TC'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 1111\n    __metadata['operator'] = ctx.caller\n\n@__export('con_teststststs')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_teststststs')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_teststststs')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_teststststs')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_teststststs')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_teststststs.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_teststststs.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        14,
                        12,
                        34,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_teststststs.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": 1111
            },
            {
                "key": "con_teststststs.metadata:operator",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_teststststs.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_teststststs.metadata:token_name",
                "value": "Teststststs"
            },
            {
                "key": "con_teststststs.metadata:token_symbol",
                "value": "TC"
            },
            {
                "key": "con_teststststs.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_teststststs.metadata:total_supply",
                "value": 1111
            },
            {
                "key": "con_testtoken.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_testtoken', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_testtoken', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_testtoken', name='balances')\n__metadata = Hash(contract='con_testtoken', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 9999999999999999\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_testtoken')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_testtoken')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_testtoken')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_testtoken')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_testtoken')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_testtoken.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_testtoken.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        6,
                        12,
                        26,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_testtoken.balances:0",
                "value": 999
            },
            {
                "key": "con_testtoken.balances:1",
                "value": 1
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "9891791936455267.854554259847373407561349289242"
                }
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex22",
                "value": {
                    "__fixed__": "13166301474810973.9"
                }
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex2test",
                "value": {
                    "__fixed__": "10846834023954739828176.956781928186615760996191166073"
                }
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex_router_p",
                "value": {
                    "__fixed__": "11"
                }
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_001",
                "value": {
                    "__fixed__": "9.9999E+15"
                }
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_002",
                "value": {
                    "__fixed__": "9.9999E+17"
                }
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_003",
                "value": {
                    "__fixed__": "98173328263080014.4"
                }
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_004",
                "value": {
                    "__fixed__": "9.9E+15"
                }
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_005",
                "value": {
                    "__fixed__": "9998999999999999999"
                }
            },
            {
                "key": "con_testtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_006",
                "value": {
                    "__fixed__": "1099899999.9"
                }
            },
            {
                "key": "con_testtoken.balances:con_dex_pairs",
                "value": {
                    "__fixed__": "41.800633596611738895164383427412"
                }
            },
            {
                "key": "con_testtoken.balances:con_dex_pairs2",
                "value": {
                    "__fixed__": "898525781.04525609903334815360498515117"
                }
            },
            {
                "key": "con_testtoken.balances:con_dextest_001",
                "value": {
                    "__fixed__": "90933891060.289169773574611257615713376376"
                }
            },
            {
                "key": "con_testtoken.balances:con_dextest_002",
                "value": {
                    "__fixed__": "9093389106118.941529508047649358916068018551"
                }
            },
            {
                "key": "con_testtoken.balances:con_dextest_003",
                "value": {
                    "__fixed__": "109.579070046566934739187634467823"
                }
            },
            {
                "key": "con_testtoken.balances:con_dextest_004",
                "value": {
                    "__fixed__": "99012841965601.948572729883065833638622929394"
                }
            },
            {
                "key": "con_testtoken.balances:con_dextest_005",
                "value": {
                    "__fixed__": "1.000000061523096809293425810305"
                }
            },
            {
                "key": "con_testtoken.balances:con_dextest_006",
                "value": {
                    "__fixed__": "54145.635431733981989220366367171338"
                }
            },
            {
                "key": "con_testtoken.balances:dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_testtoken.balances:e734ea6c2b6257de72355e472aa05a4c487e6b463c029ed306df2f01b5636b58",
                "value": 9999998999
            },
            {
                "key": "con_testtoken.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": {
                    "__fixed__": "1870.905779766066298818296450358387"
                }
            },
            {
                "key": "con_testtoken.balances:test",
                "value": {
                    "__fixed__": "0.000002424863893506355"
                }
            },
            {
                "key": "con_testtoken.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_testtoken.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_testtoken.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_testtoken.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_testtoken.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_teto.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_teto', name='balances')\n__metadata = Hash(contract='con_teto', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_teto', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_teto', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'TESTING TOKEN'\n    __metadata['token_symbol'] = 'TETO'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_teto')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_teto')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_teto')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_teto')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_teto')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_teto.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_teto.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        10,
                        8,
                        18,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_teto.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b",
                "value": 989000000
            },
            {
                "key": "con_teto.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_saled_teto",
                "value": 9000000
            },
            {
                "key": "con_teto.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_teto_sale",
                "value": 0
            },
            {
                "key": "con_teto.balances:con_saled_teto",
                "value": 1000000
            },
            {
                "key": "con_teto.balances:con_teto_sale",
                "value": 10000000
            },
            {
                "key": "con_teto.metadata:operator",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_teto.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_teto.metadata:token_name",
                "value": "TESTING TOKEN"
            },
            {
                "key": "con_teto.metadata:token_symbol",
                "value": "TETO"
            },
            {
                "key": "con_teto.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_teto.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_teto_dato.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_teto_dato', name='balances')\n__metadata = Hash(contract='con_teto_dato', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_teto_dato', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_teto_dato', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'TESTING TOKEN'\n    __metadata['token_symbol'] = 'TETO'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_teto_dato')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_teto_dato')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_teto_dato')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_teto_dato')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_teto_dato')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_teto_dato.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_teto_dato.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        13,
                        6,
                        46,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_teto_dato.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b",
                "value": 990000000
            },
            {
                "key": "con_teto_dato.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_ec_dato",
                "value": 0
            },
            {
                "key": "con_teto_dato.balances:con_ec_dato",
                "value": 10000000
            },
            {
                "key": "con_teto_dato.metadata:operator",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_teto_dato.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_teto_dato.metadata:token_name",
                "value": "TESTING TOKEN"
            },
            {
                "key": "con_teto_dato.metadata:token_symbol",
                "value": "TETO"
            },
            {
                "key": "con_teto_dato.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_teto_dato.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_teto_sale.__code__",
                "value": "import currency as xian\n__owner = Variable(contract='con_teto_sale', name='owner')\n__allowed_tokens = Hash(default_value=False, contract='con_teto_sale', name\n    ='allowed_tokens')\n__token_symbols = Hash(default_value='', contract='con_teto_sale', name=\n    'token_symbols')\n__token_balances = Hash(default_value=0, contract='con_teto_sale', name=\n    'token_balances')\n__token_prices = Hash(default_value=decimal('0.0'), contract=\n    'con_teto_sale', name='token_prices')\n__token_list = Variable(contract='con_teto_sale', name='token_list')\n__sold_tokens = Hash(default_value=decimal('0.0'), contract='con_teto_sale',\n    name='sold_tokens')\n__raised_xian = Hash(default_value=decimal('0.0'), contract='con_teto_sale',\n    name='raised_xian')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __token_list.set([])\n\n\n@__export('con_teto_sale')\ndef add_allowed_token(token_contract: str, token_symbol: str):\n    assert ctx.caller == __owner.get(), 'Only owner can add tokens'\n    if not __allowed_tokens[token_contract]:\n        __allowed_tokens[token_contract] = True\n        __token_symbols[token_contract] = token_symbol\n        __token_balances[token_contract] = 0\n        __token_prices[token_contract] = decimal('0.01')\n        tokens = __token_list.get()\n        tokens.append(token_contract)\n        __token_list.set(tokens)\n    return {'contract': token_contract, 'symbol': token_symbol, 'price':\n        __token_prices[token_contract], 'status': 'added'}\n\n\n@__export('con_teto_sale')\ndef set_token_price(token_contract: str, price_per_xian: float):\n    assert ctx.caller == __owner.get(), 'Only owner can set token price'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    assert price_per_xian > 0, 'Price must be greater than 0'\n    __token_prices[token_contract] = price_per_xian\n\n\n@__export('con_teto_sale')\ndef deposit(amount: float, token_contract: str):\n    assert amount > 0, 'Amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __token_balances[token_contract] += amount\n    return {'success': True, 'amount': amount, 'token': __token_symbols[\n        token_contract], 'new_balance': __token_balances[token_contract]}\n\n\n@__export('con_teto_sale')\ndef buy_token(token_contract: str, xian_amount: float):\n    assert xian_amount > 0, 'XIAN amount must be greater than 0'\n    assert __allowed_tokens[token_contract], 'Token not allowed'\n    price = __token_prices[token_contract]\n    assert price > 0, 'Token not for sale'\n    token_amount = xian_amount / price\n    available = __token_balances[token_contract]\n    assert available >= token_amount, 'Not enough tokens in contract'\n    xian.transfer(amount=xian_amount, to=ctx.this)\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=token_amount, to=ctx.caller)\n    __token_balances[token_contract] -= token_amount\n    __sold_tokens[token_contract] += token_amount\n    __raised_xian[token_contract] += xian_amount\n    return {'token': __token_symbols[token_contract], 'xian_paid':\n        xian_amount, 'token_received': token_amount, 'total_sold':\n        __sold_tokens[token_contract], 'raised': __raised_xian[\n        token_contract], 'remaining': __token_balances[token_contract]}\n\n\n@__export('con_teto_sale')\ndef get_allowed_tokens():\n    tokens = __token_list.get()\n    result = []\n    for token in tokens:\n        result.append({'contract': token, 'symbol': __token_symbols[token],\n            'balance': __token_balances[token], 'price_per_token':\n            __token_prices[token]})\n    return result\n\n\n@__export('con_teto_sale')\ndef get_token_stats(token_contract: str):\n    return {'symbol': __token_symbols[token_contract], 'total_sold':\n        __sold_tokens[token_contract], 'raised_xian': __raised_xian[\n        token_contract], 'remaining': __token_balances[token_contract]}\n\n\n@__export('con_teto_sale')\ndef withdraw_xian(amount: float):\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=amount, to=ctx.caller)\n\n\n@__export('con_teto_sale')\ndef withdraw_xian_all():\n    assert __owner.get() == ctx.caller, 'Only the owner can withdraw XIAN'\n    xian.transfer(amount=xian.balance_of(ctx.this), to=ctx.caller)\n\n\n@__export('con_teto_sale')\ndef withdraw_any_token(amount: float, token_contract: str):\n    assert __owner.get() == ctx.caller, 'Only owner can withdraw tokens'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_teto_sale.__developer__",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_teto_sale.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        4,
                        48,
                        12,
                        0
                    ]
                }
            },
            {
                "key": "con_teto_sale.allowed_tokens:con_teto",
                "value": true
            },
            {
                "key": "con_teto_sale.owner",
                "value": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b"
            },
            {
                "key": "con_teto_sale.token_balances:con_teto",
                "value": 10000000
            },
            {
                "key": "con_teto_sale.token_list",
                "value": [
                    "con_teto"
                ]
            },
            {
                "key": "con_teto_sale.token_prices:con_teto",
                "value": 100
            },
            {
                "key": "con_teto_sale.token_symbols:con_teto",
                "value": "TETO"
            },
            {
                "key": "con_thisproxy.__code__",
                "value": "@__export('con_thisproxy')\ndef proxythis():\n    return importlib.import_module('con_getthis').getthis()\n"
            },
            {
                "key": "con_thisproxy.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_thisproxy.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        31,
                        9,
                        51,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "con_thistest2.__code__",
                "value": "@__export('con_thistest2')\ndef exported():\n    return 0\n\n\n@__export('con_thistest2')\ndef getthis():\n    exported()\n    return ctx.this, ctx.caller\n"
            },
            {
                "key": "con_thistest2.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_thistest2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        31,
                        15,
                        49,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "con_tiger.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_tiger', name='balances')\n__metadata = Hash(contract='con_tiger', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_tiger', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_tiger', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'xwt'\n    __metadata['token_symbol'] = 'xwt'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 1000000000\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_tiger')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_tiger')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_tiger')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_tiger')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_tiger')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_tiger.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_tiger.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        5,
                        2,
                        42,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_tiger.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "999675578"
                }
            },
            {
                "key": "con_tiger.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_ff1",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_tiger.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_tiger.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_tiger.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff7",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_tiger.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff8",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_tiger.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fm5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_tiger.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "99198.159925203463290909886673888"
                }
            },
            {
                "key": "con_tiger.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_tiger.balances:con_ff1",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_tiger.balances:con_fff06",
                "value": {
                    "__fixed__": "10922.20813035209226464566888166"
                }
            },
            {
                "key": "con_tiger.balances:con_fff5",
                "value": {
                    "__fixed__": "2.02E+5"
                }
            },
            {
                "key": "con_tiger.balances:con_fff7",
                "value": {
                    "__fixed__": "11111"
                }
            },
            {
                "key": "con_tiger.balances:con_fff8",
                "value": {
                    "__fixed__": "90.631944444444444444444444452"
                }
            },
            {
                "key": "con_tiger.balances:con_fm5",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "con_tiger.metadata:operator",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_tiger.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_tiger.metadata:token_name",
                "value": "xwt"
            },
            {
                "key": "con_tiger.metadata:token_symbol",
                "value": "xwt"
            },
            {
                "key": "con_tiger.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_tiger.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_token0.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_token0', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_token0', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_token0', name='balances')\n__metadata = Hash(contract='con_token0', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_token0')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_token0')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_token0')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_token0')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_token0')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_token0.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_token0.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        16,
                        17,
                        43,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "con_token0.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": 1000000
            },
            {
                "key": "con_token0.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_token0.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_token0.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_token0.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_token0.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_token_tst.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_token_tst', name='balances')\n__approvals = Hash(default_value=0, contract='con_token_tst', name='approvals')\n__metadata = Hash(contract='con_token_tst', name='metadata')\n__minter = Variable(contract='con_token_tst', name='minter')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_token_tst', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_token_tst', name='ApproveEvent')\n__MintEvent = LogEvent(event='Mint', params={'to': {'type': str, 'idx': \n    True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_token_tst', name='MintEvent')\n__BurnEvent = LogEvent(event='Burn', params={'from': {'type': str, 'idx': \n    True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_token_tst', name='BurnEvent')\n\n\ndef ____():\n    __metadata['token_name'] = 'Wrapped USDC'\n    __metadata['token_symbol'] = 'xUSDC'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 0\n    __minter.set(ctx.caller)\n\n\n@__export('con_token_tst')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata.'\n    __metadata[key] = value\n\n\n@__export('con_token_tst')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send.'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_token_tst')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __approvals[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_token_tst')\ndef transfer_from(amount: float, to: str, main_account: str):\n    approved = __approvals[main_account, ctx.caller]\n    assert amount > 0, 'Cannot send negative balances!'\n    assert approved >= amount, f'You approved {approved} but need {amount}'\n    assert __balances[main_account] >= amount, 'Not enough tokens to send!'\n    __approvals[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n\n@__export('con_token_tst')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_token_tst')\ndef change_minter(new_minter: str):\n    assert ctx.caller == __minter.get(), 'Only minter can change minter.'\n    __minter.set(new_minter)\n\n\n@__export('con_token_tst')\ndef mint(amount: float, to: str):\n    assert ctx.caller == __minter.get(), 'Only minter can mint tokens.'\n    assert amount > 0, 'Cannot mint negative balances.'\n    __balances[to] += amount\n    __metadata['total_supply'] += amount\n    __MintEvent({'to': to, 'amount': amount})\n\n\n@__export('con_token_tst')\ndef burn(amount: float):\n    assert ctx.caller == __minter.get(), 'Only minter can burn tokens.'\n    assert amount > 0, 'Cannot burn negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to burn.'\n    __balances[ctx.caller] -= amount\n    __metadata['total_supply'] -= amount\n    __BurnEvent({'from': ctx.caller, 'amount': amount})\n"
            },
            {
                "key": "con_token_tst.__developer__",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_token_tst.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        10,
                        21,
                        51,
                        55,
                        0
                    ]
                }
            },
            {
                "key": "con_token_tst.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_token_tst.metadata:token_name",
                "value": "Wrapped USDC"
            },
            {
                "key": "con_token_tst.metadata:token_symbol",
                "value": "xUSDC"
            },
            {
                "key": "con_token_tst.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_token_tst.metadata:total_supply",
                "value": 0
            },
            {
                "key": "con_token_tst.minter",
                "value": "123"
            },
            {
                "key": "con_toktest.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_toktest', name='balances')\n__metadata = Hash(contract='con_toktest', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_toktest', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_toktest', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_toktest')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_toktest')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_toktest')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_toktest')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_toktest')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_toktest.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_toktest.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        7,
                        20,
                        59,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_toktest.balances",
                "value": {
                    "__fixed__": "0.15353447753105669996219074949"
                }
            },
            {
                "key": "con_toktest.balances:0e1d9bb3404f8160c362505c1a9b3a71d66e2cea69a4ec0e01da1b6ce64df4db",
                "value": {
                    "__fixed__": "1.384168070122E-18"
                }
            },
            {
                "key": "con_toktest.balances:0e1d9bb3404f8160c362505c1a9b3a71d66e2cea69a4ec0e01da1b6ce64df4db:con_dex_router_n",
                "value": {
                    "__fixed__": "6.269E-18"
                }
            },
            {
                "key": "con_toktest.balances:353e39564bd8ed32182fa461baa9598be21cd803f501850f149a6b79819bf51f",
                "value": {
                    "__fixed__": "4.156196808125E-18"
                }
            },
            {
                "key": "con_toktest.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "999998.326283186622141446833242640455"
                }
            },
            {
                "key": "con_toktest.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex_router_n",
                "value": {
                    "__fixed__": "667.000248710592464789433960060958"
                }
            },
            {
                "key": "con_toktest.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex_router_p",
                "value": {
                    "__fixed__": "11"
                }
            },
            {
                "key": "con_toktest.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "__fixed__": "1.520182335846801812174116470522"
                }
            },
            {
                "key": "con_toktest.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05:con_dex_router_n",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "con_toktest.balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e",
                "value": {
                    "__fixed__": "3.2080341709248E-17"
                }
            },
            {
                "key": "con_toktest.balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "3.409743552038E-18"
                }
            },
            {
                "key": "con_toktest.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_toktest.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_toktest.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_toktest.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_toktest.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_toktest.metadata:total_supply",
                "value": 1000000
            },
            {
                "key": "con_toktest2.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_toktest2', name='balances')\n__metadata = Hash(contract='con_toktest2', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_toktest2', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_toktest2', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_toktest2')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_toktest2')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_toktest2')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_toktest2')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_toktest2')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_toktest2.__developer__",
                "value": "9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e"
            },
            {
                "key": "con_toktest2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        11,
                        19,
                        22,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_toktest2.balances:0e1d9bb3404f8160c362505c1a9b3a71d66e2cea69a4ec0e01da1b6ce64df4db",
                "value": {
                    "__fixed__": "11.063672003338563475551679260091"
                }
            },
            {
                "key": "con_toktest2.balances:3336f3561b99e2cf89f2278d08d360e8e4ab92caae1ce5bb36ac03fa57e55062",
                "value": {
                    "__fixed__": "4.117663138711793462421578053051"
                }
            },
            {
                "key": "con_toktest2.balances:3336f3561b99e2cf89f2278d08d360e8e4ab92caae1ce5bb36ac03fa57e55062:con_dex_router_n",
                "value": {
                    "__fixed__": "1.7"
                }
            },
            {
                "key": "con_toktest2.balances:353e39564bd8ed32182fa461baa9598be21cd803f501850f149a6b79819bf51f",
                "value": {
                    "__fixed__": "10.942290242878742679011499159455"
                }
            },
            {
                "key": "con_toktest2.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "0.930840073819942479018664236694"
                }
            },
            {
                "key": "con_toktest2.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "__fixed__": "11.819752425569593322592807582048"
                }
            },
            {
                "key": "con_toktest2.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05:con_dex_router_n",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_toktest2.balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e",
                "value": {
                    "__fixed__": "999903.81727313100760496279694608971"
                }
            },
            {
                "key": "con_toktest2.balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e:con_dex_router_n",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_toktest2.balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "57.308508984673759618606825618951"
                }
            },
            {
                "key": "con_toktest2.metadata:operator",
                "value": "9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e"
            },
            {
                "key": "con_toktest2.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_toktest2.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_toktest2.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_toktest2.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_toktest2.metadata:total_supply",
                "value": 1000000
            },
            {
                "key": "con_tst01.__code__",
                "value": "@__export('con_tst01')\ndef greet(name: str):\n    return f'Hello, {name}!'\n"
            },
            {
                "key": "con_tst01.__developer__",
                "value": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385"
            },
            {
                "key": "con_tst01.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        10,
                        19,
                        1,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_tst3.__code__",
                "value": "@__export('con_tst3')\ndef swapExactTokensForTokens(amountIn: float, amountOutMin: float, tokenIn:\n    str, tokenOut: str, to: str, deadline: datetime.datetime):\n    \"\"\"\n    Swap exact amount of input tokens for optimal amount of output tokens\n    \"\"\"\n    assert now < deadline, 'EXPIRED'\n    path, expectedOut = findBestPath(tokenIn, tokenOut, amountIn)\n    assert expectedOut >= amountOutMin, 'INSUFFICIENT_OUTPUT'\n    currentAmount = amountIn\n    for tokenA, tokenB in path:\n        pair = toks_to_pair[min(tokenA, tokenB), max(tokenA, tokenB)]\n        currentAmount = swapExactTokenForToken(currentAmount, 0, pair,\n            tokenA, to if tokenB == tokenOut else DEX_PAIRS, deadline)\n    return currentAmount\n"
            },
            {
                "key": "con_tst3.__developer__",
                "value": "8bf21c7dc3a4ff32996bf56a665e1efe3c9261cc95bbf82552c328585c863829"
            },
            {
                "key": "con_tst3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        9,
                        0,
                        55,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_txsl.__code__",
                "value": "import currency\n__safe = Hash(default_value=0, contract='con_txsl', name='safe')\n\n\n@__export('con_txsl')\ndef deposit(amount: float):\n    currency.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __safe[ctx.caller] += amount\n\n\n@__export('con_txsl')\ndef withdraw(amount: float):\n    assert __safe[ctx.caller] >= amount, 'insufficient funds'\n    currency.transfer(amount=amount, to=ctx.caller)\n    __safe[ctx.caller] -= amount\n"
            },
            {
                "key": "con_txsl.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_txsl.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        14,
                        43,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_usdc.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_usdc', name='balances')\n__approvals = Hash(default_value=0, contract='con_usdc', name='approvals')\n__metadata = Hash(contract='con_usdc', name='metadata')\n__minter = Variable(contract='con_usdc', name='minter')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_usdc', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_usdc', name='ApproveEvent')\n__MintEvent = LogEvent(event='Mint', params={'to': {'type': str, 'idx': \n    True}, 'amount': {'type': (int, float, decimal)}}, contract='con_usdc',\n    name='MintEvent')\n__BurnEvent = LogEvent(event='Burn', params={'from': {'type': str, 'idx': \n    True}, 'amount': {'type': (int, float, decimal)}}, contract='con_usdc',\n    name='BurnEvent')\n\n\ndef ____():\n    __metadata['token_name'] = 'Wrapped USDC'\n    __metadata['token_symbol'] = 'xUSDC'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n    __minter.set(ctx.caller)\n\n\n@__export('con_usdc')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata.'\n    __metadata[key] = value\n\n\n@__export('con_usdc')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send.'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_usdc')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __approvals[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_usdc')\ndef transfer_from(amount: float, to: str, main_account: str):\n    approved = __approvals[main_account, ctx.caller]\n    assert amount > 0, 'Cannot send negative balances!'\n    assert approved >= amount, f'You approved {approved} but need {amount}'\n    assert __balances[main_account] >= amount, 'Not enough tokens to send!'\n    __approvals[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n\n@__export('con_usdc')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_usdc')\ndef change_minter(new_minter: str):\n    assert ctx.caller == __minter.get(), 'Only minter can change minter.'\n    __minter.set(new_minter)\n\n\n@__export('con_usdc')\ndef mint(amount: float, to: str):\n    assert ctx.caller == __minter.get(), 'Only minter can mint tokens.'\n    assert amount > 0, 'Cannot mint negative balances.'\n    __balances[to] += amount\n    __metadata['total_supply'] += amount\n    __MintEvent({'to': to, 'amount': amount})\n\n\n@__export('con_usdc')\ndef burn(amount: float):\n    assert amount > 0, 'Cannot burn negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to burn.'\n    __balances[ctx.caller] -= amount\n    __metadata['total_supply'] -= amount\n    __BurnEvent({'from': ctx.caller, 'amount': amount})\n"
            },
            {
                "key": "con_usdc.__developer__",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_usdc.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        3,
                        9,
                        19,
                        38,
                        10,
                        0
                    ]
                }
            },
            {
                "key": "con_usdc.approvals:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex_router_n",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "con_usdc.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": {
                    "__fixed__": "1.003"
                }
            },
            {
                "key": "con_usdc.balances:202aa637bd13ce266d8185c3f634c6a91c1d949133df89b13d36068c20b46960",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_usdc.balances:4118d7e4f02dda6c9e662cfab92ef8b7ec056c26078ef9e6846fe78a6bf057a2",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.balances:4c19914b25692d3f29f39eb8b98233b314602d7a83d61aa76857f232b114e038",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.balances:638de7c076f6f24bb212e7b2f0f5d6bdf2f4fb84fcef2fb2b3de3133d84eabac",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.balances:7cd5614d63c0421bc5de61417827c1f9c2ad3ac76c961a98bb8780850437838c",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.balances:a9b290de332bcdb147473d7c71a59a4186b1b93a77727b154d7b99c07366ce6b",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.balances:b23ac476c2d643b46b3d593ae655b434272d186e79ac959c71fe9c3b6972613b",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_usdc.balances:db4aea82c9238a3153b030418436ff69a19e455e58ac1239f0ac39a9d6147e0c",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.balances:e4a30256acfdc7c833474a605b02bb2b218b72ad1f34b76b8c2e075a69c0aeb0",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.balances:f1938d26e36ad995a5151a795db0015001de40635f1fbf1d971bae3518846ccd",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_usdc.metadata:operator",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_usdc.metadata:token_logo_url",
                "value": ""
            },
            {
                "key": "con_usdc.metadata:token_name",
                "value": "Wrapped USDC"
            },
            {
                "key": "con_usdc.metadata:token_symbol",
                "value": "xUSDC"
            },
            {
                "key": "con_usdc.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_usdc.metadata:total_supply",
                "value": {
                    "__fixed__": "4.003"
                }
            },
            {
                "key": "con_usdc.minter",
                "value": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
            },
            {
                "key": "con_verylongtoken.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_verylongtoken', name=\n    'balances')\n__metadata = Hash(contract='con_verylongtoken', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_verylongtoken', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_verylongtoken', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = (\n        'TEST TOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowng'\n        )\n    __metadata['token_symbol'\n        ] = 'TSTegeheherjejrjerwvnqwiuvnivonbeiuwbuivbwbuiwu'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_verylongtoken')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_verylongtoken')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_verylongtoken')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_verylongtoken')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_verylongtoken')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_verylongtoken.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_verylongtoken.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        4,
                        14,
                        20,
                        58,
                        3,
                        0
                    ]
                }
            },
            {
                "key": "con_verylongtoken.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": 1000000
            },
            {
                "key": "con_verylongtoken.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_verylongtoken.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_verylongtoken.metadata:token_name",
                "value": "TEST TOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowngTOKENtrehehegwiognweingwioengieowngwnigowengiwengiowngweionioegnwoignignewgiowngoingwiognwoigngoiwngiowng"
            },
            {
                "key": "con_verylongtoken.metadata:token_symbol",
                "value": "TSTegeheherjejrjerwvnqwiuvnivonbeiuwbuivbwbuiwu"
            },
            {
                "key": "con_verylongtoken.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_verylongtoken.metadata:total_supply",
                "value": 1000000
            },
            {
                "key": "con_wrapped_busd.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_wrapped_busd', name='balances'\n    )\n__approvals = Hash(default_value=0, contract='con_wrapped_busd', name=\n    'approvals')\n__metadata = Hash(contract='con_wrapped_busd', name='metadata')\n__minter = Variable(contract='con_wrapped_busd', name='minter')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_wrapped_busd', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_wrapped_busd', name='ApproveEvent')\n__MintEvent = LogEvent(event='Mint', params={'to': {'type': str, 'idx': \n    True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_wrapped_busd', name='MintEvent')\n__BurnEvent = LogEvent(event='Burn', params={'from': {'type': str, 'idx': \n    True}, 'amount': {'type': (int, float, decimal)}}, contract=\n    'con_wrapped_busd', name='BurnEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 0\n    __metadata['token_name'] = 'Binance-Peg BUSD Token'\n    __metadata['token_symbol'] = 'BUSD'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n    __minter.set(ctx.caller)\n\n\n@__export('con_wrapped_busd')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata.'\n    __metadata[key] = value\n\n\n@__export('con_wrapped_busd')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send.'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_wrapped_busd')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __approvals[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_wrapped_busd')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __approvals[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send. You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send.'\n    __approvals[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n\n@__export('con_wrapped_busd')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_wrapped_busd')\ndef change_minter(new_minter: str):\n    assert ctx.caller == __minter.get(), 'Only minter can change minter.'\n    __minter.set(new_minter)\n\n\n@__export('con_wrapped_busd')\ndef mint(amount: float, to: str):\n    assert ctx.caller == __minter.get(), 'Only minter can mint tokens.'\n    assert amount > 0, 'Cannot mint negative balances.'\n    __balances[to] += amount\n    __metadata['total_supply'] += amount\n    __MintEvent({'to': to, 'amount': amount})\n\n\n@__export('con_wrapped_busd')\ndef burn(amount: float):\n    assert amount > 0, 'Cannot burn negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to burn.'\n    __balances[ctx.caller] -= amount\n    __metadata['total_supply'] -= amount\n    __BurnEvent({'from': ctx.caller, 'amount': amount})\n"
            },
            {
                "key": "con_wrapped_busd.__developer__",
                "value": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05"
            },
            {
                "key": "con_wrapped_busd.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        28,
                        10,
                        28,
                        44,
                        0
                    ]
                }
            },
            {
                "key": "con_wrapped_busd.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": 0
            },
            {
                "key": "con_wrapped_busd.metadata:operator",
                "value": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05"
            },
            {
                "key": "con_wrapped_busd.metadata:token_name",
                "value": "Binance-Peg BUSD Token"
            },
            {
                "key": "con_wrapped_busd.metadata:token_symbol",
                "value": "BUSD"
            },
            {
                "key": "con_wrapped_busd.metadata:total_supply",
                "value": 0
            },
            {
                "key": "con_wrapped_busd.minter",
                "value": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05"
            },
            {
                "key": "con_wte.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_wte', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_wte', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_wte', name='balances')\n__metadata = Hash(contract='con_wte', name='metadata')\n\ndef ____(inp: float):\n    __balances[ctx.caller] = inp\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_wte')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_wte')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_wte')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_wte')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_wte')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_wte.__developer__",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_wte.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        10,
                        14,
                        26,
                        32,
                        0
                    ]
                }
            },
            {
                "key": "con_wte.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "1E+22"
                }
            },
            {
                "key": "con_wte.metadata:operator",
                "value": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0"
            },
            {
                "key": "con_wte.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_wte.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_wte.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_wte.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_x00001.__code__",
                "value": "__owner = Variable(contract='con_x00001', name='owner')\n__ticket_price = Variable(contract='con_x00001', name='ticket_price')\n__fee_percent = Variable(contract='con_x00001', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00001', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00001', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00001', name='tickets')\n__pool = Hash(default_value=0, contract='con_x00001', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00001', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00001', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00001', name='drawn')\n__winners = Hash(default_value='', contract='con_x00001', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00001', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00001', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    int, 'idx': False}, 'fee': {'type': int, 'idx': False}}, contract=\n    'con_x00001', name='WinnerDrawn')\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(100)\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00001')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = 0\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00001')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = str(rid) + '|' + ctx.caller\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    current_tickets = __tickets[rid]\n    current_tickets.append(ctx.caller)\n    __tickets[rid] = current_tickets\n    __pool[rid] = __pool[rid] + price\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00001')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    tks = __tickets[rid]\n    seed_val = str(block_hash) + str(block_num) + str(now)\n    hash_sum = 0\n    for char in seed_val:\n        hash_sum += ord(char)\n    winner_index = hash_sum % len(tks)\n    winner = tks[winner_index]\n    total = __pool[rid]\n    fee_amount = total * __fee_percent.get() // 100\n    prize_amount = total - fee_amount\n    __winners[rid] = winner\n    __drawn[rid] = True\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amount,\n        'fee': fee_amount})\n\n\n@__export('con_x00001')\ndef set_ticket_price(price: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(price)\n\n\n@__export('con_x00001')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert fee >= 0 and fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00001')\ndef set_max_tickets_per_user(max_tickets: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tickets)\n\n\n@__export('con_x00001')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00001')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00001')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00001')\ndef get_my_tickets(rid: int):\n    key = str(rid) + '|' + ctx.caller\n    return __user_counts[key]\n\n\n@__export('con_x00001')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00001.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00001.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        8,
                        37,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_x00001.current_round",
                "value": 2
            },
            {
                "key": "con_x00001.drawn:1",
                "value": true
            },
            {
                "key": "con_x00001.drawn:2",
                "value": true
            },
            {
                "key": "con_x00001.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00001.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00001.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00001.pool:1",
                "value": 20
            },
            {
                "key": "con_x00001.pool:2",
                "value": 10
            },
            {
                "key": "con_x00001.ticket_count:1",
                "value": 2
            },
            {
                "key": "con_x00001.ticket_count:2",
                "value": 1
            },
            {
                "key": "con_x00001.ticket_price",
                "value": 10
            },
            {
                "key": "con_x00001.tickets:1",
                "value": [
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
                ]
            },
            {
                "key": "con_x00001.tickets:2",
                "value": [
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
                ]
            },
            {
                "key": "con_x00001.winners:1",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00001.winners:2",
                "value": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
            },
            {
                "key": "con_x00002.__code__",
                "value": "__owner = Variable(contract='con_x00002', name='owner')\n__ticket_price = Variable(contract='con_x00002', name='ticket_price')\n__fee_percent = Variable(contract='con_x00002', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00002', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00002', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00002', name='tickets')\n__pool = Hash(default_value=0, contract='con_x00002', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00002', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00002', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00002', name='drawn')\n__winners = Hash(default_value='', contract='con_x00002', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00002', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00002', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    int, 'idx': False}, 'fee': {'type': int, 'idx': False}}, contract=\n    'con_x00002', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(100)\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00002')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = 0\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00002')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer(amount=price, to=ctx.this)\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = f'{rid}|{ctx.caller}'\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    __tickets[rid].append(ctx.caller)\n    __pool[rid] = __pool[rid] + price\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00002')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    tks = __tickets[rid]\n    seed_val = str(block_hash) + str(block_num) + str(now)\n    hash_sum = 0\n    for ch in seed_val:\n        hash_sum += ord(ch)\n    winner_index = hash_sum % len(tks)\n    winner = tks[winner_index]\n    total = __pool[rid]\n    fee_amount = total * __fee_percent.get() // 100\n    prize_amount = total - fee_amount\n    __winners[rid] = winner\n    __drawn[rid] = True\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amount,\n        'fee': fee_amount})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer(amount=prize_amount, to=winner)\n    currency.transfer(amount=fee_amount, to=__owner.get())\n\n\n@__export('con_x00002')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00002')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00002')\ndef set_ticket_price(price: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(price)\n\n\n@__export('con_x00002')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00002')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00002')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00002')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00002')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00002')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __user_counts[key]\n\n\n@__export('con_x00002')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00002.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00002.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        9,
                        56,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_x00002.current_round",
                "value": 1
            },
            {
                "key": "con_x00002.drawn:1",
                "value": false
            },
            {
                "key": "con_x00002.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00002.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00002.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00002.pool:1",
                "value": 0
            },
            {
                "key": "con_x00002.ticket_count:1",
                "value": 0
            },
            {
                "key": "con_x00002.ticket_price",
                "value": 10
            },
            {
                "key": "con_x00002.tickets:1",
                "value": []
            },
            {
                "key": "con_x00002.winners:1",
                "value": ""
            },
            {
                "key": "con_x00003.__code__",
                "value": "__owner = Variable(contract='con_x00003', name='owner')\n__ticket_price = Variable(contract='con_x00003', name='ticket_price')\n__fee_percent = Variable(contract='con_x00003', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00003', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00003', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00003', name='tickets')\n__pool = Hash(default_value=0, contract='con_x00003', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00003', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00003', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00003', name='drawn')\n__winners = Hash(default_value='', contract='con_x00003', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00003', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00003', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    int, 'idx': False}, 'fee': {'type': int, 'idx': False}}, contract=\n    'con_x00003', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(10)\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00003')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = 0\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00003')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer(amount=price, to=ctx.this)\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = f'{rid}|{ctx.caller}'\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    __tickets[rid].append(ctx.caller)\n    __pool[rid] = __pool[rid] + price\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00003')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    tks = __tickets[rid]\n    seed_val = str(block_hash) + str(block_num) + str(now)\n    hash_sum = 0\n    for ch in seed_val:\n        hash_sum += ord(ch)\n    winner_index = hash_sum % len(tks)\n    winner = tks[winner_index]\n    total = __pool[rid]\n    fee_amount = total * __fee_percent.get() // 100\n    prize_amount = total - fee_amount\n    __winners[rid] = winner\n    __drawn[rid] = True\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amount,\n        'fee': fee_amount})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer(amount=prize_amount, to=winner)\n    currency.transfer(amount=fee_amount, to=__owner.get())\n\n\n@__export('con_x00003')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00003')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00003')\ndef set_ticket_price(price: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(price)\n\n\n@__export('con_x00003')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00003')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00003')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00003')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00003')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00003')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __user_counts[key]\n\n\n@__export('con_x00003')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00003.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00003.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        10,
                        1,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_x00003.current_round",
                "value": 1
            },
            {
                "key": "con_x00003.drawn:1",
                "value": false
            },
            {
                "key": "con_x00003.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00003.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00003.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00003.pool:1",
                "value": 0
            },
            {
                "key": "con_x00003.ticket_count:1",
                "value": 0
            },
            {
                "key": "con_x00003.ticket_price",
                "value": 10
            },
            {
                "key": "con_x00003.tickets:1",
                "value": []
            },
            {
                "key": "con_x00003.winners:1",
                "value": ""
            },
            {
                "key": "con_x00004.__code__",
                "value": "__owner = Variable(contract='con_x00004', name='owner')\n__ticket_price = Variable(contract='con_x00004', name='ticket_price')\n__fee_percent = Variable(contract='con_x00004', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00004', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00004', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00004', name='tickets')\n__pool = Hash(default_value=0, contract='con_x00004', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00004', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00004', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00004', name='drawn')\n__winners = Hash(default_value='', contract='con_x00004', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00004', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00004', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    int, 'idx': False}, 'fee': {'type': int, 'idx': False}}, contract=\n    'con_x00004', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(1)\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00004')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = 0\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00004')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer(amount=price, to=ctx.this)\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = f'{rid}|{ctx.caller}'\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    __tickets[rid].append(ctx.caller)\n    __pool[rid] = __pool[rid] + price\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00004')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    tks = __tickets[rid]\n    seed_val = str(block_hash) + str(block_num) + str(now)\n    hash_sum = 0\n    for ch in seed_val:\n        hash_sum += ord(ch)\n    winner_index = hash_sum % len(tks)\n    winner = tks[winner_index]\n    total = __pool[rid]\n    fee_amount = total * __fee_percent.get() // 100\n    prize_amount = total - fee_amount\n    __winners[rid] = winner\n    __drawn[rid] = True\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amount,\n        'fee': fee_amount})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer(amount=prize_amount, to=winner)\n    currency.transfer(amount=fee_amount, to=__owner.get())\n\n\n@__export('con_x00004')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00004')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00004')\ndef set_ticket_price(price: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(price)\n\n\n@__export('con_x00004')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00004')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00004')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00004')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00004')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00004')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __user_counts[key]\n\n\n@__export('con_x00004')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00004.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00004.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        10,
                        5,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_x00004.current_round",
                "value": 1
            },
            {
                "key": "con_x00004.drawn:1",
                "value": false
            },
            {
                "key": "con_x00004.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00004.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00004.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00004.pool:1",
                "value": 0
            },
            {
                "key": "con_x00004.ticket_count:1",
                "value": 0
            },
            {
                "key": "con_x00004.ticket_price",
                "value": 1
            },
            {
                "key": "con_x00004.tickets:1",
                "value": []
            },
            {
                "key": "con_x00004.winners:1",
                "value": ""
            },
            {
                "key": "con_x00005.__code__",
                "value": "__owner = Variable(contract='con_x00005', name='owner')\n__ticket_price = Variable(contract='con_x00005', name='ticket_price')\n__fee_percent = Variable(contract='con_x00005', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00005', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00005', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00005', name='tickets')\n__pool = Hash(default_value=0, contract='con_x00005', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00005', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00005', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00005', name='drawn')\n__winners = Hash(default_value='', contract='con_x00005', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00005', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00005', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    int, 'idx': False}, 'fee': {'type': int, 'idx': False}}, contract=\n    'con_x00005', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(1)\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00005')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = 0\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00005')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer_from(amount=price, to=ctx.this, main_account=ctx.caller)\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = f'{rid}|{ctx.caller}'\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    __tickets[rid].append(ctx.caller)\n    __pool[rid] = __pool[rid] + price\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00005')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    tks = __tickets[rid]\n    seed_val = str(block_hash) + str(block_num) + str(now)\n    hash_sum = 0\n    for ch in seed_val:\n        hash_sum += ord(ch)\n    winner_index = hash_sum % len(tks)\n    winner = tks[winner_index]\n    total = __pool[rid]\n    fee_amount = total * __fee_percent.get() // 100\n    prize_amount = total - fee_amount\n    __winners[rid] = winner\n    __drawn[rid] = True\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amount,\n        'fee': fee_amount})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer(amount=prize_amount, to=winner)\n    currency.transfer(amount=fee_amount, to=__owner.get())\n\n\n@__export('con_x00005')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00005')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00005')\ndef set_ticket_price(price: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(price)\n\n\n@__export('con_x00005')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00005')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00005')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00005')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00005')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00005')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __user_counts[key]\n\n\n@__export('con_x00005')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00005.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00005.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        10,
                        51,
                        10,
                        0
                    ]
                }
            },
            {
                "key": "con_x00005.current_round",
                "value": 1
            },
            {
                "key": "con_x00005.drawn:1",
                "value": false
            },
            {
                "key": "con_x00005.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00005.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00005.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00005.pool:1",
                "value": 2
            },
            {
                "key": "con_x00005.ticket_count:1",
                "value": 2
            },
            {
                "key": "con_x00005.ticket_price",
                "value": 1
            },
            {
                "key": "con_x00005.tickets:1",
                "value": []
            },
            {
                "key": "con_x00005.winners:1",
                "value": ""
            },
            {
                "key": "con_x00006.__code__",
                "value": "__owner = Variable(contract='con_x00006', name='owner')\n__ticket_price = Variable(contract='con_x00006', name='ticket_price')\n__fee_percent = Variable(contract='con_x00006', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00006', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00006', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00006', name='tickets')\n__pool = Hash(default_value=0, contract='con_x00006', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00006', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00006', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00006', name='drawn')\n__winners = Hash(default_value='', contract='con_x00006', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00006', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00006', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    int, 'idx': False}, 'fee': {'type': int, 'idx': False}}, contract=\n    'con_x00006', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(1)\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00006')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = 0\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00006')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer_from(amount=price, to=ctx.this, main_account=ctx.caller)\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = f'{rid}|{ctx.caller}'\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    __tickets[rid].append(ctx.caller)\n    __pool[rid] = __pool[rid] + price\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00006')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    tks = __tickets[rid]\n    assert len(tks) > 0, 'No tickets sold (tickets list empty)'\n    seed_val = str(block_hash) + str(block_num) + str(now)\n    hash_sum = 0\n    for ch in seed_val:\n        hash_sum += ord(ch)\n    winner_index = hash_sum % len(tks)\n    winner = tks[winner_index]\n    total = __pool[rid]\n    fee_amount = total * __fee_percent.get() // 100\n    prize_amount = total - fee_amount\n    __winners[rid] = winner\n    __drawn[rid] = True\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amount,\n        'fee': fee_amount})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer(amount=prize_amount, to=winner)\n    currency.transfer(amount=fee_amount, to=__owner.get())\n\n\n@__export('con_x00006')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00006')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00006')\ndef set_ticket_price(price: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(price)\n\n\n@__export('con_x00006')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00006')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00006')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00006')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00006')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00006')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __user_counts[key]\n\n\n@__export('con_x00006')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00006.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00006.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        11,
                        19,
                        5,
                        0
                    ]
                }
            },
            {
                "key": "con_x00006.current_round",
                "value": 1
            },
            {
                "key": "con_x00006.drawn:1",
                "value": false
            },
            {
                "key": "con_x00006.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00006.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00006.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00006.pool:1",
                "value": 1
            },
            {
                "key": "con_x00006.ticket_count:1",
                "value": 1
            },
            {
                "key": "con_x00006.ticket_price",
                "value": 1
            },
            {
                "key": "con_x00006.tickets:1",
                "value": []
            },
            {
                "key": "con_x00006.winners:1",
                "value": ""
            },
            {
                "key": "con_x00007.__code__",
                "value": "__owner = Variable(contract='con_x00007', name='owner')\n__ticket_price = Variable(contract='con_x00007', name='ticket_price')\n__fee_percent = Variable(contract='con_x00007', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00007', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00007', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00007', name='tickets')\n__pool = Hash(default_value=0, contract='con_x00007', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00007', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00007', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00007', name='drawn')\n__winners = Hash(default_value='', contract='con_x00007', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00007', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00007', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    int, 'idx': False}, 'fee': {'type': int, 'idx': False}}, contract=\n    'con_x00007', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(1)\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00007')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = 0\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00007')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer_from(amount=price, to=ctx.this, main_account=ctx.caller)\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = f'{rid}|{ctx.caller}'\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    current_list = __tickets[rid]\n    current_list.append(ctx.caller)\n    __tickets[rid] = current_list\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __pool[rid] = __pool[rid] + price\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00007')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    tks = __tickets[rid]\n    assert len(tks) > 0, 'No tickets sold (tickets list empty)'\n    seed_val = str(block_hash) + str(block_num) + str(now)\n    total = 0\n    for ch in seed_val:\n        total += ord(ch)\n    winner = tks[total % len(tks)]\n    pot = __pool[rid]\n    fee_amt = pot * __fee_percent.get() // 100\n    prize_amt = pot - fee_amt\n    __drawn[rid] = True\n    __winners[rid] = winner\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amt,\n        'fee': fee_amt})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer(amount=prize_amt, to=winner)\n    currency.transfer(amount=fee_amt, to=__owner.get())\n\n\n@__export('con_x00007')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00007')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00007')\ndef set_ticket_price(price: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(price)\n\n\n@__export('con_x00007')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00007')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00007')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00007')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00007')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00007')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __user_counts[key]\n\n\n@__export('con_x00007')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00007.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00007.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        11,
                        24,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_x00007.current_round",
                "value": 1
            },
            {
                "key": "con_x00007.drawn:1",
                "value": false
            },
            {
                "key": "con_x00007.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00007.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00007.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00007.pool:1",
                "value": 1
            },
            {
                "key": "con_x00007.ticket_count:1",
                "value": 1
            },
            {
                "key": "con_x00007.ticket_price",
                "value": 1
            },
            {
                "key": "con_x00007.tickets:1",
                "value": [
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
                ]
            },
            {
                "key": "con_x00007.winners:1",
                "value": ""
            },
            {
                "key": "con_x00008.__code__",
                "value": "__owner = Variable(contract='con_x00008', name='owner')\n__ticket_price = Variable(contract='con_x00008', name='ticket_price')\n__fee_percent = Variable(contract='con_x00008', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00008', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00008', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00008', name='tickets')\n__pool = Hash(default_value=decimal('0'), contract='con_x00008', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00008', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00008', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00008', name='drawn')\n__winners = Hash(default_value='', contract='con_x00008', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00008', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00008', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    (int, float, decimal), 'idx': False}, 'fee': {'type': (int, float,\n    decimal), 'idx': False}}, contract='con_x00008', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(decimal('1.0'))\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00008')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = decimal('0')\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00008')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer_from(amount=price, to=ctx.this, main_account=ctx.caller)\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = f'{rid}|{ctx.caller}'\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    lst = __tickets[rid]\n    lst.append(ctx.caller)\n    __tickets[rid] = lst\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __pool[rid] = __pool[rid] + price\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00008')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    lst = __tickets[rid]\n    assert len(lst) > 0, 'No tickets list entries'\n    seed = str(block_hash) + str(block_num) + str(now)\n    total = 0\n    for ch in seed:\n        total = total + ord(ch)\n    winner = lst[total % len(lst)]\n    pot = __pool[rid]\n    pct = __fee_percent.get()\n    fee_amt = pot * decimal(str(pct)) / decimal('100')\n    prize_amt = pot - fee_amt\n    __drawn[rid] = True\n    __winners[rid] = winner\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amt,\n        'fee': fee_amt})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    if prize_amt > decimal('0'):\n        currency.transfer(amount=prize_amt, to=winner)\n    if fee_amt > decimal('0'):\n        currency.transfer(amount=fee_amt, to=__owner.get())\n\n\n@__export('con_x00008')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00008')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00008')\ndef set_ticket_price(price: float):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(decimal(str(price)))\n\n\n@__export('con_x00008')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00008')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00008')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00008')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00008')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00008')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __user_counts[key]\n\n\n@__export('con_x00008')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00008.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00008.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        11,
                        40,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_x00008.current_round",
                "value": 3
            },
            {
                "key": "con_x00008.drawn:1",
                "value": true
            },
            {
                "key": "con_x00008.drawn:2",
                "value": true
            },
            {
                "key": "con_x00008.drawn:3",
                "value": false
            },
            {
                "key": "con_x00008.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00008.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00008.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00008.pool:1",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_x00008.pool:2",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_x00008.pool:3",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_x00008.ticket_count:1",
                "value": 1
            },
            {
                "key": "con_x00008.ticket_count:2",
                "value": 10
            },
            {
                "key": "con_x00008.ticket_count:3",
                "value": 0
            },
            {
                "key": "con_x00008.ticket_price",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_x00008.tickets:1",
                "value": [
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
                ]
            },
            {
                "key": "con_x00008.tickets:2",
                "value": [
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
                ]
            },
            {
                "key": "con_x00008.tickets:3",
                "value": []
            },
            {
                "key": "con_x00008.winners:1",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00008.winners:2",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00008.winners:3",
                "value": ""
            },
            {
                "key": "con_x00009.__code__",
                "value": "__owner = Variable(contract='con_x00009', name='owner')\n__ticket_price = Variable(contract='con_x00009', name='ticket_price')\n__fee_percent = Variable(contract='con_x00009', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00009', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00009', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00009', name='tickets')\n__pool = Hash(default_value=decimal('0'), contract='con_x00009', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00009', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00009', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00009', name='drawn')\n__winners = Hash(default_value='', contract='con_x00009', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00009', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00009', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    (int, float, decimal), 'idx': False}, 'fee': {'type': (int, float,\n    decimal), 'idx': False}}, contract='con_x00009', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(decimal('1.0'))\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00009')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = decimal('0')\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00009')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer_from(amount=price, to=ctx.this, main_account=ctx.caller)\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = f'{rid}|{ctx.caller}'\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    lst = __tickets[rid]\n    lst.append(ctx.caller)\n    __tickets[rid] = lst\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __pool[rid] = __pool[rid] + price\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00009')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    lst = __tickets[rid]\n    seed = str(block_hash) + str(block_num) + str(now)\n    total = 0\n    for ch in seed:\n        total += ord(ch)\n    winner = lst[total % len(lst)]\n    pot = __pool[rid]\n    pct = __fee_percent.get()\n    fee_amt = pot * decimal(str(pct)) / decimal('100')\n    prize_amt = pot - fee_amt\n    __drawn[rid] = True\n    __winners[rid] = winner\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amt,\n        'fee': fee_amt})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    if prize_amt > decimal('0'):\n        currency.transfer(amount=prize_amt, to=winner)\n    if fee_amt > decimal('0'):\n        currency.transfer(amount=fee_amt, to=__owner.get())\n\n\n@__export('con_x00009')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00009')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00009')\ndef set_ticket_price(price: float):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(decimal(str(price)))\n\n\n@__export('con_x00009')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00009')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00009')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00009')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00009')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00009')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __user_counts[key]\n\n\n@__export('con_x00009')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00009.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00009.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        13,
                        53,
                        57,
                        0
                    ]
                }
            },
            {
                "key": "con_x00009.current_round",
                "value": 2
            },
            {
                "key": "con_x00009.drawn:1",
                "value": true
            },
            {
                "key": "con_x00009.drawn:2",
                "value": false
            },
            {
                "key": "con_x00009.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00009.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00009.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00009.pool:1",
                "value": {
                    "__fixed__": "9"
                }
            },
            {
                "key": "con_x00009.pool:2",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_x00009.ticket_count:1",
                "value": 9
            },
            {
                "key": "con_x00009.ticket_count:2",
                "value": 1
            },
            {
                "key": "con_x00009.ticket_price",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_x00009.tickets:1",
                "value": [
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
                ]
            },
            {
                "key": "con_x00009.tickets:2",
                "value": [
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
                ]
            },
            {
                "key": "con_x00009.winners:1",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00009.winners:2",
                "value": ""
            },
            {
                "key": "con_x00010.__code__",
                "value": "__owner = Variable(contract='con_x00010', name='owner')\n__ticket_price = Variable(contract='con_x00010', name='ticket_price')\n__fee_percent = Variable(contract='con_x00010', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00010', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00010', name='current_round')\n__ticket_holders = Hash(default_value=[], contract='con_x00010', name=\n    'ticket_holders')\n__tickets = Hash(default_value=0, contract='con_x00010', name='tickets')\n__pool = Hash(default_value=decimal('0'), contract='con_x00010', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00010', name=\n    'ticket_count')\n__drawn = Hash(default_value=False, contract='con_x00010', name='drawn')\n__winners = Hash(default_value='', contract='con_x00010', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00010', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00010', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    (int, float, decimal), 'idx': False}, 'fee': {'type': (int, float,\n    decimal), 'idx': False}}, contract='con_x00010', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(decimal('1.0'))\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00010')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __ticket_holders[rid] = []\n    __pool[rid] = decimal('0')\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00010')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer_from(amount=price, to=ctx.this, main_account=ctx.caller)\n    key = f'{rid}|{ctx.caller}'\n    __tickets[key] = __tickets[key] + 1\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        assert __tickets[key] <= cap, 'Ticket limit reached'\n    lst = __ticket_holders[rid]\n    lst.append(ctx.caller)\n    __ticket_holders[rid] = lst\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __pool[rid] = __pool[rid] + price\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00010')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    seed = str(block_hash) + str(block_num) + str(now)\n    total = 0\n    for ch in seed:\n        total += ord(ch)\n    lst = __ticket_holders[rid]\n    winner = lst[total % len(lst)]\n    pot = __pool[rid]\n    pct = __fee_percent.get()\n    fee_amt = pot * decimal(str(pct)) / decimal('100')\n    prize_amt = pot - fee_amt\n    __drawn[rid] = True\n    __winners[rid] = winner\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amt,\n        'fee': fee_amt})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    if prize_amt > decimal('0'):\n        currency.transfer(amount=prize_amt, to=winner)\n    if fee_amt > decimal('0'):\n        currency.transfer(amount=fee_amt, to=__owner.get())\n\n\n@__export('con_x00010')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00010')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00010')\ndef set_ticket_price(price: float):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(decimal(str(price)))\n\n\n@__export('con_x00010')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00010')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00010')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00010')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00010')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00010')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __tickets[key]\n\n\n@__export('con_x00010')\ndef get_winner(rid: int):\n    return __winners[rid]\n"
            },
            {
                "key": "con_x00010.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00010.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        14,
                        32,
                        45,
                        0
                    ]
                }
            },
            {
                "key": "con_x00010.current_round",
                "value": 1
            },
            {
                "key": "con_x00010.drawn:1",
                "value": false
            },
            {
                "key": "con_x00010.fee_percent",
                "value": 10
            },
            {
                "key": "con_x00010.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00010.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00010.pool:1",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_x00010.ticket_count:1",
                "value": 0
            },
            {
                "key": "con_x00010.ticket_holders:1",
                "value": []
            },
            {
                "key": "con_x00010.ticket_price",
                "value": {
                    "__fixed__": "1"
                }
            },
            {
                "key": "con_x00010.winners:1",
                "value": ""
            },
            {
                "key": "con_x00011.__code__",
                "value": "__owner = Variable(contract='con_x00011', name='owner')\n__ticket_price = Variable(contract='con_x00011', name='ticket_price')\n__fee_percent = Variable(contract='con_x00011', name='fee_percent')\n__max_tickets_per_user = Variable(contract='con_x00011', name=\n    'max_tickets_per_user')\n__current_round = Variable(contract='con_x00011', name='current_round')\n__tickets = Hash(default_value=[], contract='con_x00011', name='tickets')\n__pool = Hash(default_value=decimal('0'), contract='con_x00011', name='pool')\n__ticket_count = Hash(default_value=0, contract='con_x00011', name=\n    'ticket_count')\n__user_counts = Hash(default_value=0, contract='con_x00011', name='user_counts'\n    )\n__drawn = Hash(default_value=False, contract='con_x00011', name='drawn')\n__winners = Hash(default_value='', contract='con_x00011', name='winners')\n__LotteryStarted = LogEvent(event='LotteryStarted', params={'round': {\n    'type': int, 'idx': False}}, contract='con_x00011', name='LotteryStarted')\n__TicketPurchased = LogEvent(event='TicketPurchased', params={'round': {\n    'type': int, 'idx': False}, 'buyer': {'type': str, 'idx': True}},\n    contract='con_x00011', name='TicketPurchased')\n__WinnerDrawn = LogEvent(event='WinnerDrawn', params={'round': {'type': int,\n    'idx': False}, 'winner': {'type': str, 'idx': True}, 'prize': {'type':\n    (int, float, decimal), 'idx': False}, 'fee': {'type': (int, float,\n    decimal), 'idx': False}}, contract='con_x00011', name='WinnerDrawn')\ncurrency_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to'))]\n\n\ndef ____():\n    __owner.set(ctx.caller)\n    __ticket_price.set(decimal('1.0'))\n    __fee_percent.set(10)\n    __max_tickets_per_user.set(0)\n    __current_round.set(0)\n\n\n@__export('con_x00011')\ndef start_lottery():\n    assert ctx.caller == __owner.get(), 'Only owner can start lottery'\n    rid = __current_round.get() + 1\n    __current_round.set(rid)\n    __tickets[rid] = []\n    __pool[rid] = decimal('0')\n    __ticket_count[rid] = 0\n    __drawn[rid] = False\n    __winners[rid] = ''\n    __LotteryStarted({'round': rid})\n\n\n@__export('con_x00011')\ndef buy_ticket():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert not __drawn[rid], 'Lottery closed'\n    price = __ticket_price.get()\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    currency.transfer_from(amount=price, to=ctx.this, main_account=ctx.caller)\n    cap = __max_tickets_per_user.get()\n    if cap > 0:\n        key = f'{rid}|{ctx.caller}'\n        cnt = __user_counts[key]\n        assert cnt < cap, 'Ticket limit reached'\n        __user_counts[key] = cnt + 1\n    lst = __tickets[rid]\n    lst.append(ctx.caller)\n    __tickets[rid] = lst\n    __ticket_count[rid] = __ticket_count[rid] + 1\n    __pool[rid] = __pool[rid] + price\n    __TicketPurchased({'round': rid, 'buyer': ctx.caller})\n\n\n@__export('con_x00011')\ndef draw():\n    rid = __current_round.get()\n    assert rid > 0, 'No active lottery'\n    assert ctx.caller == __owner.get(), 'Only owner can draw'\n    assert not __drawn[rid], 'Already drawn'\n    assert __ticket_count[rid] > 0, 'No tickets sold'\n    lst = __tickets[rid]\n    seed = str(block_hash) + str(block_num) + str(now)\n    total = 0\n    for ch in seed:\n        total += ord(ch)\n    winner = lst[total % len(lst)]\n    pot = __pool[rid]\n    pct = __fee_percent.get()\n    fee_amt = pot * decimal(str(pct)) / decimal('100')\n    prize_amt = pot - fee_amt\n    __drawn[rid] = True\n    __winners[rid] = winner\n    __WinnerDrawn({'round': rid, 'winner': winner, 'prize': prize_amt,\n        'fee': fee_amt})\n    currency = importlib.import_module('currency')\n    assert importlib.enforce_interface(currency, currency_interface)\n    if prize_amt > decimal('0'):\n        currency.transfer(amount=prize_amt, to=winner)\n    if fee_amt > decimal('0'):\n        currency.transfer(amount=fee_amt, to=__owner.get())\n\n\n@__export('con_x00011')\ndef is_admin():\n    return ctx.caller == __owner.get()\n\n\n@__export('con_x00011')\ndef get_owner():\n    return __owner.get()\n\n\n@__export('con_x00011')\ndef set_ticket_price(price: float):\n    assert ctx.caller == __owner.get(), 'Only owner can set price'\n    __ticket_price.set(decimal(str(price)))\n\n\n@__export('con_x00011')\ndef set_fee_percent(fee: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set fee'\n    assert 0 <= fee <= 100, 'Fee must be 0-100%'\n    __fee_percent.set(fee)\n\n\n@__export('con_x00011')\ndef set_max_tickets_per_user(max_tix: int):\n    assert ctx.caller == __owner.get(), 'Only owner can set limit'\n    __max_tickets_per_user.set(max_tix)\n\n\n@__export('con_x00011')\ndef get_current_round():\n    return __current_round.get()\n\n\n@__export('con_x00011')\ndef get_pool(rid: int):\n    return __pool[rid]\n\n\n@__export('con_x00011')\ndef get_ticket_count(rid: int):\n    return __ticket_count[rid]\n\n\n@__export('con_x00011')\ndef get_my_tickets(rid: int):\n    key = f'{rid}|{ctx.caller}'\n    return __user_counts[key]\n\n\n@__export('con_x00011')\ndef get_winner(rid: int):\n    return __winners[rid]\n\n\n@__export('con_x00011')\ndef has_voted(rid: int, who: str) ->bool:\n    \"\"\"\n    Returns true if `who` has bought at least one ticket in round `rid`.\n    \"\"\"\n    key = f'{rid}|{who}'\n    return __user_counts[key] > 0\n"
            },
            {
                "key": "con_x00011.__developer__",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00011.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        9,
                        44,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_x00011.current_round",
                "value": 3
            },
            {
                "key": "con_x00011.drawn:1",
                "value": true
            },
            {
                "key": "con_x00011.drawn:2",
                "value": true
            },
            {
                "key": "con_x00011.drawn:3",
                "value": false
            },
            {
                "key": "con_x00011.fee_percent",
                "value": 5
            },
            {
                "key": "con_x00011.max_tickets_per_user",
                "value": 0
            },
            {
                "key": "con_x00011.owner",
                "value": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
            },
            {
                "key": "con_x00011.pool:1",
                "value": {
                    "__fixed__": "1E+1"
                }
            },
            {
                "key": "con_x00011.pool:2",
                "value": {
                    "__fixed__": "14"
                }
            },
            {
                "key": "con_x00011.pool:3",
                "value": {
                    "__fixed__": "12"
                }
            },
            {
                "key": "con_x00011.ticket_count:1",
                "value": 10
            },
            {
                "key": "con_x00011.ticket_count:2",
                "value": 7
            },
            {
                "key": "con_x00011.ticket_count:3",
                "value": 6
            },
            {
                "key": "con_x00011.ticket_price",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "con_x00011.tickets:1",
                "value": [
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                    "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                    "15628f7ae7bfb16ce1cc9a16af7d349d7e898d5b22a05aeb55817602d0c5350b",
                    "15628f7ae7bfb16ce1cc9a16af7d349d7e898d5b22a05aeb55817602d0c5350b"
                ]
            },
            {
                "key": "con_x00011.tickets:2",
                "value": [
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "15628f7ae7bfb16ce1cc9a16af7d349d7e898d5b22a05aeb55817602d0c5350b",
                    "15628f7ae7bfb16ce1cc9a16af7d349d7e898d5b22a05aeb55817602d0c5350b",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1"
                ]
            },
            {
                "key": "con_x00011.tickets:3",
                "value": [
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                    "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                    "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                    "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a"
                ]
            },
            {
                "key": "con_x00011.winners:1",
                "value": "15628f7ae7bfb16ce1cc9a16af7d349d7e898d5b22a05aeb55817602d0c5350b"
            },
            {
                "key": "con_x00011.winners:2",
                "value": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7"
            },
            {
                "key": "con_x00011.winners:3",
                "value": ""
            },
            {
                "key": "con_x1.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_x1', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_x1', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_x1', name='bets')\n__participants = Hash(default_value=False, contract='con_x1', name=\n    'participants')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['allowedTokens'] = ['currency']\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_x1')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert token_contract in __game['allowedTokens'], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n\n\n@__export('con_x1')\ndef start_race():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racing_turtles = set()\n    for key in __bets:\n        racing_turtles.add(key)\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    turtle_names = list(__game['turtleData'].keys())\n    probabilities = [__game['turtleData'][turtle]['probability'] for turtle in\n        turtle_names]\n    winning_turtle = random.choices(turtle_names, weights=probabilities, k=1)[0\n        ]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner_paid = False\n    for (player, turtle_name), bet_amount in __bets.items():\n        if turtle_name == winning_turtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            winner_paid = True\n            break\n    assert winner_paid, 'No valid winner found'\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_x1')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_x1')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowedTokens'] = tokens\n\n\n@__export('con_x1')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_x1.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        48,
                        19,
                        0
                    ]
                }
            },
            {
                "key": "con_x1.game:allowedTokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_x1.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_x1.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x1.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_x1.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_x2.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_x2', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_x2', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_x2', name='bets')\n__participants = Hash(default_value=False, contract='con_x2', name=\n    'participants')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['allowedTokens'] = ['currency']\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_x2')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert token_contract in __game['allowedTokens'], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n\n\n@__export('con_x2')\ndef start_race():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racing_turtles = set()\n    for key in __bets:\n        turtle_name = key[1] if isinstance(key, tuple) and len(key\n            ) > 1 else key\n        racing_turtles.add(turtle_name)\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    for (player, turtle_name), bet_amount in __bets.items():\n        assert __turtleOwners[turtle_name\n            ] is not None, f'Turtle {turtle_name} does not have an owner'\n    turtle_names = list(__game['turtleData'].keys())\n    probabilities = [__game['turtleData'][turtle]['probability'] for turtle in\n        turtle_names]\n    winning_turtle = random.choices(turtle_names, weights=probabilities, k=1)[0\n        ]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner_paid = False\n    for (player, turtle_name), bet_amount in __bets.items():\n        if turtle_name == winning_turtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            winner_paid = True\n            break\n    assert winner_paid, 'No valid winner found'\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_x2')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_x2')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowedTokens'] = tokens\n\n\n@__export('con_x2')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_x2.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        49,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_x2.game:allowedTokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_x2.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_x2.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x2.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_x2.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_x3.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_x3', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_x3', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_x3', name='bets')\n__participants = Hash(default_value=False, contract='con_x3', name=\n    'participants')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['allowedTokens'] = ['currency']\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_x3')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert token_contract in __game['allowedTokens'], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n\n\n@__export('con_x3')\ndef start_race():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racing_turtles = set()\n    for turtle_name, owner in __turtleOwners.items():\n        if owner is not None:\n            racing_turtles.add(turtle_name)\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have owners to start the race'\n    for turtle_name in racing_turtles:\n        assert __turtleOwners[turtle_name\n            ] is not None, f'Turtle {turtle_name} does not have an owner'\n    turtle_names = list(__game['turtleData'].keys())\n    probabilities = [__game['turtleData'][turtle]['probability'] for turtle in\n        turtle_names]\n    winning_turtle = random.choices(turtle_names, weights=probabilities, k=1)[0\n        ]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    for (player, turtle_name), bet_amount in __bets.items():\n        if turtle_name == winning_turtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            break\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_x3')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_x3')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowedTokens'] = tokens\n\n\n@__export('con_x3')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_x3.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        52,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_x3.game:allowedTokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_x3.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_x3.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x3.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_x3.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_x4.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_x4', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_x4', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_x4', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_x4')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_x4')\ndef start_race():\n    racing_turtles = [turtle for turtle in __bets if __bets[turtle] > 0]\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    probabilities = [__game['turtleData'][turtle]['probability'] for turtle in\n        racing_turtles]\n    winning_turtle = random.choices(racing_turtles, weights=probabilities, k=1\n        )[0]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_x4')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_x4')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_x4.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x4.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        0,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_x4.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_x4.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x4.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_x4.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_x5.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_x5', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_x5', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_x5', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_x5')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_x5')\ndef start_race():\n    racing_turtles = [turtle for turtle in __bets if __bets[turtle] > 0]\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    probabilities = [__game['turtleData'][turtle]['probability'] for turtle in\n        racing_turtles]\n    winning_turtle = random.choices(racing_turtles, weights=probabilities, k=1\n        )[0]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_x5')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_x5')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_x5.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x5.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        3,
                        56,
                        0
                    ]
                }
            },
            {
                "key": "con_x5.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_x5.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x5.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_x5.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_x6.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_x6', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_x6', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_x6', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_x6')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_x6')\ndef start_race():\n    racing_turtles = [turtle for turtle in __bets if __bets[turtle] > 0]\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    return 'paso'\n\n\n@__export('con_x6')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_x6')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_x6.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x6.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        7,
                        13,
                        0
                    ]
                }
            },
            {
                "key": "con_x6.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_x6.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x6.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_x6.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_x7.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_x7', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_x7', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_x7', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData', 'Red', 'price'] = 10\n    __game['turtleData', 'Red', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Green', 'price'] = 20\n    __game['turtleData', 'Green', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Blue', 'price'] = 15\n    __game['turtleData', 'Blue', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Yellow', 'price'] = 5\n    __game['turtleData', 'Yellow', 'probability'] = decimal('0.15')\n    __game['turtleData', 'Purple', 'price'] = 50\n    __game['turtleData', 'Purple', 'probability'] = decimal('0.15')\n\n\n@__export('con_x7')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert __game['turtleData', turtle_name, 'price'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData', turtle_name, 'price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_x7')\ndef start_race():\n    racing_turtles = []\n    probabilities = []\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __turtleOwners[turtle_name] is not None:\n            racing_turtles.append(turtle_name)\n            probabilities.append(__game['turtleData', turtle_name,\n                'probability'])\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    winning_turtle = random.choices(racing_turtles, weights=probabilities, k=1\n        )[0]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_x7')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_x7')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_x7.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x7.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        8,
                        48,
                        0
                    ]
                }
            },
            {
                "key": "con_x7.bets:Green",
                "value": 20
            },
            {
                "key": "con_x7.bets:Red",
                "value": 10
            },
            {
                "key": "con_x7.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_x7.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x7.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_x7.game:turtleData:Blue:price",
                "value": 15
            },
            {
                "key": "con_x7.game:turtleData:Blue:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_x7.game:turtleData:Green:price",
                "value": 20
            },
            {
                "key": "con_x7.game:turtleData:Green:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_x7.game:turtleData:Purple:price",
                "value": 50
            },
            {
                "key": "con_x7.game:turtleData:Purple:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_x7.game:turtleData:Red:price",
                "value": 10
            },
            {
                "key": "con_x7.game:turtleData:Red:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_x7.game:turtleData:Yellow:price",
                "value": 5
            },
            {
                "key": "con_x7.game:turtleData:Yellow:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_x7.turtleOwners:Green",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x7.turtleOwners:Red",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x8.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_x8', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_x8', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_x8', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData', 'Red', 'price'] = 10\n    __game['turtleData', 'Red', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Green', 'price'] = 20\n    __game['turtleData', 'Green', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Blue', 'price'] = 15\n    __game['turtleData', 'Blue', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Yellow', 'price'] = 5\n    __game['turtleData', 'Yellow', 'probability'] = decimal('0.15')\n    __game['turtleData', 'Purple', 'price'] = 50\n    __game['turtleData', 'Purple', 'probability'] = decimal('0.15')\n\n\n@__export('con_x8')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert __game['turtleData', turtle_name, 'price'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData', turtle_name, 'price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_x8')\ndef start_race():\n    racing_turtles = []\n    probabilities = []\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __turtleOwners[turtle_name] is not None:\n            racing_turtles.append(turtle_name)\n            probabilities.append(__game['turtleData', turtle_name,\n                'probability'])\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    cumulative_probabilities = []\n    cumulative_sum = 0\n    for probability in probabilities:\n        cumulative_sum += probability\n        cumulative_probabilities.append(cumulative_sum)\n    random_number = random.randint(0, 100) / decimal('100.0')\n    winning_turtle = None\n    index = 0\n    for cumulative_probability in cumulative_probabilities:\n        if random_number <= cumulative_probability:\n            winning_turtle = racing_turtles[index]\n            break\n        index += 1\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_x8')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_x8')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_x8.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x8.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        26,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_x8.bets:Green",
                "value": 20
            },
            {
                "key": "con_x8.bets:Red",
                "value": 10
            },
            {
                "key": "con_x8.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_x8.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x8.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_x8.game:turtleData:Blue:price",
                "value": 15
            },
            {
                "key": "con_x8.game:turtleData:Blue:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_x8.game:turtleData:Green:price",
                "value": 20
            },
            {
                "key": "con_x8.game:turtleData:Green:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_x8.game:turtleData:Purple:price",
                "value": 50
            },
            {
                "key": "con_x8.game:turtleData:Purple:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_x8.game:turtleData:Red:price",
                "value": 10
            },
            {
                "key": "con_x8.game:turtleData:Red:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_x8.game:turtleData:Yellow:price",
                "value": 5
            },
            {
                "key": "con_x8.game:turtleData:Yellow:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_x8.turtleOwners:Green",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x8.turtleOwners:Red",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x9.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_x9', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_x9', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_x9', name='bets')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData', 'Red', 'price'] = 10\n    __game['turtleData', 'Red', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Green', 'price'] = 20\n    __game['turtleData', 'Green', 'probability'] = decimal('0.2')\n    __game['turtleData', 'Blue', 'price'] = 15\n    __game['turtleData', 'Blue', 'probability'] = decimal('0.25')\n    __game['turtleData', 'Yellow', 'price'] = 5\n    __game['turtleData', 'Yellow', 'probability'] = decimal('0.15')\n    __game['turtleData', 'Purple', 'price'] = 50\n    __game['turtleData', 'Purple', 'probability'] = decimal('0.15')\n\n\n@__export('con_x9')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert __game['turtleData', turtle_name, 'price'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData', turtle_name, 'price']\n    assert amount > 0, 'Bet amount must be greater than zero'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n    __bets[turtle_name] += amount\n\n\n@__export('con_x9')\ndef start_race():\n    racing_turtles = []\n    probabilities = []\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __turtleOwners[turtle_name] is not None:\n            racing_turtles.append(turtle_name)\n            probabilities.append(__game['turtleData', turtle_name,\n                'probability'])\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    cumulative_probabilities = []\n    cumulative_sum = 0\n    for probability in probabilities:\n        cumulative_sum += probability\n        cumulative_probabilities.append(cumulative_sum)\n    random_number = random.randint(0, 100) / decimal('100.0')\n    winning_turtle = None\n    index = 0\n    for cumulative_probability in cumulative_probabilities:\n        if random_number <= cumulative_probability:\n            winning_turtle = racing_turtles[index]\n            break\n        index += 1\n    total_bet_pool = 0\n    for turtle_name in ['Red', 'Green', 'Blue', 'Yellow', 'Purple']:\n        if __bets[turtle_name] > 0:\n            total_bet_pool += __bets[turtle_name]\n    winnings = total_bet_pool * (1 - __game['commission'])\n    winner = __turtleOwners[winning_turtle]\n    token = importlib.import_module('currency')\n    token.transfer(amount=winnings, to=winner)\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __turtleOwners.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_x9')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_x9')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_x9.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x9.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        3,
                        31,
                        23,
                        0
                    ]
                }
            },
            {
                "key": "con_x9.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_x9.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_x9.game:totalRaces",
                "value": 1
            },
            {
                "key": "con_x9.game:turtleData:Blue:price",
                "value": 15
            },
            {
                "key": "con_x9.game:turtleData:Blue:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_x9.game:turtleData:Green:price",
                "value": 20
            },
            {
                "key": "con_x9.game:turtleData:Green:probability",
                "value": {
                    "__fixed__": "0.2"
                }
            },
            {
                "key": "con_x9.game:turtleData:Purple:price",
                "value": 50
            },
            {
                "key": "con_x9.game:turtleData:Purple:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_x9.game:turtleData:Red:price",
                "value": 10
            },
            {
                "key": "con_x9.game:turtleData:Red:probability",
                "value": {
                    "__fixed__": "0.25"
                }
            },
            {
                "key": "con_x9.game:turtleData:Yellow:price",
                "value": 5
            },
            {
                "key": "con_x9.game:turtleData:Yellow:probability",
                "value": {
                    "__fixed__": "0.15"
                }
            },
            {
                "key": "con_xiandoge.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_xiandoge', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_xiandoge', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_xiandoge', name='balances')\n__metadata = Hash(contract='con_xiandoge', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'xiandoge'\n    __metadata['token_symbol'] = 'xiandoge'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_xiandoge')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_xiandoge')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_xiandoge')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_xiandoge')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_xiandoge')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_xiandoge.__developer__",
                "value": "07410c69dfccb05c05b415a33d6d61d8c1105aa783b8a154d4d31fe3b2ffc5bb"
            },
            {
                "key": "con_xiandoge.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        7,
                        2,
                        42,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_xiandoge.balances:07410c69dfccb05c05b415a33d6d61d8c1105aa783b8a154d4d31fe3b2ffc5bb",
                "value": 1000000
            },
            {
                "key": "con_xiandoge.metadata:operator",
                "value": "07410c69dfccb05c05b415a33d6d61d8c1105aa783b8a154d4d31fe3b2ffc5bb"
            },
            {
                "key": "con_xiandoge.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_xiandoge.metadata:token_name",
                "value": "xiandoge"
            },
            {
                "key": "con_xiandoge.metadata:token_symbol",
                "value": "xiandoge"
            },
            {
                "key": "con_xiandoge.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_xianyu.__code__",
                "value": "__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_xianyu', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str, 'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int, float, decimal)}}, contract='con_xianyu', name='ApproveEvent')\n__balances = Hash(default_value=0, contract='con_xianyu', name='balances')\n__metadata = Hash(contract='con_xianyu', name='metadata')\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'xianyu'\n    __metadata['token_symbol'] = 'xianyu'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n@__export('con_xianyu')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n@__export('con_xianyu')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n@__export('con_xianyu')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n@__export('con_xianyu')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n@__export('con_xianyu')\ndef balance_of(address: str):\n    return __balances[address]"
            },
            {
                "key": "con_xianyu.__developer__",
                "value": "07410c69dfccb05c05b415a33d6d61d8c1105aa783b8a154d4d31fe3b2ffc5bb"
            },
            {
                "key": "con_xianyu.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        7,
                        2,
                        44,
                        25,
                        0
                    ]
                }
            },
            {
                "key": "con_xianyu.balances:07410c69dfccb05c05b415a33d6d61d8c1105aa783b8a154d4d31fe3b2ffc5bb",
                "value": 1000000
            },
            {
                "key": "con_xianyu.metadata:operator",
                "value": "07410c69dfccb05c05b415a33d6d61d8c1105aa783b8a154d4d31fe3b2ffc5bb"
            },
            {
                "key": "con_xianyu.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_xianyu.metadata:token_name",
                "value": "xianyu"
            },
            {
                "key": "con_xianyu.metadata:token_symbol",
                "value": "xianyu"
            },
            {
                "key": "con_xianyu.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_xl2.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_xl2', name='game')\n__bets = Hash(default_value=0, contract='con_xl2', name='bets')\n__participants = Hash(contract='con_xl2', name='participants')\n__turtle_owners = Hash(default_value=None, contract='con_xl2', name=\n    'turtle_owners')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['total_races'] = 0\n    __game['allowed_tokens'] = ['currency']\n    __game['commission'] = decimal('0.02')\n    __game['turtle_data'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_xl2')\ndef buy_turtle(turtle: str, token_contract: str):\n    assert turtle in __game['turtle_data'], 'Invalid turtle'\n    assert __turtle_owners[turtle\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtle_data'][turtle]['price']\n    assert token_contract in __game['allowed_tokens'], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtle_owners[turtle] = ctx.caller\n\n\n@__export('con_xl2')\ndef start_race():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racing_turtles = list({key[1] for key in __bets.keys()})\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    turtles = list(__game['turtle_data'].keys())\n    probabilities = [__game['turtle_data'][turtle]['probability'] for\n        turtle in turtles]\n    winning_turtle = random.choices(turtles, weights=probabilities, k=1)[0]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    for key in __bets.keys():\n        player, turtle = key\n        if turtle == winning_turtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            break\n    __game['total_races'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_xl2')\ndef get_participants():\n    \"\"\"Return the number of unique participants in the race.\"\"\"\n    return len([p for p in __participants if __participants[p]])\n\n\n@__export('con_xl2')\ndef get_total_bets():\n    \"\"\"Return the total amount of money currently bet on the race.\"\"\"\n    return sum(__bets.values())\n\n\n@__export('con_xl2')\ndef get_turtle_owners():\n    \"\"\"Return a dictionary of turtles and their current owners.\"\"\"\n    return {turtle: owner for turtle, owner in __turtle_owners.items() if \n        owner is not None}\n\n\n@__export('con_xl2')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_xl2')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_xl2.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl2.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        22,
                        59,
                        0
                    ]
                }
            },
            {
                "key": "con_xl2.game:allowed_tokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_xl2.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_xl2.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl2.game:total_races",
                "value": 0
            },
            {
                "key": "con_xl2.game:turtle_data",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_xl2.turtle_owners:Green",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl2.turtle_owners:Red",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl3.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_xl3', name='game')\n__bets = Hash(default_value=0, contract='con_xl3', name='bets')\n__participants = Hash(contract='con_xl3', name='participants')\n__turtleOwners = Hash(default_value=None, contract='con_xl3', name=\n    'turtleOwners')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['allowedTokens'] = ['currency']\n    __game['commission'] = decimal('0.02')\n    __game['turtleData'] = [{'name': 'Red', 'price': 10, 'probability':\n        decimal('0.25')}, {'name': 'Green', 'price': 20, 'probability':\n        decimal('0.2')}, {'name': 'Blue', 'price': 15, 'probability':\n        decimal('0.25')}, {'name': 'Yellow', 'price': 5, 'probability':\n        decimal('0.15')}, {'name': 'Purple', 'price': 50, 'probability':\n        decimal('0.15')}]\n\n\n@__export('con_xl3')\ndef buyTurtle(turtleName: str, tokenContract: str):\n    turtle = None\n    for t in __game['turtleData']:\n        if t['name'] == turtleName:\n            turtle = t\n            break\n    assert turtle is not None, 'Invalid turtle'\n    assert __turtleOwners[turtleName\n        ] is None, 'Turtle already owned by another player'\n    amount = turtle['price']\n    assert tokenContract in __game['allowedTokens'], 'Token not allowed'\n    token = importlib.import_module(tokenContract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtleName] = ctx.caller\n\n\n@__export('con_xl3')\ndef startRace():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racingTurtles = set()\n    for key in __bets:\n        player, turtleName = key\n        racingTurtles.add(turtleName)\n    assert len(racingTurtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    probabilities = [t['probability'] for t in __game['turtleData']]\n    turtles = [t['name'] for t in __game['turtleData']]\n    winningTurtle = random.choices(turtles, weights=probabilities, k=1)[0]\n    totalBetPool = sum(__bets.values())\n    winnings = totalBetPool * (1 - __game['commission'])\n    for key in __bets:\n        player, turtleName = key\n        if turtleName == winningTurtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            break\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winningTurtle} Turtle wins!'\n\n\n@__export('con_xl3')\ndef getParticipants():\n    \"\"\"Return the number of unique participants in the race.\"\"\"\n    return len([p for p in __participants if __participants[p]])\n\n\n@__export('con_xl3')\ndef getTotalBets():\n    \"\"\"Return the total amount of money currently bet on the race.\"\"\"\n    return sum(__bets.values())\n\n\n@__export('con_xl3')\ndef getTurtleOwners():\n    \"\"\"Return a dictionary of turtles and their current owners.\"\"\"\n    return {turtle: owner for turtle, owner in __turtleOwners.items() if \n        owner is not None}\n\n\n@__export('con_xl3')\ndef changeOwner(newOwner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = newOwner\n\n\n@__export('con_xl3')\ndef changeCommission(newCommission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= newCommission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = newCommission\n"
            },
            {
                "key": "con_xl3.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        32,
                        32,
                        0
                    ]
                }
            },
            {
                "key": "con_xl3.game:allowedTokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_xl3.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_xl3.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl3.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_xl3.game:turtleData",
                "value": [
                    {
                        "name": "Red",
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    {
                        "name": "Green",
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    {
                        "name": "Blue",
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    {
                        "name": "Yellow",
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    {
                        "name": "Purple",
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                ]
            },
            {
                "key": "con_xl3.turtleOwners:Green",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl3.turtleOwners:Red",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl4.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_xl4', name='game')\n__bets = Hash(default_value=0, contract='con_xl4', name='bets')\n__participants = Hash(contract='con_xl4', name='participants')\n__turtleOwners = Hash(default_value=None, contract='con_xl4', name=\n    'turtleOwners')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['allowedTokens'] = ['currency']\n    __game['commission'] = decimal('0.02')\n    __game['turtleData'] = [{'name': 'Red', 'price': 10, 'probability':\n        decimal('0.25')}, {'name': 'Green', 'price': 20, 'probability':\n        decimal('0.2')}, {'name': 'Blue', 'price': 15, 'probability':\n        decimal('0.25')}, {'name': 'Yellow', 'price': 5, 'probability':\n        decimal('0.15')}, {'name': 'Purple', 'price': 50, 'probability':\n        decimal('0.15')}]\n\n\n@__export('con_xl4')\ndef buyTurtle(turtleName: str, tokenContract: str):\n    turtle = None\n    for t in __game['turtleData']:\n        if t['name'] == turtleName:\n            turtle = t\n            break\n    assert turtle is not None, 'Invalid turtle'\n    assert __turtleOwners[turtleName\n        ] is None, 'Turtle already owned by another player'\n    amount = turtle['price']\n    assert tokenContract in __game['allowedTokens'], 'Token not allowed'\n    token = importlib.import_module(tokenContract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtleName] = ctx.caller\n\n\n@__export('con_xl4')\ndef startRace():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racingTurtles = set()\n    for key in __bets:\n        turtleName = key[1]\n        racingTurtles.add(turtleName)\n    assert len(racingTurtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    probabilities = [t['probability'] for t in __game['turtleData']]\n    turtles = [t['name'] for t in __game['turtleData']]\n    winningTurtle = random.choices(turtles, weights=probabilities, k=1)[0]\n    totalBetPool = sum(__bets.values())\n    winnings = totalBetPool * (1 - __game['commission'])\n    for key, amount in __bets.items():\n        player, turtleName = key\n        if turtleName == winningTurtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            break\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winningTurtle} Turtle wins!'\n\n\n@__export('con_xl4')\ndef getParticipants():\n    \"\"\"Return the number of unique participants in the race.\"\"\"\n    return len([p for p in __participants if __participants[p]])\n\n\n@__export('con_xl4')\ndef getTotalBets():\n    \"\"\"Return the total amount of money currently bet on the race.\"\"\"\n    return sum(__bets.values())\n\n\n@__export('con_xl4')\ndef getTurtleOwners():\n    \"\"\"Return a dictionary of turtles and their current owners.\"\"\"\n    return {turtle: owner for turtle, owner in __turtleOwners.items() if \n        owner is not None}\n\n\n@__export('con_xl4')\ndef changeOwner(newOwner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = newOwner\n\n\n@__export('con_xl4')\ndef changeCommission(newCommission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= newCommission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = newCommission\n"
            },
            {
                "key": "con_xl4.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl4.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        34,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_xl4.game:allowedTokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_xl4.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_xl4.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl4.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_xl4.game:turtleData",
                "value": [
                    {
                        "name": "Red",
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    {
                        "name": "Green",
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    {
                        "name": "Blue",
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    {
                        "name": "Yellow",
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    {
                        "name": "Purple",
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                ]
            },
            {
                "key": "con_xl4.turtleOwners:Green",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl4.turtleOwners:Red",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl5.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_xl5', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_xl5', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_xl5', name='bets')\n__participants = Hash(default_value=False, contract='con_xl5', name=\n    'participants')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_xl5')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert token_contract == 'currency', 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n\n\n@__export('con_xl5')\ndef start_race():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racing_turtles = set()\n    for key in __bets:\n        racing_turtles.add(key[1])\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    turtle_names = list(__game['turtleData'].keys())\n    probabilities = [__game['turtleData'][turtle]['probability'] for turtle in\n        turtle_names]\n    winning_turtle = random.choices(turtle_names, weights=probabilities, k=1)[0\n        ]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    for key in __bets:\n        player, turtle_name = key\n        if turtle_name == winning_turtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            break\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_xl5')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_xl5')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_xl5.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl5.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        36,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_xl5.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_xl5.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl5.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_xl5.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_xl6.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_xl6', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_xl6', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_xl6', name='bets')\n__participants = Hash(default_value=False, contract='con_xl6', name=\n    'participants')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_xl6')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert token_contract == 'currency', 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n\n\n@__export('con_xl6')\ndef start_race():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racing_turtles = set()\n    for key in __bets:\n        player_turtle_pair = key\n        turtle_name = player_turtle_pair[1]\n        racing_turtles.add(turtle_name)\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    turtle_names = list(__game['turtleData'].keys())\n    probabilities = [__game['turtleData'][turtle]['probability'] for turtle in\n        turtle_names]\n    winning_turtle = random.choices(turtle_names, weights=probabilities, k=1)[0\n        ]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    for key in __bets:\n        player, turtle_name = key\n        if turtle_name == winning_turtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            break\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_xl6')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_xl6')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_xl6.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl6.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        41,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_xl6.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_xl6.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl6.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_xl6.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_xl8.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_xl8', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_xl8', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_xl8', name='bets')\n__participants = Hash(default_value=False, contract='con_xl8', name=\n    'participants')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['allowedTokens'] = ['currency']\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_xl8')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert token_contract in __game['allowedTokens'], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n\n\n@__export('con_xl8')\ndef start_race():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racing_turtles = set()\n    for key in __bets:\n        turtle_name = key[1] if isinstance(key, tuple) and len(key\n            ) > 1 else key\n        racing_turtles.add(turtle_name)\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    turtle_names = list(__game['turtleData'].keys())\n    probabilities = [__game['turtleData'][turtle]['probability'] for turtle in\n        turtle_names]\n    winning_turtle = random.choices(turtle_names, weights=probabilities, k=1)[0\n        ]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    for key in __bets:\n        player = key[0] if isinstance(key, tuple) else key\n        turtle_name = key[1] if isinstance(key, tuple) and len(key\n            ) > 1 else key\n        if turtle_name == winning_turtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            break\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_xl8')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_xl8')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowedTokens'] = tokens\n\n\n@__export('con_xl8')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_xl8.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl8.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        44,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_xl8.game:allowedTokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_xl8.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_xl8.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl8.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_xl8.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_xl9.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_xl9', name='game')\n__turtleOwners = Hash(default_value=None, contract='con_xl9', name=\n    'turtleOwners')\n__bets = Hash(default_value=0, contract='con_xl9', name='bets')\n__participants = Hash(default_value=False, contract='con_xl9', name=\n    'participants')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['totalRaces'] = 0\n    __game['commission'] = decimal('0.02')\n    __game['allowedTokens'] = ['currency']\n    __game['turtleData'] = {'Red': {'price': 10, 'probability': decimal(\n        '0.25')}, 'Green': {'price': 20, 'probability': decimal('0.2')},\n        'Blue': {'price': 15, 'probability': decimal('0.25')}, 'Yellow': {\n        'price': 5, 'probability': decimal('0.15')}, 'Purple': {'price': 50,\n        'probability': decimal('0.15')}}\n\n\n@__export('con_xl9')\ndef buy_turtle(turtle_name: str, token_contract: str):\n    assert turtle_name in __game['turtleData'], 'Invalid turtle'\n    assert __turtleOwners[turtle_name\n        ] is None, 'Turtle already owned by another player'\n    amount = __game['turtleData'][turtle_name]['price']\n    assert token_contract in __game['allowedTokens'], 'Token not allowed'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=amount, to=ctx.this, main_account=ctx.caller)\n    __turtleOwners[turtle_name] = ctx.caller\n\n\n@__export('con_xl9')\ndef start_race():\n    assert ctx.caller == __game['owner'], 'Only the owner can start the race'\n    racing_turtles = {key for key in __bets}\n    assert len(racing_turtles\n        ) >= 2, 'At least two turtles must have bets to start the race'\n    turtle_names = list(__game['turtleData'].keys())\n    probabilities = [__game['turtleData'][turtle]['probability'] for turtle in\n        turtle_names]\n    winning_turtle = random.choices(turtle_names, weights=probabilities, k=1)[0\n        ]\n    total_bet_pool = sum(__bets.values())\n    winnings = total_bet_pool * (1 - __game['commission'])\n    for player, turtle_name in __bets:\n        if turtle_name == winning_turtle:\n            token = importlib.import_module('currency')\n            token.transfer(amount=winnings, to=player)\n            break\n    __game['totalRaces'] += 1\n    __bets.clear()\n    __participants.clear()\n    return f'The {winning_turtle} Turtle wins!'\n\n\n@__export('con_xl9')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_xl9')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowedTokens'] = tokens\n\n\n@__export('con_xl9')\ndef change_commission(new_commission: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the commission'\n    assert 0 <= new_commission < 1, 'Commission must be between 0 and 1'\n    __game['commission'] = new_commission\n"
            },
            {
                "key": "con_xl9.__developer__",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl9.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        11,
                        11,
                        2,
                        46,
                        22,
                        0
                    ]
                }
            },
            {
                "key": "con_xl9.game:allowedTokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_xl9.game:commission",
                "value": {
                    "__fixed__": "0.02"
                }
            },
            {
                "key": "con_xl9.game:owner",
                "value": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b"
            },
            {
                "key": "con_xl9.game:totalRaces",
                "value": 0
            },
            {
                "key": "con_xl9.game:turtleData",
                "value": {
                    "Red": {
                        "price": 10,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Green": {
                        "price": 20,
                        "probability": {
                            "__fixed__": "0.2"
                        }
                    },
                    "Blue": {
                        "price": 15,
                        "probability": {
                            "__fixed__": "0.25"
                        }
                    },
                    "Yellow": {
                        "price": 5,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    },
                    "Purple": {
                        "price": 50,
                        "probability": {
                            "__fixed__": "0.15"
                        }
                    }
                }
            },
            {
                "key": "con_xns_token.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_xns_token', name='balances')\n__metadata = Hash(contract='con_xns_token', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_xns_token', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_xns_token', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 100000000\n    __metadata['token_name'] = 'Xian Name Service'\n    __metadata['token_symbol'] = 'XNS'\n    __metadata['token_logo_url'] = (\n        'https://raw.githubusercontent.com/crosschainer/XNS/refs/heads/main/favicon-96x96.png'\n        )\n    __metadata['token_website'] = 'https://xns.domains'\n    __metadata['total_supply'] = __balances[ctx.caller]\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_xns_token')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_xns_token')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_xns_token')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_xns_token')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_xns_token')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_xns_token.__developer__",
                "value": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05"
            },
            {
                "key": "con_xns_token.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        2,
                        15,
                        11,
                        53,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_xns_token.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "32.354275954335539589440420677828"
                }
            },
            {
                "key": "con_xns_token.balances:503ccb3dc04eaaed7c72c3ee6d22368e48a7f7e52b8577f4a4a9989eec51a0be",
                "value": {
                    "__fixed__": "30.329315898594004326447249245273"
                }
            },
            {
                "key": "con_xns_token.balances:503ccb3dc04eaaed7c72c3ee6d22368e48a7f7e52b8577f4a4a9989eec51a0be:con_dex_router_n",
                "value": {
                    "__fixed__": "32.413996357812804437626"
                }
            },
            {
                "key": "con_xns_token.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "__fixed__": "99998997"
                }
            },
            {
                "key": "con_xns_token.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05:con_dex_router_n",
                "value": {
                    "__fixed__": "97"
                }
            },
            {
                "key": "con_xns_token.balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "940.316408147070456084112330076899"
                }
            },
            {
                "key": "con_xns_token.metadata:operator",
                "value": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05"
            },
            {
                "key": "con_xns_token.metadata:token_logo_url",
                "value": "https://raw.githubusercontent.com/crosschainer/XNS/refs/heads/main/favicon-96x96.png"
            },
            {
                "key": "con_xns_token.metadata:token_name",
                "value": "Xian Name Service"
            },
            {
                "key": "con_xns_token.metadata:token_symbol",
                "value": "XNS"
            },
            {
                "key": "con_xns_token.metadata:token_website",
                "value": "https://xns.domains"
            },
            {
                "key": "con_xns_token.metadata:total_supply",
                "value": 100000000
            },
            {
                "key": "con_xwt.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_xwt', name='balances')\n__metadata = Hash(contract='con_xwt', name='metadata')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_xwt', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='con_xwt', name='ApproveEvent')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000000\n    __metadata['token_name'] = 'xwt'\n    __metadata['token_symbol'] = 'xwt'\n    __metadata['token_logo_url'] = ''\n    __metadata['token_website'] = ''\n    __metadata['total_supply'] = 1000000000\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_xwt')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_xwt')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('con_xwt')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_xwt')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('con_xwt')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send! You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n"
            },
            {
                "key": "con_xwt.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_xwt.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        4,
                        21,
                        32,
                        25,
                        0
                    ]
                }
            },
            {
                "key": "con_xwt.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "997494765.2449964409067772311841704"
                }
            },
            {
                "key": "con_xwt.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_ff1",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff7",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fff8",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_fm5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61:con_mf3",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "1811330.8788273258680156158657562783"
                }
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_ff1",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff06",
                "value": 100
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff7",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_fff8",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_mf_01",
                "value": 9740
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_mf_02",
                "value": {
                    "__fixed__": "9999"
                }
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_mf_03",
                "value": 100
            },
            {
                "key": "con_xwt.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011:con_mf_04",
                "value": 0
            },
            {
                "key": "con_xwt.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": 7990
            },
            {
                "key": "con_xwt.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a:con_mf_02",
                "value": 0
            },
            {
                "key": "con_xwt.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a:con_mf_04",
                "value": 0
            },
            {
                "key": "con_xwt.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "__fixed__": "180997"
                }
            },
            {
                "key": "con_xwt.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_fff06",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_fff5",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "con_xwt.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_mf_02",
                "value": 0
            },
            {
                "key": "con_xwt.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664:con_multi_psv1",
                "value": 3000
            },
            {
                "key": "con_xwt.balances:con_ff1",
                "value": {
                    "__fixed__": "21596.3647634799619766286312075763"
                }
            },
            {
                "key": "con_xwt.balances:con_fff06",
                "value": {
                    "__fixed__": "34994.25615119371146372110692266"
                }
            },
            {
                "key": "con_xwt.balances:con_fff5",
                "value": {
                    "__fixed__": "267534.569327472652154759685501044"
                }
            },
            {
                "key": "con_xwt.balances:con_fff7",
                "value": {
                    "__fixed__": "40182.1968327567774339448253141"
                }
            },
            {
                "key": "con_xwt.balances:con_fff8",
                "value": {
                    "__fixed__": "100279.6835457745666224987011279414"
                }
            },
            {
                "key": "con_xwt.balances:con_fm5",
                "value": {
                    "__fixed__": "1.6E+4"
                }
            },
            {
                "key": "con_xwt.balances:con_mf3",
                "value": {
                    "__fixed__": "1.1E+4"
                }
            },
            {
                "key": "con_xwt.balances:con_mf_01",
                "value": 260
            },
            {
                "key": "con_xwt.balances:con_mf_02",
                "value": {
                    "__fixed__": "6266"
                }
            },
            {
                "key": "con_xwt.balances:con_mf_03",
                "value": {
                    "__fixed__": "3.41E+3"
                }
            },
            {
                "key": "con_xwt.balances:con_mf_04",
                "value": {
                    "__fixed__": "3393.8055555555555556"
                }
            },
            {
                "key": "con_xwt.metadata:operator",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_xwt.metadata:token_logo_url",
                "value": "https://xwtplatform.com/presales/xwtlogo.png"
            },
            {
                "key": "con_xwt.metadata:token_name",
                "value": "XIAN Wallet Token"
            },
            {
                "key": "con_xwt.metadata:token_symbol",
                "value": "xwt"
            },
            {
                "key": "con_xwt.metadata:token_website",
                "value": ""
            },
            {
                "key": "con_xwt.metadata:total_supply",
                "value": 1000000000
            },
            {
                "key": "con_xyz.__code__",
                "value": "import currency\n__manager = Variable(contract='con_xyz', name='manager')\n__names = Hash(default_value=False, contract='con_xyz', name='names')\n__balances = Hash(default_value=0, contract='con_xyz', name='balances')\n__approvals = Hash(default_value=0, contract='con_xyz', name='approvals')\n__expiry_times = Hash(default_value=None, contract='con_xyz', name=\n    'expiry_times')\n__owners = Hash(default_value=None, contract='con_xyz', name='owners')\n__mint_price = Variable(contract='con_xyz', name='mint_price')\n__royalty_fee_percentage = Variable(contract='con_xyz', name=\n    'royalty_fee_percentage')\n__registration_period = Variable(contract='con_xyz', name='registration_period'\n    )\n__contracts_allowlist = Variable(contract='con_xyz', name='contracts_allowlist'\n    )\n__main_name_to_address = Hash(default_value=None, contract='con_xyz', name=\n    'main_name_to_address')\n__address_to_main_name = Hash(default_value=None, contract='con_xyz', name=\n    'address_to_main_name')\n\n\ndef ____():\n    __manager.set(ctx.caller)\n    __contracts_allowlist.set([])\n    __mint_price.set(1)\n    __royalty_fee_percentage.set(2)\n    __registration_period.set(365)\n\n\ndef __assert_is_manager():\n    assert ctx.caller == __manager.get(), 'You are not the manager'\n\n\ndef __assert_is_owner(address: str, name: str):\n    assert __balances[address, name] == 1, 'You are not the owner of this name'\n\n\ndef __assert_if_contract_is_approved(contract: str):\n    if 'con_' in contract:\n        assert contract in __contracts_allowlist.get(\n            ), 'This contract is not allowed to interact with this contract'\n\n\ndef __assert_is_approved_for_transfer(main_account: str, to: str, name: str):\n    assert __approvals[main_account, to, name\n        ] == 1, 'Name is not approved for transfer'\n\n\ndef __is_expired(name: str):\n    expiry = __expiry_times[name]\n    if expiry is None:\n        return True\n    return now >= expiry\n\n\ndef __assert_is_not_expired(name: str):\n    assert not __is_expired(name), 'Name is expired'\n\n\n@__export('con_xyz')\ndef mint_name(name: str):\n    __assert_if_contract_is_approved(ctx.caller)\n    name = name.lower()\n    assert name.isalnum() and name.isascii(\n        ), 'Name must be alphanumeric and ascii'\n    assert len(name) >= 3, 'The minimum length is 3 characters'\n    assert len(name) <= 32, 'The maximum length is 32 characters'\n    if __names[name] != False:\n        assert __is_expired(name\n            ), 'Name already exists and has not expired yet.'\n    currency.transfer_from(amount=__mint_price.get(), to=__manager.get(),\n        main_account=ctx.caller)\n    __names[name] = {}\n    __expiry_times[name] = now + datetime.timedelta(days=\n        __registration_period.get())\n    __balances[ctx.caller, name] = 1\n    __owners[name] = ctx.caller\n\n\n@__export('con_xyz')\ndef transfer(name: str, to: str):\n    __assert_is_not_expired(name)\n    assert name != '', 'Please specify the Name you want to transfer'\n    __assert_is_owner(ctx.caller, name)\n    __balances[ctx.caller, name] = 0\n    __balances[to, name] = 1\n    __main_name_to_address[name] = None\n    __address_to_main_name[ctx.caller] = None\n    __names[name] = {}\n    __owners[name] = to\n\n\n@__export('con_xyz')\ndef approve(name: str, to: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __approvals[ctx.caller, to, name] = 1\n\n\n@__export('con_xyz')\ndef revoke_approval(name: str, to: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __approvals[ctx.caller, to, name] = 0\n\n\n@__export('con_xyz')\ndef transfer_from(name: str, to: str, main_account: str):\n    __assert_if_contract_is_approved(ctx.caller)\n    assert name != '', 'Please specify the Name you want to transfer'\n    __assert_is_not_expired(name)\n    __assert_is_owner(main_account, name)\n    __assert_is_approved_for_transfer(main_account, to, name)\n    __approvals[main_account, to, name] = 0\n    __balances[main_account, name] = 0\n    __balances[to, name] = 1\n    __main_name_to_address[name] = None\n    __address_to_main_name[main_account] = None\n    __names[name] = {}\n    __owners[name] = to\n\n\n@__export('con_xyz')\ndef set_main_name_to_caller(name: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __main_name_to_address[name] = ctx.caller\n    __address_to_main_name[ctx.caller] = name\n\n\n@__export('con_xyz')\ndef set_data(name: str, data: dict):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __names[name] = data\n\n\n@__export('con_xyz')\ndef get_main_name_to_address(name: str):\n    address = __main_name_to_address[name]\n    if address is None or __is_expired(name):\n        return None\n    return address\n\n\n@__export('con_xyz')\ndef get_address_to_main_name(address: str):\n    name = __address_to_main_name[address]\n    if name is None or __is_expired(name):\n        return None\n    return name\n\n\n@__export('con_xyz')\ndef get_owner(name: str):\n    owner = __owners[name]\n    if owner is None or __is_expired(name):\n        return None\n    return owner\n\n\n@__export('con_xyz')\ndef get_data(name: str):\n    return __names[name]\n\n\n@__export('con_xyz')\ndef is_owner(name: str, address: str):\n    return __balances[address, name] == 1 and not __is_expired(name)\n\n\n@__export('con_xyz')\ndef renew_name(name: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    currency.transfer_from(amount=__mint_price.get(), to=__manager.get(),\n        main_account=ctx.caller)\n    __expiry_times[name] = __expiry_times[name] + datetime.timedelta(days=\n        __registration_period.get())\n\n\n@__export('con_xyz')\ndef set_mint_price(price: int):\n    __assert_is_manager()\n    __mint_price.set(price)\n\n\n@__export('con_xyz')\ndef set_royalty_fee_percentage(percentage: int):\n    __assert_is_manager()\n    __royalty_fee_percentage.set(percentage)\n\n\n@__export('con_xyz')\ndef set_manager(new_manager: str):\n    __assert_is_manager()\n    __manager.set(new_manager)\n\n\n@__export('con_xyz')\ndef set_contract_allowlist(contracts: list):\n    __assert_is_manager()\n    __contracts_allowlist.set(contracts)\n\n\n@__export('con_xyz')\ndef set_registration_period(period: int):\n    __assert_is_manager()\n    __registration_period.set(period)\n"
            },
            {
                "key": "con_xyz.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_xyz.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        31,
                        12,
                        3,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_xyz.contracts_allowlist",
                "value": []
            },
            {
                "key": "con_xyz.manager",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_xyz.mint_price",
                "value": 1
            },
            {
                "key": "con_xyz.registration_period",
                "value": 365
            },
            {
                "key": "con_xyz.royalty_fee_percentage",
                "value": 2
            },
            {
                "key": "con_zen1.__code__",
                "value": "__farm_counter = Variable(contract='con_zen1', name='farm_counter')\n__farms = Hash(default_value=False, contract='con_zen1', name='farms')\n__farm_deposits = Hash(default_value=False, contract='con_zen1', name=\n    'farm_deposits')\n__farm_saved_rewards = Hash(default_value=0, contract='con_zen1', name=\n    'farm_saved_rewards')\n__farm_total_staked = Hash(default_value=decimal('0.0'), contract=\n    'con_zen1', name='farm_total_staked')\n__farm_rps = Hash(default_value=decimal('0.0'), contract='con_zen1', name=\n    'farm_rps')\n__farm_begtime = Hash(default_value=False, contract='con_zen1', name=\n    'farm_begtime')\n__farm_endtime = Hash(default_value=False, contract='con_zen1', name=\n    'farm_endtime')\n__farm_cum_rpt = Hash(default_value=decimal('0.0'), contract='con_zen1',\n    name='farm_cum_rpt')\n__farm_reward_token = Hash(default_value=False, contract='con_zen1', name=\n    'farm_reward_token')\n__farm_deposit_token = Hash(default_value=False, contract='con_zen1', name=\n    'farm_deposit_token')\n__farm_reward_payed = Hash(default_value=decimal('0.0'), contract=\n    'con_zen1', name='farm_reward_payed')\n__farm_total_rewards = Hash(default_value=decimal('0.0'), contract=\n    'con_zen1', name='farm_total_rewards')\n__farm_last_update = Hash(default_value=False, contract='con_zen1', name=\n    'farm_last_update')\n__farm_started = Hash(default_value=False, contract='con_zen1', name=\n    'farm_started')\n__farm_creators = Hash(default_value=False, contract='con_zen1', name=\n    'farm_creators')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'deposit_token': {'type': str}, 'reward_token': {'type': str}},\n    contract='con_zen1', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_zen1', name='Deposit')\n__Withdraw = LogEvent(event='Withdraw', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_zen1', name='Withdraw')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'address': {'type': str, 'idx': True},\n    'amount': {'type': (int, float, decimal)}}, contract='con_zen1', name=\n    'WithdrawRewards')\n\n\ndef __onlyowner(farm_id: int):\n    assert __farm_creators[farm_id] == ctx.caller, 'FORBIDDEN'\n\n\ndef __present(farm_id: int):\n    assert __farm_started[farm_id] and now >= __farm_begtime[farm_id\n        ] and now < __farm_endtime[farm_id], 'Not opened!'\n\n\ndef __notpresent(farm_id: int):\n    assert not (__farm_started[farm_id] and now >= __farm_begtime[farm_id] and\n        now < __farm_endtime[farm_id]), 'Opened!'\n\n\ndef __beforeend(farm_id: int):\n    assert __farm_started[farm_id] and now < __farm_endtime[farm_id], 'Ended!'\n\n\ndef __farmexists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef ____():\n    __farm_counter.set(0)\n\n\n@__export('con_zen1')\ndef createFarm(deposit_token: str, reward_token: str, reward_amount: float,\n    beg: datetime.datetime, end: datetime.datetime):\n    assert reward_amount > 0, 'Invalid reward amount'\n    assert beg < end, 'Wrong dates!'\n    assert now < beg, 'Begin in past!'\n    delta = end - beg\n    reward_per_sec = reward_amount / delta.seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token!'\n    deposit_tok = importlib.import_module(deposit_token)\n    assert importlib.enforce_interface(deposit_tok, token_interface\n        ), 'Invalid deposit token!'\n    reward_tok.transfer_from(reward_amount, ctx.this, ctx.caller)\n    farm_id = __farm_counter.get()\n    __farm_counter.set(farm_id + 1)\n    __farms[farm_id] = True\n    __farm_creators[farm_id] = ctx.caller\n    __farm_total_staked[farm_id] = decimal('0.0')\n    __farm_cum_rpt[farm_id] = decimal('0.0')\n    __farm_reward_payed[farm_id] = decimal('0.0')\n    __farm_total_rewards[farm_id] = decimal('0.0')\n    __farm_begtime[farm_id] = beg\n    __farm_endtime[farm_id] = end\n    __farm_rps[farm_id] = reward_per_sec\n    __farm_last_update[farm_id] = beg\n    __farm_reward_token[farm_id] = reward_token\n    __farm_deposit_token[farm_id] = deposit_token\n    __farm_started[farm_id] = True\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token})\n    return farm_id\n\n\ndef __update(farm_id: int):\n    cur = min(now, __farm_endtime[farm_id])\n    if __farm_total_staked[farm_id] > 0 and now >= __farm_begtime[farm_id]:\n        delta = cur - max(__farm_last_update[farm_id], __farm_begtime[farm_id])\n        __farm_cum_rpt[farm_id] = __farm_cum_rpt[farm_id\n            ] + delta.seconds * __farm_rps[farm_id] / __farm_total_staked[\n            farm_id]\n        __farm_total_rewards[farm_id] = __farm_total_rewards[farm_id\n            ] + delta.seconds * __farm_rps[farm_id]\n    __farm_last_update[farm_id] = cur\n\n\n@__export('con_zen1')\ndef getRewards(farm_id: int, address: str):\n    __farmexists(farm_id)\n    deposit = __farm_deposits[farm_id, address]\n    rewards = __farm_saved_rewards[farm_id, address]\n    if deposit != False:\n        cum_rpt_now = __farm_cum_rpt[farm_id]\n        if __farm_total_staked[farm_id] > 0 and now >= __farm_begtime[farm_id]:\n            delta = min(now, __farm_endtime[farm_id]) - max(__farm_last_update\n                [farm_id], __farm_begtime[farm_id])\n            cum_rpt_now += delta.seconds * __farm_rps[farm_id\n                ] / __farm_total_staked[farm_id]\n        rewards += (cum_rpt_now - deposit['cum_rpt']) * deposit['amount']\n    return rewards\n\n\ndef __harvest(farm_id: int):\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    if deposit != False:\n        __farm_saved_rewards[farm_id, ctx.caller] += (__farm_cum_rpt[\n            farm_id] - deposit['cum_rpt']) * deposit['amount']\n\n\n@__export('con_zen1')\ndef deposit(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    __beforeend(farm_id)\n    __update(farm_id)\n    __harvest(farm_id)\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    cur_amount = decimal('0.0')\n    if deposit != False:\n        cur_amount = deposit['amount']\n    __farm_deposits[farm_id, ctx.caller] = {'amount': cur_amount + amount,\n        'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_total_staked[farm_id] = __farm_total_staked[farm_id] + amount\n    tok = importlib.import_module(__farm_deposit_token[farm_id])\n    tok.transfer_from(amount, ctx.this, ctx.caller)\n    __Deposit({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_zen1')\ndef withdraw(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit!'\n    __update(farm_id)\n    __harvest(farm_id)\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit!'\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __farm_deposits[farm_id, ctx.caller] = False\n    else:\n        __farm_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_total_staked[farm_id] = __farm_total_staked[farm_id] - amount\n    tok = importlib.import_module(__farm_deposit_token[farm_id])\n    tok.transfer(amount, ctx.caller)\n    __Withdraw({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_zen1')\ndef withdrawRewards(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    __update(farm_id)\n    __harvest(farm_id)\n    assert amount <= __farm_saved_rewards[farm_id, ctx.caller\n        ], 'Not enough rewards!'\n    __farm_saved_rewards[farm_id, ctx.caller] -= amount\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    if deposit != False:\n        new_amount = deposit['amount']\n        __farm_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_reward_payed[farm_id] = __farm_reward_payed[farm_id] + amount\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    tok.transfer(amount, ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'address': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_zen1')\ndef changeRps(farm_id: int, reward_per_sec: float):\n    assert reward_per_sec > 0, 'invalid rps'\n    __farmexists(farm_id)\n    __onlyowner(farm_id)\n    __present(farm_id)\n    __update(farm_id)\n    delta = __farm_endtime[farm_id] - now\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert __farm_total_rewards[farm_id] - __farm_reward_payed[farm_id\n        ] + delta.seconds * reward_per_sec <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __farm_rps[farm_id] = reward_per_sec\n\n\n@__export('con_zen1')\ndef extend(farm_id: int, end: datetime.datetime):\n    __farmexists(farm_id)\n    __onlyowner(farm_id)\n    __present(farm_id)\n    __update(farm_id)\n    assert __farm_endtime[farm_id] < end, 'invalid end date'\n    delta = end - now\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert __farm_total_rewards[farm_id] - __farm_reward_payed[farm_id\n        ] + delta.seconds * __farm_rps[farm_id] <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __farm_endtime[farm_id] = end\n\n\n@__export('con_zen1')\ndef withdrawRemainingRewards(farm_id: int):\n    __farmexists(farm_id)\n    __onlyowner(farm_id)\n    __notpresent(farm_id)\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    towithdraw = tok.balance_of(ctx.this) - (__farm_total_rewards[farm_id] -\n        __farm_reward_payed[farm_id])\n    if towithdraw > 0:\n        tok.transfer(towithdraw, ctx.caller)\n\n\n@__export('con_zen1')\ndef getFarmInfo(farm_id: int):\n    __farmexists(farm_id)\n    return [__farm_begtime[farm_id], __farm_endtime[farm_id], __farm_rps[\n        farm_id], __farm_total_staked[farm_id], __farm_deposit_token[\n        farm_id], __farm_reward_token[farm_id], __farm_creators[farm_id]]\n\n\n@__export('con_zen1')\ndef getUserFarmInfo(farm_id: int, who: str):\n    __farmexists(farm_id)\n    staked = decimal('0.0')\n    if __farm_deposits[farm_id, who]:\n        staked = __farm_deposits[farm_id, who]['amount']\n    return [staked, getRewards(farm_id, who)]\n\n\n@__export('con_zen1')\ndef getAllFarms():\n    total = __farm_counter.get()\n    result = []\n    for i in range(total):\n        if __farms[i] != False:\n            result.append(i)\n    return result\n"
            },
            {
                "key": "con_zen1.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen1.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        13,
                        13,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_zen1.farm_counter",
                "value": 0
            },
            {
                "key": "con_zen2.__code__",
                "value": "__farm_counter = Variable(contract='con_zen2', name='farm_counter')\n__farms = Hash(default_value=False, contract='con_zen2', name='farms')\n__farm_deposits = Hash(default_value=False, contract='con_zen2', name=\n    'farm_deposits')\n__farm_saved_rewards = Hash(default_value=0, contract='con_zen2', name=\n    'farm_saved_rewards')\n__farm_total_staked = Hash(default_value=decimal('0.0'), contract=\n    'con_zen2', name='farm_total_staked')\n__farm_rps = Hash(default_value=decimal('0.0'), contract='con_zen2', name=\n    'farm_rps')\n__farm_begtime = Hash(default_value=False, contract='con_zen2', name=\n    'farm_begtime')\n__farm_endtime = Hash(default_value=False, contract='con_zen2', name=\n    'farm_endtime')\n__farm_cum_rpt = Hash(default_value=decimal('0.0'), contract='con_zen2',\n    name='farm_cum_rpt')\n__farm_reward_token = Hash(default_value=False, contract='con_zen2', name=\n    'farm_reward_token')\n__farm_deposit_token = Hash(default_value=False, contract='con_zen2', name=\n    'farm_deposit_token')\n__farm_reward_payed = Hash(default_value=decimal('0.0'), contract=\n    'con_zen2', name='farm_reward_payed')\n__farm_total_rewards = Hash(default_value=decimal('0.0'), contract=\n    'con_zen2', name='farm_total_rewards')\n__farm_last_update = Hash(default_value=False, contract='con_zen2', name=\n    'farm_last_update')\n__farm_started = Hash(default_value=False, contract='con_zen2', name=\n    'farm_started')\n__farm_creators = Hash(default_value=False, contract='con_zen2', name=\n    'farm_creators')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'deposit_token': {'type': str}, 'reward_token': {'type': str}},\n    contract='con_zen2', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_zen2', name='Deposit')\n__Withdraw = LogEvent(event='Withdraw', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_zen2', name='Withdraw')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'address': {'type': str, 'idx': True},\n    'amount': {'type': (int, float, decimal)}}, contract='con_zen2', name=\n    'WithdrawRewards')\n\n\ndef __onlyowner(farm_id: int):\n    assert __farm_creators[farm_id] == ctx.caller, 'FORBIDDEN'\n\n\ndef __present(farm_id: int):\n    assert __farm_started[farm_id] and now >= __farm_begtime[farm_id\n        ] and now < __farm_endtime[farm_id], 'Not opened!'\n\n\ndef __notpresent(farm_id: int):\n    assert not (__farm_started[farm_id] and now >= __farm_begtime[farm_id] and\n        now < __farm_endtime[farm_id]), 'Opened!'\n\n\ndef __beforeend(farm_id: int):\n    assert __farm_started[farm_id] and now < __farm_endtime[farm_id], 'Ended!'\n\n\ndef __farmexists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef ____():\n    __farm_counter.set(0)\n\n\n@__export('con_zen2')\ndef createFarm(deposit_token: str, reward_token: str, reward_amount: float,\n    duration_days: int):\n    assert reward_amount > 0, 'Invalid reward amount'\n    assert duration_days > 0, 'Duration must be positive'\n    beg = now\n    end = now + datetime.timedelta(days=duration_days)\n    delta = end - beg\n    reward_per_sec = reward_amount / delta.seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token!'\n    deposit_tok = importlib.import_module(deposit_token)\n    assert importlib.enforce_interface(deposit_tok, token_interface\n        ), 'Invalid deposit token!'\n    reward_tok.transfer_from(reward_amount, ctx.this, ctx.caller)\n    farm_id = __farm_counter.get()\n    __farm_counter.set(farm_id + 1)\n    __farms[farm_id] = True\n    __farm_creators[farm_id] = ctx.caller\n    __farm_total_staked[farm_id] = decimal('0.0')\n    __farm_cum_rpt[farm_id] = decimal('0.0')\n    __farm_reward_payed[farm_id] = decimal('0.0')\n    __farm_total_rewards[farm_id] = decimal('0.0')\n    __farm_begtime[farm_id] = beg\n    __farm_endtime[farm_id] = end\n    __farm_rps[farm_id] = reward_per_sec\n    __farm_last_update[farm_id] = beg\n    __farm_reward_token[farm_id] = reward_token\n    __farm_deposit_token[farm_id] = deposit_token\n    __farm_started[farm_id] = True\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token})\n    return farm_id\n\n\ndef __update(farm_id: int):\n    cur = min(now, __farm_endtime[farm_id])\n    if __farm_total_staked[farm_id] > 0 and now >= __farm_begtime[farm_id]:\n        delta = cur - max(__farm_last_update[farm_id], __farm_begtime[farm_id])\n        __farm_cum_rpt[farm_id] = __farm_cum_rpt[farm_id\n            ] + delta.seconds * __farm_rps[farm_id] / __farm_total_staked[\n            farm_id]\n        __farm_total_rewards[farm_id] = __farm_total_rewards[farm_id\n            ] + delta.seconds * __farm_rps[farm_id]\n    __farm_last_update[farm_id] = cur\n\n\n@__export('con_zen2')\ndef getRewards(farm_id: int, address: str):\n    __farmexists(farm_id)\n    deposit = __farm_deposits[farm_id, address]\n    rewards = __farm_saved_rewards[farm_id, address]\n    if deposit != False:\n        cum_rpt_now = __farm_cum_rpt[farm_id]\n        if __farm_total_staked[farm_id] > 0 and now >= __farm_begtime[farm_id]:\n            delta = min(now, __farm_endtime[farm_id]) - max(__farm_last_update\n                [farm_id], __farm_begtime[farm_id])\n            cum_rpt_now += delta.seconds * __farm_rps[farm_id\n                ] / __farm_total_staked[farm_id]\n        rewards += (cum_rpt_now - deposit['cum_rpt']) * deposit['amount']\n    return rewards\n\n\ndef __harvest(farm_id: int):\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    if deposit != False:\n        __farm_saved_rewards[farm_id, ctx.caller] += (__farm_cum_rpt[\n            farm_id] - deposit['cum_rpt']) * deposit['amount']\n\n\n@__export('con_zen2')\ndef deposit(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    __beforeend(farm_id)\n    __update(farm_id)\n    __harvest(farm_id)\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    cur_amount = decimal('0.0')\n    if deposit != False:\n        cur_amount = deposit['amount']\n    __farm_deposits[farm_id, ctx.caller] = {'amount': cur_amount + amount,\n        'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_total_staked[farm_id] = __farm_total_staked[farm_id] + amount\n    tok = importlib.import_module(__farm_deposit_token[farm_id])\n    tok.transfer_from(amount, ctx.this, ctx.caller)\n    __Deposit({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_zen2')\ndef withdraw(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit!'\n    __update(farm_id)\n    __harvest(farm_id)\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit!'\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __farm_deposits[farm_id, ctx.caller] = False\n    else:\n        __farm_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_total_staked[farm_id] = __farm_total_staked[farm_id] - amount\n    tok = importlib.import_module(__farm_deposit_token[farm_id])\n    tok.transfer(amount, ctx.caller)\n    __Withdraw({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_zen2')\ndef withdrawRewards(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    __update(farm_id)\n    __harvest(farm_id)\n    assert amount <= __farm_saved_rewards[farm_id, ctx.caller\n        ], 'Not enough rewards!'\n    __farm_saved_rewards[farm_id, ctx.caller] -= amount\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    if deposit != False:\n        new_amount = deposit['amount']\n        __farm_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_reward_payed[farm_id] = __farm_reward_payed[farm_id] + amount\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    tok.transfer(amount, ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'address': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_zen2')\ndef changeRps(farm_id: int, reward_per_sec: float):\n    assert reward_per_sec > 0, 'invalid rps'\n    __farmexists(farm_id)\n    __onlyowner(farm_id)\n    __present(farm_id)\n    __update(farm_id)\n    delta = __farm_endtime[farm_id] - now\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert __farm_total_rewards[farm_id] - __farm_reward_payed[farm_id\n        ] + delta.seconds * reward_per_sec <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __farm_rps[farm_id] = reward_per_sec\n\n\n@__export('con_zen2')\ndef extendFarm(farm_id: int, additional_days: int):\n    assert additional_days > 0, 'Additional days must be positive'\n    __farmexists(farm_id)\n    __onlyowner(farm_id)\n    __present(farm_id)\n    __update(farm_id)\n    new_end = __farm_endtime[farm_id] + datetime.timedelta(days=additional_days\n        )\n    delta = new_end - now\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    assert __farm_total_rewards[farm_id] - __farm_reward_payed[farm_id\n        ] + delta.seconds * __farm_rps[farm_id] <= tok.balance_of(ctx.this\n        ), 'Not enough coins for rewards!'\n    __farm_endtime[farm_id] = new_end\n\n\n@__export('con_zen2')\ndef withdrawRemainingRewards(farm_id: int):\n    __farmexists(farm_id)\n    __onlyowner(farm_id)\n    __notpresent(farm_id)\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    towithdraw = tok.balance_of(ctx.this) - (__farm_total_rewards[farm_id] -\n        __farm_reward_payed[farm_id])\n    if towithdraw > 0:\n        tok.transfer(towithdraw, ctx.caller)\n\n\n@__export('con_zen2')\ndef getFarmInfo(farm_id: int):\n    __farmexists(farm_id)\n    return [__farm_begtime[farm_id], __farm_endtime[farm_id], __farm_rps[\n        farm_id], __farm_total_staked[farm_id], __farm_deposit_token[\n        farm_id], __farm_reward_token[farm_id], __farm_creators[farm_id]]\n\n\n@__export('con_zen2')\ndef getUserFarmInfo(farm_id: int, who: str):\n    __farmexists(farm_id)\n    staked = decimal('0.0')\n    if __farm_deposits[farm_id, who]:\n        staked = __farm_deposits[farm_id, who]['amount']\n    return [staked, getRewards(farm_id, who)]\n\n\n@__export('con_zen2')\ndef getAllFarms():\n    total = __farm_counter.get()\n    result = []\n    for i in range(total):\n        if __farms[i] != False:\n            result.append(i)\n    return result\n"
            },
            {
                "key": "con_zen2.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen2.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        13,
                        18,
                        40,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_begtime:0",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        6,
                        13,
                        19,
                        48,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_begtime:1",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        22,
                        8,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_begtime:2",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        22,
                        14,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_begtime:3",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        22,
                        14,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_counter",
                "value": 4
            },
            {
                "key": "con_zen2.farm_creators:0",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen2.farm_creators:1",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen2.farm_creators:2",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen2.farm_creators:3",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen2.farm_cum_rpt:0",
                "value": {
                    "__fixed__": "2.596393488841405491455256410256"
                }
            },
            {
                "key": "con_zen2.farm_cum_rpt:1",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen2.farm_cum_rpt:2",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen2.farm_cum_rpt:3",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen2.farm_deposit_token:0",
                "value": "con_pi"
            },
            {
                "key": "con_zen2.farm_deposit_token:1",
                "value": "con_pi"
            },
            {
                "key": "con_zen2.farm_deposit_token:2",
                "value": "con_pi"
            },
            {
                "key": "con_zen2.farm_deposit_token:3",
                "value": "con_pi"
            },
            {
                "key": "con_zen2.farm_deposits:0:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "2.3E+3"
                    },
                    "cum_rpt": {
                        "__fixed__": "2.596393488841405491455256410256"
                    }
                }
            },
            {
                "key": "con_zen2.farm_deposits:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "cum_rpt": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_zen2.farm_deposits:2:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "cum_rpt": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_zen2.farm_deposits:3:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "cum_rpt": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_zen2.farm_endtime:0",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        13,
                        19,
                        48,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_endtime:1",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        10,
                        22,
                        8,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_endtime:2",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        11,
                        22,
                        14,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_endtime:3",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        11,
                        22,
                        14,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_last_update:0",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        0,
                        15,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_last_update:1",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        23,
                        18,
                        46,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_last_update:2",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        7,
                        22,
                        15,
                        14,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_last_update:3",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        0,
                        14,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_zen2.farm_reward_payed:0",
                "value": {
                    "__fixed__": "708.3564814814815"
                }
            },
            {
                "key": "con_zen2.farm_reward_payed:1",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen2.farm_reward_payed:2",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen2.farm_reward_payed:3",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen2.farm_reward_token:0",
                "value": "con_pi"
            },
            {
                "key": "con_zen2.farm_reward_token:1",
                "value": "con_pi"
            },
            {
                "key": "con_zen2.farm_reward_token:2",
                "value": "con_pi"
            },
            {
                "key": "con_zen2.farm_reward_token:3",
                "value": "con_pi"
            },
            {
                "key": "con_zen2.farm_rps:0",
                "value": {
                    "__fixed__": "0.005787037037037037"
                }
            },
            {
                "key": "con_zen2.farm_rps:1",
                "value": {
                    "__fixed__": "0.0038580246913580245"
                }
            },
            {
                "key": "con_zen2.farm_rps:2",
                "value": {
                    "__fixed__": "0.0028935185185185184"
                }
            },
            {
                "key": "con_zen2.farm_rps:3",
                "value": {
                    "__fixed__": "0.008680555555555556"
                }
            },
            {
                "key": "con_zen2.farm_saved_rewards:0:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "19.1898148148147916399999999998"
                }
            },
            {
                "key": "con_zen2.farm_started:0",
                "value": true
            },
            {
                "key": "con_zen2.farm_started:1",
                "value": true
            },
            {
                "key": "con_zen2.farm_started:2",
                "value": true
            },
            {
                "key": "con_zen2.farm_started:3",
                "value": true
            },
            {
                "key": "con_zen2.farm_total_rewards:0",
                "value": {
                    "__fixed__": "727.54629629629629164"
                }
            },
            {
                "key": "con_zen2.farm_total_rewards:1",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen2.farm_total_rewards:2",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen2.farm_total_rewards:3",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen2.farm_total_staked:0",
                "value": {
                    "__fixed__": "2.3E+3"
                }
            },
            {
                "key": "con_zen2.farm_total_staked:1",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_zen2.farm_total_staked:2",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_zen2.farm_total_staked:3",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "con_zen2.farms:0",
                "value": true
            },
            {
                "key": "con_zen2.farms:1",
                "value": true
            },
            {
                "key": "con_zen2.farms:2",
                "value": true
            },
            {
                "key": "con_zen2.farms:3",
                "value": true
            },
            {
                "key": "con_zen3.__code__",
                "value": "__farm_counter = Variable(contract='con_zen3', name='farm_counter')\n__farms = Hash(default_value=False, contract='con_zen3', name='farms')\n__farm_deposits = Hash(default_value=False, contract='con_zen3', name=\n    'farm_deposits')\n__farm_saved_rewards = Hash(default_value=0, contract='con_zen3', name=\n    'farm_saved_rewards')\n__farm_total_staked = Hash(default_value=decimal('0.0'), contract=\n    'con_zen3', name='farm_total_staked')\n__farm_rps = Hash(default_value=decimal('0.0'), contract='con_zen3', name=\n    'farm_rps')\n__farm_begtime = Hash(default_value=False, contract='con_zen3', name=\n    'farm_begtime')\n__farm_endtime = Hash(default_value=False, contract='con_zen3', name=\n    'farm_endtime')\n__farm_cum_rpt = Hash(default_value=decimal('0.0'), contract='con_zen3',\n    name='farm_cum_rpt')\n__farm_reward_token = Hash(default_value=False, contract='con_zen3', name=\n    'farm_reward_token')\n__farm_deposit_token = Hash(default_value=False, contract='con_zen3', name=\n    'farm_deposit_token')\n__farm_reward_payed = Hash(default_value=decimal('0.0'), contract=\n    'con_zen3', name='farm_reward_payed')\n__farm_total_rewards = Hash(default_value=decimal('0.0'), contract=\n    'con_zen3', name='farm_total_rewards')\n__farm_last_update = Hash(default_value=False, contract='con_zen3', name=\n    'farm_last_update')\n__farm_started = Hash(default_value=False, contract='con_zen3', name=\n    'farm_started')\n__farm_creators = Hash(default_value=False, contract='con_zen3', name=\n    'farm_creators')\n__farm_reward_budget = Hash(default_value=decimal('0.0'), contract=\n    'con_zen3', name='farm_reward_budget')\n__farm_owner_withdrawn = Hash(default_value=decimal('0.0'), contract=\n    'con_zen3', name='farm_owner_withdrawn')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'deposit_token': {'type': str}, 'reward_token': {'type': str}},\n    contract='con_zen3', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_zen3', name='Deposit')\n__Withdraw = LogEvent(event='Withdraw', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_zen3', name='Withdraw')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'address': {'type': str, 'idx': True},\n    'amount': {'type': (int, float, decimal)}}, contract='con_zen3', name=\n    'WithdrawRewards')\n\n\ndef __onlyowner(farm_id: int):\n    assert __farm_creators[farm_id] == ctx.caller, 'FORBIDDEN'\n\n\ndef __present(farm_id: int):\n    assert __farm_started[farm_id] and now >= __farm_begtime[farm_id\n        ] and now < __farm_endtime[farm_id], 'Not opened!'\n\n\ndef __notpresent(farm_id: int):\n    assert not (__farm_started[farm_id] and now >= __farm_begtime[farm_id] and\n        now < __farm_endtime[farm_id]), 'Opened!'\n\n\ndef __beforeend(farm_id: int):\n    assert __farm_started[farm_id] and now < __farm_endtime[farm_id], 'Ended!'\n\n\ndef __farmexists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef ____():\n    __farm_counter.set(0)\n\n\n@__export('con_zen3')\ndef createFarm(deposit_token: str, reward_token: str, reward_amount: float,\n    duration_days: int):\n    assert reward_amount > 0, 'Invalid reward amount'\n    assert duration_days > 0, 'Duration must be positive'\n    beg = now\n    end = now + datetime.timedelta(days=duration_days)\n    delta = end - beg\n    reward_per_sec = reward_amount / delta.seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token!'\n    deposit_tok = importlib.import_module(deposit_token)\n    assert importlib.enforce_interface(deposit_tok, token_interface\n        ), 'Invalid deposit token!'\n    reward_tok.transfer_from(reward_amount, ctx.this, ctx.caller)\n    farm_id = __farm_counter.get()\n    __farm_counter.set(farm_id + 1)\n    __farms[farm_id] = True\n    __farm_creators[farm_id] = ctx.caller\n    __farm_total_staked[farm_id] = decimal('0.0')\n    __farm_cum_rpt[farm_id] = decimal('0.0')\n    __farm_reward_payed[farm_id] = decimal('0.0')\n    __farm_total_rewards[farm_id] = decimal('0.0')\n    __farm_begtime[farm_id] = beg\n    __farm_endtime[farm_id] = end\n    __farm_rps[farm_id] = reward_per_sec\n    __farm_last_update[farm_id] = beg\n    __farm_reward_token[farm_id] = reward_token\n    __farm_deposit_token[farm_id] = deposit_token\n    __farm_reward_budget[farm_id] = reward_amount\n    __farm_owner_withdrawn[farm_id] = decimal('0.0')\n    __farm_started[farm_id] = True\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token})\n    return farm_id\n\n\ndef __update(farm_id: int):\n    cur = min(now, __farm_endtime[farm_id])\n    if __farm_total_staked[farm_id] > 0 and now >= __farm_begtime[farm_id]:\n        delta = cur - max(__farm_last_update[farm_id], __farm_begtime[farm_id])\n        __farm_cum_rpt[farm_id] = __farm_cum_rpt[farm_id\n            ] + delta.seconds * __farm_rps[farm_id] / __farm_total_staked[\n            farm_id]\n        __farm_total_rewards[farm_id] = __farm_total_rewards[farm_id\n            ] + delta.seconds * __farm_rps[farm_id]\n    __farm_last_update[farm_id] = cur\n\n\n@__export('con_zen3')\ndef getRewards(farm_id: int, address: str):\n    __farmexists(farm_id)\n    deposit = __farm_deposits[farm_id, address]\n    rewards = __farm_saved_rewards[farm_id, address]\n    if deposit != False:\n        cum_rpt_now = __farm_cum_rpt[farm_id]\n        if __farm_total_staked[farm_id] > 0 and now >= __farm_begtime[farm_id]:\n            delta = min(now, __farm_endtime[farm_id]) - max(__farm_last_update\n                [farm_id], __farm_begtime[farm_id])\n            cum_rpt_now += delta.seconds * __farm_rps[farm_id\n                ] / __farm_total_staked[farm_id]\n        rewards += (cum_rpt_now - deposit['cum_rpt']) * deposit['amount']\n    return rewards\n\n\ndef __harvest(farm_id: int):\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    if deposit != False:\n        __farm_saved_rewards[farm_id, ctx.caller] += (__farm_cum_rpt[\n            farm_id] - deposit['cum_rpt']) * deposit['amount']\n\n\n@__export('con_zen3')\ndef deposit(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    __beforeend(farm_id)\n    __update(farm_id)\n    __harvest(farm_id)\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    cur_amount = decimal('0.0')\n    if deposit != False:\n        cur_amount = deposit['amount']\n    __farm_deposits[farm_id, ctx.caller] = {'amount': cur_amount + amount,\n        'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_total_staked[farm_id] = __farm_total_staked[farm_id] + amount\n    tok = importlib.import_module(__farm_deposit_token[farm_id])\n    tok.transfer_from(amount, ctx.this, ctx.caller)\n    __Deposit({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_zen3')\ndef withdraw(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit!'\n    __update(farm_id)\n    __harvest(farm_id)\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit!'\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __farm_deposits[farm_id, ctx.caller] = False\n    else:\n        __farm_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_total_staked[farm_id] = __farm_total_staked[farm_id] - amount\n    tok = importlib.import_module(__farm_deposit_token[farm_id])\n    tok.transfer(amount, ctx.caller)\n    __Withdraw({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_zen3')\ndef withdrawRewards(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    __update(farm_id)\n    __harvest(farm_id)\n    assert amount <= __farm_saved_rewards[farm_id, ctx.caller\n        ], 'Not enough rewards!'\n    __farm_saved_rewards[farm_id, ctx.caller] -= amount\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    if deposit != False:\n        new_amount = deposit['amount']\n        __farm_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_reward_payed[farm_id] = __farm_reward_payed[farm_id] + amount\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    tok.transfer(amount, ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'address': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_zen3')\ndef withdrawRemainingRewards(farm_id: int):\n    __farmexists(farm_id)\n    __onlyowner(farm_id)\n    __notpresent(farm_id)\n    __update(farm_id)\n    budget = __farm_reward_budget[farm_id]\n    accrued = __farm_total_rewards[farm_id]\n    if accrued > budget:\n        accrued = budget\n    leftover_total = budget - accrued\n    already_withdrawn = __farm_owner_withdrawn[farm_id]\n    available = leftover_total - already_withdrawn\n    if available > 0:\n        tok = importlib.import_module(__farm_reward_token[farm_id])\n        assert importlib.enforce_interface(tok, token_interface\n            ), 'Invalid reward token!'\n        tok.transfer(available, ctx.caller)\n        __farm_owner_withdrawn[farm_id] = already_withdrawn + available\n\n\n@__export('con_zen3')\ndef getFarmInfo(farm_id: int):\n    __farmexists(farm_id)\n    return [__farm_begtime[farm_id], __farm_endtime[farm_id], __farm_rps[\n        farm_id], __farm_total_staked[farm_id], __farm_deposit_token[\n        farm_id], __farm_reward_token[farm_id], __farm_creators[farm_id]]\n\n\n@__export('con_zen3')\ndef getUserFarmInfo(farm_id: int, who: str):\n    __farmexists(farm_id)\n    staked = decimal('0.0')\n    if __farm_deposits[farm_id, who]:\n        staked = __farm_deposits[farm_id, who]['amount']\n    return [staked, getRewards(farm_id, who)]\n\n\n@__export('con_zen3')\ndef getAllFarms():\n    total = __farm_counter.get()\n    result = []\n    for i in range(total):\n        if __farms[i] != False:\n            result.append(i)\n    return result\n"
            },
            {
                "key": "con_zen3.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen3.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        0,
                        47,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_zen3.farm_begtime:0",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        0,
                        50,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_zen3.farm_counter",
                "value": 1
            },
            {
                "key": "con_zen3.farm_creators:0",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen3.farm_cum_rpt:0",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen3.farm_deposit_token:0",
                "value": "con_pi"
            },
            {
                "key": "con_zen3.farm_endtime:0",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        11,
                        0,
                        50,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_zen3.farm_last_update:0",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        0,
                        50,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_zen3.farm_owner_withdrawn:0",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen3.farm_reward_budget:0",
                "value": 1000
            },
            {
                "key": "con_zen3.farm_reward_payed:0",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen3.farm_reward_token:0",
                "value": "con_pi"
            },
            {
                "key": "con_zen3.farm_rps:0",
                "value": {
                    "__fixed__": "0.0038580246913580245"
                }
            },
            {
                "key": "con_zen3.farm_started:0",
                "value": true
            },
            {
                "key": "con_zen3.farm_total_rewards:0",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen3.farm_total_staked:0",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen3.farms:0",
                "value": true
            },
            {
                "key": "con_zen4.__code__",
                "value": "__farm_counter = Variable(contract='con_zen4', name='farm_counter')\n__farms = Hash(default_value=False, contract='con_zen4', name='farms')\n__farm_deposits = Hash(default_value=False, contract='con_zen4', name=\n    'farm_deposits')\n__farm_saved_rewards = Hash(default_value=0, contract='con_zen4', name=\n    'farm_saved_rewards')\n__farm_total_staked = Hash(default_value=decimal('0.0'), contract=\n    'con_zen4', name='farm_total_staked')\n__farm_rps = Hash(default_value=decimal('0.0'), contract='con_zen4', name=\n    'farm_rps')\n__farm_begtime = Hash(default_value=False, contract='con_zen4', name=\n    'farm_begtime')\n__farm_endtime = Hash(default_value=False, contract='con_zen4', name=\n    'farm_endtime')\n__farm_cum_rpt = Hash(default_value=decimal('0.0'), contract='con_zen4',\n    name='farm_cum_rpt')\n__farm_reward_token = Hash(default_value=False, contract='con_zen4', name=\n    'farm_reward_token')\n__farm_deposit_token = Hash(default_value=False, contract='con_zen4', name=\n    'farm_deposit_token')\n__farm_reward_payed = Hash(default_value=decimal('0.0'), contract=\n    'con_zen4', name='farm_reward_payed')\n__farm_total_rewards = Hash(default_value=decimal('0.0'), contract=\n    'con_zen4', name='farm_total_rewards')\n__farm_last_update = Hash(default_value=False, contract='con_zen4', name=\n    'farm_last_update')\n__farm_started = Hash(default_value=False, contract='con_zen4', name=\n    'farm_started')\n__farm_creators = Hash(default_value=False, contract='con_zen4', name=\n    'farm_creators')\n__farm_reward_budget = Hash(default_value=decimal('0.0'), contract=\n    'con_zen4', name='farm_reward_budget')\n__farm_owner_withdrawn = Hash(default_value=decimal('0.0'), contract=\n    'con_zen4', name='farm_owner_withdrawn')\ntoken_interface = [importlib.Func('transfer_from', args=('amount', 'to',\n    'main_account')), importlib.Func('transfer', args=('amount', 'to')),\n    importlib.Func('balance_of', args=('address',))]\n__FarmCreated = LogEvent(event='FarmCreated', params={'farm_id': {'type':\n    int, 'idx': True}, 'creator': {'type': str, 'idx': True},\n    'deposit_token': {'type': str}, 'reward_token': {'type': str}},\n    contract='con_zen4', name='FarmCreated')\n__Deposit = LogEvent(event='Deposit', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_zen4', name='Deposit')\n__Withdraw = LogEvent(event='Withdraw', params={'farm_id': {'type': int,\n    'idx': True}, 'address': {'type': str, 'idx': True}, 'amount': {'type':\n    (int, float, decimal)}}, contract='con_zen4', name='Withdraw')\n__WithdrawRewards = LogEvent(event='WithdrawRewards', params={'farm_id': {\n    'type': int, 'idx': True}, 'address': {'type': str, 'idx': True},\n    'amount': {'type': (int, float, decimal)}}, contract='con_zen4', name=\n    'WithdrawRewards')\n\n\ndef __onlyowner(farm_id: int):\n    assert __farm_creators[farm_id] == ctx.caller, 'FORBIDDEN'\n\n\ndef __present(farm_id: int):\n    assert __farm_started[farm_id] and now >= __farm_begtime[farm_id\n        ] and now < __farm_endtime[farm_id], 'Not opened!'\n\n\ndef __notpresent(farm_id: int):\n    assert not (__farm_started[farm_id] and now >= __farm_begtime[farm_id] and\n        now < __farm_endtime[farm_id]), 'Opened!'\n\n\ndef __beforeend(farm_id: int):\n    assert __farm_started[farm_id] and now < __farm_endtime[farm_id], 'Ended!'\n\n\ndef __farmexists(farm_id: int):\n    assert __farms[farm_id] != False, 'Farm does not exist'\n\n\ndef ____():\n    __farm_counter.set(0)\n\n\n@__export('con_zen4')\ndef createFarm(deposit_token: str, reward_token: str, reward_amount: float,\n    duration_days: int):\n    assert reward_amount > 0, 'Invalid reward amount'\n    assert duration_days > 0, 'Duration must be positive'\n    beg = now\n    end = now + datetime.timedelta(days=duration_days)\n    delta = end - beg\n    reward_per_sec = reward_amount / delta.seconds\n    reward_tok = importlib.import_module(reward_token)\n    assert importlib.enforce_interface(reward_tok, token_interface\n        ), 'Invalid reward token!'\n    deposit_tok = importlib.import_module(deposit_token)\n    assert importlib.enforce_interface(deposit_tok, token_interface\n        ), 'Invalid deposit token!'\n    reward_tok.transfer_from(reward_amount, ctx.this, ctx.caller)\n    farm_id = __farm_counter.get()\n    __farm_counter.set(farm_id + 1)\n    __farms[farm_id] = True\n    __farm_creators[farm_id] = ctx.caller\n    __farm_total_staked[farm_id] = decimal('0.0')\n    __farm_cum_rpt[farm_id] = decimal('0.0')\n    __farm_reward_payed[farm_id] = decimal('0.0')\n    __farm_total_rewards[farm_id] = decimal('0.0')\n    __farm_begtime[farm_id] = beg\n    __farm_endtime[farm_id] = end\n    __farm_rps[farm_id] = reward_per_sec\n    __farm_last_update[farm_id] = beg\n    __farm_reward_token[farm_id] = reward_token\n    __farm_deposit_token[farm_id] = deposit_token\n    __farm_reward_budget[farm_id] = reward_amount\n    __farm_owner_withdrawn[farm_id] = decimal('0.0')\n    __farm_started[farm_id] = True\n    __FarmCreated({'farm_id': farm_id, 'creator': ctx.caller,\n        'deposit_token': deposit_token, 'reward_token': reward_token})\n    return farm_id\n\n\ndef __update(farm_id: int):\n    cur = min(now, __farm_endtime[farm_id])\n    if __farm_total_staked[farm_id] > 0 and now >= __farm_begtime[farm_id]:\n        delta = cur - max(__farm_last_update[farm_id], __farm_begtime[farm_id])\n        __farm_cum_rpt[farm_id] = __farm_cum_rpt[farm_id\n            ] + delta.seconds * __farm_rps[farm_id] / __farm_total_staked[\n            farm_id]\n        __farm_total_rewards[farm_id] = __farm_total_rewards[farm_id\n            ] + delta.seconds * __farm_rps[farm_id]\n    __farm_last_update[farm_id] = cur\n\n\n@__export('con_zen4')\ndef getRewards(farm_id: int, address: str):\n    __farmexists(farm_id)\n    deposit = __farm_deposits[farm_id, address]\n    rewards = __farm_saved_rewards[farm_id, address]\n    if deposit != False:\n        cum_rpt_now = __farm_cum_rpt[farm_id]\n        if __farm_total_staked[farm_id] > 0 and now >= __farm_begtime[farm_id]:\n            delta = min(now, __farm_endtime[farm_id]) - max(__farm_last_update\n                [farm_id], __farm_begtime[farm_id])\n            cum_rpt_now += delta.seconds * __farm_rps[farm_id\n                ] / __farm_total_staked[farm_id]\n        rewards += (cum_rpt_now - deposit['cum_rpt']) * deposit['amount']\n    return rewards\n\n\ndef __harvest(farm_id: int):\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    if deposit != False:\n        __farm_saved_rewards[farm_id, ctx.caller] += (__farm_cum_rpt[\n            farm_id] - deposit['cum_rpt']) * deposit['amount']\n\n\n@__export('con_zen4')\ndef deposit(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    __beforeend(farm_id)\n    __update(farm_id)\n    __harvest(farm_id)\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    cur_amount = decimal('0.0')\n    if deposit != False:\n        cur_amount = deposit['amount']\n    __farm_deposits[farm_id, ctx.caller] = {'amount': cur_amount + amount,\n        'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_total_staked[farm_id] = __farm_total_staked[farm_id] + amount\n    tok = importlib.import_module(__farm_deposit_token[farm_id])\n    tok.transfer_from(amount, ctx.this, ctx.caller)\n    __Deposit({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_zen4')\ndef withdraw(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    assert deposit != False, 'No deposit!'\n    __update(farm_id)\n    __harvest(farm_id)\n    assert deposit['amount'] >= amount, 'Amount exceeds deposit!'\n    new_amount = deposit['amount'] - amount\n    if new_amount == 0:\n        __farm_deposits[farm_id, ctx.caller] = False\n    else:\n        __farm_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_total_staked[farm_id] = __farm_total_staked[farm_id] - amount\n    tok = importlib.import_module(__farm_deposit_token[farm_id])\n    tok.transfer(amount, ctx.caller)\n    __Withdraw({'farm_id': farm_id, 'address': ctx.caller, 'amount': amount})\n\n\n@__export('con_zen4')\ndef withdrawRewards(farm_id: int, amount: float):\n    assert amount > 0, 'Invalid amount'\n    __farmexists(farm_id)\n    __update(farm_id)\n    __harvest(farm_id)\n    assert amount <= __farm_saved_rewards[farm_id, ctx.caller\n        ], 'Not enough rewards!'\n    __farm_saved_rewards[farm_id, ctx.caller] -= amount\n    deposit = __farm_deposits[farm_id, ctx.caller]\n    if deposit != False:\n        new_amount = deposit['amount']\n        __farm_deposits[farm_id, ctx.caller] = {'amount': new_amount,\n            'cum_rpt': __farm_cum_rpt[farm_id]}\n    __farm_reward_payed[farm_id] = __farm_reward_payed[farm_id] + amount\n    tok = importlib.import_module(__farm_reward_token[farm_id])\n    assert importlib.enforce_interface(tok, token_interface\n        ), 'Invalid reward token!'\n    tok.transfer(amount, ctx.caller)\n    __WithdrawRewards({'farm_id': farm_id, 'address': ctx.caller, 'amount':\n        amount})\n\n\n@__export('con_zen4')\ndef withdrawRemainingRewards(farm_id: int):\n    __farmexists(farm_id)\n    __onlyowner(farm_id)\n    __notpresent(farm_id)\n    __update(farm_id)\n    budget = __farm_reward_budget[farm_id]\n    accrued = __farm_total_rewards[farm_id]\n    if accrued > budget:\n        accrued = budget\n    leftover_total = budget - accrued\n    already_withdrawn = __farm_owner_withdrawn[farm_id]\n    available = leftover_total - already_withdrawn\n    if available > 0:\n        tok = importlib.import_module(__farm_reward_token[farm_id])\n        assert importlib.enforce_interface(tok, token_interface\n            ), 'Invalid reward token!'\n        tok.transfer(available, ctx.caller)\n        __farm_owner_withdrawn[farm_id] = already_withdrawn + available\n\n\n@__export('con_zen4')\ndef getFarmInfo(farm_id: int):\n    __farmexists(farm_id)\n    budget = __farm_reward_budget[farm_id]\n    paid_to_users = __farm_reward_payed[farm_id]\n    withdrawn_by_owner = __farm_owner_withdrawn[farm_id]\n    remaining_available = budget - paid_to_users - withdrawn_by_owner\n    if remaining_available < 0:\n        remaining_available = 0\n    return [__farm_begtime[farm_id], __farm_endtime[farm_id], __farm_rps[\n        farm_id], __farm_total_staked[farm_id], __farm_deposit_token[\n        farm_id], __farm_reward_token[farm_id], __farm_creators[farm_id],\n        budget, remaining_available]\n\n\n@__export('con_zen4')\ndef getUserFarmInfo(farm_id: int, who: str):\n    __farmexists(farm_id)\n    staked = decimal('0.0')\n    if __farm_deposits[farm_id, who]:\n        staked = __farm_deposits[farm_id, who]['amount']\n    return [staked, getRewards(farm_id, who)]\n\n\n@__export('con_zen4')\ndef getAllFarms():\n    total = __farm_counter.get()\n    result = []\n    for i in range(total):\n        if __farms[i] != False:\n            result.append(i)\n    return result\n"
            },
            {
                "key": "con_zen4.__developer__",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen4.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        1,
                        4,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_begtime:0",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        1,
                        5,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_begtime:1",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        1,
                        13,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_begtime:2",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        4,
                        34,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_counter",
                "value": 3
            },
            {
                "key": "con_zen4.farm_creators:0",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen4.farm_creators:1",
                "value": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61"
            },
            {
                "key": "con_zen4.farm_creators:2",
                "value": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011"
            },
            {
                "key": "con_zen4.farm_cum_rpt:0",
                "value": {
                    "__fixed__": "0.058513374485596704916666666666"
                }
            },
            {
                "key": "con_zen4.farm_cum_rpt:1",
                "value": {
                    "__fixed__": "0.0101736111111111106944"
                }
            },
            {
                "key": "con_zen4.farm_cum_rpt:2",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen4.farm_deposit_token:0",
                "value": "con_pi"
            },
            {
                "key": "con_zen4.farm_deposit_token:1",
                "value": "con_stellar"
            },
            {
                "key": "con_zen4.farm_deposit_token:2",
                "value": "con_stellar"
            },
            {
                "key": "con_zen4.farm_deposits:0:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "5E+2"
                    },
                    "cum_rpt": {
                        "__fixed__": "0.0285493827160493813"
                    }
                }
            },
            {
                "key": "con_zen4.farm_deposits:0:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "amount": {
                        "__fixed__": "1E+4"
                    },
                    "cum_rpt": {
                        "__fixed__": "0.058513374485596704916666666666"
                    }
                }
            },
            {
                "key": "con_zen4.farm_deposits:0:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "cum_rpt": {
                        "__fixed__": "0.0208333333333333323"
                    }
                }
            },
            {
                "key": "con_zen4.farm_deposits:1:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "amount": {
                        "__fixed__": "1E+3"
                    },
                    "cum_rpt": {
                        "__fixed__": "0"
                    }
                }
            },
            {
                "key": "con_zen4.farm_deposits:1:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "amount": {
                        "__fixed__": "1E+2"
                    },
                    "cum_rpt": {
                        "__fixed__": "0.0101736111111111106944"
                    }
                }
            },
            {
                "key": "con_zen4.farm_endtime:0",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        11,
                        1,
                        5,
                        54,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_endtime:1",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        10,
                        1,
                        13,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_endtime:2",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        9,
                        4,
                        34,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_last_update:0",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        4,
                        32,
                        56,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_last_update:1",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        4,
                        14,
                        33,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_last_update:2",
                "value": {
                    "__time__": [
                        2025,
                        8,
                        8,
                        4,
                        34,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_zen4.farm_owner_withdrawn:0",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen4.farm_owner_withdrawn:1",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen4.farm_owner_withdrawn:2",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen4.farm_reward_budget:0",
                "value": 1000
            },
            {
                "key": "con_zen4.farm_reward_budget:1",
                "value": 500
            },
            {
                "key": "con_zen4.farm_reward_budget:2",
                "value": 2400
            },
            {
                "key": "con_zen4.farm_reward_payed:0",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen4.farm_reward_payed:1",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen4.farm_reward_payed:2",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen4.farm_reward_token:0",
                "value": "con_pi"
            },
            {
                "key": "con_zen4.farm_reward_token:1",
                "value": "con_stellar"
            },
            {
                "key": "con_zen4.farm_reward_token:2",
                "value": "con_pi"
            },
            {
                "key": "con_zen4.farm_rps:0",
                "value": {
                    "__fixed__": "0.0038580246913580245"
                }
            },
            {
                "key": "con_zen4.farm_rps:1",
                "value": {
                    "__fixed__": "0.0028935185185185184"
                }
            },
            {
                "key": "con_zen4.farm_rps:2",
                "value": {
                    "__fixed__": "0.027777777777777776"
                }
            },
            {
                "key": "con_zen4.farm_saved_rewards:0:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "2.85493827160493813"
                }
            },
            {
                "key": "con_zen4.farm_started:0",
                "value": true
            },
            {
                "key": "con_zen4.farm_started:1",
                "value": true
            },
            {
                "key": "con_zen4.farm_started:2",
                "value": true
            },
            {
                "key": "con_zen4.farm_total_rewards:0",
                "value": {
                    "__fixed__": "21.6049382716049372"
                }
            },
            {
                "key": "con_zen4.farm_total_rewards:1",
                "value": {
                    "__fixed__": "10.1736111111111106944"
                }
            },
            {
                "key": "con_zen4.farm_total_rewards:2",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen4.farm_total_staked:0",
                "value": {
                    "__fixed__": "1.06E+4"
                }
            },
            {
                "key": "con_zen4.farm_total_staked:1",
                "value": {
                    "__fixed__": "1.1E+3"
                }
            },
            {
                "key": "con_zen4.farm_total_staked:2",
                "value": {
                    "__fixed__": "0"
                }
            },
            {
                "key": "con_zen4.farms:0",
                "value": true
            },
            {
                "key": "con_zen4.farms:1",
                "value": true
            },
            {
                "key": "con_zen4.farms:2",
                "value": true
            },
            {
                "key": "con_zyx.__code__",
                "value": "import currency\n__manager = Variable(contract='con_zyx', name='manager')\n__names = Hash(default_value=False, contract='con_zyx', name='names')\n__balances = Hash(default_value=0, contract='con_zyx', name='balances')\n__approvals = Hash(default_value=0, contract='con_zyx', name='approvals')\n__expiry_times = Hash(default_value=None, contract='con_zyx', name=\n    'expiry_times')\n__owners = Hash(default_value=None, contract='con_zyx', name='owners')\n__mint_price = Variable(contract='con_zyx', name='mint_price')\n__royalty_fee_percentage = Variable(contract='con_zyx', name=\n    'royalty_fee_percentage')\n__registration_period = Variable(contract='con_zyx', name='registration_period'\n    )\n__contracts_allowlist = Variable(contract='con_zyx', name='contracts_allowlist'\n    )\n__main_name_to_address = Hash(default_value=None, contract='con_zyx', name=\n    'main_name_to_address')\n__address_to_main_name = Hash(default_value=None, contract='con_zyx', name=\n    'address_to_main_name')\n\n\ndef ____():\n    __manager.set(ctx.caller)\n    __contracts_allowlist.set([])\n    __mint_price.set(1)\n    __royalty_fee_percentage.set(2)\n    __registration_period.set(365)\n\n\ndef __assert_is_manager():\n    assert ctx.caller == __manager.get(), 'You are not the manager'\n\n\ndef __assert_is_owner(address: str, name: str):\n    assert __balances[address, name] == 1, 'You are not the owner of this name'\n\n\ndef __assert_if_contract_is_approved(contract: str):\n    if 'con_' in contract:\n        assert contract in __contracts_allowlist.get(\n            ), 'This contract is not allowed to interact with this contract'\n\n\ndef __assert_is_approved_for_transfer(main_account: str, to: str, name: str):\n    assert __approvals[main_account, to, name\n        ] == 1, 'Name is not approved for transfer'\n\n\ndef __is_expired(name: str):\n    expiry = __expiry_times[name]\n    if expiry is None:\n        return True\n    return now >= expiry\n\n\ndef __assert_is_not_expired(name: str):\n    assert not __is_expired(name), 'Name is expired'\n\n\n@__export('con_zyx')\ndef mint_name(name: str):\n    __assert_if_contract_is_approved(ctx.caller)\n    name = name.lower()\n    assert name.isalnum() and name.isascii(\n        ), 'Name must be alphanumeric and ascii'\n    assert len(name) >= 3, 'The minimum length is 3 characters'\n    assert len(name) <= 32, 'The maximum length is 32 characters'\n    if __names[name] != False:\n        assert __is_expired(name\n            ), 'Name already exists and has not expired yet.'\n    currency.transfer_from(amount=__mint_price.get(), to=__manager.get(),\n        main_account=ctx.caller)\n    __names[name] = {}\n    __expiry_times[name] = now + datetime.timedelta(days=\n        __registration_period.get())\n    __balances[ctx.caller, name] = 1\n    __owners[name] = ctx.caller\n\n\n@__export('con_zyx')\ndef transfer(name: str, to: str):\n    __assert_is_not_expired(name)\n    assert name != '', 'Please specify the Name you want to transfer'\n    __assert_is_owner(ctx.caller, name)\n    __balances[ctx.caller, name] = 0\n    __balances[to, name] = 1\n    __main_name_to_address[name] = None\n    __address_to_main_name[ctx.caller] = None\n    __names[name] = {}\n    __owners[name] = to\n\n\n@__export('con_zyx')\ndef approve(name: str, to: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __approvals[ctx.caller, to, name] = 1\n\n\n@__export('con_zyx')\ndef revoke_approval(name: str, to: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __approvals[ctx.caller, to, name] = 0\n\n\n@__export('con_zyx')\ndef transfer_from(name: str, to: str, main_account: str):\n    __assert_if_contract_is_approved(ctx.caller)\n    assert name != '', 'Please specify the Name you want to transfer'\n    __assert_is_not_expired(name)\n    __assert_is_owner(main_account, name)\n    __assert_is_approved_for_transfer(main_account, to, name)\n    __approvals[main_account, to, name] = 0\n    __balances[main_account, name] = 0\n    __balances[to, name] = 1\n    __main_name_to_address[name] = None\n    __address_to_main_name[main_account] = None\n    __names[name] = {}\n    __owners[name] = to\n\n\n@__export('con_zyx')\ndef set_main_name_to_caller(name: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __main_name_to_address[name] = ctx.caller\n    __address_to_main_name[ctx.caller] = name\n\n\n@__export('con_zyx')\ndef set_data(name: str, data: dict):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    __names[name] = data\n\n\n@__export('con_zyx')\ndef get_main_name_to_address(name: str):\n    address = __main_name_to_address[name]\n    if address is None or __is_expired(name):\n        return None\n    return address\n\n\n@__export('con_zyx')\ndef get_address_to_main_name(address: str):\n    name = __address_to_main_name[address]\n    if name is None or __is_expired(name):\n        return None\n    return name\n\n\n@__export('con_zyx')\ndef get_owner(name: str):\n    owner = __owners[name]\n    if owner is None or __is_expired(name):\n        return None\n    return owner\n\n\n@__export('con_zyx')\ndef get_expiry_time(name: str):\n    return __expiry_times[name]\n\n\n@__export('con_zyx')\ndef get_data(name: str):\n    return __names[name]\n\n\n@__export('con_zyx')\ndef is_owner(name: str, address: str):\n    return __balances[address, name] == 1 and not __is_expired(name)\n\n\n@__export('con_zyx')\ndef renew_name(name: str):\n    __assert_is_not_expired(name)\n    __assert_is_owner(ctx.caller, name)\n    currency.transfer_from(amount=__mint_price.get(), to=__manager.get(),\n        main_account=ctx.caller)\n    __expiry_times[name] = __expiry_times[name] + datetime.timedelta(days=\n        __registration_period.get())\n\n\n@__export('con_zyx')\ndef set_mint_price(price: int):\n    __assert_is_manager()\n    __mint_price.set(price)\n\n\n@__export('con_zyx')\ndef set_royalty_fee_percentage(percentage: int):\n    __assert_is_manager()\n    __royalty_fee_percentage.set(percentage)\n\n\n@__export('con_zyx')\ndef set_manager(new_manager: str):\n    __assert_is_manager()\n    __manager.set(new_manager)\n\n\n@__export('con_zyx')\ndef set_contract_allowlist(contracts: list):\n    __assert_is_manager()\n    __contracts_allowlist.set(contracts)\n\n\n@__export('con_zyx')\ndef set_registration_period(period: int):\n    __assert_is_manager()\n    __registration_period.set(period)\n"
            },
            {
                "key": "con_zyx.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_zyx.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        31,
                        12,
                        3,
                        36,
                        0
                    ]
                }
            },
            {
                "key": "con_zyx.address_to_main_name:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": "test"
            },
            {
                "key": "con_zyx.balances:123:test4",
                "value": 1
            },
            {
                "key": "con_zyx.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:test",
                "value": 1
            },
            {
                "key": "con_zyx.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:test2",
                "value": 1
            },
            {
                "key": "con_zyx.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:test4",
                "value": 0
            },
            {
                "key": "con_zyx.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:test5",
                "value": 1
            },
            {
                "key": "con_zyx.contracts_allowlist",
                "value": []
            },
            {
                "key": "con_zyx.expiry_times:test",
                "value": {
                    "__time__": [
                        2026,
                        1,
                        31,
                        12,
                        25,
                        26,
                        0
                    ]
                }
            },
            {
                "key": "con_zyx.expiry_times:test2",
                "value": {
                    "__time__": [
                        2026,
                        1,
                        31,
                        12,
                        26,
                        17,
                        0
                    ]
                }
            },
            {
                "key": "con_zyx.expiry_times:test4",
                "value": {
                    "__time__": [
                        2027,
                        1,
                        31,
                        12,
                        28,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_zyx.expiry_times:test5",
                "value": {
                    "__time__": [
                        2026,
                        1,
                        31,
                        12,
                        44,
                        20,
                        0
                    ]
                }
            },
            {
                "key": "con_zyx.main_name_to_address:test",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_zyx.manager",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_zyx.mint_price",
                "value": 1
            },
            {
                "key": "con_zyx.names:test",
                "value": {}
            },
            {
                "key": "con_zyx.names:test2",
                "value": {}
            },
            {
                "key": "con_zyx.names:test4",
                "value": {}
            },
            {
                "key": "con_zyx.names:test5",
                "value": {}
            },
            {
                "key": "con_zyx.owners:test",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_zyx.owners:test2",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_zyx.owners:test4",
                "value": "123"
            },
            {
                "key": "con_zyx.owners:test5",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_zyx.registration_period",
                "value": 365
            },
            {
                "key": "con_zyx.royalty_fee_percentage",
                "value": 2
            },
            {
                "key": "currency.__code__",
                "value": "__balances = Hash(default_value=0, contract='currency', name='balances')\n__metadata = Hash(contract='currency', name='metadata')\n__permits = Hash(contract='currency', name='permits')\n__streams = Hash(contract='currency', name='streams')\n__TransferEvent = LogEvent(event='Transfer', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='currency', name='TransferEvent')\n__ApproveEvent = LogEvent(event='Approve', params={'from': {'type': str,\n    'idx': True}, 'to': {'type': str, 'idx': True}, 'amount': {'type': (int,\n    float, decimal)}}, contract='currency', name='ApproveEvent')\n__StreamCreatedEvent = LogEvent(event='StreamCreated', params={'sender': {\n    'type': str, 'idx': True}, 'receiver': {'type': str, 'idx': True},\n    'stream_id': {'type': str, 'idx': True}, 'rate': {'type': (int, float,\n    decimal)}, 'begins': {'type': str}, 'closes': {'type': str}}, contract=\n    'currency', name='StreamCreatedEvent')\n__StreamBalanceEvent = LogEvent(event='StreamBalance', params={'receiver':\n    {'type': str, 'idx': True}, 'sender': {'type': str, 'idx': True},\n    'stream_id': {'type': str, 'idx': True}, 'amount': {'type': (int, float,\n    decimal)}, 'balancer': {'type': str}}, contract='currency', name=\n    'StreamBalanceEvent')\n__StreamCloseChangeEvent = LogEvent(event='StreamCloseChange', params={\n    'receiver': {'type': str, 'idx': True}, 'sender': {'type': str, 'idx': \n    True}, 'stream_id': {'type': str, 'idx': True}, 'time': {'type': str}},\n    contract='currency', name='StreamCloseChangeEvent')\n__StreamForfeitEvent = LogEvent(event='StreamForfeit', params={'receiver':\n    {'type': str, 'idx': True}, 'sender': {'type': str, 'idx': True},\n    'stream_id': {'type': str, 'idx': True}, 'time': {'type': str}},\n    contract='currency', name='StreamForfeitEvent')\n__StreamFinalizedEvent = LogEvent(event='StreamFinalized', params={\n    'receiver': {'type': str, 'idx': True}, 'sender': {'type': str, 'idx': \n    True}, 'stream_id': {'type': str, 'idx': True}, 'time': {'type': str}},\n    contract='currency', name='StreamFinalizedEvent')\n\n\ndef ____(vk: str):\n    __balances[vk] = decimal('5555555.55')\n    __balances['team_vesting'] = decimal('16666666.65')\n    __balances['dao'] = decimal('10999999.989')\n    __balances['dao_funding_stream'] = decimal('22333333.311')\n    __balances['team_lock'] += decimal('49999999.95')\n    __balances[vk] += decimal('5555555.55')\n    __metadata['token_name'] = 'XIAN'\n    __metadata['token_symbol'] = 'XIAN'\n    __metadata['token_logo_url'] = 'https://xian.org/assets/img/logo.svg'\n    __metadata['token_website'] = 'https://xian.org'\n    __metadata['operator'] = 'team_lock'\n    __setup_seed_stream(stream_id='team_vesting', sender='team_vesting',\n        receiver='team_lock', rate=decimal('0.10575725568804825'),\n        duration_days=1824)\n    __setup_seed_stream(stream_id='dao_funding_stream', sender=\n        'dao_funding_stream', receiver='dao', rate=decimal(\n        '0.1180848122715852'), duration_days=2189)\n\n\ndef __setup_seed_stream(stream_id: str, sender: str, receiver: str, rate:\n    float, duration_days: int):\n    __streams[stream_id, 'status'] = 'active'\n    __streams[stream_id, 'begins'] = now\n    __streams[stream_id, 'closes'] = now + datetime.timedelta(days=\n        duration_days)\n    __streams[stream_id, 'receiver'] = receiver\n    __streams[stream_id, 'sender'] = sender\n    __streams[stream_id, 'rate'] = rate\n    __streams[stream_id, 'claimed'] = 0\n\n\n@__export('currency')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata.'\n    __metadata[key] = value\n\n\n@__export('currency')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send.'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('currency')\ndef approve(amount: float, to: str):\n    assert amount >= 0, 'Cannot approve negative balances.'\n    __balances[ctx.caller, to] = amount\n    __ApproveEvent({'from': ctx.caller, 'to': to, 'amount': amount})\n\n\n@__export('currency')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send. You have {__balances[main_account, ctx.caller]} approved and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send.'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    __TransferEvent({'from': main_account, 'to': to, 'amount': amount})\n\n\n@__export('currency')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('currency')\ndef permit(owner: str, spender: str, value: float, deadline: str, signature:\n    str):\n    deadline = __strptime_ymdhms(deadline)\n    permit_msg = __construct_permit_msg(owner, spender, value, str(deadline))\n    permit_hash = hashlib.sha3(permit_msg)\n    assert __permits[permit_hash] is None, 'Permit can only be used once.'\n    assert now < deadline, 'Permit has expired.'\n    assert value >= 0, 'Cannot approve negative balances!'\n    assert crypto.verify(owner, permit_msg, signature), 'Invalid signature.'\n    __balances[owner, spender] = value\n    __permits[permit_hash] = True\n    __ApproveEvent({'from': owner, 'to': spender, 'amount': value})\n    return permit_hash\n\n\ndef __construct_permit_msg(owner: str, spender: str, value: float, deadline:\n    str):\n    return f'{owner}:{spender}:{value}:{deadline}:{ctx.this}:{chain_id}'\n\n\nSENDER_KEY = 'sender'\nRECEIVER_KEY = 'receiver'\nSTATUS_KEY = 'status'\nBEGIN_KEY = 'begins'\nCLOSE_KEY = 'closes'\nRATE_KEY = 'rate'\nCLAIMED_KEY = 'claimed'\nSTREAM_ACTIVE = 'active'\nSTREAM_FINALIZED = 'finalized'\nSTREAM_FORFEIT = 'forfeit'\n\n\n@__export('currency')\ndef create_stream(receiver: str, rate: float, begins: str, closes: str):\n    begins = __strptime_ymdhms(begins)\n    closes = __strptime_ymdhms(closes)\n    sender = ctx.caller\n    stream_id = __perform_create_stream(sender, receiver, rate, begins, closes)\n    return stream_id\n\n\ndef __perform_create_stream(sender: str, receiver: str, rate: float, begins:\n    str, closes: str):\n    stream_id = hashlib.sha3(f'{sender}:{receiver}:{begins}:{closes}:{rate}')\n    assert __streams[stream_id, STATUS_KEY] is None, 'Stream already exists.'\n    assert begins < closes, 'Stream cannot begin after the close date.'\n    assert rate > 0, 'Rate must be greater than 0.'\n    __streams[stream_id, STATUS_KEY] = STREAM_ACTIVE\n    __streams[stream_id, BEGIN_KEY] = begins\n    __streams[stream_id, CLOSE_KEY] = closes\n    __streams[stream_id, RECEIVER_KEY] = receiver\n    __streams[stream_id, SENDER_KEY] = sender\n    __streams[stream_id, RATE_KEY] = rate\n    __streams[stream_id, CLAIMED_KEY] = 0\n    __StreamCreatedEvent({'sender': sender, 'receiver': receiver,\n        'stream_id': stream_id, 'rate': rate, 'begins': str(begins),\n        'closes': str(closes)})\n    return stream_id\n\n\n@__export('currency')\ndef create_stream_from_permit(sender: str, receiver: str, rate: float,\n    begins: str, closes: str, deadline: str, signature: str):\n    begins = __strptime_ymdhms(begins)\n    closes = __strptime_ymdhms(closes)\n    deadline = __strptime_ymdhms(deadline)\n    assert now < deadline, 'Permit has expired.'\n    permit_msg = __construct_stream_permit_msg(sender, receiver, rate,\n        begins, closes, deadline)\n    permit_hash = hashlib.sha3(permit_msg)\n    assert __permits[permit_hash] is None, 'Permit can only be used once.'\n    assert crypto.verify(sender, permit_msg, signature), 'Invalid signature.'\n    __permits[permit_hash] = True\n    return __perform_create_stream(sender, receiver, rate, begins, closes)\n\n\n@__export('currency')\ndef balance_stream(stream_id: str):\n    assert __streams[stream_id, STATUS_KEY], 'Stream does not exist.'\n    assert __streams[stream_id, STATUS_KEY\n        ] == STREAM_ACTIVE, 'You can only balance active streams.'\n    assert now > __streams[stream_id, BEGIN_KEY], 'Stream has not started yet.'\n    sender = __streams[stream_id, SENDER_KEY]\n    receiver = __streams[stream_id, RECEIVER_KEY]\n    assert ctx.caller in [sender, receiver\n        ], 'Only sender or receiver can balance a stream.'\n    closes = __streams[stream_id, CLOSE_KEY]\n    begins = __streams[stream_id, BEGIN_KEY]\n    rate = __streams[stream_id, RATE_KEY]\n    claimed = __streams[stream_id, CLAIMED_KEY]\n    outstanding_balance = __calc_outstanding_balance(begins, closes, rate,\n        claimed)\n    assert outstanding_balance > 0, 'No amount due on this stream.'\n    claimable_amount = __calc_claimable_amount(outstanding_balance, sender)\n    __balances[sender] -= claimable_amount\n    __balances[receiver] += claimable_amount\n    __streams[stream_id, CLAIMED_KEY] += claimable_amount\n    __StreamBalanceEvent({'receiver': receiver, 'sender': sender,\n        'stream_id': stream_id, 'amount': claimable_amount, 'balancer': ctx\n        .caller})\n\n\n@__export('currency')\ndef change_close_time(stream_id: str, new_close_time: str):\n    new_close_time = __strptime_ymdhms(new_close_time)\n    assert __streams[stream_id, STATUS_KEY], 'Stream does not exist.'\n    assert __streams[stream_id, STATUS_KEY\n        ] == STREAM_ACTIVE, 'Stream is not active.'\n    sender = __streams[stream_id, SENDER_KEY]\n    receiver = __streams[stream_id, RECEIVER_KEY]\n    assert ctx.caller == sender, 'Only sender can change the close time of a stream.'\n    if new_close_time < __streams[stream_id, BEGIN_KEY] and now < __streams[\n        stream_id, BEGIN_KEY]:\n        __streams[stream_id, CLOSE_KEY] = __streams[stream_id, BEGIN_KEY]\n    elif new_close_time <= now:\n        __streams[stream_id, CLOSE_KEY] = now\n    else:\n        __streams[stream_id, CLOSE_KEY] = new_close_time\n    __StreamCloseChangeEvent({'receiver': receiver, 'sender': sender,\n        'stream_id': stream_id, 'time': str(new_close_time)})\n\n\n@__export('currency')\ndef finalize_stream(stream_id: str):\n    assert __streams[stream_id, STATUS_KEY], 'Stream does not exist.'\n    assert __streams[stream_id, STATUS_KEY\n        ] == STREAM_ACTIVE, 'Stream is not active.'\n    sender = __streams[stream_id, 'sender']\n    receiver = __streams[stream_id, 'receiver']\n    assert ctx.caller in [sender, receiver\n        ], 'Only sender or receiver can finalize a stream.'\n    begins = __streams[stream_id, BEGIN_KEY]\n    closes = __streams[stream_id, CLOSE_KEY]\n    rate = __streams[stream_id, RATE_KEY]\n    claimed = __streams[stream_id, CLAIMED_KEY]\n    assert now <= closes, 'Stream has not closed yet.'\n    outstanding_balance = __calc_outstanding_balance(begins, closes, rate,\n        claimed)\n    assert outstanding_balance == 0, 'Stream has outstanding balance.'\n    __streams[stream_id, STATUS_KEY] = STREAM_FINALIZED\n    __StreamFinalizedEvent({'receiver': receiver, 'sender': sender,\n        'stream_id': stream_id, 'time': str(now)})\n\n\n@__export('currency')\ndef close_balance_finalize(stream_id: str):\n    change_close_time(stream_id=stream_id, new_close_time=str(now))\n    balance_finalize(stream_id=stream_id)\n\n\n@__export('currency')\ndef balance_finalize(stream_id: str):\n    balance_stream(stream_id=stream_id)\n    finalize_stream(stream_id=stream_id)\n\n\n@__export('currency')\ndef forfeit_stream(stream_id: str) ->str:\n    assert __streams[stream_id, STATUS_KEY], 'Stream does not exist.'\n    assert __streams[stream_id, STATUS_KEY\n        ] == STREAM_ACTIVE, 'Stream is not active.'\n    receiver = __streams[stream_id, RECEIVER_KEY]\n    sender = __streams[stream_id, SENDER_KEY]\n    assert ctx.caller == receiver, 'Only receiver can forfeit a stream.'\n    __streams[stream_id, STATUS_KEY] = STREAM_FORFEIT\n    __streams[stream_id, CLOSE_KEY] = now\n    __StreamForfeitEvent({'receiver': receiver, 'sender': sender,\n        'stream_id': stream_id, 'time': str(now)})\n\n\ndef __calc_outstanding_balance(begins: datetime.datetime, closes: datetime.\n    datetime, rate: float, claimed: float) ->float:\n    claimable_end_point = now if now < closes else closes\n    claimable_period = claimable_end_point - begins\n    claimable_seconds = claimable_period.seconds\n    amount_due = rate * claimable_seconds - claimed\n    return amount_due\n\n\ndef __calc_claimable_amount(amount_due: float, sender: str) ->float:\n    return amount_due if amount_due < __balances[sender] else __balances[sender\n        ]\n\n\ndef __construct_stream_permit_msg(sender: str, receiver: str, rate: float,\n    begins: str, closes: str, deadline: str) ->str:\n    return (\n        f'{sender}:{receiver}:{rate}:{begins}:{closes}:{deadline}:{ctx.this}:{chain_id}'\n        )\n\n\ndef __strptime_ymdhms(date_string: str) ->datetime.datetime:\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "currency.__developer__",
                "value": "sys"
            },
            {
                "key": "currency.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "currency.balances:0",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "currency.balances:0028f9cd0706ff84706daa386212a26be4174407de7a06f91efe83ab8f57d400",
                "value": {
                    "__fixed__": "0.5257475067500000002"
                }
            },
            {
                "key": "currency.balances:00905c7a1e8eafbacb068b40c2d8db5a1673499c4f04fbdf4c9ce03576a2d99b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:00994ff9c9c44f638c14eea6c061a0a68f68dfe64ea31c13305ab0c775a1144a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:009a51940e0271d9e9e89a59114c772c30a59f5dc7b4dd6835b537873ce5bcf2",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:00aed9daacd1004e1072d8d487e910ff5f1faa69444c379f3ffe5196a30bc5ad",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0125e06124f0eefe58b3892373ef94bba91da3f8c5cffa72a14d8a2840e32619",
                "value": 1
            },
            {
                "key": "currency.balances:0155b1cab2bc9e626b5d05be6354d2972f8223dca5f0872fede68cce7582f535",
                "value": {
                    "__fixed__": "752.8"
                }
            },
            {
                "key": "currency.balances:01937193541ee1ba21ba48d05e5892caaead2ea09af5b9d55490b156f47ea147",
                "value": 1
            },
            {
                "key": "currency.balances:02122bff580ac362bfa5578eda5fcac86db69f6a1d0c693dd0fe26183327e223",
                "value": {
                    "__fixed__": "46611.5493"
                }
            },
            {
                "key": "currency.balances:0278da1486ebf423a0bcfd633366af8e2a29356a42100b011638c7b1bd730f46",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:02cea231aa46a0c5888864a473762b3e7bab9963df0ab80b08a83af9907b6dda",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:02ea7c92adf8c0ae3dc26dec6339c50921e7d9a7d55c43f1c6dc27b5a61adfdb",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:02fc49c34ac6976d71482e641f9669fffff92d0f53e28bed5307ee6cc80eb836",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:030fbeb5f3146602cdf9f8c9ed63cb17bc3f1c5f2aa2c80f97dc6ef9b4c93cc2",
                "value": 1
            },
            {
                "key": "currency.balances:033398fcf01a1f3b930f60f55294206c3f272e2880b27260b8595d5744ede92e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0334f3ace9a08e59ffe0a9bff4a2a4aaa399236baea77790c55ad316c5d4f03a",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:03e2669bf5a8190f8472fcf6f1cff2e6f36a81d2c9305020ba444679f196d2cb",
                "value": {
                    "__fixed__": "45943.433"
                }
            },
            {
                "key": "currency.balances:03e2669bf5a8190f8472fcf6f1cff2e6f36a81d2c9305020ba444679f196d2cb:con_multisend",
                "value": {
                    "__fixed__": "899999999121.9003"
                }
            },
            {
                "key": "currency.balances:0491857ce3026b8b542ea831b509a7eb7db5079c59b237d05c0afced8e4000f1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:049187a7ab26530a2d5ef199eee91dc8c835517ec659364b6b92a3eeb0f24cad",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0553c8a8087f146086b7cd903d7e8ef02a5c9e47407cfdc839e74d006da3d5b4",
                "value": 1
            },
            {
                "key": "currency.balances:055849a9e30b9468cfe7664e8d2ce7e3370caf697dff3d6dddefbf5ae521e01d",
                "value": 1
            },
            {
                "key": "currency.balances:059d32f477e57f0905af3bfd697f3601e6047b8cc625b8c1d7d0c3f9521f76f1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:05a196089d73fafa8e28c58691ef7b6bc4b513cdc75f6419780fc004361fe56c",
                "value": {
                    "__fixed__": "775.3219422000001"
                }
            },
            {
                "key": "currency.balances:05e0c5dbc9672da241f414362d0557ff4d86c708af7ffdea2be4f3f9fd0f3296",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0613d5aefc31acb6920dc3b73df39d1a8f06d1d4da1bc0b2bedd4bf9e899bb08",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:061db5646dcb59345b915509ded7a2b9420d0c0958850fd9e832fc71004a0eef",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:068ba209562d2bafc1ef0648216703459377c6f67c344a9b734905e420a9c68a",
                "value": 1
            },
            {
                "key": "currency.balances:069b9fa4d169d74a8073ff22c1c979a6b4b450564fdea6ae0b8745db9e83f758",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:072482b64b351256524b02afa7f2eeee8bcd843bf4b7ca5dd575d1a83fb6abdd",
                "value": 5
            },
            {
                "key": "currency.balances:07410c69dfccb05c05b415a33d6d61d8c1105aa783b8a154d4d31fe3b2ffc5bb",
                "value": {
                    "__fixed__": "5888.1"
                }
            },
            {
                "key": "currency.balances:076d12e3822f66378f9b8f4d3b480abc297f1b3fd77f460a47bb497e6e3d069f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0791ea01cc94359025c3deb98b39ce61939b7735ea9a207c31f21a08eee7b1f8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:07b36fd0665f5f8d1fa0669546da85ca0d55146e777d154d8cee12637b3664ae",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:07caa8a17efa66695b48ea62e06d9ac7f771a23202407ddfd4ef6443f8d261b0",
                "value": 1
            },
            {
                "key": "currency.balances:07e6efba66fa62c98d30d7f95c4ba8fe17680dd8251beb501e7f5aceaa5fe0f2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:07ebd291383122d9402b0e48b52897cd15f1b50c2f77dd5a319b4683d7818960",
                "value": 1
            },
            {
                "key": "currency.balances:07fac48828b7a8c66899a3c1e4f4ade0a7bb19b09dd0f5ae4c82f683388e25b0",
                "value": 1
            },
            {
                "key": "currency.balances:0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e",
                "value": {
                    "__fixed__": "4496032.659"
                }
            },
            {
                "key": "currency.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": {
                    "__fixed__": "455988.8648"
                }
            },
            {
                "key": "currency.balances:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a:con_x00011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:0857adaa7cf11f36ffc69c42da232144fe315d07f78556d4234472ab53248437",
                "value": 1
            },
            {
                "key": "currency.balances:087b7f54387aaa6d946183284e297bd75c0f2611968bdf79222dcae8f95d4e11",
                "value": 1
            },
            {
                "key": "currency.balances:090f3dba373f4af1ad784765895fa93e9c14b9d0585c533fb39926e5c436c4f6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:092b1c8f9dbb3332d26f233d216ce12f25160996659e0533f8193e1cd076006f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:095c68a2fb6a01ff58caafdba216d2f0fd5e208a3c6b2bfcad8aebc6d6fbf344",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:09bd3eaf14ddca4c1b9a925ea39381d17cea1bc607f0d71d8264b3c5a97dc022",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:09d470957b475a79cb698fa05d2ef84fae21f8ac3219bd6edb1993f60da81b04",
                "value": 1
            },
            {
                "key": "currency.balances:0a07a0e00e61a48c2cb67c0749865f30a6230a35ce90395f2d05b56e565da552",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0a19b7f696964e11f0e95005d19ffaf61af69e3be75cd8fdfc73afc8913ea152",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0af097c8e8a84238992998db1ffe855b70db0a37356b3d55387c7ff87cef6499",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0af4c009b1f79d05450cadbf12c70b14f652a22e988361a7af2284ad853bb036",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0b5bce5440fd3f381a03dfbaff27935c3e542c95299915ea2807d0026127bbc9",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0b61c3872444032c56fecfb61a5358d896312c0fcbe5325445498d542960d533",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0b718fd1fc334e16f4fa9e1178aa3857e43585fb3fd4a681d2da0cf7dcc6f1b5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0bb3d3e9653c1b11f66d63921242a3ff276233ce1ae82cb715bc8def04894976",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0c119e701bce1517627c10afd9bbbdb623b8eb279a4409cac5ae239f7b0d6e66",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0c686277bc871dc7b47e9cb17e0b172011e0df238ddca7d8968a6e9637fe6da3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0cbe2684a639d06b2686668fddd6715a6606f4a0387356d5fbe6ede7f17b17cc",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:0d180b6005058e94b846067f72019354902ddcb893e0aadbd9ff5906bdd27d4f",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:0d3075ceae806673835e7eab3afda2e65f5490154f2abfaa0649fa47d58345cd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0db197dd4c4253ddec54cab7b00fa90e2932c387bcf5fef61a62797475395929",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0db2d8351218fc134af3ee0f2198c3206304f3d79e19b5913abfd17a2b0e2941",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0dbb9e47b68fd75d9be27de823e5acdf308a89fcd0e4b275b09f62cfd6843483",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0e1d88c48abd5bcce95de69e08df0a83f8b258acb638d4d02a7cd90e3f29431f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0e1d9bb3404f8160c362505c1a9b3a71d66e2cea69a4ec0e01da1b6ce64df4db",
                "value": 0
            },
            {
                "key": "currency.balances:0e1d9bb3404f8160c362505c1a9b3a71d66e2cea69a4ec0e01da1b6ce64df4db:con_dex_router_n",
                "value": {
                    "__fixed__": "2.190470138637360089850044043397"
                }
            },
            {
                "key": "currency.balances:0e3e3e2d7d514b282ca7e6ed42e77d169b7cc96a969f3485f234380470ccb502",
                "value": 1
            },
            {
                "key": "currency.balances:0f2e6b0b55d707a4bddab2cedb691ec63b1d26a690390e61294e739afa1bad62",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:0f8e2b5f76a54a91cc628dbd5cc3a0b95ab2bfd5a1305da31d011fa3818af868",
                "value": {
                    "__fixed__": "752.8"
                }
            },
            {
                "key": "currency.balances:0fb881dd1d82ad7e4a6462b18a76e3affdd3fb40318c9487e2406e8f6a2e2f0e",
                "value": 1
            },
            {
                "key": "currency.balances:0fcfbcfad7aaa445bd475bb4fc4b90c98185e5a3ce226bf9814e127bc80369df",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:0ff55a2859bf2124ed5bb2c9ff59b1b7cc1846c44fc684ab0653ecc0936846aa",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1",
                "value": 1
            },
            {
                "key": "currency.balances:10250ded416da98fea1b656428b489735c24028b9da688984f1af511fe499389",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:1074cdbd11daf9afe28fd553d0386ce47831d23f86dc9813849a09abda037ba2",
                "value": 1
            },
            {
                "key": "currency.balances:10f88cd6a3de7d8739d4e06594db8e2713408edc6fe6a1cdcee8465e35e05f36",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1128b58aff9f2a9d7a03365b21d8bac26ad0b3436f0f1399a90e7a198487fa9c",
                "value": {
                    "__fixed__": "0.9"
                }
            },
            {
                "key": "currency.balances:1128b58aff9f2a9d7a03365b21d8bac26ad0b3436f0f1399a90e7a198487fa9c:con_prueba1",
                "value": 35
            },
            {
                "key": "currency.balances:113afd6cd88bfc4e1ea6db381cc1e35f9bb40cd7b7f7d13af0a7768dcef8d61d",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:11511fa96ef7ccba5ce52605d18055d1787b9c1a7f2cf789fc8451dfc64117ab",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:116090140994593ebd45cfc7b895976a267742130965582200590a90f551545c",
                "value": 1
            },
            {
                "key": "currency.balances:11b30eb3bd5f901ec5777463852773cc807abf04d57b00140e9d3473f1214bd7",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:11cc82592655c0823987672ecca51efa1d62420f6e570238c7d74e90f5cb7853",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:11d867d43b5ece0e28d6e650560bc6acd59d373428ac6e0360c353f4cec47482",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:123123",
                "value": {
                    "__fixed__": "662.51336346879994"
                }
            },
            {
                "key": "currency.balances:1265a791ecbed1ac5dc9de95f195d5eb8f227323d5bc556a57172a9c3f06d4b7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:128af9728665d95d660bfd29c694a56fe0048ce0aaecb7f71ae8f032dc713893",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1292142ab52b771006f313de5f605d2c907e6f85413ad04b9bcfca062916a3d0",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:13087779c3bb93f62dcb95a24e31312de877aa12b7139b66d2426e3b052d2506",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1325bd52df6459ef3c983ee7398b1a5a18a7d973c291be1c3eead07c3b646b22",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1356202a3f007a5ad359a1421cabec561d1de6259e91ed6fea03bdb718ed6e64",
                "value": {
                    "__fixed__": "130.22013054250002"
                }
            },
            {
                "key": "currency.balances:13a4f5dbd352d5e07df72e4f11fc71a6c07bf8b1736543c3b17ad33be36591e3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:13e8e07f4a684c14818c72dd1974c5d68fe6ef02123305bffb4a05362d337f6b",
                "value": 1
            },
            {
                "key": "currency.balances:14b33f9efaaad4e7fb2f7570748a524c2505dabff55ce6336266f91e3d0389ce",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:14d463c7286ff9dc2295d8e2ddd78ac0fa94b12183c91dce25a84286955f441d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:15628f7ae7bfb16ce1cc9a16af7d349d7e898d5b22a05aeb55817602d0c5350b",
                "value": {
                    "__fixed__": "8999.66"
                }
            },
            {
                "key": "currency.balances:15628f7ae7bfb16ce1cc9a16af7d349d7e898d5b22a05aeb55817602d0c5350b:con_x00011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:1565ff3ef4e54a73e5782f5c1c30c7106142370f90495ef3bb6dd6c2e17dc158",
                "value": {
                    "__fixed__": "18.440010000000000000000000000002"
                }
            },
            {
                "key": "currency.balances:15d37796203f4a711abd3557c442ec245ce06913ba782a7d0bf001afea9c88d1",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:16a413014c3164225d03c4f8198d21a2b6a7cfb20dc9c01e1d8459808470fbb4",
                "value": 1
            },
            {
                "key": "currency.balances:16d8c3f24a2e3a200bf3802a71a090006f29bd48510cf56ab4dc0c6c4a9b8596",
                "value": 1
            },
            {
                "key": "currency.balances:16e76783075c015458d3515d7ce7b8dfc98e35c71f40749b03e3aedf53bb191d",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "currency.balances:16fa94afc7abe9969b6be622d1d57096f52e479596c03179da11f14698b9a160",
                "value": 1
            },
            {
                "key": "currency.balances:1792604b96e7e9b9d040a1e26c205b6638415352c93a97653fdaa68dd09b2c17",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:17a65c3a91827a0c531ca34d2a20d7fa999a9c3e42b3917da46f017409566cba",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:17c21fb55c84f44ed4274e06cd221f3d97786eef80d033d5e82eec7f9c706318",
                "value": 1
            },
            {
                "key": "currency.balances:17c9b53c69c4cd657f17ec068aa8e949bb097d5594930f844920e0f0595e4086",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:17d6962e6ec5f4b180bd108195974cc517f820ce09b03ebb1a97a474cbd2fd26",
                "value": {
                    "__fixed__": "19.72"
                }
            },
            {
                "key": "currency.balances:17eb218c3b545a530fc375f9a256fc0f2ab22b9ffc7ff0582de86e41c3ba1872",
                "value": 1
            },
            {
                "key": "currency.balances:17f611d737b148396999960953f83ecc9637d47777ae56c8bd95d6b8dc756375",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1825eb4ad0152420f86776ce3d2b2f06b437ff8bb17a73317e3e78aef0905377",
                "value": 1
            },
            {
                "key": "currency.balances:18c364c60232302043208fbedea80ade55d01663fa0eff2c50185989d41b74df",
                "value": 1
            },
            {
                "key": "currency.balances:18dfd63b9d210fbb2246715a898440a1b2fd7e1d143a659c92f4b8c9e622c7c6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1915b41f4db4f1e6c8d9f063370763bdfc47170d7de1ac0b1e39f94382ece042",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1948cb749e1af6d744b11b27ede360a2708367b3a5a2610009bf7ace07cc162d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1a528b274b13e6a9ce95b9608e4e29a97c4801543ef6ea51ae4409313b343e72",
                "value": 1
            },
            {
                "key": "currency.balances:1a68efeb0dec81c883bb33e55b3819a4782c62c9fcce16222bfccafdb9fb3ee7",
                "value": 1
            },
            {
                "key": "currency.balances:1b053ccac6197799f3308dd36d3c2be208c603d2ece915170c280e77fd711ce0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1b73fb5e282b2ec0d3108241f85289df050ace136b7b28d884ba6edcef5824b1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1b78824b1e5cc819e0d2bdab8b3dee4314f8e2a5c9a678bbbc53971172a04a09",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:1b92ddb207b29e8956c6973e4cbbd6428286ca3342f60fed5ec1030222602283",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1babd133ac8ee675dfa2fdb228f1c4365c5a9b6372bd5b489b2a24b9d0181a00",
                "value": 1
            },
            {
                "key": "currency.balances:1bdd2ccb6fe6f5dbdfea2b2330370acaaabdfee4c0092ac86626e53ff1fe6a7c",
                "value": {
                    "__fixed__": "311.6705"
                }
            },
            {
                "key": "currency.balances:1c85798fe2cdcd1ed6ee6fe9fe8effa1b71e4817be36a3e8ca474b5ef6cbb6a0",
                "value": {
                    "__fixed__": "169.7785275"
                }
            },
            {
                "key": "currency.balances:1c93de62a1c5349a5884b83b2c02924f2e653c50b3f144f1006283006a8f2dc9",
                "value": {
                    "__fixed__": "86.2745"
                }
            },
            {
                "key": "currency.balances:1c993645376b0ce97c5a46192371fa4f9da9e270952b98c8eb4b29f27ae5e223",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1d33ced16b242052656033614cd10a564111ea0fb3f60cee404fb96cffde16a4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1d3680e34fb0e5932326a55df98ec49142c27ee33ae0dd9fe871fc2735f50cd6",
                "value": {
                    "__fixed__": "45524.2034"
                }
            },
            {
                "key": "currency.balances:1e4977dbeb1a434dbadaf25983d9b6378b76caa148ce0aab30cf75c24977d1fc",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1e519eb50a032065a8b774e7269cd8050448d719e2b96aa63bfcb10b8b727772",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1e576ad2a8bb4b0e340d6e531bbcf43d2aa5eb6d8e7e441e8c5986f2311dbae7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1e5d942066035fdb10acacbabd167113e5e388f641856cca7eee75f69d883e8c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1e61e89dee00347edaea3b6467aac0b20d1796348c1f3c323db65f2e1d30adb4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1e6fde4bb0ec169bd497ef0d9338a38caf09ed3b9fe877ae1f95699587d9b565",
                "value": 1
            },
            {
                "key": "currency.balances:1e788196de7a0798a353baf6ac76a7b0ff775a9dca6571c23c099deeef5829e9",
                "value": 1
            },
            {
                "key": "currency.balances:1e83c022eb302d79bc3772f990eb6e0c3c70844fdad03f911e75c4294cdf157f",
                "value": {
                    "__fixed__": "9.74"
                }
            },
            {
                "key": "currency.balances:1e9043a943ec2985200029add5d031cbcc012ca8dc0b8ab6e7694bb475924c9b",
                "value": {
                    "__fixed__": "499.94"
                }
            },
            {
                "key": "currency.balances:1ea88586049a88c76cb4497bafb245f9633d9c4d6e39ae2a111f740da62d2024",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1f8d6a8fad271296883cb1b10e29172145551a852140403e58e519dd0da80fce",
                "value": {
                    "__fixed__": "1048.0039"
                }
            },
            {
                "key": "currency.balances:1f9bffd2708df90010de2c5121f116dcf5558f464c67460e4c002312ffa476fc",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:1fb328bd4739fa111a6ccf8646c034cae1ff10a451e8855a916c161cedebfd44",
                "value": 1
            },
            {
                "key": "currency.balances:1fdd23c568855e34fff52b962d3905e941abdcc9b36d2a6a1d1061368b66c9b1",
                "value": 1
            },
            {
                "key": "currency.balances:202aa637bd13ce266d8185c3f634c6a91c1d949133df89b13d36068c20b46960",
                "value": {
                    "__fixed__": "0.78"
                }
            },
            {
                "key": "currency.balances:203414999341b18b289d274157649933b332abc91cbd4c6e29b965cc0bbc3edb",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:203dbfa35a32342e3f386c11a79eeed9d92003f3dffa19a3a45e64960376657d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2056da500e5afc0d1cf1b21c647512f96ff519941d88e6b994bbac2d411a8965",
                "value": 1
            },
            {
                "key": "currency.balances:20bd0ca2e260a504149c9bf6f5a13df13c0cd25f61cd1a4bdc3f596b0d339e00",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:20c91ffb518aafdee0e227dc7b8866c51f097292c829d77b82eda081a329fa34",
                "value": {
                    "__fixed__": "0.1001"
                }
            },
            {
                "key": "currency.balances:20ffac944156d7eca35ee5ead45d0046223f8ae91ac78b1c1eec8ba3dbbc3c3a",
                "value": 1
            },
            {
                "key": "currency.balances:2101b422deb1bfcb38801e0b0538fbf27c4708e57afccd789930d722498c569c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:21813def69d51b67841277af1b6da5bb171bc8ad09ca08f6cb6acde52e6da10b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:218afa4c73b01b63b59c90b2b8357fbb4baf59fe04eeecdffabbf87810808ed8",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:2238f80a7a48f3458cb69de02c865d61286dcb61ba20bbd09b38e6f71564be96",
                "value": 1
            },
            {
                "key": "currency.balances:22636f48498a5a9f169f03d416193d68b6348a6c1c5f9bfc7eb9f9ffc4f206ed",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:22de18a4f9d7c0758950b69f137118aa0450607de72d65cd5c022c2077b829a1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2324c3dd262f96d136872d2ee3d7e048bf09334e886e365339741c3b2b98c872",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:232a27db15f5cc4722613f2a2b1ddceb11274dfc452b8fac3cf532bff817ad3f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:233d11f00c01f755293f0de7087b26d01b0129520da6ab3ebd84e41162549b8d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:236573d1a760dd843aea6ab6d47407a30df656bf4ef25ddf826545e6befeab7e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:23c8513c5c7af876c4129611976b7a86e288b3864c680a4139c3c670dc23a8cb",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:243d88ce4e5d2676bf3b98011033144066bd709e69393104693e86b9430d1e1d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:245965f6cfe8ad238b41163aadc4b54810f2844e230b9aae9c20423d215cc6b3",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:24930f82f7aa0c859e41cc20547f1a3f753c22136e1f5ea2ac3db19548894330",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:24d4731bda22c298a5e7b6330fcee99ef50c702c5d2152511e764573dcf46e55",
                "value": 1
            },
            {
                "key": "currency.balances:2534096413fa989362e039996c2005c9475c1c15ef3ba37de8686ca3887e06db",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:2536e18e806252200f1dededcba2410614d439825df355979bb5562ffc09e39f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:255d76b39dff97ef23e15c268b4c255949f0109534bd95801c64c737823f1516",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:25aa20c0751df48e38c4e8578ba46cd95a20cb3cc5b8d4381c72d61c531926e7",
                "value": 1
            },
            {
                "key": "currency.balances:26113242805cc769dd8155f8d5ac96196841bfa0f49448a77ddfa75bfd7b3bd7",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:261cc844fbdaf289f4bbabfff20fe240f03f816e31af25b2c77315a2a9a3fe93",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2629a4c2f9e2515cd8be321a149bec3293385de66274795a2fdd2e49e6c83e5b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:262e68aa78351dc16b9940ed14e7c9417e22396034b28ac7d606f1d9b143de14",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:264e69bb7bd59031ef2770f3de7147fb8e39b219d43b9f15decde357d5c9c757",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2690c92b254fc1d3f157ac00ce6836d6c36500715b49f21c506d4180e61ab08b",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:2692e74cf8d76a22c94e0d7fb4d93633123551247821dd3fcfcaaa9bb3ef545a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:26dd5d75f34c2b4085fd34e02d5fe2fdb6c7096d522d977a64c64b8f4acf44e5",
                "value": {
                    "__fixed__": "4.72"
                }
            },
            {
                "key": "currency.balances:2707d2536784176f36e3bdc0498d979c5c0249624e3220775fff15217914d93e",
                "value": 1
            },
            {
                "key": "currency.balances:2752769b625f8c72e355dcd8baa811dad4ac1c1233f623b8b0941edd4a2e5ad5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:278605819d5d1d44826ee7736372e220cac9fa493de37e0e0e27c0392334fa86",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:27900d0bcfe3aa802f97180eebb0b37b0e98eafdc1a6a1377d2a81f0cb379e5f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:27b3a515eb89e7b97fcb5710ac34a74c58b7e4b91d3a0ea57dd122d1ae233227",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:27e649ab347b2c975943eef4cd6671f26a61e26cb84e95f712f31c48db1f0467",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:27f7cc4d453a55fb1ef49e45b14923744b2d135e7acb131dbae5f554392b34fe",
                "value": 1
            },
            {
                "key": "currency.balances:28112a237486cef538f983f21e860afdc79db5924ac871a33f1ddb75485959fe",
                "value": 1
            },
            {
                "key": "currency.balances:289f528e1024fd7c7896bd39820ea9b39b01bc785a7f5a369c219c355f6aeb2f",
                "value": 1
            },
            {
                "key": "currency.balances:28a08a7f89dc9822d039bbecd128ef7ab4b8f8b57fe9b33142ed56dae34256fc",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:28fb92a8229d5cf8137619f773f66b6e5c2bc81bf1142e263a1d505e9c3588e6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2922e87f925c6a4f97bebd0bec32208ba8a8651a704941add9a5115ace541e9c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:292b346779dca86b8ffb979f48b590ea04c2d49d9fb505af9d6aa7e044a45269",
                "value": {
                    "__fixed__": "499309.6033"
                }
            },
            {
                "key": "currency.balances:292b346779dca86b8ffb979f48b590ea04c2d49d9fb505af9d6aa7e044a45269:con_multisend",
                "value": {
                    "__fixed__": "899999499989.9995"
                }
            },
            {
                "key": "currency.balances:293c6cf92f3868b457982c6bdb569bf295c5e7296a7246ab0bd70f8572536ade",
                "value": 1
            },
            {
                "key": "currency.balances:294e995a4a21e82ef37ed689012baa6f2d6e9123de9be6056a4145c416184518",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:298f9ba5494be213bb038356a52cd7f5e0473f717e47d440387f3939cd228f9b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:29a023779bd6f00bed6d3ce30282aaab23b325baa38f7184a9d78efbef31da16",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:29b86abf0db752fa2a9068a598c9a5efbd1feb46ed03042a208e29f328cf4482",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:29fc00a9503cebb7bd0c75ea473ab39b8cdf2b145cdfd91a12497bed0e3f7a00",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2a492600c1966b3ccf6e66b35c08a57af355eb2deabcb37dc96c79998d6bf2ee",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2a6c5dd0b8488fc09da9f42783f0453745420866bd25af2a2d886bb4446cef77",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2a789fa5ca705f2209f4f984af251b5726b046aaad3aaca0ff6db2f36b6801ce",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": {
                    "__fixed__": "10338.6394"
                }
            },
            {
                "key": "currency.balances:2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385:con_multisend1",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "currency.balances:2aa5bf852dddfc3383416df2e5e5838a577b5cd5d7eedcd62dd298d1e7e99880",
                "value": 1
            },
            {
                "key": "currency.balances:2ab66734df2728db4c66ac1699e56f724a1af6611376a13e62bdd9d0cbe0fc75",
                "value": 1
            },
            {
                "key": "currency.balances:2adab03a9194c79c6dfcb1d8afb2b379d3289953800fae7fe846d37aa858046c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": {
                    "__fixed__": "154.0418"
                }
            },
            {
                "key": "currency.balances:2ae5e3f55ed8f1ad3b33ad158b4d56c07365b3c918e4537225ebaf052ef16cd4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2ae6eac1df063051be3931bcce3fcc4b06b798332d45f1a8596bf993df6f4dde",
                "value": 1
            },
            {
                "key": "currency.balances:2ba3a795cd91e966cfe618a827842cf76c91b241eeaba17c79deffb4aaaff0db",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2bc21d0386ce4e4193fd77f030f7a66a6bc5937a256340224522b8e7444f9b5a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2bc547488461a8108b21cd5f77b2389bd0c217e76f3121ec522a4e1aff8cc3a1",
                "value": 1
            },
            {
                "key": "currency.balances:2bc83443f9322c2efed1d2266daba228eb8b1f935fa815e0a67907515b052e07",
                "value": {
                    "__fixed__": "749.8"
                }
            },
            {
                "key": "currency.balances:2bcb749487e1486192c80c0bb66d8c263ad436be4ccce9b191bf198b5e0b4eb8",
                "value": 1
            },
            {
                "key": "currency.balances:2c387bd9dae8e63b96fb65f0ff5efe7d8a6400dcfeef1962d74f962ff91e9d74",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:2c6cd9dad226a2501ef8afde0b61d1e6f92adb67e2f8b58d2df59d2a26fcb71b",
                "value": 1
            },
            {
                "key": "currency.balances:2cc390e0da3eb4f70681db7b4e4e3a130d4175abc0df4aab200bf02e2b669553",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2ce8a4a6e5c69b285adff27d959d80b969c26ee026e5f20f51adbd80318bc320",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2d19be2b0d52f8953a493c9ce78690bbc724e4dafad8cb0922a8523824682923",
                "value": 1
            },
            {
                "key": "currency.balances:2d3d688f5c381da7f21fb2e523f07a57bbede787202c543526511eb8976bb12f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2dc7115ed6110fb02eff6a1924262dc08241570ba35222c4d6d4b0fbaf5d1c4a",
                "value": 1
            },
            {
                "key": "currency.balances:2dfeb1760be18344950f5d99d19c57dcf062c109a8f6f641a5b7a0594695c0a4",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:2e0fb24203bac752d2f3430b7f69ad79a93b4d88cbdf39016b9174dc1907c9b7",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:2e4e28827986c7e1e0907bf3443a8c6a46d693330b56d364447290a155bc5b59",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2e5e07b9631bdfe6095a6162522cfa5355094e5b0742293b19eab09751283361",
                "value": 1
            },
            {
                "key": "currency.balances:2e8986af52acb0af0a6eb4a6cce09273c0c358526cf28a6d67d2d4fe917809e6",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:2e8cfc5875b607dafa784927183ac613d7f6a60afc02ccb0eeaa16b7d9e70106",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2f6876523544b3fca138a14c8bebb287dfb804f2f47f582505a1aaf858a1b250",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2fa37d5274ff1a0036220cf907b9ba19c2c76f5fb15db71fd4a7fa1e01d6bb78",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2fb676c3aed07516b991534d483ef1d55d42ef9ce4ee33d0d9644b95365c7aef",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:2fb8ef680fdfa963d40f4fc77994e9f36b7e4e8debeb2468e0c1272e1def96b2",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:2fc6a1c902c285f9e24fdececcf8ae61d8fb4dae2e3fb6bc724dcebae12e35cd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:30e1077ed14ec0b37315b53cca88e46e937fcf3ee55391dccd38763b8ab87392",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:311a23bd1a2df4d9759acf37a2947910ba5e217fda50f63795b739caa4fa2569",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:314d7c40d55f53b4a93b0a05dbe30c0b88c3b7f5347fa3960f416828783f39a4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:31e6080ec3bcb291a2b5805fe320654a8bc493da8b21052ebea75d5215ad10a0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:31f6bdad1f39ccd22c711e7f53dae6fd9ffa2632c811170b8baa5a8982a98e8f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:31f997868d3c5730bf0f950935fd01314aae91fa9888dc45bec491eb514e687e",
                "value": 1
            },
            {
                "key": "currency.balances:31fa8d5a88d7ece9abaf312a76a9360fc314ecd2a2f0e9e44c5571d3ccd12595",
                "value": {
                    "__fixed__": "46471.0494"
                }
            },
            {
                "key": "currency.balances:321312",
                "value": {
                    "__fixed__": "383.659857240000068"
                }
            },
            {
                "key": "currency.balances:32348c21a7fed16a98e20233b176cfe9b49c4534a6a07fe16794abb60857b44d",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:324cef4cac366a440eedcdf2f1b589c25afd3fae382850d9656e22473834f2c9",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:3291e615ce293c7098c7c73afcdf54739022dde01d2c207eb4622702924a103e",
                "value": 1
            },
            {
                "key": "currency.balances:331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae",
                "value": {
                    "__fixed__": "611103.54408438565822"
                }
            },
            {
                "key": "currency.balances:33268418af1867c363a9bb0f7e195977593d89ff8b1f1172f14c9b91f362490d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3336f3561b99e2cf89f2278d08d360e8e4ab92caae1ce5bb36ac03fa57e55062",
                "value": {
                    "__fixed__": "6.22263797736559911398431665422"
                }
            },
            {
                "key": "currency.balances:3336f3561b99e2cf89f2278d08d360e8e4ab92caae1ce5bb36ac03fa57e55062:con_dex_router_n",
                "value": {
                    "__fixed__": "3.095736202263440088606316654221"
                }
            },
            {
                "key": "currency.balances:3357447e83f7a3441bacea039c1a33b82561cb19ce0f84ed111c3c966a64e690",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3372c2f0fd71e9bac84dcf84129693be188d00cfc686080be78c11a7f9e098c1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:341cf6acaf74f798f956513c49fa609d2f49bb716e7b1fd1f909a3f22c856c41",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:3427580303c1e48dfc36648280869a7854b9eb4073c5d97a6e85fcdaddd1e528",
                "value": 1
            },
            {
                "key": "currency.balances:345079a4fe7830cdb9a8468b9dadbff994c2b0edf5413dedcba6037386aff6aa",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:34c5935ac777905deec5f5e17b07b57e7267654d3d5e5aa36f35bf7dd972e5f4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:34dd722e2ed4b2682ee5ff5ff73f4002625e884bbd2dad228ac4af3a88524913",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:34dfb7455e1ecb9556afcff7b6c7d19d172db78516559808df0c08f329855792",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:35137a894748e0df1117a697ed2f841aee6f1759d1decd661a3e10c4276d4f56",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:35248b5fbeac2ec94ec89da03be17547eddddf1924c3f984e2cee520b6dbb7a7",
                "value": {
                    "__fixed__": "242.0626"
                }
            },
            {
                "key": "currency.balances:3535d0cea166dcd5ba341a82fe02260bf10eb49d72e01c1972e94f9e981c3ac0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:353c98c1490e7b5740f67a6320f369ddbdc1ebac50a280784ccf7db85700c427",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:353e39564bd8ed32182fa461baa9598be21cd803f501850f149a6b79819bf51f",
                "value": {
                    "__fixed__": "109.56"
                }
            },
            {
                "key": "currency.balances:353e39564bd8ed32182fa461baa9598be21cd803f501850f149a6b79819bf51f:con_dex_router_n",
                "value": {
                    "__fixed__": "6E+1"
                }
            },
            {
                "key": "currency.balances:359fb5a55485a3c796aefda39704155358838abbb6012f502abf07d2eb98a063",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:35bc5cc2585c73c70b68c38e42a14d79e97aa0fd159b2b969c79436d0f39f754",
                "value": 1
            },
            {
                "key": "currency.balances:35c99bc9e6e3f3789efc22ae74bdedd1ccc9411e3fd535b09942527ba472465e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3633224ea6d861f5b84c52adbc84d5aea1abbe98939e29530407dda2e443c2f3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:364d42e2801553ee6fd2e22045b280059f24176adfba45de2b46219fbdc57d51",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3678dbf130411f256d27ab1e11eb623b197b3867904d44d6575bff0042f6c9fd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:368f4fd786a1567a3646d82b7e3fed290a3d3bc5a5eead8660a3834f357baaa8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:36f9fb39edbd49921e9c423b803f48e9e723ac667bb8adcda402f958862d7ee2",
                "value": 1
            },
            {
                "key": "currency.balances:3736cdcab5e4e5d093e7b3cde86cd3ccc7dbd85c26b6b590448804a43f29b0de",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:376a64bb3fac1cbee34c1e20519d06b3f32ccca957b8141d890b3cffc984ea35",
                "value": 1
            },
            {
                "key": "currency.balances:37e5673bb29557e4c51010dd39c05b08946e3dd6309cbeb2f0960550e75d753f",
                "value": 1
            },
            {
                "key": "currency.balances:383d1619f1d67e751d9ca05b61c569ec5c8b50e3367d3714c258a07c8697e5d9",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3856c902524d497831f1f7e7d23b0acec2cd55ceb5115455a80e6aef8de6675f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:38b0c2813b624c403c0af95befe606a41c5f987b125711ad7e7f99c3fd7c8983",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3949f668838b7d2dae11ad1ff62fcd4b0aaa1b9ab161ad9eda7ce787b7314790",
                "value": {
                    "__fixed__": "89.2745"
                }
            },
            {
                "key": "currency.balances:39BFD8F2A8337E5025EE831AD3B7107BF1FC68D1669AC6C95A596AD0443D97D4",
                "value": 1
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": {
                    "__fixed__": "8867.448019803121130528017709910794"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex22",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex2test",
                "value": {
                    "__fixed__": "8.596434653007166991680000000001"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex_router_n",
                "value": {
                    "__fixed__": "0.1"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dex_router_p",
                "value": {
                    "__fixed__": "11"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_001",
                "value": {
                    "__fixed__": "97.9"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_002",
                "value": {
                    "__fixed__": "99999997.9"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_003",
                "value": {
                    "__fixed__": "99999996.899000000000000019247972579438"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_004",
                "value": {
                    "__fixed__": "99999999999997.99"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_005",
                "value": {
                    "__fixed__": "999999999995.9899"
                }
            },
            {
                "key": "currency.balances:39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0:con_dextest_006",
                "value": {
                    "__fixed__": "0.075"
                }
            },
            {
                "key": "currency.balances:3a114870e8b9abb41d4a12e79e8b39de19f1a431ac59672f3b9e030df74b5e1b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3a2fd7a81e4412872825eda293f3007002be53795cb20048c0ef1e85ce8f1a0b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3a539036f5116fd91fd78ff21af1feea80628f232c710eb7847ee47a2375d51c",
                "value": 1
            },
            {
                "key": "currency.balances:3a656b720fae8be43b39c9bd5edf96b239822bd57774a529653486c700604201",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:3a802aa31e1ef95a8d96358c1c6d4b2d3c779983b550e768bdf2c4a809bbe4c9",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3aa39053790871506be8e6a17e2bc725dd11b559e26972fc9ef23299b068ea50",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3b05b72dbb14413c3cbdcad008e2026d11e23bc30249b0ad4a38e0ff9be08546",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3b20713e924694fa92860a1fb4b10ec42c04dcd30232b07de5e3eea71a991f47",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3bba4eebd097fb435db7e9fc2b526985f02decce353b6ff5f368f3e4a1191c12",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3bc2445f8daa06789b9c932faa6cd5de56b0da7298d1432db677de1dba54bdc6",
                "value": {
                    "__fixed__": "3.86"
                }
            },
            {
                "key": "currency.balances:3bc2445f8daa06789b9c932faa6cd5de56b0da7298d1432db677de1dba54bdc6:con_prueba1",
                "value": 1
            },
            {
                "key": "currency.balances:3bd3ae75b7e51ad52b7f850cb8eb046a1920bd44bc8c0c10ab992998a177c513",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3bde15f61593b3209a411b44e7bbed61f6c6d9d50d25a7d5af76e5bf29ab7028",
                "value": 1
            },
            {
                "key": "currency.balances:3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                "value": {
                    "__fixed__": "9896.6888"
                }
            },
            {
                "key": "currency.balances:3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677:con_pixel_frames_auction_v0_5",
                "value": {
                    "__fixed__": "2E+8"
                }
            },
            {
                "key": "currency.balances:3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677:con_pixel_frames_auction_v0_6_1",
                "value": {
                    "__fixed__": "3.9999995E+8"
                }
            },
            {
                "key": "currency.balances:3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677:con_pixel_frames_auction_v0_8_2",
                "value": {
                    "__fixed__": "99999989"
                }
            },
            {
                "key": "currency.balances:3c2986f8bcbb29ec2c34b84346b8d3a248f390b9c50250937e80124296c7c0da",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3c460e39312bb6fc9f6f53dfb47459214ee5bde97d43e74ed747fdba3fbd5cb0",
                "value": {
                    "__fixed__": "0.3802"
                }
            },
            {
                "key": "currency.balances:3c669064e4dccaf69811e678a81a25b4a9cd6e574ed9079ebe7706ee7511ec0f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3c8cf450e5050cf1af5b2b50923571ee345726c6a4b7781ed909e9d1578e89fa",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:3c98512499e2b00966df2ecd3ddddbb81c1dfff5332fdd55aa55a6bde26fb67a",
                "value": 1
            },
            {
                "key": "currency.balances:3c9a0d31f0fcc9aaec7989ba39ac766f346efb587a1ccabbcb528216451980dc",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:3cbbe524bd7dfc89bc3125ff644b137e12ed7b2ac8c1129ff6837e05fab74bda",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3d30397443754bb2e092858cfc5a2f0e580011492981a89f15e83235376f322c",
                "value": 1
            },
            {
                "key": "currency.balances:3d3cf10ead9f8f03184f0d45be26f2c2719ce6500f4bf395ccf51938e76b9da5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3d53c84e5c95f2234bfcc9997013992239d02690c09af0513619dfe239c2fdb5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3d67a7c5dad6ac8b82723a907caa5f76a567589eaacdc05970607cb580a83d00",
                "value": 1
            },
            {
                "key": "currency.balances:3d6cd5a1d1023bc145a53f80d58a5e53bb9fc513ceeec9e61eb97c6ff2dd429b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3da308a864021ae5c7f8a71edd6e136dee38efeb1565ee8499c54406bbe77772",
                "value": 1
            },
            {
                "key": "currency.balances:3daabc4698f988c1cd72531c46d755587e0e207ed18a38a171a68ad93053fabb",
                "value": {
                    "__fixed__": "0.3802"
                }
            },
            {
                "key": "currency.balances:3de52892ae3642eba8343f903f7379878bae61705e4f26dda0efe2f043ca9399",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3df4ff79c0a1b2af954566e2df54f59208380e8cc9ddbfafc2b79d0920abc4a9",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3e3aeaf504805eac1efc8e91fa42e5326fa6f6c22cbc4ee98b1f55f55aedccd5",
                "value": 10000
            },
            {
                "key": "currency.balances:3e4a56054b83d78aca809c236f797b7f9ea3d8c2fce1c0dd4afceb9c59d917d0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3e790dfbfd635d6600692ed0ef1c41fd68004b65d57540a68011cfe65e10f4e6",
                "value": 1
            },
            {
                "key": "currency.balances:3e8754b5ae9d6ab6111e77f7e2c24b34bffc466744488225f0ed7c9496da6ec2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3eb26b154123fbe233f80a2dc298ec89d1942d7f644a6f1d0a6027d1349d09af",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3ed84390b94ebfa41a989f39e1cba217272afe262dea82aae2ce0859c6c92ed6",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:3f4f9e504468d130179bc1a46fa1530fabc1d79cae044edcf4e32c38efc8e27a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:3f584f5c38cc8396c1ae8c3f38aab07ef6c403b2ad99f9c223b87ba23f1a52df",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4082f1e8274d62b838fc35016b3d3042961126f691b0f7fd8a6b649036e30f47",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:40ae59ef47cdb638847f009504a283ddb06949f4c2d7fbf4dceaa5e20809cd10",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:40ce7c141513d489767451d691434a67b409d8933ee7b67d8079340983a742ce",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:40eafce3d637497a13196d354ac858fec93015d74f7db352906d80345eb7888f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:40f6c713806cc7dd8916fea32b7d22f190f012497658b0d6c19cc1d96261a474",
                "value": {
                    "__fixed__": "749.78"
                }
            },
            {
                "key": "currency.balances:4108c82a05c2b538b8429a9928df058f9f90ca8249bd4fc8b76f0875fd53e18d",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:4118d7e4f02dda6c9e662cfab92ef8b7ec056c26078ef9e6846fe78a6bf057a2",
                "value": {
                    "__fixed__": "0.78"
                }
            },
            {
                "key": "currency.balances:413a2ed58e44112a547d1e2e560177e31b8522ebb687fe9a09c4f8bbf695ee44",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4140caf74a5f3d8b56b2f661ae27fc2053cac18bae9a5ae388bce8ce41155f17",
                "value": {
                    "__fixed__": "0.72"
                }
            },
            {
                "key": "currency.balances:4154ee87945a11cdb39c094fd793a923a6bef6926b569d01138603d937f8a0c4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:41a7f026e510e9770c6c8e9dbc16846fc1c73e2c225b5be3fa5e431eef829cc1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:41f281d6dd3954128cd446d8a074369f7fef37bb609813c63fd9a53f10c7b097",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:42139ce34e9043a175a71deefd526142bf04831c77af7376dd7164564f4bb348",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4231c9538e32e31cc49a4722cdb6cbf5de92cf0fac5c4be446160dfc36b73d36",
                "value": 1
            },
            {
                "key": "currency.balances:42776501310c18c0e733f4f25e64bde1c0f5b82cc06f1c4ab9c324d088fab559",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:42cd67795e24022cdc78b73088d075fd6f8d9bcf25bbcd291bf0f55f6f8d8186",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4321576961a99c687fc7dd4f9adcbc2dd28e7b1d9d7fe4539bc0a92319ecb18c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:432974a851de4c3d41c5ed5054b55208b9f96a06b3791834d3839f819c12c1f2",
                "value": 500
            },
            {
                "key": "currency.balances:433903eb4ad968d120f47205ada594baebdc4da38dc16b0bad051460f9e0a93c",
                "value": 1
            },
            {
                "key": "currency.balances:4369bac509f20f4cb7c79e91b8099e253b828c493350bb3172a8e5467890f037",
                "value": 1
            },
            {
                "key": "currency.balances:4397a1e4756f488b220d988bf18069826d8f13e19cd4b6274420d86f09f0a50b",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:43b3676963a0054bf93cdc49317303f48277bb3b1f6cecf44bf9471bc6ab871e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4432cf5adbe1f20400382b0193dc9a1e50e45dce0450d56d47b9661dd290126b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4451dcfabb7d674f2cd473e040e0c0904b2c045c96effd9c183b512d5a329449",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4489385768afe2d66f5ca188924d273416fb69fe7625390cc5d2a728e443ff44",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": {
                    "__fixed__": "1.88"
                }
            },
            {
                "key": "currency.balances:44947f4a985daee7ec3d7ea07d4942c6b931d90d4c4b4d06bcf32fc0fe0cb480",
                "value": {
                    "__fixed__": "752.8"
                }
            },
            {
                "key": "currency.balances:449f6f2489854ec3173f7a7642d3732782c1d4b546eaf4a15c0024949e9f6488",
                "value": {
                    "__fixed__": "2E+3"
                }
            },
            {
                "key": "currency.balances:44e6d1fc2d3a18ec2acf651f41b35b55d8b1b084c9eeeb4d35c362e65c1785e8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:45178df664bd42ecc31b57128cfab3c4b148a5620ad282e2556a92dd08b85751",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:452b46a1c1387a2375db7f1ae86b69b7d046e6030e8a8a8ed1c51e14d73f9875",
                "value": {
                    "__fixed__": "9.72"
                }
            },
            {
                "key": "currency.balances:452d00f07a5e59b86483525a1125127559b8a19abb9723c562b92aab4d989e56",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4530137bbf8d45b913502c3a9388023f25229705471840802ce30105dc6a521c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:454107cf3096582581101c25aeb2871d4ee6bb45e75db9ec212db2acd1780038",
                "value": 1
            },
            {
                "key": "currency.balances:454d9bdb503e8c36ef4afd928a50e210f428aacb0e6735db0d6b0601801f88fb",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4568e789d9ae696faadb80a69a3da559dbaad198c146adaa03cbf1dfaac92c2a",
                "value": 1
            },
            {
                "key": "currency.balances:458b97b64221efbe89cd949e2e9d7418fcebaa993baaef93f0e1e9d54d12452f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:45a6aa1813e8c173ca4c4fe75ea658ad99041f83b3991036cefc0df22a71efa7",
                "value": 1
            },
            {
                "key": "currency.balances:462bfea8cac53e1f97a34ad48eeea4b01bb164cea1730c2c8afd36d0651f5884",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:464089cdf1e0bebfe6f16b314ffc5c4631131d8da1f71adf2b626abf2299c406",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:464886d002733daf28ed90add04bf2f0d59b96043c3c682c0fafd8e58d78d07f",
                "value": {
                    "__fixed__": "9.48"
                }
            },
            {
                "key": "currency.balances:464d43a7d4c9ca58bd4fde5f224c4beaf6bbedd3273b8fd05c8a89a1c3e3ec31",
                "value": 1
            },
            {
                "key": "currency.balances:468a5e768fe567a1265e121e2521316c29d0d7754b13ae16994ec0b4962ded65",
                "value": {
                    "__fixed__": "38.0264247"
                }
            },
            {
                "key": "currency.balances:4696215f6c78e481a53f15fd662e2222c23dfcc3feda19d62d9f08a815b1f5be",
                "value": {
                    "__fixed__": "17.1476312725"
                }
            },
            {
                "key": "currency.balances:469d3a93b4dd1744d3e202cfadb6e6ad2b314ca00dde85d1062b6d674ff92ac6",
                "value": 1
            },
            {
                "key": "currency.balances:46a750a01686861dab032c8633d4a8e42f2a951c0b4d9dade4b6cc920dace3a0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:46bb77797c2f1219223664329b75ae6fadff126c9e95e4103890549608d42ba8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:46e280ac6f5358623c5a98244c582427341185e471b001112698abeeada0bdf7",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:4702f8777348df662b7c717a7ec6e1eae95edeb2151e7328883f932e53ffc2dd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:47781eb500fb779283c6e7a76fe82f0f6d0143b974fdc5d228fa01979ce9d5e4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:478dd92919c60a96be16728db4852bcadeb6cd85b0ad163d94b9e8ede912b49b",
                "value": 1
            },
            {
                "key": "currency.balances:478e050bd036b19a9b9009d494babb573a41b2a8cb690a1b631fd4336745d6c8",
                "value": 1
            },
            {
                "key": "currency.balances:47fcfa43155dbec171bcd606e99509309b7af65761c72e3088d790dbee3f83a5",
                "value": 1
            },
            {
                "key": "currency.balances:485bebc86f680181f01b7a925cb720f6a7de2d3b0235dd63b23242c9ad8c412a",
                "value": 1
            },
            {
                "key": "currency.balances:48a5d1351aefd2b1caf4f8ffb1b24fbd6be021d31fcf7f618112b1cde3a31645",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:48aac788986f398959113542b508fc56da7d3d4eb33e3db8ef3c8457c6fdb2f2",
                "value": {
                    "__fixed__": "0.44"
                }
            },
            {
                "key": "currency.balances:48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                "value": {
                    "__fixed__": "112.5494"
                }
            },
            {
                "key": "currency.balances:48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1:con_x00005",
                "value": 0
            },
            {
                "key": "currency.balances:48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1:con_x00006",
                "value": 0
            },
            {
                "key": "currency.balances:48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1:con_x00007",
                "value": 0
            },
            {
                "key": "currency.balances:48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1:con_x00008",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1:con_x00009",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1:con_x00011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:48d24d5ab068509642e4fe91de2956a4516c795ff9feaa383063d66b542ea615",
                "value": 1
            },
            {
                "key": "currency.balances:49381c23271bede79a7cc53a65fda054b156bf3efdea2f7d29d830afbabdb14b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:497e749295b5489899c4a03d7398ddfc4348d3b765bbaf125c07fcb0bd8ef946",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:499d686a3d8ce652c4fa5f7d4cde378bc82d0b68feac2da3f1b7f78cbe526967",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:49e701a2099da51f69cff85ab9e761ad6e0dcb55153c88f5e70fc39dc06e244a",
                "value": 1
            },
            {
                "key": "currency.balances:4a001f3637e3626b3b049f7541e98557997ffb7ec2f6a1792b37f79b9b3f19e7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4a1c9c2363910723c3299dc7e139709e97ebda799b7eeed179e7aec48abdd4c9",
                "value": 3
            },
            {
                "key": "currency.balances:4a6c81cdb070e65239c9702c78946995bab3d7fbc3551d3a8263124ea7bbb603",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:4b660689fe0b9ede795dcfd426a3849aa3d651f27581c5166db06f017e737e89",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4b9d842a8c2c90e8d29a5f723802684d96430baa9a2d09fb57c610545648fd4b",
                "value": 1
            },
            {
                "key": "currency.balances:4c056cb9c016aa71d86d172a73de87936825bfacb2955ba610563bcdde38f25b",
                "value": {
                    "__fixed__": "0.3802"
                }
            },
            {
                "key": "currency.balances:4c07da8e922d87e62e06f8e83ab61f0ca140c5b78f798d4cee27b063670a8089",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4c19914b25692d3f29f39eb8b98233b314602d7a83d61aa76857f232b114e038",
                "value": {
                    "__fixed__": "1.78"
                }
            },
            {
                "key": "currency.balances:4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": {
                    "__fixed__": "146.4662"
                }
            },
            {
                "key": "currency.balances:4c5e1bf9ef741e9ce5d3e8d464f0aab2b0827d42ba0fbbe86cf774ebb4c9cc9b",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:4cb79e15f656a53b764d8b8698462b404cb3b4f26600277dad0b8d9b58ed9d50",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4cc2d11f5943b9c3fb85459020c519ae48616833eb00cb172190e9122955104e",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:4d0bdd333d06cbd6b0c7fa91a40fd273152bf9a1b65ce3c17fdae23bbc77a2fe",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:4d6b21fffa7b964199c325c27f2220501bf25ca7d234c3a45f1f8360632fadea",
                "value": 1
            },
            {
                "key": "currency.balances:4da2f1536b91d2a07111e32439e77ad7c33fd67c2023fb6c849b1b4ec949ad23",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:4dae719e5937192dbaf5b505bcf9b6a9b68741198a2e4c2be5a2985dfeb05e62",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4dc8b1f07f5a37cbe4c376949802d949d79f7367a3745be8dd5dd284f1e92ddd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4e3a0d257278f0b99472292f7e442882260fd9196532f898a1268ebe03c9d4d1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4e881e6c42a9ffb9057738a9df0267c2887b2cf0dffc4c934a97cc1dcb51aded",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4eb9a84934687d1ff3680e6a3f92b9602d52f258efd69c8ca9323a9549158284",
                "value": 1
            },
            {
                "key": "currency.balances:4f338857b4522af13df95d96240d03cf3f5f92214dcdc8f8d8eec1cc9cd09bdb",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4f45818b3494eb2a250a95cf36d1d568b4a420eae478b607a57159407e96407f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4f4fae337afb50b47c7e973d2516af40691fea83f6d071ad342491380495c026",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:4f756e4952f3009d3a6738599671b30e3c13e8025140c472781c4e77d4d0e5b1",
                "value": 1
            },
            {
                "key": "currency.balances:4f87e4c6d0f13650816cd3e6a3905854e39f8c8590570ec00ec06f80620c5596",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:4fb302a01ef2e1c7d5aa17b95ea600807094bcd10437cc50b14d6f17f9fd1b08",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:503ccb3dc04eaaed7c72c3ee6d22368e48a7f7e52b8577f4a4a9989eec51a0be",
                "value": {
                    "__fixed__": "13.12"
                }
            },
            {
                "key": "currency.balances:503ccb3dc04eaaed7c72c3ee6d22368e48a7f7e52b8577f4a4a9989eec51a0be:con_dex_router_n",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                "value": {
                    "__fixed__": "22.92"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_dice",
                "value": 50
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_dice2",
                "value": {
                    "__fixed__": "999999999959"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_dice3",
                "value": {
                    "__fixed__": "999999999987"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_dice4",
                "value": {
                    "__fixed__": "999999999997"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_dice5",
                "value": {
                    "__fixed__": "999999999994"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_dice6",
                "value": {
                    "__fixed__": "999999999974"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_prueba1",
                "value": {
                    "__fixed__": "9"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_prueba3",
                "value": {
                    "__fixed__": "8"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_pruebas4",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_pruebas8",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_pruebas9",
                "value": 50
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_s1",
                "value": 20
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_s2",
                "value": 46
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_s3",
                "value": 48
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_s4",
                "value": 47
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_s5",
                "value": 48
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_x7",
                "value": 20
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_x8",
                "value": 20
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_x9",
                "value": 20
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_xl2",
                "value": 20
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_xl3",
                "value": 20
            },
            {
                "key": "currency.balances:503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b:con_xl4",
                "value": 20
            },
            {
                "key": "currency.balances:5043ddf746174db1dfd0bc5ebd73a62a8f5271e4d0bc6911a07b81ef4fcadcc8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:505d1d2ef22fac032ada9b581e7713c9b32d372ed055fc32b9d7fd41590998b6",
                "value": 1
            },
            {
                "key": "currency.balances:50d10acdd5120ea81c4e6a1086733420e8a35cf479aa63eb7f8c3d699358fa7f",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:511c8c14435db0a381b7a602bbf6890511ea79d7091909dc3a6d48602aa86156",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5123124",
                "value": {
                    "__fixed__": "9303.8633064000002"
                }
            },
            {
                "key": "currency.balances:512ea32e0f4b621a81cb9768cbf639c1c624620f5531ca91013d3f20b4403739",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:513ea9ceb187ce0dd2a51920f48984027562ad7bb3fb0b665c5756d5fa35e6e3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:514e9dc3d3ad33141f44b5fd7056cc3186b912d57b06ca4c730208512eeb01f5",
                "value": 1
            },
            {
                "key": "currency.balances:5171af2d5ef69afe19d1cd00b2a02d52c63d3dfbdaa26b7b1db2073f786db106",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:51876d20dcf3dbd79bedbf1fd9fc23bbc17a8286d253c95fc41430d6c353e416",
                "value": {
                    "__fixed__": "1.44"
                }
            },
            {
                "key": "currency.balances:51e5ea905527664f4dc93bd90e62d2a89db01547f75578914dd09c7807c6494e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:52226e31d56da22fa8ea0d8725790d26b9040580a2e5780926fdc348d9ccc65c",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "currency.balances:523e6ed96ede6ea00c0158d0b6cfb1f647f50ba3cf4a6a703f92aada2c288956",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:525793b11827f037c9e3c4c410254f520223886e202b51fa089b34b5d7ce6d7d",
                "value": 80000
            },
            {
                "key": "currency.balances:5278b2a8f22e33c419242a281c48b3204bb9ef4efdb50cb67ae68a33166c7ef6",
                "value": 1
            },
            {
                "key": "currency.balances:5292f0e9534696d77cb639ece22f25ee0b4a9ebc7cc7ab3463a8cb4599390574",
                "value": {
                    "__fixed__": "17.8677499"
                }
            },
            {
                "key": "currency.balances:52b7e28a6beb0ae24f83753ededa5a1648677e568abab3fb58b9a6a70016ab39",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:52c6f390ad93ca3c50353ecf095043c1e588706a2ea9194407af3019a6a02620",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:531fbd7ecfe09df72e4fbb0f04acc1410eaa8d6f72c4b8855d9d6d1650a530c1",
                "value": 1
            },
            {
                "key": "currency.balances:53681efea8155e46c36fbde0124f97a5712e6d9dc11f9cccfdb7b30b35f761e6",
                "value": 1
            },
            {
                "key": "currency.balances:5379914832fc61805c1a6186f7f0625052675b560ab54bd30c743f06eb0f6a40",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:53b38a255cda4e5fa285fa0baa6b2a845c0f11c6df5913fc492821755cac6328",
                "value": {
                    "__fixed__": "751.8"
                }
            },
            {
                "key": "currency.balances:53ebe132225157155c8d4782a0f8e369a7173f90519c49d6c793619f5a194147",
                "value": 1
            },
            {
                "key": "currency.balances:54da38d2a7ea24b00e55eb634d76f6e8145ce470ce7d241e59f1bb29d2b3ac7e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:54f1503f808c6be8810144548d690299d1abbca507c8e9854eb287f4fded08d0",
                "value": 1
            },
            {
                "key": "currency.balances:552291f02c9317519633021302d0f7ba39b1cf32310e23ee7aa6a4312ae4a027",
                "value": 10
            },
            {
                "key": "currency.balances:555",
                "value": {
                    "__fixed__": "2025.12584501999974"
                }
            },
            {
                "key": "currency.balances:5565f2b994c96776c16c796ed38aa63084ea688b492b27a24fc8a80920f4c0ec",
                "value": {
                    "__fixed__": "3.8"
                }
            },
            {
                "key": "currency.balances:5584929de84a11696bc1f38898c77240cd1260c0d7e2f8db98039761510721c8",
                "value": {
                    "__fixed__": "0.33955705499999994"
                }
            },
            {
                "key": "currency.balances:5592834d93a1a6292027ba1de347424aa3b964d51ace983d526bd9ce3dbb0d63",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:55ad01a7201cd43d8c722b5011d636b68519e2bb9eca56186b7f9995cfb4bda5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:55d9e1cc0c37c514758fdc13015b9622d0f6b1a313d1b29ab4711a55a97cbf1f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:55fd70fbcd99f2ef97b55e7695f285fc9e58514c372d8b1ad9948bb71cf3872a",
                "value": {
                    "__fixed__": "46672.2748"
                }
            },
            {
                "key": "currency.balances:562953a4ac52f69d2453e0bd94164ff77a2c768e3edc7cd950a5b154d8f0bb70",
                "value": {
                    "__fixed__": "3.4"
                }
            },
            {
                "key": "currency.balances:56710a628565623b4aca874c0d3c90353ee0a3076daf7810e9611f9a2d58b308",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:56870e5d20ffdcc23bf607c17e99f1432b6d7fff8ea790da4a148ef3045a8fea",
                "value": 1
            },
            {
                "key": "currency.balances:56f09e3189aea1614c9e3c5347590a70f8497b490901ab72a75d003a5e045875",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:57988205efe693de91a48b4a304b4f3ff41feced7435f31acbe14e59a5b98fdc",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5843a377007fa113487c63c1de7a8bfc0490e52767f2d341561842ab4ca6fba8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:589652257b23a6f816007865339e25167e24730a5e6e679b83b0aed6eb22041e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:599f9ba284e42c500d6cf044fe069634d59080c4734973b87ef566a7f2116c0d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5a4d944b89b84f8914cf20102b87cb832d595f8eb995d3111d9af7cdd20aeb0c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5a5128857a999aeae59dbf6a6d8a078a8e7d9f749372e68f08a5ea23bfa75954",
                "value": {
                    "__fixed__": "46611.5493"
                }
            },
            {
                "key": "currency.balances:5ac5ae7cf62e79070cb6e40d198a467d7e3ee82de53c2d23c11dad406335eea6",
                "value": 1
            },
            {
                "key": "currency.balances:5ad1a36038faa8f7e5ba656858674b7058d188fe338f899eba7008e449bf9ca1",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "currency.balances:5ae8aa54f160b3b61f8979ee0ce5f36c761137f5ab22b947b251798621753da3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5b03c88bb8d7458a175a732696c4fb47ec8d38b170a8809cb7c84796a227ea29",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5b11bfc76e15bb4889d5174eca4a5e45e6e4cad19260945cf7540143899f8abd",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:5b4e2d92b15254e1245279e46142b13bab405c1546f984490203056816d2c230",
                "value": 1
            },
            {
                "key": "currency.balances:5b64749e5abed7d3d29277088503a42e7ce99e172231a65dc29f6100c4cbaac6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5ba977359ddaeadfa3c065fac64197a59ffa6cb2701015971c397a688f8b5e82",
                "value": 1
            },
            {
                "key": "currency.balances:5bcbeb1fe2d8d525a507308e832efa19b64b3c00e0662f226ac05408f958e713",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5be5942e78ecf1f8306b47ea04dd8e09cdbee02c460208832daa48c8d52b5464",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5bfc25a4cadd3b9d229296ed77358118a5513584205739fdda4ed6780ca3abfd",
                "value": {
                    "__fixed__": "169.7785275"
                }
            },
            {
                "key": "currency.balances:5c599f79ed3b17bb5a88b77726113844da6cd28c06c41d0fb3941840dd9482c3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5ca35b75e756ce008c043072f578c6ffe84b2dc924904ddf1decf54242545798",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5dc906caf2a0b32dd6287b391b633886198f737023c657876aa6d56356b56a9f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5df1c92a824a75c178fdd8443ffcce0d250713b07214d9461067c0036f37d528",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5e6bb8c3908b51361f92fd0caade04085014721429e95c0f8b036edb1917da54",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5e7050ef0c516d39ad1f0cb1656c9283e0110f21d39dfd4ba4bd219490af09cd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5e72d721b27fe3c2d3f7fc5bd28c9cf30653b28201f75424eb9e07b79163fe4c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5eb37469e0178cd22105058c959c38eab06745b4f99e8d280d855a31dde202e9",
                "value": 1
            },
            {
                "key": "currency.balances:5f3ce2258463f3f4c14570e103d3829beff5130154842145998965f24d051001",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4",
                "value": {
                    "__fixed__": "988.32"
                }
            },
            {
                "key": "currency.balances:60033a99b7eaf16d34986fc954b90f11d6c469138a5aeee08f7e72e7148b6a1c",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:603d7649095c7b18c158499fc0ef68fc375e9dc4c893169f392640fa8a483a62",
                "value": 1
            },
            {
                "key": "currency.balances:60ba427b1070915adb6434e100feb4aacba67f53f95142d3e9ce3ad07126a476",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:610251a68c8041e409a5b80b23fcd23ce0fed0a72ed1ebfe1675127739a3b520",
                "value": 1
            },
            {
                "key": "currency.balances:6115ea05429ad70b39b372f4ecc572632bdac3d33cdf95525b4d693edab3e391",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:612c3d675179ce221dc43cf98e93cee2dc34f26719d139681667983eeab59948",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:614253f8c8c556abdcd0c01c9500e64158bf02d68e2aa265b5d4800986d2df7b",
                "value": {
                    "__fixed__": "1.44"
                }
            },
            {
                "key": "currency.balances:61e294dff8bb734f2fddef5216a53d2a93f617a2c13154c8cda1b682c9d02586",
                "value": 1
            },
            {
                "key": "currency.balances:61ef61ed62fba5941d9a8f792fd55a545558a475a1a760be4c4ff82c3db2c814",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:62ead519467d737ccc5ebf817d50767b095fa59f5c77365d6906121b7616268a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:632749c344830fa6db889b98975e449f9b353b8e718b57289e9b8e7a05011595",
                "value": 1
            },
            {
                "key": "currency.balances:6337086039439f5f13d9bffeb9c8fb060b3a8d2b09b8e5e15af2eefba8a69fbb",
                "value": 1
            },
            {
                "key": "currency.balances:634fb5273cfbf5dec8ce01d59d384bcbe3e9065ecf4fb0ecfef7daac923002d2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:636a51a3c741a75e1debb9678c6548bc1a4b917905bd79ec9c10ccec10d284dd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:63779a1783792fb90f025ee94eccfb05c6cbca9e5c647332456e5666d7521a01",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:638de7c076f6f24bb212e7b2f0f5d6bdf2f4fb84fcef2fb2b3de3133d84eabac",
                "value": {
                    "__fixed__": "0.78"
                }
            },
            {
                "key": "currency.balances:639a36c857c165b08d254b9bf06284a34f6d032c72b6c76e53791d34ef234b91",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:63cdcaed9e19fbc3c74e54cdff11cab0203030957c9445e367621978babbf35e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:63fc1024c2c18e66e93421bd311c5405705737f733abb8e5c8a435f38561da4f",
                "value": 1
            },
            {
                "key": "currency.balances:6445ac1957417ff1997b1e41946074a6e3b83fdf37811e0379b6549929208346",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6462f818c1c6e78005d78b3fbbfa701a16a9c27ac9f582001ec0e245a505f408",
                "value": 1
            },
            {
                "key": "currency.balances:6469db016e9444cec27e0e5ffcf0908cbeb2a6ee5ad29742ec46044266cc9e37",
                "value": {
                    "__fixed__": "69.6579"
                }
            },
            {
                "key": "currency.balances:64b0b4a380080c5700ed67bf5d65da7476bec271ef2bf7e6b520a0589b2fbf33",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:64b85568b58342b3af746a5e13d2c2e9ca21182d78f7c9ad38c5c10e9f6818cd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:64c1daf32551149cd4c4f57226d661d317ba345065a0666f000a4ca92a844f53",
                "value": 34000
            },
            {
                "key": "currency.balances:650590bcf42ef2e946d06908a12b6d2f756558aed2fcae2796a042cbcfc782c3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:656237dd079afcdd09c92858abd162ecc7db5f206b9dd00351684df704164752",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:65723da81c38701aa018c2a38d600a18435bd34db363b19f7dddd9e29e8afab8",
                "value": {
                    "__fixed__": "751.8"
                }
            },
            {
                "key": "currency.balances:65a981cf56d5aea1ae64e667464be5e2db23e0c7dc37f2f2ce879f220755ac4c",
                "value": 1
            },
            {
                "key": "currency.balances:6623272f211c9a2b58a6fbf6c2af0c26be8054e401dfd8b2a2c27b8981c79140",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:663438b072dc59e6f047c829b1cf9e9a363a1ea0a6093f24094fc1a8c4cb8b2c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6650a7fab7625a5d518e5e6fc5cf021948a9c9b372a53bda9e39023cfb0d45a4",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:669f5cf90812ebdced39650a0ee7bec4030974dca3ba286a64d7102b97def607",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:66b67d7d99732d2e4698ddd22ec26181f0f19faf5b2f39919ff9420a927071b3",
                "value": 1
            },
            {
                "key": "currency.balances:66b72d7ac7f7b58d4666b6f978068cd7ff46dcd47986386ae9782a97e51f0ff0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:66c6b5861236097ff916ed67cfcdeb44d3db90d850132e671b878e8b9b60b835",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:66ed008a46d0e933c7fbd4a34c9bf89046b25bf86bcb80e9b05d945238413224",
                "value": 1
            },
            {
                "key": "currency.balances:670d6a1241e10f134a8a369369cec6d30d555c47942eb6b8d8a0e148151c9c2d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6734de78f96b49de63c74eb2c30bee4d9123ed3348f8f24aadd9416f52daca08",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:67378593b6a6255e10e15885ec51515d1139049502ae906a167077a9115e96f8",
                "value": {
                    "__fixed__": "17.03444559"
                }
            },
            {
                "key": "currency.balances:67925ecbb9e454d5da73f54ced0abac0304e99e9a9aa3f9f03259c0278ec2f82",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:67badd4df9e78910b3393f59ead5943a968422299ba1ae0ea4745635dd7940d7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:67f0f075bf2ff2ef987fd7928cb057ce75cfee5399bcc62313ba7b86a84f0d3e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:684a3925fa336b8728fb9b0ff036cd43701436b1b8b1f0786a5635eabdcb6f42",
                "value": {
                    "__fixed__": "69.4093"
                }
            },
            {
                "key": "currency.balances:684a3925fa336b8728fb9b0ff036cd43701436b1b8b1f0786a5635eabdcb6f42:con_multisend",
                "value": {
                    "__fixed__": "899999999285"
                }
            },
            {
                "key": "currency.balances:684ca42dbc260291be7a193e66dde31dbe12ecb2a754565966d704d4f568473b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:688585c4c474621dff7f6c877869926fa977876533d9b0d41273e2e64d1d9b39",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:689384ec293634439772901663cdf71e92605e475df6f0f9354bf1cbc65dab1b",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:68ed8e3107e2cfc0cfc46c58160ca72413a152b72466aefbf6e13f8066c21777",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:69883ff95af65c4f6c3ce740b333f0b218ce84eda91da6dd5827a226f2be8d68",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:69896e055c01c57c34dee2cfe645ef99c1482d9d1146cabd0d97aea895898487",
                "value": 1
            },
            {
                "key": "currency.balances:698b35e6d14a39404164de4e2fcce9a1a42b73793abc1ef2b199cb4b484ad800",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:699249a17519aa50b0c57c6db8ec46d4a81fc1f557031ef9a3edb2aa4a43a16d",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "currency.balances:69acaa8f190e87cf7b128b9d78b96f13b7a2cf2eb6eab474c98ee29f0af718b9",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:69f2e1e4484efdb544c8e4631ab8a5bf632c9a55896cf67389d7fe8ba21b756a",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:6a1d8825d27c38d7ccbf2af187ce44351581a578b05906eaaaeb05690bf059bf",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6a35737759c8e80d745237e8dda300e104ce41e08971529564d31b45b0d74eac",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6a525982e909f83f2dadf071d67eb1b3a88331a810afc8f789533c9b10ac131d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": {
                    "__fixed__": "97.86"
                }
            },
            {
                "key": "currency.balances:6a6a0bcbdcd7d56385a42f465461fd8d063775f58efb9ed974c1f53bc7759f66",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6a81fc61d112aecfe501a01d821db3f718e241cec6cba86764a8e942342055f2",
                "value": 1
            },
            {
                "key": "currency.balances:6a8e54eaf9c699dede9132ecbad83c66db1dc820c43b4fef9500aab285ab3c3b",
                "value": 1
            },
            {
                "key": "currency.balances:6ab4c6f6f02f14bc5924ff3614af168fdefb2bbf3df57e006cf4e79bd5fc4834",
                "value": 1
            },
            {
                "key": "currency.balances:6b05d08a2ae75b6824dfd441fb8b3c4244a1d1f9a61ffb4ada0aef99d685806e",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:6b4e0381f3135e39167fe1329df6cb83d910079b262e2f1c80b7dc32f05f304d",
                "value": 1
            },
            {
                "key": "currency.balances:6b596c4590a64651145a45a1e512eb6f1255124c06cae1e33586d3434b67e761",
                "value": {
                    "__fixed__": "5.9412"
                }
            },
            {
                "key": "currency.balances:6b5b0fb58b5818b3ca01b268cef2b10236a7218eaa8a35d553e71424ebab6e14",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6b7d4bc17a73e91bdbc2e0e27711018f83a5e4d2e42cfa914ccb52306f5c2b7e",
                "value": 1
            },
            {
                "key": "currency.balances:6b85c0c1df49c0242cb9b7e88cb450c8d616cff6ccb40814a49f9d0e6f96c1d0",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b",
                "value": {
                    "__fixed__": "96.2692"
                }
            },
            {
                "key": "currency.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_presale_foam",
                "value": 0
            },
            {
                "key": "currency.balances:6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b:con_presale_foams",
                "value": 0
            },
            {
                "key": "currency.balances:6bacb4f55fa1fa5cdb7cb62d714ada95a3e1933bed019aae51de93ba25b0f7fe",
                "value": {
                    "__fixed__": "24"
                }
            },
            {
                "key": "currency.balances:6bc8d865c1311856f42db1fcbcf0708867c840c84587bdd3a51d43b8042d18f0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6be65ddc3deeedee0da09927cc60a7b3574f51781dbbf6bb144d10113135d36d",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:6bf489721faf4f0546f4ec5cb6c27336afe71240adb358a2a2cdceed8f48669f",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:6cede34a9993a5bacb5461e65864966aa1ce3740969fe1e790e038926918e732",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6d2476cd66fa277b6077c76cdcd92733040dada2e12a28c3ebb08af44e12be76",
                "value": 1
            },
            {
                "key": "currency.balances:6d2fb38ce7cb48ddc937aae07c0502caa0e557a15d681b31c29e2fcb71d518b4",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:6d3c1665681365beb8acb710944b2b64881baf2f475253e659fc4feb7fcb1a62",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6d59caf4a0e552dee0f1859799946a7c93d23bb47428241543dfff3f201969ba",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:6d7751c3604c3ce42c7ce271f4773de9cb47e6de728ac44664cb49c6ebfc62b5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6d8e9913fa1a99a5788623aaa34af1b0dcf3191eb840feb22e7fecd7cda699af",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6d93c2b5d57b81fd373bbff97ecf7aaaa1b23e638bbf91a2c5ae17a635b14ceb",
                "value": 1
            },
            {
                "key": "currency.balances:6da65c136853cd405f841b6db52b225b1f0fb11c95aa75f44cff2afb0cf4d05f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": {
                    "__fixed__": "9390.9304"
                }
            },
            {
                "key": "currency.balances:6e0d955e16f46ac99b235a3d9065b48f3b29a970bae42fb8b8b2f448d6612387",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6e3627169dbb523f945ad74e15d5dd56039caa8f908824bf883cc6c562f27d9d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6e3ae4b9838defab5335fb625848477c13f4c36127eccc94ee9f5c45fbe9aadf",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6ef9f05a7b3d164c03225643c819408264c73afbe5a54486b459a2fb4ebe6c5c",
                "value": 1
            },
            {
                "key": "currency.balances:6f06a42eb97022d90abe353cb4f9d28a054f1ecbeacb2be7dddacb7fb85258ea",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6f0ab17155d21c7736a96b6cd9d56c2b1ea8d4faf8ddff7dc9c19b32eebbf782",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6f3fd1c9195ff59a9033435bbec480ccf69b6e3eddd57c2352d49ca5f16b2ead",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6f4b36342c22fe7f5348d2cae60bfd07ce8d3f6447f2d105425b9c8e74961052",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6f85df513837a0bb519448926d4f5a02326ea0b976d7938f1134a31d58389ad2",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:6f9327d04a24f49f1aabd45c249b17fbd263c72c723b4d18aebcfa316e7120b7",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:6fe558b93882182a6ce0311f4bb2766bd5beb92d57061719fc979f068b896079",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:6ff2b3c23629f4d99d4f860ca991c0961d93bfd635437d4067a9d38abb908f1b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7011766abc7d61e27ed5de9114f68ae2116c72b712601d6e569fc3dc916b84bf",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:7011bba0b8c985dc6cc2f3015324a7328a6023c67084280b20d6ea1d4fca3ccf",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:705d3beb41dba62dbc7a70074ed440625bc9d8e0f3a33df2490a334225524fe9",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7065fed285e564ab8c0282a7da44c8b8cd21566b65064e1e26c8d0baa34265a6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:70672b7ab905a4db4912e49b6a4b22fb6ca5ed5bca07c5f5e639fc24428d8e6c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": {
                    "__fixed__": "575.611908231772563466962809586908"
                }
            },
            {
                "key": "currency.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05:con_bridge",
                "value": 111111
            },
            {
                "key": "currency.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05:con_dex_router_n",
                "value": {
                    "__fixed__": "1E+2"
                }
            },
            {
                "key": "currency.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05:con_x00011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05:test",
                "value": {
                    "__fixed__": "5.5"
                }
            },
            {
                "key": "currency.balances:706ab78924a444e98363380bbf7e881c31738c0220f5ccac75bdb3a075653efe",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:70b38163671538ba1b3ba65e5231408c5a5b5872d7ba9a63fd8e9388ac4a69dd",
                "value": 1
            },
            {
                "key": "currency.balances:70bfe6ce78fb19dd5db3d4adf54d53f839efabe58170762aa806e291eed44b00",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:70e2809341c4eb3bc33e26762ad29a2b404c6a4975eddc4a20e0ac945ce5af48",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:710a9e4a162f92c63db9230b612eaf3082616d4f72086f7abbad8a1228aad9f7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:713f0580eeb53d5f6660c96863fb311a1e4be9bc02b5cfb91517af23ac971357",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7208b5462f1f53d6f93314ac20a21961c53d417449ccc9c7adfa418386d4dd99",
                "value": 1
            },
            {
                "key": "currency.balances:724e36786c2908ce2809db355e2614808b8806a06e4a9e747852bdf651ca1b31",
                "value": 1
            },
            {
                "key": "currency.balances:72d2dea0c4f7aa75af2ec913babda8254b38ecb37c3c3274aaac53250726aec3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:730cd83855d40afbee7f39bcede4f714a63c8d9c76cc4f57ecb7841693ec22f8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:733d59cc491f5e8086582d127087e007acc869eff44a4a19dcfc8f09c880a08c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7388ed2f1aa8f1d74b0ae2158dd63c29488e1040ed21a0ba99e8b6366ca7d788",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7396db6ce8d185e78be4746ee269e4d27a007a3498271a3a5020bcfe939d1e1d",
                "value": 1
            },
            {
                "key": "currency.balances:73ab3e144e360b03b923237b39b52b7f97f042a85c4933c9c1bfb6ed7655ac51",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:73af6ebe9547f3006ff09ec08d3fb3b75a5715de8bf8e7e175959824981be068",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:73cc03544f90fe810648a12e9095466a4f6bd0d6df9d27afe534614ef51ddb6f",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:73da95256667d50b818e8014b64054a5abc30d2b2d05556bca4224c6394fc4e0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:74c10570fef76df12d86fad1354d2ec9ed24d41a1e91967c8e3968d0d91d3484",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:74de9e410273c86e675b6baa764a1e1339af17ad5c5721403a51e00a177af441",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:74ecefbea782e737d2de34f935955087665bec75ab7dd1f04c4a9e0e5aa597b7",
                "value": {
                    "__fixed__": "10.48"
                }
            },
            {
                "key": "currency.balances:74ecefbea782e737d2de34f935955087665bec75ab7dd1f04c4a9e0e5aa597b7:con_presale_dato1",
                "value": 5
            },
            {
                "key": "currency.balances:74ecefbea782e737d2de34f935955087665bec75ab7dd1f04c4a9e0e5aa597b7:con_presale_dato2",
                "value": 1
            },
            {
                "key": "currency.balances:74ecefbea782e737d2de34f935955087665bec75ab7dd1f04c4a9e0e5aa597b7:con_presale_dato4",
                "value": 5
            },
            {
                "key": "currency.balances:74eeb854bb1a50a2755a786d67ca6688f222aee9d4387e23e8bc46a2792778c4",
                "value": {
                    "__fixed__": "0.72"
                }
            },
            {
                "key": "currency.balances:74ff1bc4c3a52ecdae2b0bc4a8c8c30e17feb0dd1861390d3f03c997659a7002",
                "value": {
                    "__fixed__": "1E+3"
                }
            },
            {
                "key": "currency.balances:7540fe87a8b61436f18eee83b10f640188596d65d52e2cd333367e9a9c9978a3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:754d88848b02c9a03931d683086a35de46db971ae9a4462c83628caffe814b43",
                "value": 1
            },
            {
                "key": "currency.balances:7550ce8eae861b6619eab3ee89ef01a3646e379c28bb926c0fa1b89b95805924",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7576acebb1ad304ea062251c3144d4fb589d8754a0fb4b43ccf6f513c4e779dd",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:75a4ad8cace505fa3f8dd511ece54dcc39d7637ab6d510f1dd38d8585bad010d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:75b9869e7e9e472233d8d407c284c1ee8029ebd45e56cff53dc621030a997f8c",
                "value": 1
            },
            {
                "key": "currency.balances:75fdb605398c4f5784e8e40ae95b002f4a5de3fde971b43ff731c50e4bfe06a5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7606df4f454d71cbd70c6c1ceb510250004546b8920a0a9b761f02c2db4cc299",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7607bd2bbe203f795a0c786c0087c293edf207c89abeb16a565409bab9c0f9dc",
                "value": {
                    "__fixed__": "1.1320489214500000002"
                }
            },
            {
                "key": "currency.balances:76469c30320287412da9b6da6387e4a200db937eb2f13b79a4061df6f029db2d",
                "value": 1
            },
            {
                "key": "currency.balances:76e4f6dcd1d927a7dcfc2a672ab350327f5d44e34702cb19c275302e94006786",
                "value": 1
            },
            {
                "key": "currency.balances:7700a56411e0a10295355a1d31f5e95c136dc7fd0934ff336642081981f48cf8",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                "value": {
                    "__fixed__": "253.0116"
                }
            },
            {
                "key": "currency.balances:77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7:con_x00008",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7:con_x00011",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:777777",
                "value": {
                    "__fixed__": "210.525374069999994"
                }
            },
            {
                "key": "currency.balances:777bdee9f2aa1f0b0a607596e8089e997735c2bb82a3652207710356dc4bcd08",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:77b3626e9ab79c24ba488075d4708ea5db2ec8e7ed59267c7f19727d572ae64b",
                "value": 1
            },
            {
                "key": "currency.balances:77d34ea4ec5d9fb24ff378c2dbd30e835c5ba84da128054eb2ff85ac305c849a",
                "value": 1
            },
            {
                "key": "currency.balances:77db4361d8e1e56f2500c0a3d11f45468a6f4580e0c9013779ffde29a18578cd",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:77e0805872687a801e1b7a227f1b5abe15531ea4c58997c27eb43e0f5046511e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:77f9f4f9f9949ac99598d6528ff4dc8382af826cfcd2a8ff9e0d141d811dbd25",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:784cb51b05805b445b8a01aa10da4ffe274579f8ee4d89846d8314e051a58b75",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7851aac28145ec5c12d671a9e9450326c14094ff8cc91c507949a6e6c8eb489c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:78a5802463e5414ba0fb8264b3a65f08d0f62b63cb8ae8db947ac201be4a3904",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:78c5af4b365e468d6c392e3673e8f1074601d7823363ab65e2123515504a8b8c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:78d99321175027dddfa3e63d2c4d2c61541e5a96f7822441b9b04751e50d7473",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:791ef35a9c4a87c59ded6f1d075078aa4d7810c19830ac1577541f5ff5476ca7",
                "value": 1
            },
            {
                "key": "currency.balances:79a5646b25dd0285b256fca581cc14b9f3b3e99ce39f172b3fdf2b5b6202ec4f",
                "value": 1
            },
            {
                "key": "currency.balances:79d5d3789fe2f75eb54c68f41e68d92fc33835ea8d45d06b27a1e4781c84a626",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:79e710423fe5c63514a2bc2c59bbec7d501fa8678b01f52973edca42c4886d88",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:7a02e1c09fe09f17028818739cc8865f685eab9a5e0cd6395e3e83c70f0c2b28",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7a49be5024c3392d5569b52191ffab6841a23b790a5494567e129eb50be358e4",
                "value": 1
            },
            {
                "key": "currency.balances:7b0f4d4f887a1ad3d602a8fb69b605567b1561f3661d6d1c57cbb7108dcf8f82",
                "value": 1
            },
            {
                "key": "currency.balances:7b5d6bfeb7550a576495c0cc49e6bbc96dc8f0132f88df4c09f7841df7f06ec0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7b7762c109d4355d2f74c057e4210c3fba2c7a4df26068c0818d3ecbea1195de",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7b88e6c9d22bfb9b6ebc0055bd66bad8b4855a616480f1964e07dce250443aac",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7bb2d5b7989692e973a801fea975eb184a256442040c230dc3ebe0ebe290984a",
                "value": 1
            },
            {
                "key": "currency.balances:7bfb74f10222285fc5d7d198a1f10e3596b3dea38846eff28fe6337b3da92b04",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7c1dec368192289c805ee2ef36f7e9b727dce23ce4f59f0a4e6afb51a244d04d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7c3aa384cd20aa3bc01fc8783d992d01598258713ffd29eeee621f09f53f45e0",
                "value": {
                    "__fixed__": "0.3802"
                }
            },
            {
                "key": "currency.balances:7c68109c12a720399e8d3af884fb29775212daf05968050c037d8e4ce3bf00e9",
                "value": 1
            },
            {
                "key": "currency.balances:7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d",
                "value": {
                    "__fixed__": "75.02"
                }
            },
            {
                "key": "currency.balances:7cab22acbca76d83b9966d7bde03e7577ee58e59824efa62601e6411f53e8071",
                "value": 1
            },
            {
                "key": "currency.balances:7cd5614d63c0421bc5de61417827c1f9c2ad3ac76c961a98bb8780850437838c",
                "value": {
                    "__fixed__": "68.96"
                }
            },
            {
                "key": "currency.balances:7cd7589bc700e771d14cb9918f7995d7791189e642169ae7890d5acac5cc1759",
                "value": 1
            },
            {
                "key": "currency.balances:7cf9b40ca45a76c2ab617b3f12ca78e64b26c749ed795d8b9ae954cbb93457ca",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:7d1ee85a0d3674ee1133c4639032ac6601d3d260e78dc5eb0dfbeb3089c89261",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7d22730cdd7a8adea2a38bf14f71b74212c07884481ff20ac9353cebe4e71b02",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7d3c133de20b45db2c949fc63c75d0b9576df96bd9375c1e49e6e5b91b4ac91d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7d65427969090966fa6ff23907a19894ffc4d605398a6794aa65b4942c78e3cc",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:7d870855003c6144f2af00027f0457c030ca2caad06cfb96a3785377fc49f049",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7da01eeaaadef04190c7265f5a64f2bf5e65b8abcbcd96d36e52c9d93c05af0c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7db66c7e3e4c9f26b5798872847e44a5b9697231eb657dd39177cba52991fd62",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:7dce6f53947c3083951b40960b7540d99df90dc6da9d1997312c6291fd65ac66",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7dd0f03495a99d9c7dd354aeda18481eb99b836718f8e5f9d9beeeb53aa8a67b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7dfbd469cdc96322e1a4882debae84339a24ea77d7022163cd8fa213cbc01032",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7e7ebb994db97e455573242f8d8ac5fd61a9b47359a6d976a7a69624e357ca6a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7ec1e28b95490a1a4e852b1195e3fc0ba46d3772304cb708d901d98cab547ea1",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:7ec28d04c874b8ccbf46cd02c4cff1ebf55771e8172b760c93b966f442174da7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7ec3b1b5a5f21541b3ed72350a30a8f7f985c09b07edf53e5de0fa2e9b1019d4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7efd5e0ef5788579774ec3bf0825dbf45a53f81cbb7c5f33190fb6d3e22d18e4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7f2e88104d49b77031153c7b931d8d1498e4783445262f5d137c2b90af675c2f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7f566d90cbf18a963b06146476bbb538b2749d7090f27a96a8db87db64a513b4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": {
                    "__fixed__": "58023098.60858205352288775"
                }
            },
            {
                "key": "currency.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:con_multisend",
                "value": 10210185
            },
            {
                "key": "currency.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:con_name_service",
                "value": 0
            },
            {
                "key": "currency.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:con_nameservice",
                "value": 1212121208
            },
            {
                "key": "currency.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:con_zyx",
                "value": 0
            },
            {
                "key": "currency.balances:7fe83202b3130727ca8af23c25d282ccc0b6e49f1c5d57379175991bad1021f7",
                "value": {
                    "__fixed__": "104.74"
                }
            },
            {
                "key": "currency.balances:7fea2e88a8dc01869eff6de42f14c332980cdf052ecc891f509b09391e2c8028",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8049737a45ad626f8fac584164d349383b5c23ad2b114db040c6d2e8d1d91a5a",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:805b51c7c2d7ef9435ab5b51770e0ec66621c125622c7ed7b9838e437c4573f4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8092bb2a19271a92e67bb845af03fe1e25f56430730014bb69b51bf85b095757",
                "value": 1
            },
            {
                "key": "currency.balances:80c5b3ef951265d715f51c57f64143290389784cd619aff947ce5cfb5b9458c3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:80e22a3ff1faffc3411b24d332841d7e3b0704b5ba5046101f02eb9765f0e7a3",
                "value": 1
            },
            {
                "key": "currency.balances:80e2e88bdd05405a046b976c29cc8f956922409f8b41f0899f5fd21507ebc99c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8113d6f7dc2d68b6f12ce2e1a75a6851094e2c24c54a8086f485b4d96b4dacd9",
                "value": 1
            },
            {
                "key": "currency.balances:8157c7e9c425a2bfbb591525bac175a74a398250471ca4ccb82ab3df31359595",
                "value": 1
            },
            {
                "key": "currency.balances:816aaf7183cf79f41dba2638dd3221c72ce26da87422228be92a182ba8e96a8f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:816b01bbe8fa2d198553275984d6318e2850abad1130cbeca48a13e88b24e175",
                "value": 1
            },
            {
                "key": "currency.balances:818d0009e121a721138218d0b185cd8650d74d37ab0db50593f62aa4b248be2e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:819b9d49603868999978c3d2648ffaf1d545af0a992f83e3ad799e5a36e15942",
                "value": 1
            },
            {
                "key": "currency.balances:81a1726ffb7a3b2aed25a6c60740fbd252311a305afea921f4d97ef6c02a17af",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:81cf516a98ca0a00282437cb66433dbb41e152ffc3dc32c1c5235dce9708e8ce",
                "value": 1
            },
            {
                "key": "currency.balances:820318bbaa75d211c802f3d99a967c9d013606293b4a59aca115178214775ce3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:82691a883586d5fd4520c4e3486148e026a5708e080bc9e055f14d6cfda2b5fd",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:82719726e23aded5e053e68ae1e810bee779b8f15bb63dad4efc59f23fa1940d",
                "value": {
                    "__fixed__": "4499.76"
                }
            },
            {
                "key": "currency.balances:82dede56091344f9c90af0b070f1f531b5d0c15903f69c0d6211e22c7bdf4839",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:83149157084acb99503f17c737125a860746c466930253f95be875d3c140f631",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8337979d4d85658456cc0ac567c1a6d5bcf0ba569adeb914db122ad157b3aa61",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:8337df631a74529b45932feb1668f25228831066c8171b97ca2b9ef4da99aeb1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:833a64c84fd64506bb2775361bc87f6ce8e8b47387df8f97efc725913e17f118",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8346f37bf35de29d8c918c355fc3a8e37bd10570b057f0544285fdc6d7e42db8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8359e7047e2966beee8014bdaea45ac471483fc0a552f3b57291f20d8f4a0588",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:8444c492afe2bb92ec33766fd75e3d9c7a50b095da6bf4901125fa653a0be53d",
                "value": 1
            },
            {
                "key": "currency.balances:85188600eb73438f85a5429c03f6b306621fa8858924f69d9dc618c8b2a51400",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:85334b88cfbbe2bd969742cd8db2d0d28f3c893c912f1a309f9973d54c5f56e8",
                "value": {
                    "__fixed__": "9.74"
                }
            },
            {
                "key": "currency.balances:8550bbc7f0abb5acdd759122f354b79ccd13f967e931e53b5a5574aa174e7e53",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:85c0416fe2d8c2c83552a873df35baa43b953fb2e3711ad61cd7f5bb8c081ac7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:85cf2c67da1aabd3cb63ff7bebec7a8a6dcc72e38f9408611bf9a9999457818e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:85d80f9992e24a0b820d89470fb31e12e7418539a5824bfb5ada2db016dceb31",
                "value": 1
            },
            {
                "key": "currency.balances:85d968b7671676dbc0f2860e757f68c85f283d6d87eed0b6a2e2ffa6be4344f2",
                "value": 1
            },
            {
                "key": "currency.balances:867b588192e673ead0a9f23a6e2ac149efe7b110fc9eb0e2bf768b300f7d4f6c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:86880226266884950b0f7b72eefdf55bcfc69379cba395d821c2a0471230ce82",
                "value": 1
            },
            {
                "key": "currency.balances:873f18647459479386c24b2243c9ba71ea81a0e6ee8a5fde9fdc5c4388ce5713",
                "value": 1
            },
            {
                "key": "currency.balances:8772772dcb223d5bd35dda0db617b97d600d6cf657f5fd70331e0118234654df",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:87732a63f310e5eda3b7ef07fe2f2cf9bf3718a77154e316c154e59469e829d2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:889f4c5ebfa9f98ee0205fa6c5584779daa733caaaacd529dfc82e3a256d1416",
                "value": 100
            },
            {
                "key": "currency.balances:889f923fb54a79deb11ee2850010488992222c92351d3024ea3a737b78fab0eb",
                "value": {
                    "__fixed__": "277283.27372957435178"
                }
            },
            {
                "key": "currency.balances:8914bddce1c45906351cf14e55f3a7db4910859b8866967152775b3fd2ca3ce8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:894eacd7965e077d171a11f6263f1ca080bf0b0315539a27975b243193c6648f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8976675ae08fde29845c59936faae9e19b3cf6e50cdb59abeb8c542587bf505b",
                "value": 10000
            },
            {
                "key": "currency.balances:898e76a09cc598999c1dacb23633351eaefe953c5aee7f9f24082883ad9267d1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:89ae4d2e27666a5022ae1ebe4dbf4cde5b3fcf8aa9a2dd121c52a956bce26334",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:89b50ac95cb617a7e0eb598aec329df86ca0f2030778288c56451e4b9ddd767a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:89c0d7d9007128392736bf840c1a6d75d62fc4dcc19ff72ed45c07e8c1b396fd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:89c1fe5dfca1010c2a903e558cd369ba606e942d43dc867ee3ac474940a8a542",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8a366323b366d26160358c712dd8abded2b57bc6bad189eb7b6b51f1a9d28bd8",
                "value": 1
            },
            {
                "key": "currency.balances:8a3a519d1c934ab1b1a8456401d253b18e8041ef5496ac922a731319d7737f79",
                "value": 1
            },
            {
                "key": "currency.balances:8a42ab5235903c76b2ff7f8491aa719685f72c26bf996d7040b1a7ab7a5d47d4",
                "value": {
                    "__fixed__": "7.64"
                }
            },
            {
                "key": "currency.balances:8a42ab5235903c76b2ff7f8491aa719685f72c26bf996d7040b1a7ab7a5d47d4:con_dice2",
                "value": {
                    "__fixed__": "999999999998"
                }
            },
            {
                "key": "currency.balances:8a42ab5235903c76b2ff7f8491aa719685f72c26bf996d7040b1a7ab7a5d47d4:con_dice3",
                "value": {
                    "__fixed__": "1999999999998"
                }
            },
            {
                "key": "currency.balances:8a42ab5235903c76b2ff7f8491aa719685f72c26bf996d7040b1a7ab7a5d47d4:con_dice4",
                "value": {
                    "__fixed__": "999999999999"
                }
            },
            {
                "key": "currency.balances:8a42ab5235903c76b2ff7f8491aa719685f72c26bf996d7040b1a7ab7a5d47d4:con_dice5",
                "value": {
                    "__fixed__": "999999999999"
                }
            },
            {
                "key": "currency.balances:8a42ab5235903c76b2ff7f8491aa719685f72c26bf996d7040b1a7ab7a5d47d4:con_dice6",
                "value": {
                    "__fixed__": "999999999999"
                }
            },
            {
                "key": "currency.balances:8a815df8f1386196394858815a0e90cf34e3cd9286e3e2162f591d60e4b900a5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8a9c521246d0dbef5178fead7fbeea90e2e42084de9a9b69304213ce30ce8f3c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8a9cd993a6f34916a53e6e3276ac941979d29618fe7b0ec52a5d9da7867e9750",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8b00437ec984090cde4772adba61da8d4aceb18d1d9d01ef7d6fb64495b0e90a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8b1e1bdb40c49ecf36b721d27c5ac357ca8a0eb5a45553b594a2f7032c6268da",
                "value": {
                    "__fixed__": "22.69372984"
                }
            },
            {
                "key": "currency.balances:8bb4d5785f7457f14957eeb17f58c052eb29a336f01dd9f450c287bd1e288aed",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8be1719d98089cbcff754123548ae07e600f29d6f0a625d09110acbee1480a4e",
                "value": {
                    "__fixed__": "751"
                }
            },
            {
                "key": "currency.balances:8bf21c7dc3a4ff32996bf56a665e1efe3c9261cc95bbf82552c328585c863819",
                "value": {
                    "__fixed__": "5.55"
                }
            },
            {
                "key": "currency.balances:8bf21c7dc3a4ff32996bf56a665e1efe3c9261cc95bbf82552c328585c863821",
                "value": {
                    "__fixed__": "4E+1"
                }
            },
            {
                "key": "currency.balances:8bf21c7dc3a4ff32996bf56a665e1efe3c9261cc95bbf82552c328585c863829",
                "value": {
                    "__fixed__": "24.21"
                }
            },
            {
                "key": "currency.balances:8c4c1e9209ae6e1894c4c2edb690fde061f72cd3df5384d09e10773b029c0a34",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8c574b46810f451557bf1102fc3e9e0fb93a3e8517e7980a1b4ca387c3dd6423",
                "value": 1
            },
            {
                "key": "currency.balances:8c5df0a10a8e3e7f0e322d8e858b7cf5c4214545472c04c2325133d3acf624ef",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8c6df446e162aa40fb87d65185dfa40a3899aaddc2c6c02640c29c52b0187abe",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:8c7ebba26373d295fba548b1bd776559dfe4f522e534f753458108ff6fc6e5ce",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:8cc199d0cd1f317d701e6dd011f10448e5cf56ec49d63cf6bf9e476fc1ee2b04",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8ccd49dd13b332fad9d9af8a7a3089c5f1ad17e79d9ce262fcea8dddce16dac4",
                "value": {
                    "__fixed__": "4.9858478125"
                }
            },
            {
                "key": "currency.balances:8ce11ec41a14ba8a3545b3214f5913bb129bd686b392d496359fc98f89da490a",
                "value": {
                    "__fixed__": "991.74"
                }
            },
            {
                "key": "currency.balances:8ceecffa42740c5b798bc04cd369a007c40851c76a1b1f9eb177216032e420f2",
                "value": 1
            },
            {
                "key": "currency.balances:8d3395516e47a5baa74cd6691a2757c9ecbf3778f169ec2bc1984a76bf01f372",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8d36a3f6e2391119af09197115d5a2369cf528e872b79d44a313b2424178381b",
                "value": 1
            },
            {
                "key": "currency.balances:8e521b51a3c3aa7fe829a98d9143024d6b8188af5ebe101cc5c3d81f00a630ce",
                "value": 1
            },
            {
                "key": "currency.balances:8e77ce39ed1970e0d38119611f84d40827fcffa444592abdd6bc74acdb0f8ec2",
                "value": {
                    "__fixed__": "198"
                }
            },
            {
                "key": "currency.balances:8e8b3f6bbd959687b6d655b6b430427c7b0233fb9544649c4796b5e9206357cc",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "currency.balances:8f03977014b8c43fb2e0a09e605004420bcee66645477d413c968e98a9ba8fd2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:8f2e46b21ee615a1f5881ec87213bef3cd29f9cfdd4867228ac0dea1a373aaf5",
                "value": 1
            },
            {
                "key": "currency.balances:8ff5d94ab6bb6eeaf4a761bd72696cd68e75f1bd86e471642ac9e5610a846f47",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:900f8790b2696568d9ecff517f24e02409d58297420e60d3d41d3e968f454564",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:90201230317f524333e9da87e93534c3575b982fef6db6b9dc1ca620efadff76",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:909d7baded2bb215f33f8cafbe3274408501a1d5418ea9407c4f5e6fdab1a1bb",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:90bfd1c7c5ac8b9565c95c4932a77203d5a06a6e9f44250d0cd635906421826b",
                "value": 1
            },
            {
                "key": "currency.balances:90d2c74e34bcfbd2d5eeddb63c285eb601bdf09e99414532f22e0def39e94ae0",
                "value": 1
            },
            {
                "key": "currency.balances:90fbfe3215aea2e6fba1a916dfb0db459d8afada75a4d7d6f548274072e4dcb3",
                "value": {
                    "__fixed__": "9.74"
                }
            },
            {
                "key": "currency.balances:9146ca8fed18ef9088bc0d556b62ef624a5df6cc060724b9007ce5f8b0d8a2c6",
                "value": {
                    "__fixed__": "1035.172842499999996"
                }
            },
            {
                "key": "currency.balances:91a183124406c4a4dbed53a3f62240e8d3b6dcdd3c72c1c6be5f81a51cb4cf87",
                "value": 1
            },
            {
                "key": "currency.balances:91d44fdc0cf1eb569ed0cc3dd467e44efa0228bb4c0e9e421a2191ca897f703f",
                "value": 1
            },
            {
                "key": "currency.balances:91e0196dccb8935446bb2516f196b302b8ef516bf04ac4ba2be46cddc16effb5",
                "value": {
                    "__fixed__": "19.46793782"
                }
            },
            {
                "key": "currency.balances:9246ae743f5408cceb767e7197bcce20e34be55f10c8ba0bf3b52b97a0c4a82e",
                "value": 5
            },
            {
                "key": "currency.balances:9257e102815ca24bad873d6049b2ab931badde604fd04d8d5c75acf1b2edfb0c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:92741ff6562aad0c24c8c85116121933ee4f8920b38ad722d6152faa08000683",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:92afb0278344d2269fe6f2fd42bc9930f3a64f25bcb513182f04d0dd1c21c5fd",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:92d5a04b71979657e1c64f23e5b19854916b21dc5b7d8050894cc1d341b516f5",
                "value": 3
            },
            {
                "key": "currency.balances:92d61e459216aeef2f3a8834e4a902b0691d3c4b8ddb6f467485639997628c8e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:92f7946da2668774a66093ceb673804008ddc73c9ed6876abb1f2e15a54734da",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:930e930a545475a773040c77a39f8f3a66e702d13c0d1a0597bcb390f49d581e",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:938a68b6d80cd1c0c59cdb6359556a3b30034d9987e0b2f01ee90d94cae6b852",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:93a7343925a369e81098f0e20ccc73e917504c6dc55efa1d61152eeb461735dd",
                "value": {
                    "__fixed__": "750.8"
                }
            },
            {
                "key": "currency.balances:93ab35a43596fdedcfa8f3f6745b70692748b74c919d6940a9385d895ab4e252",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9491399f51689ac8deb5e17e7399e25eb74712ce032b0031b4d7399a2cf55cef",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:94915001748799d1f3e8b976b705774fe7914354e4392de8eaae13e54f194275",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:94aa1c41bf458b00194ab8bb6db4674a719923de3b7dd880d3914182cdd6a266",
                "value": {
                    "__fixed__": "0.72"
                }
            },
            {
                "key": "currency.balances:95062c0ca921333b8d9a94f47e272e3098043845da7e2ccd5b65dde671a3992c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9566460cd9f63e5f2687bb3e8e00c73a1119baed71d71008fdde05b07ca10026",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:95677a1a761eced95b619738e33c095d9c21e56487d67e952b94f75c7609834d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:95b7b47349e32934baf62228fb01b4c63ec57a9b0d0a2977d40760f57fa1fd4a",
                "value": 1
            },
            {
                "key": "currency.balances:95c343c8d60d49d8e6e8b98520f7f6a07bce11809ec8e71400523b84ba5dee4e",
                "value": 1
            },
            {
                "key": "currency.balances:964c4fb6dd4d45bccdc194c7915a9912700e43770caf7cac84e1df3ca12f7ae3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:96c59aa4db2101aeeb2cd39a536337db3f6b2c5f681ced08513a5dfabf568917",
                "value": 1
            },
            {
                "key": "currency.balances:96f003a6a7cda697897b4076f6b19433ac72ea4f92ea54964746f40dc15f9ac9",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:96fdfb36c6217b8b0b9a152c1af439c72a6b3572d9a676049ad3452279879038",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:975c79c31f9285a0943d5497df233d94349df3e670ae7d5372f90723071ebeb7",
                "value": 1
            },
            {
                "key": "currency.balances:97a9a16aa12d2bbc66ff119bbe8ddaf118f5f11a64b0f258163e9cf0542b0b3d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:97aa5a647f0f855ddcb1d288790013ad2a6759388346d2cc5b0e143d9756d2ed",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:9825d9abb8ebdcee421c7afdd9ca4a1a5343eff120f9d8495e6672b404156cbe",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9841f8aad4dde3015155071d386cff09b97630fd8b733735ca3c08ad8663af59",
                "value": 1
            },
            {
                "key": "currency.balances:987d020e7c98e257b8ea14e50d148a5f9cd98422b524eb5acb1f8c05fb5fc9e1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:98c515b156242ab7b8e08f26b90a0f4030f70c13e0b1c960f4fb103dd79de5a6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:98e7f1842eb2546c5247d49e4898a8bf75b167723595fcaf6c02a4bb00c6922f",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:99782ae83ab678adf38e3d05ec242b6403fb69d9b74d952bbefd22a9725ae668",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:99814499d19581c7c509ac401fb3ad10adb484877fc0fd3d6ad5ba734c6c71e1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9984059e525838d0cf29b131c55f75069b71dc3180f106c16f14fc0a8aaadc0d",
                "value": 1
            },
            {
                "key": "currency.balances:9a6b40b85125b3e3baa1f9fd0600ad6b01d01c1a7c27f6c6325cbdb6b4947b67",
                "value": {
                    "__fixed__": "19.74"
                }
            },
            {
                "key": "currency.balances:9a931377e06177e24792a3ce41087ca1680fc167eecfa5cdd1ad4fd69380393a",
                "value": 1
            },
            {
                "key": "currency.balances:9aac5d6abcf175cdef2863fb6b817bc6b2df15a4cc571d8c19cabbee30ec4461",
                "value": {
                    "__fixed__": "282.96421250000003"
                }
            },
            {
                "key": "currency.balances:9b035a1c1786336fd7a7a77caf48800621851cd00e31ee438dfa0c81c726e501",
                "value": 1
            },
            {
                "key": "currency.balances:9b2ad42cecee3d2a83be2c2181343d68d9d2c425b9da6cd83b264e8fbebed4ea",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9b6400905671459c5c74ee129f865b9c7b855d082207c0cbb4fedf772adb3fc3",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:9bc3455a3410c8244c3a18fcb3938df04c0e7ae962cb4b90ff50c6b36de4e9cf",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9bd459d1941a43927c62e2e19dc758d89c1b818ef3a31ed35dee40fe303b92f0",
                "value": 1
            },
            {
                "key": "currency.balances:9bd5cc96fc68bfb48e33c7b1dc34262adc48f528c28068ff6a9a67ab082ae023",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9bdf283ad0a3ce7e8aeb3a1833b9f81bf70cd927e89c3fb18050d98ebe959f17",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9bed9c6fbf3388899c75c7853a30e2e181fda8f3830694ef189ba9942cb65d93",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:9c2eb4e43bada2d8d5fe0ae2a0ee9ed4e964b2589f5d1a8edb72e4eab731a8fe",
                "value": 1
            },
            {
                "key": "currency.balances:9c46952812da47f5940bdd83a6701bf53ec1724e234287e2cd88b3d03bd6d349",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9c5b999407700380c518899c61f51a823a2482a98eb05c23f5902b523af7397a",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:9c60585dd76b4b1169f69e3cec36b168c5535b34a371cbd4d0d35e1835611e88",
                "value": 1
            },
            {
                "key": "currency.balances:9cfc56893fcaa5a19e8de20c73f272cf4916616046aa0bb106fbb90f5961a588",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9d77acadacf6846db97e26965dfdd49b817107d388fb38eb111c3077eb7a4c60",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e",
                "value": {
                    "__fixed__": "14.867895761735408225296385173516"
                }
            },
            {
                "key": "currency.balances:9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e:con_dex_router_n",
                "value": {
                    "__fixed__": "0.3"
                }
            },
            {
                "key": "currency.balances:9e3b4f0e607b2b2aa39a8edc784dce05f24faf7d85026d76d1037cccef715eae",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9e6c9d624c69efa0eb33c0f761eb5ee7bc3c83ef384aadd639428ec84a91421e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9ec8b515aa0235acc3e343d3dcd756af5e553c330ab49997825a4bdab49f62ba",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9edaf5fb7f9f814a00d911f61529b42c6ee646e9d85037924995c270e7640e89",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9edfa70afb2472aa4746c831780d6aa5861b72b99bfa9f59dfc011005721be2a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9f4574748a71e98a89af1f0296b729d22afb3cf220e8d9f3d28df76106bbb230",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9fbc9c89d311b10f84446a02d0cff7156fce779fa4d66ffa421f18952591465b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:9fc5902aa67fdea5b55f41fe6a35f7be426f7ffa15ab1fea0451b7eede9dade0",
                "value": {
                    "__fixed__": "751.8"
                }
            },
            {
                "key": "currency.balances:CE3BDF86A5FF4AC9D054EBF2DCE3ADC9D21C91E893C927A5A36CF4D92568E96E",
                "value": 2
            },
            {
                "key": "currency.balances:JAVASCRIPT_TRANSACTION_TEST",
                "value": {
                    "__fixed__": "0.00002016"
                }
            },
            {
                "key": "currency.balances:None",
                "value": {
                    "__fixed__": "31.781"
                }
            },
            {
                "key": "currency.balances:PYTHON_TXN_TEST",
                "value": {
                    "__fixed__": "0.00000756"
                }
            },
            {
                "key": "currency.balances:a02c8f968b586204480877ff0723bc4a8f68fc0ff1862f19a970e3f805049dd1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a04fee73a6f2c25a9d1d2f584ad616cb8f26dab0f4c613d10cd22e1f7a172aaf",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a09c96077d036d0661f64f6ccf11e1667082f88abfe9bf24494aced074d9fb6e",
                "value": {
                    "__fixed__": "159.5352230425"
                }
            },
            {
                "key": "currency.balances:a0c6919a7d826c7cd906b714c6b862c8186d6deb4ea37637777d764e3510bbdd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a140a76ef320f135ebaeb248e9ee63b0aed558736a03d802311d9f550ebb632b",
                "value": 1
            },
            {
                "key": "currency.balances:a14d475a61222bf53cc9e75a744ec7ec6e93220cd9c2a3e5f6a67c04a4a3cb91",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a18e3d9604e8c4c97de9505f591200dbd1cfadf1624eac052b30b1008b35a314",
                "value": 1
            },
            {
                "key": "currency.balances:a1cd454766e4a4a6c1cf9b08592d72906929f81de2c3025e0a127533a0c58b1d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a1cfd31f154c8ec45937f7a73c2571d2450aea43c498ef745e8e53889cc6c21f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a1de06d715df9f70e84908ebb6e997152b88df3985a3a82fccc1b84046dbb67f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a1f54d0739caeaba1484bd3320c0e5255c7802f50c386420f2a897f357856ef7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a25051066bd6e334d176be81660c6a2c66f534dff9a8116620c7dd38ee5f4936",
                "value": 1
            },
            {
                "key": "currency.balances:a25230e4030fe9879d94a8c5e9fa7f222ba15559b2120b8e3d2eaf0ca13f2f44",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a27cb9c8c43d20eb60171ad4dff512388773fea22cdf4ae242c202114dee9df5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a2a49f140f96f962849d1dcf1c8875e5c529859ff0e034b44e0bb4907152d842",
                "value": 1
            },
            {
                "key": "currency.balances:a2a8d3a3856d903a185e4d65be73cfc7827bd1026c5724af8059f324bab116c7",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:a2d0ef5240f8c023c18e8e5d757a9997f8698bdc52dd41dd4e57ee937f29529c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a2d129e63cacc05b24eae0e7fa6ff360430bae240ed0977bcebe4b775ce51200",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a2f86028d3b1b81d16ddb1a7f4fb9ba721e71c2a268051f967cc909679ade2e4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a3217735f5670d1ce094eb5c00c5bf61e548ba574ef2bffc28df97833a47cb1b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a3660dad65a58f039f5cd525eef514cdbb7ce6e5970c9cb4741d7e56654b5e3c",
                "value": {
                    "__fixed__": "39.9"
                }
            },
            {
                "key": "currency.balances:a38b9bfdf59555411f8e94188aa04e7f3e07402afc723bf064bdc3a94dc85ec5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a395cb454b6345a1716cc539b0e13efae35063bb35f9fa8651401e130f4e84a7",
                "value": 1
            },
            {
                "key": "currency.balances:a41da8f02fd8d09fc1fcbd6962d08c1176c571c1f90ae09331090bd8a6e033f3",
                "value": 1
            },
            {
                "key": "currency.balances:a4225bf1732a21e02911b34bdfa36e4fded25df91b1a46556439d3d700ca1b3f",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:a43203c1c0a5836698d15f7515ea9483135566ad5bb63a68535a9a58081494bd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a46a6172fe2585eb83f5cef6418c2a04a73ad38f83beadb4476db4f100dc1dd4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a47554b3c35e440af07977790fb7477258586565f0c7b3b721d2d404d9cb461b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a47807ada30a4aac654e763ccc99aded21149daa5b599e0af20058dfdfa8fe8f",
                "value": {
                    "__fixed__": "9.72"
                }
            },
            {
                "key": "currency.balances:a51f164fff813def37773e288bdf2499250c488ab230d0a6f161243fa645532e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a549cf8967d5d61d263ae6572e3e6d73a91671c9d4fd1399816e13e009e6c5c1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a55a9de82f1cfdf0e4f6e54155423c99421e88485900434a11c7d870ce0949ca",
                "value": 1
            },
            {
                "key": "currency.balances:a57a27682949aafaac60520046516e68cadfe8e7d71abf73f029fee8ea74bf1a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a5ca5e00e2d695936314354c94ba11e5f9539ce396aa4411e24f74b843a78ae4",
                "value": {
                    "__fixed__": "9E+1"
                }
            },
            {
                "key": "currency.balances:a5cea247bb1de7f49bccd90171860d051558fa0a5c596421413fc7466d702653",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a5f99d3a4d6f32e7de173e8be8784ab0b905c98659ca9506e4f899134c298dac",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:a622c01628d939682febf1f3288288377bb584b4c283481855d01b5bb83a43f1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a63d8f6e3df1b72ca5bd84babf2701fff905c71f599927490aa323cda095e53a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a64bd9688035af9f247ad2d9e71c9c3a5df88a46e39d163dc41a833a03271658",
                "value": 1
            },
            {
                "key": "currency.balances:a66d3190075a6163492262463877371c8e6c3d9e60eac9e9d9aff8dee4723178",
                "value": 1
            },
            {
                "key": "currency.balances:a66f76c78eaeb1d2ebca749858779a162bff68ce26e551815fa834e5eca7de8d",
                "value": 1
            },
            {
                "key": "currency.balances:a671bf670678fb7e9709d8a120e413ac30abe3311310f50ed496ba914ad10896",
                "value": {
                    "__fixed__": "72.1579"
                }
            },
            {
                "key": "currency.balances:a757dafab58e308ce53b37e1b60177ec7eb735eb72c8ce7ba322752704027fa9",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a7afc578039624ccc93ac56770ba3800e6a6a3f56712769a745ea75eef35fa7a",
                "value": 1
            },
            {
                "key": "currency.balances:a7cd934b8731e4d56dd106daed0fc748e637970e2aea9974b2a4c8ba9c78e912",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a7dee1290d4030b6e48f383094299598aeb01f6022998cc1f02af75ed6ec86dd",
                "value": 1
            },
            {
                "key": "currency.balances:a7dfd0ec72dce53ad4825d5bc2fd98af6624bd088b0602ac63991cc721a5fddf",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a81dc3eb9a7b8a3fd314de4f4515436705459adf3117eace7807e73d0073005f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a82efa2a750efe89daae17077b250e44568e8b0eea97ac69f9f75dc79fae8be8",
                "value": 1
            },
            {
                "key": "currency.balances:a8506f958234d9ca83ac0b6a61f65bc44d6c99bd8bcf3123f41999843a3b8000",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a862870458497355863c5ce81a29d4e111e09bbb4a1963a73e9041b19381816a",
                "value": {
                    "__fixed__": "28.013457040000002"
                }
            },
            {
                "key": "currency.balances:a8b600224fccc9969d2481f0238eb31ca3c07f77d08bbb4f9fcb8da7d01c5055",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a8b6d2b3c227167ae36024445e70063bcf645a79418b39b7e5267f6e03366527",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a8e8825826cef22a40eb6524e63ebf329ddabcbf76ca26033325af0e137bc13d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a93f66e0eb6cc7c76dbb4e12b2d7ea53da985e0f25fdf9f9f1084bb91dad646a",
                "value": {
                    "__fixed__": "16.977852749999997"
                }
            },
            {
                "key": "currency.balances:a96b1a838a31024f79656e08e377092ce293172fb7b564aa32538f6d9123c2f1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a9a099b581ea57edeb74cee7004230bba576b9044cfd7da0286502d0414bbfba",
                "value": 1
            },
            {
                "key": "currency.balances:a9b066fb877a536fdf79ad189476eab670d9b93fbb568b7842a2a616dd45bd91",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:a9b290de332bcdb147473d7c71a59a4186b1b93a77727b154d7b99c07366ce6b",
                "value": {
                    "__fixed__": "0.78"
                }
            },
            {
                "key": "currency.balances:a9b7c4088713c23ce9dbda969f3208691dea1be3aab01e6be8b82422579cddc4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:aa357b666484257c7a2f1f299a43a4fca8d2a32a76b378b1809218c63f30e6d8",
                "value": 1
            },
            {
                "key": "currency.balances:aa5584760b7d622ae056620467a0925b2c25f24e12b50c67e1395f9d7e88bc14",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:aa58d011481b169f54eb3c1966eec1b37718f5dcbda1d0132fa3849fbfe00666",
                "value": 1
            },
            {
                "key": "currency.balances:aa6d42809ea13533d34a47f6d3a1bff753c68c749c9f1ee1f12cbb6b198861cf",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:aa82ed8ead8f0d49298ad959f6982222adc00e2a55e87980b2460d4c403fa4da",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:aa8399c951b7d9e4ccd23d01524472ef6a2ecffcf5cc24f9ed0e3e34bfd79426",
                "value": {
                    "__fixed__": "1.44"
                }
            },
            {
                "key": "currency.balances:aaaec4985bb414b7848bdcaa129d247c411cfa18df0346d91a78ed76f1560b2a",
                "value": 1
            },
            {
                "key": "currency.balances:aad71603d54e85a1ae390a5474d324dceb8e01909f1295df2abd1218c1023b07",
                "value": 1
            },
            {
                "key": "currency.balances:ab600b6a2f20fd09c29bb88ca1174a9300d7d8073ef75b1bc38db5b5ebea570f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ab89a353b144ef3c2f8e8b50f161aeac4d0f2757b281aa9cf32b84724b257d73",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:ab8b1935980ef84f2fb7c129c621ef4e5a66c61dbb4f90a2e3b71eab01f889df",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ac12fa5c0566b96207de83af5f4ae4602784c95cf8937e9aaf92836aeaf2eb01",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:ac365e28c88420c7e4103fdb66dfe4c27126f3553f35b8783f7a106ea296fb3c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ac91d2e7ab79009e8cb9cb8b8367e3f7e9c0fa55b2c971eee4f78e46ca545829",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ad490b35065050b7b1287987764000f7780773962d1ede96b13cdf4864d3ec56",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ad6fd48acf453f1405163f7ed1bccd71fa762c82f2ef8da968f7eb738bb05f07",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ae0eb025e94f0d6bc733646d962222eebbe09267dd248fc82075e3b00bc34488",
                "value": {
                    "__fixed__": "752"
                }
            },
            {
                "key": "currency.balances:ae1b1dc2055d656ea4c8f4d30d093b68d3ce67beb6e40feb4cb6dbc5ba14d38c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ae31e0e41530124a4dda0a2acfcdca43b77f5a790f86480da533ca5e4b201d49",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ae7ce55f75b6060c6515f5a7b0aaf9dd1da6a37e1e83704353a87489840f7a62",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:aeebf2c5fb931936a9e788336b20c716c4d3ab5800bba8cb85970f5115c02bd1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:aef653306ebf9704f6eeb4bfe005a27bcab58e2af9c0419c5bfb9fbff3d79397",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:af2744ec24a5fa0511903e6a4252c58423ca841f483cbe8c2a152b1768bb7678",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:af303ee1896725cc389c9096f056424d7dd518c5477f90d24a94c1862680a63b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:af5ad16605beefcde3a0923ba60de3993e86169ee1f159284708614375cef689",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:anywhere",
                "value": 1
            },
            {
                "key": "currency.balances:b02b8086c951fbdccda5511109bb23875560bff70d82bc6aa1217a2803997915",
                "value": 1
            },
            {
                "key": "currency.balances:b03510ace44734e4687e0dfcb5e1a9ce1413fcd8234273709cb94323c044fe16",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b041ef4bf7247a539ace86772428d0fd8ba68419f3f55291968a2611e7fa08b4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b0a598938cb4905529bae280d9a75a591f237d92951aa5df27abaa3847d2d025",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b0d142feb20d8328c78a5d5b3d45599d2e6075c8908511d4ef1fc9cadf31ed80",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:b1ba7a581fa08e9cc927c0ba4be7ddd27d3f7cd101b2edeede25fffc395e56df",
                "value": 1
            },
            {
                "key": "currency.balances:b1ef75e5ffffb058a2a4a5b121d2acb05ea70f618fdf2d73957fe8a468d0f330",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:b213b5d7fdccc701ea90e4b09bd1651325b33fd53de5bf753c809e736fb24099",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b23ac476c2d643b46b3d593ae655b434272d186e79ac959c71fe9c3b6972613b",
                "value": {
                    "__fixed__": "1.78"
                }
            },
            {
                "key": "currency.balances:b27a12fe7022691ba8cfdb2d554091698f7c288caa6f67c535785cad7ab1c118",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b28245c21b9f391fe45a5fca1c633ffad5a061e97bbd47460e94aa297e85499c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b29c498646c940f2354ca95f886b1877b05cb7e7bc9f6f165284f212b3c0271f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b2adaf4baaebcd734a29f27f4f0451fe2fa513bd2ec1569fd036cc89667f5985",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:b2fc3d738e626272e69b92586058bb30a311a09abc08c068ff75ac98aaf67aef",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b457b5e5f7e96b152bc7e03fa5590ea412d81fd66d7dfa6a997cb9e6607aecae",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:b4c4ef1f133217db5a8238624b2b00b1e77dcd41a04d6d0538ec7830c0f0a633",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b5327afb9af39c6f0fc6ac06a2f1f5bfa17416a99e61b4a56a4e481959c22885",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b545247f8b6104e6fade3669541b8559299ddc43086b7485e71bd1adf9c316ed",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b5a155c321720599dad4fe894f925d5f3d9069f7cdd8c2daae18214075517904",
                "value": 1
            },
            {
                "key": "currency.balances:b5a8ab90b02b158daac5784f89bc94d06d0a96e5f38e3bfa9a85e9f3e58211d1",
                "value": {
                    "__fixed__": "2.2637136998500000002"
                }
            },
            {
                "key": "currency.balances:b5f0128d4d650bd6cc69ab7419755e132d632787b5eb60013934a8400afadc8d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b61d8dc59b47cf3e1bfe2d129661eb4fd83015452d5f15fe740e20e81d5b5137",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:b6366590b2b7d8ce02738723d67e342f032bec2b5019e670ccad41d239c273a6",
                "value": 1
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb980",
                "value": {
                    "__fixed__": "5"
                }
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb981",
                "value": {
                    "__fixed__": "7.3E+2"
                }
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d",
                "value": {
                    "__fixed__": "15554.092"
                }
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d:con_multi12345",
                "value": {
                    "__fixed__": "9E+11"
                }
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d:con_multisend",
                "value": {
                    "__fixed__": "899999987109.002"
                }
            },
            {
                "key": "currency.balances:b6cd8f99c2aead772e7e4a13b0427f25ee107e56ef2390331f662a135bea6b16",
                "value": 1
            },
            {
                "key": "currency.balances:b6f2a9ef4417bc607b06718aa9e2e3f817a60c38f76460566119259217668c4b",
                "value": 1
            },
            {
                "key": "currency.balances:b71c27c3872bf8444892e4b8c6c79d9243c6c809cd9117a9588416b6bcaf9462",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b722ba4dcf0a6c4444d0e032513fb150e85d6c1219019f8541403290cbd2e91f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b72392169f5f8c62cc72b79b22e86d26031f9eb5b3cb3d60dd8650e918fe611f",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:b73737f1c45e25363e380f98de848c92e90180c593d9653594464323c4354c8d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b7703feb95597e270f6751f37b57df7799b66fa9fc4cd30913e1d938558661d6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b818b3578ab37c02a35f95af4c8b3189074468fa6b48508822754d8f979682ac",
                "value": 1
            },
            {
                "key": "currency.balances:b8283bce65f983edb3628c320590852afa3eb075531bb7f8da778e3cca53341f",
                "value": 1
            },
            {
                "key": "currency.balances:b82f350dccec3ee8d9c112f97eea445fe4fad8a895c8d8d05bc31460a49d23a6",
                "value": 1
            },
            {
                "key": "currency.balances:b837124b7cbe977e8a4dce74b2b24a2634c3dd01797bd1baa4369c296b2a3881",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:b853b90e610dce2e79ec4abe7881c8ae7d6fc0dd556050384810c31c123bf13f",
                "value": 1
            },
            {
                "key": "currency.balances:b8ba6610d2599f0efd6cc6c531bf8e13d03bb57b17b42142df8ff943b3503272",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b93690aa8d75abaf76ec35be7d4406ee136ae7600d0ac98939a947653fd2577b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b93d835bfd21818a26700b5ed03f9a1548a77d40d01fcf548d1f9a9b00780140",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b9477b4780c97d18683e5123424e3e6cc554aabea29f79b60d2a142765781415",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:b94ce8b9fc6e7c04536d4de835e5f60065cd57cac56870705bd62e36b3210f2e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b9944116f84c109eb1887ef012ea989636df17ff09fd47117f54b86fcb055907",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b9c624855c720cf32a94b2f3b252523cea52b5c2051a1a8433314dcd2ea04092",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b9d118d30a64bc19388396a9c76457cea001786e38bcedf553e4c8b55cee3557",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:b9d74f2fce1a9e5496f40737ea8feb05293b0a660bd54a05cdc70d6eaf59329f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:baaa1675f7e9d5d461e1efb9bf97284d3d32d1d1eeaa52faa62d389d38f96c82",
                "value": 1
            },
            {
                "key": "currency.balances:bab2169cf4219b64b256a66d06d195a916ace4a0760208421badca933f841e55",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:babe5f7c737a4aa104ad80d757ce2a19f85676953d880573298a8607352355ad",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:bbb138a7088fa1b70a09cecf8f3c6146dba0e39f9de083bf4e4590e32b23a186",
                "value": 1
            },
            {
                "key": "currency.balances:bbc84ef00add60c0adedf3e30d8f5dd1aba1b2f615351752c6e2300438089b0d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:bc715a47ef98fe18cd218db247da82f8bb55d07cb999cb46a8d8262c96499f29",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:bc7234aa2ef95186c40894dfa180a44423cf952a32d0481c16777b2123510c23",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:bc8d99cef4aeb4366dac0af5f6c0f187df36a8fafb6029935195acb3c9aa7d8b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:bc917d6bf4c38bfbb93ddbac3af044645207dc2b10ef5c79821c4477d6ed2cfc",
                "value": 1
            },
            {
                "key": "currency.balances:bd3526e702815d5215fdecdf264be3dfa599c944c2b641ae0d9182326eed42ee",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:bd665e881ac1db8761fd15147574a45c07f51d531870bf28110092f3c2fe006c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:bd78e1ab41f214259239cc6d3430d8cd8d0c53721f3868acd7b4b96feec69d04",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:be007fad594672fbc5a928e79167ee4d96743504fbbd3f544add5e852d72b305",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:be033abce4b62ac96366bc16b1a5bdc35404acffbbb1e347046381d08c34d291",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "currency.balances:be033abce4b62ac96366bc16b1a5bdc35404acffbbb1e347046381d08c34d295",
                "value": {
                    "__fixed__": "248.8212"
                }
            },
            {
                "key": "currency.balances:be055b6021a5536761981837db1fe32ff501dbb873bf1e1a0d1fd8c655e6d243",
                "value": {
                    "__fixed__": "49.72"
                }
            },
            {
                "key": "currency.balances:be273facd29194526245292a166f0189f428288fd049b5c6f32d03dc869bea21",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:be27b7fbefa77d500db8419b1b2f13011f85d253cafd052eab02ee107613799a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:bea0ea30705cd5bb5fc73f128db4165736bbab3b8962ae8cd4a7651d0e63b216",
                "value": {
                    "__fixed__": "2.5"
                }
            },
            {
                "key": "currency.balances:bf33e2b93f32209629576ad6142078ec6eb4ba42a1cc30b834be0e7d3b5c9629",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:bf6b18bdfc38181c38ffb7d42d09cd1e13100bb2e11adf36bd816ca7658c91e0",
                "value": 1
            },
            {
                "key": "currency.balances:bfd7a0df8f3ecb74c22e601dd7928f275918a3d1c86eab169858d0db41f38dc9",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:burn",
                "value": {
                    "__fixed__": "4.4444"
                }
            },
            {
                "key": "currency.balances:c039138f9a836bb7eaadfedf74f5fa1a0914eed21d712cb3b5a28957d4778797",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c03983fc1bd1927ae6253e5b1c777e3b5b1cd764fe65b5aba51c997163e987ae",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c0476b987deee6d9d5eddbae604bf80fc442066f32954ef7120549ff4e51dfd9",
                "value": {
                    "__fixed__": "6.78"
                }
            },
            {
                "key": "currency.balances:c0476b987deee6d9d5eddbae604bf80fc442066f32954ef7120549ff4e51dfd9:burn",
                "value": 41
            },
            {
                "key": "currency.balances:c0476b987deee6d9d5eddbae604bf80fc442066f32954ef7120549ff4e51dfd9:con_prueba1",
                "value": 3
            },
            {
                "key": "currency.balances:c0476b987deee6d9d5eddbae604bf80fc442066f32954ef7120549ff4e51dfd9:con_prueba3",
                "value": {
                    "__fixed__": "131"
                }
            },
            {
                "key": "currency.balances:c0a5b67246d2930f3f45b8c50bc8a358123f33e77fa0125d2f4b60d75e0d216a",
                "value": 1
            },
            {
                "key": "currency.balances:c0a6aada8581976060d83db7f5295a8200b8506c8fd503ea84596f90a4dded4f",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:c0cd6761879fc21539c24e7249e1000e4ff80c0b2e5a9e7df486876636c2394e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c0dbce15a98248e2c5768d45e699377725b3940d2adcb70cbda9d52da8c70c2a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c1211c2b548456c8fad432e880548daf2181a8d15ba59e41c8471d544c1351df",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c14108310ca2532e51d67adc405fd79943bcd78eecf92ead37563023fe521e9e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c170b1f85dc23033307bbf0d182a6dd4e1a8979cd4d4c07f0bc462076538ce9d",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:c197af46e6bf1f944dd76bb1330fa51aa422fd10bf058a379a2ee4d18f054768",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c1acc19b7e0832d3ad2ed4ea5b8214433743533fcd7f10504d3b6f8a018f5ce6",
                "value": {
                    "__fixed__": "104.74"
                }
            },
            {
                "key": "currency.balances:c1ae587308612f65005cbbe47565645ff9d83350ce344a9d454641630c9d482a",
                "value": {
                    "__fixed__": "0.3802"
                }
            },
            {
                "key": "currency.balances:c26f2626b6684f5fd1b440c3c5dd209206bc0b2ade7c717a997e18ee3a118131",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c274fe3ccd970aa44de391808607c1cf4c38673c339be6daaf23b9d7022e024e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c2a2f03a279f97de648477b4ed6bccb54d682f2c679cdd818ec4c4327465add1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c346f1f821984352af3e86bc0bf489c7c643e8c49abba715af8ebe0c0719301b",
                "value": 1
            },
            {
                "key": "currency.balances:c3557c4ef2c59bb0a7c771e4a0f9594dba6dd95b59b470ad26070f8cb4124af8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c38124cc9dc6b453f7e19c858528e43942700f4be8f07e98bb21d9222669c621",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c38afe436bca21189efec5a0357b5075c2dddb5cf4f8890d7ddb7a43e2863672",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c3a8a1e19ec7384ae7f07b516ef0b1cd1f64839200f03785a06e0557e533b84a",
                "value": 1
            },
            {
                "key": "currency.balances:c5424fa210032f4169b4dac10fa44c8e58d37b5491637a5e704454c023c6f933",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c54a4a8b5c561c683399afaf6c888da91a5d4dbc92222c8a3e96d5b883d914ae",
                "value": {
                    "__fixed__": "81.56"
                }
            },
            {
                "key": "currency.balances:c58d04dfd0412178f14d2885ac32912d131c3bf2ebfaf449dfccf49d5a9118c4",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:c638638ca186f35112bb7a350791a196068d9343e5ef7ab463400e840c889592",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c6591e088aba474499e624ad2ea9bb99d7527be6b575743f45b786c5f32780d7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c69d6c63c13a3e21984e700a5b96f88e2485723cffbafbb0ac319f0c4078383c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c6ef7e45100272acaf8fc4d817071c74b47fe8f5c94e8f49140b6b505e4f7c07",
                "value": 1
            },
            {
                "key": "currency.balances:c71389d2d3461a029d9a655f8d1026902cea3ca58f02807a5fbf995615a5d9d3",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:c7bf705ed76f15fcd166b2e8bade6b11b62861b7442457717747ed862ec8d49a",
                "value": 1
            },
            {
                "key": "currency.balances:c7c35fcce46edd5ce7507e7ada3b5ef9f83a8d989cb9b101ee348659e6f6eed2",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:c7e75cb47713e0972c01a9d32924ff3bca910e91227d9b08212c34204ac90cce",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c7f0f16169e661ce4c468800fe6be24f6988463089df2089ba66ec6a0e2c538a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c8103f212e4b556afdf1e3873192f22d1c90cfcfe8a6dbe62b116c2dc9613785",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:c84054155b9a0c904ade6e2dad4786c4b6e9593d682345a3a75c166716a76a93",
                "value": 1
            },
            {
                "key": "currency.balances:c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4",
                "value": {
                    "__fixed__": "102.501"
                }
            },
            {
                "key": "currency.balances:c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4:con_presale_dato",
                "value": 1
            },
            {
                "key": "currency.balances:c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4:con_presale_dato1",
                "value": 1
            },
            {
                "key": "currency.balances:c86d320ff5b6165b0bde4dbca7c6c25f36243630dc3325a2738bf99c59801f4f",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:c8725f0f806976ffd0ccfd589739265d81397f06c61ddb3b8425907877ff28de",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c87afa7a6efdee26746e80b0deca090d3d99bb4812e03f9b3143a4ff52a4c94a",
                "value": 1
            },
            {
                "key": "currency.balances:c8897e1724b70aa9d2ca28f40a1a37e67d5603033bad69c2b618ea9da3fc1a27",
                "value": 1
            },
            {
                "key": "currency.balances:c8a8e1396a7b84da9f440184d43d25e24c23849cb90628bdaccf315c230bf10d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c8c3147d79afb8605010c5aea8e9a483fb3bace8ddc043317f26a0f6d64e9bc8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:c8d95c0a0ed58aef0075f0b7c10123a0cde8479ecdfbf128a36c389a89872805",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ca4ebdf557eae168bc5cabc85b98f1f43a4131faab877eef09b429e02d5175e5",
                "value": {
                    "__fixed__": "45527.2034"
                }
            },
            {
                "key": "currency.balances:ca96d0610facce8f5e48561e727f63662cdb0b53bbb579cf4b83a90217c18dbc",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ca9aeee192854dc55a6d3e211bf858cc3ecd41e8b86a55c07740ece29f349597",
                "value": {
                    "__fixed__": "100000.06000252"
                }
            },
            {
                "key": "currency.balances:caf56af5d62052ffe5265274d3cbe1fae7c07d26fa89af96fcbbdb138e2345da",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cbd04221bdf5b8378470ef2245ce7da979b1c8bbc10005e0617d4feda80a03fd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cc6784de4f17f7e9cbc79c1bcf09c6f31af721f2fd71ffdb67222d40044621d6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cc81ca9eef4ecb6b87f55dcffd939a44b597fb82f43744a832aa385c84e40c95",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:ccb09fd90dbe430be4cdb0103c239446fe2cbbbcde6277dd7a59bcbfc76ffa50",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ccba65d07059aff316ad8b9a0abaacf35d2febed4eccf33798f55c2c92b854bf",
                "value": 1
            },
            {
                "key": "currency.balances:ccfab75e82f504cb550999ef0f4921cdb6409d6dd80046ca5f223401684afa9c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cd127d11374f108989ee2d275ca841947ee53462a38acca3053b101722164254",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cd1b495f40850ff3056539e11d63bcaa70861dc5e0e0edffb2306f83637f1024",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cd2b84a0dd9b1ba49378083e8dbd4ebec1db85617bf206811cf90fa846258f14",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cd503ef1aef4f046556896f8d1ec89286c642c6847804b7d6136990e2effa555",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cd85dc5319271ccc2a6a3bd10a40b4f14e34b3e0cca9a8900cd9401cd8689f78",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:cd9e4a66b51fc8b7a84fa0b8bd9f774d7dafc8bcf6cac298d648497e0d3f4ea6",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:cda8a98844fecf682151116b78d12acb9d11662c2acc66df02977ebd18bd0621",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cdb5e9c7817b8a8248584cff27a64b424600dd964a34a77f73eb3d1ff4ebf250",
                "value": 1
            },
            {
                "key": "currency.balances:cdcb4aa7c77b72de055938dc05344e23dc43dfbcd2cc026394821da8e2683105",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ce0d9d7f6d08a197b097ceffd173fe8371273c6ec1a33e17527a941cb2d7b396",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:ce30cd579f31f112996a7b7bb61c719a4a6b0e89ae3f668a9251cbe1c0d8c05a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ce54a886c69799763b067e2495f0b919b72eda81028d43a2718b1196df8db292",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ce89c1b44e5b6ef90ccd58e7c1af6e280725777150819d6dceac87d2306645e9",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ce924a8bc4ced8a2b9cef2e2cf7709b1a87f87bd84a9d645de96ec46a458a6c9",
                "value": {
                    "__fixed__": "751.8"
                }
            },
            {
                "key": "currency.balances:ce943adce77d1be398afb5d30645ecefb65ae2374289b5b5d6500e8ed807241f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cecdf953a3a32c0a4b68bba92abd69cd4f5aa2775f9d8a743a220d2eb17a3b59",
                "value": {
                    "__fixed__": "9.72"
                }
            },
            {
                "key": "currency.balances:cedb8e584caa18acabe5f03a44c7d68e46d19899c64e4d8850c19b0e53a76bb3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:cf0a5b7d92c4c4766886fd9c2fa24c2dc89e135733a52d3ea5d0e3cea98702e4",
                "value": 1
            },
            {
                "key": "currency.balances:cf726cb470a740ebd8c5d20d8ae112191aa2e3098f5c9ace262c9b6e1e6b7b9c",
                "value": {
                    "__fixed__": "10946.896"
                }
            },
            {
                "key": "currency.balances:cf8219f0e6f07692219a2b7fbbbfaaae406ff892dbaf3d4da7c1339fcc341d54",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:con_dex_pairs",
                "value": {
                    "__fixed__": "47.102000000230291939558750930651"
                }
            },
            {
                "key": "currency.balances:con_dex_pairs2",
                "value": {
                    "__fixed__": "112"
                }
            },
            {
                "key": "currency.balances:con_dex_pairs_n",
                "value": {
                    "__fixed__": "1391.954812477973657006472248124721"
                }
            },
            {
                "key": "currency.balances:con_dex_router_n",
                "value": 1
            },
            {
                "key": "currency.balances:con_dextest_001",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "currency.balances:con_dextest_002",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "currency.balances:con_dextest_003",
                "value": {
                    "__fixed__": "0.001000011496015569361148261145"
                }
            },
            {
                "key": "currency.balances:con_dextest_004",
                "value": {
                    "__fixed__": "1.01"
                }
            },
            {
                "key": "currency.balances:con_dextest_005",
                "value": {
                    "__fixed__": "6.171458316281627620543E-8"
                }
            },
            {
                "key": "currency.balances:con_dextest_006",
                "value": {
                    "__fixed__": "1.85"
                }
            },
            {
                "key": "currency.balances:con_dice2",
                "value": {
                    "__fixed__": "39.1"
                }
            },
            {
                "key": "currency.balances:con_dice3",
                "value": {
                    "__fixed__": "4.9"
                }
            },
            {
                "key": "currency.balances:con_dice4",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "currency.balances:con_dice5",
                "value": {
                    "__fixed__": "5"
                }
            },
            {
                "key": "currency.balances:con_dice6",
                "value": {
                    "__fixed__": "11.9"
                }
            },
            {
                "key": "currency.balances:con_pixel_frames_auction_v0_6_1",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:con_pixel_frames_auction_v0_8_2",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:con_presale_foam",
                "value": 1
            },
            {
                "key": "currency.balances:con_presale_foams",
                "value": 0
            },
            {
                "key": "currency.balances:con_s1",
                "value": 30
            },
            {
                "key": "currency.balances:con_s2",
                "value": {
                    "__fixed__": "0.08"
                }
            },
            {
                "key": "currency.balances:con_s3",
                "value": 2
            },
            {
                "key": "currency.balances:con_s4",
                "value": {
                    "__fixed__": "0.06"
                }
            },
            {
                "key": "currency.balances:con_s5",
                "value": {
                    "__fixed__": "0.04"
                }
            },
            {
                "key": "currency.balances:con_staking_1",
                "value": 10
            },
            {
                "key": "currency.balances:con_staking_2",
                "value": {
                    "__fixed__": "15.527241575943390897680311109217"
                }
            },
            {
                "key": "currency.balances:con_x00005",
                "value": 2
            },
            {
                "key": "currency.balances:con_x00006",
                "value": 1
            },
            {
                "key": "currency.balances:con_x00007",
                "value": 1
            },
            {
                "key": "currency.balances:con_x00008",
                "value": {
                    "__fixed__": "-0"
                }
            },
            {
                "key": "currency.balances:con_x00009",
                "value": {
                    "__fixed__": "2"
                }
            },
            {
                "key": "currency.balances:con_x00011",
                "value": {
                    "__fixed__": "12"
                }
            },
            {
                "key": "currency.balances:con_x7",
                "value": 30
            },
            {
                "key": "currency.balances:con_x8",
                "value": 30
            },
            {
                "key": "currency.balances:con_x9",
                "value": {
                    "__fixed__": "0.6"
                }
            },
            {
                "key": "currency.balances:con_xl2",
                "value": 30
            },
            {
                "key": "currency.balances:con_xl3",
                "value": 30
            },
            {
                "key": "currency.balances:con_xl4",
                "value": 30
            },
            {
                "key": "currency.balances:d0069430105d910ab412fb177f490cc0d646c844b6198148029fc24f6d21e57b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d00a45bbbd36ce70addb97c17c9413f082f89389f6783c7ffe6bdb516ff8a023",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d0261c7789363ad7ce9ae5141e9a741d9a142328a416bb87c9190e3bb22b658a",
                "value": {
                    "__fixed__": "19.74"
                }
            },
            {
                "key": "currency.balances:d0362296b1cec350045e6409829cba364ebc79b9495955b84c2ab37e07ee8376",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:d04d2c981075523881a48c770943cb239032adaeda98bc31c65640df910f8cfd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d07132a2238c9b274f8deca42d6077d701c378bf96e18c54c6cf43c7a91ff50a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d09ef2fe4e29ebd56db577bead20b69aeced318bb0233c8c6c0f1e3065c3878a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d1492cf0a03be4648171c616e23cd384a0755ebd0b0275885ead920c1e2f47c1",
                "value": {
                    "__fixed__": "8.4412"
                }
            },
            {
                "key": "currency.balances:d19f67b14cd82e0ce82d9fb8f800e15f6042d06f95ec14ba49c5b130230ca94e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d1bd93045162f7afff14d1f66d82221139ebc433be12e361b58344df3ae35288",
                "value": 1
            },
            {
                "key": "currency.balances:d1c0a4b76745d701761896b24836847c2158fef73f87dedce0d588eb58c9f76a",
                "value": 1
            },
            {
                "key": "currency.balances:d1c33e20f859c404d5c9956d1d7e9706ed33ae3c91bf774f7dd3099164851825",
                "value": 1
            },
            {
                "key": "currency.balances:d21fc634c69336fb0b6b30decc3ed56cbb0620263be20a450662d813b76617e6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d2537e085ac5fe455e32861a4a766f6f09a521cb103166acfeafa0dd58e0d8ef",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d2d057fdec22300b9606ccabf636852c6116f04e2b0678788d0eb3cac19d6a4a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d302728d9ab3862673ef30593414fa1af6fe5a830275496125c2aba8b880218c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d3065270fcadb9eb08ef067f70fd39b6b9f397b781dd8f9971d535f2f6ebb1aa",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:d373dbedf51bff99d7b6f82c9d6520338aa8a3194ce6109bf49daba6303f0917",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d3993f0dbfa0a7ffe019ea5c63bb887f72d9730964a71e9ea0fe5bf76301c7f3",
                "value": {
                    "__fixed__": "0.3802"
                }
            },
            {
                "key": "currency.balances:d3d6c2de27382d05e147d58a790fa2b766e8abde680cfa32cdb1366b51808c27",
                "value": 1
            },
            {
                "key": "currency.balances:d401dfc0ca591362cc74f67fd89d5a294409931fead7365f8a806c3d9b81d271",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:d435976bfa637d792527c1a0fbca94b6b80fdb31eb819956291612447fabb82c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d45dca4d83fc19ca36023d68b033e6520fa010fbd763543f616705068224d43a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d470acad5b6d8396d119324bf7f4127ce21605979e827423afc9120c7b40a13f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d4b06d6c108b38624dc2749f398ff3c54fba78c0e4ca621cf46a97f5111dcea8",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:d4b247127a8e52285c2a38e0a7f2cf1787307c5b873305686c95a02234f3b4c4",
                "value": 1
            },
            {
                "key": "currency.balances:d4cd7a8a34d231cde06e9ec0133006113398caecacc42ad2bbaa14159e325bcd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d4dc72d26c6b32d75015127cd0af34f8f9be41d0154311deffc67a512e6d0606",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d4e8a1c6e7f472d72ebd468d5aae90582426597ffb0c9965fa2c03783dc0934c",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:d4f51477c4792c0351d3e4db3ddb09d6f9acd9013cdcd99a19ab6657e6c189a5",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:d4f8b494f168db75dfe8c1ffa1972ef4bb25e5498d3e6d364c62473bd9cde5da",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d643964e8c00151d7fec669f3493c3b50cef23297922d8918ac2c30ac5db1e5d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d64910b048759a11123441851c3e19f2e9019a338cc2a6b2633b0078a673c4ee",
                "value": {
                    "__fixed__": "1001.92"
                }
            },
            {
                "key": "currency.balances:d668236778ee8e5558c17b0eef3cc53c7bc01503e430c71df5918441f87d4f56",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d6b5855803fae7d7c2a819f7a63b9eb7942282c43882b8777b123386e5705c55",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d6fc4eba4b62050493447dede2e6bc4e26946423454fafbcd35b70653d2b1eb8",
                "value": 1
            },
            {
                "key": "currency.balances:d70858f07251ed349b3ae4c15b179e6c61a02c4d147a6c84773b3d0aed88bb65",
                "value": 1
            },
            {
                "key": "currency.balances:d719d6055f7c649aa19fd6a0ac53968cc0547825ec7d5b3056e02c95926abc11",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d71fa8a431240ce123cb0a9f224a3179d9a3989bde6482db431c64d3c9f83d7e",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:d7230203679bf54e4182c599998b2130cf9f4cc00e24da70a3d609dd8ad7cfed",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d72b501f61f8c60cb2f143fda1d99beb13e5322dc022c65ec1d5141127bc48a0",
                "value": 1
            },
            {
                "key": "currency.balances:d75fabe94182d81a2930b1ee153a20f42cfc748803be2537629f69cc78c57017",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:d76977e8733bb4fdcbaf1d515349df23dbc827b605f3c134caccfb8374105bc4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d7afa44804d2b52c51939b08b9e46d45924cf6ce555dbb7972b7622e247cfa9b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d7ca62ac28c4cc7f9b952ce1b2dae84d75460a06ec8bc799346f952bed8832ed",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d7cbaecacc767fdfad371f866c569b42a349f148c7ae09e478080e776f96cf92",
                "value": 1
            },
            {
                "key": "currency.balances:d7ee0ab871490a66ec9961201a352b8736e8e1db619397deed9760c8b9886b6e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d8080cd1ba3216d6d5f7957eabbb78f79aedaeecff5d35615f52cf42d7e5e0cd",
                "value": 1
            },
            {
                "key": "currency.balances:d81d066d1d6911c6bc2ae986a463812252bf4ee7ac4e3e9a35bf82070b1a5ded",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d847fa66c1b202aa72a5f47de1cad5a5a33b6022eb4513648ba9a96ef79d83d6",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:d8873b44c120f02a0589e468f8a9694dbbe2dc59d46744ef9fa57b57e0bf2057",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d8c2dc24d88bfc8bf5ac9c8575a87a4f5d5cd35874ca80a3904661c2431b3074",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:d91bd7259e2c3880ff23cc3283d94fe83602c5e93ffad14a1553dd984ca21b64",
                "value": 1
            },
            {
                "key": "currency.balances:d96afcfcbb9d656b0e75b544b90acd2cb7a48378279c21d55aeb554d99a79e4d",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:d99d356fe2d208d401c0fa6c0b48c1cc5d56d3a75aae1234d0fa5b94b1eca690",
                "value": {
                    "__fixed__": "0.1001"
                }
            },
            {
                "key": "currency.balances:d9c804e65f7d97df6c623189048ed79b7fa0a311eeb60f0ac9eb07d1c6c0e1c6",
                "value": 1
            },
            {
                "key": "currency.balances:da143979858839490c16479bcaf2331fc894ee1fdeaa74c36fff23073b528ca5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:da6f392de2829712cb0db80593f5fe39d3a3205855d4f62c72510f4d8f346ecd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:da79173533b31ec3372099689e58d13b7ac5656acf6ee95ed50f3376d3e92871",
                "value": 1
            },
            {
                "key": "currency.balances:daff08f34b3bb9596183fee147c4fdb028f4093375e252fdee0f2090251c12ae",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:dao",
                "value": {
                    "__fixed__": "28333333.3"
                }
            },
            {
                "key": "currency.balances:db344ed7c43ce1970fcc0d656e9d47718f90f8947c1517667f768b1c3b432e10",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:db4aea82c9238a3153b030418436ff69a19e455e58ac1239f0ac39a9d6147e0c",
                "value": {
                    "__fixed__": "0.78"
                }
            },
            {
                "key": "currency.balances:db933846c6493282605a3a47ab70f518a4865301ba45e71106f29b50d654d8ff",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:db93cf7aacdc565236117de38c2cb2af16cdadd41047a4d8e3f01e2046828c69",
                "value": 1
            },
            {
                "key": "currency.balances:dbeb65465f0008e44628a04bbba8b06ddade5082c96ae744513744bf186f1332",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:dc713dd0be95c670c1ba8dba60067b93bd6e8f845a12748e8623e8ba6792a3be",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:dc7f63ee4429398fd9c866bee7637812b4764560e0aeb3546c9533f738713b0f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:dcc7b2b2ebd52d9e9c3bbfc0f2aac62fec786b15858d8d9c3c571f964bf134a4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:dcdeb11527b2469e1d6b53c19195c6f073ac2ac8e9fefc212b35cb359b12a5a6",
                "value": 1
            },
            {
                "key": "currency.balances:dcf8eddc2f215eab9496069c5af56f695533f30b1f86009112f6c9f206b4b222",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:dd0d8a6b62c884e523f2634089307e7b76584aa4ac176afed7522e82e792849a",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:dd302e35427beeb5180ff15d1ae2cc94022bf3472789201177c7a88207427863",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:dd86e88e07ae95bd1d64fb801ad4b001030a914e7a31e82fba2786c768b4ffb1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ddd326fddb5d1677595311f298b744a4e9f415b577ac179a6afbf38483dc0791",
                "value": 5
            },
            {
                "key": "currency.balances:ddff1fdaa645c5e9f0292cba6f4c1a1cedea4a0fc6a877984aa897fbfaec53d6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:def2437853dfdc92216b36e06eb54a69a36b7dd4551650693fe83144924a9112",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:defcffaa0c2603d9722c925652e17bb1f7ba7acf8e9cc7967c60e2e8732329a7",
                "value": 1
            },
            {
                "key": "currency.balances:df2f23997d5415d17934f3bb5a1ec2b0f25b47a4aa58b47e42341f03d1c72242",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:dfa868b9e750119f4c0bc87e96292615a77ebfe7db53a54ad4283d6225eb4fe6",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:dfb2bbbbf7e24a30217cb1ed0e4696bbc7db6da719b5dfa0415f57df4aebc395",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:dfd374c2a6519c3031f5491ee602f30026e11fe1ad48b8db00a19b0e43ab0c2c",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                "value": {
                    "__fixed__": "4712.5055"
                }
            },
            {
                "key": "currency.balances:dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6:con_dex_router_n",
                "value": 1111
            },
            {
                "key": "currency.balances:e07cb805155e95d820146451bf9724cf3e944a8a66169c5fc97b624457f8462d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e0be0b4acf1390904e3e971a906ac59a590221825b701837467d97cd243b19ea",
                "value": {
                    "__fixed__": "28.296421249999998"
                }
            },
            {
                "key": "currency.balances:e0c405adfb8c86724c858501978c1b1482abadf792c88621790ad0c700373692",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:e0fbdee6626672004795dbeb1d3b8f6d9fb1bbd4060a0a9da17951555bfe38d4",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:e1b58d9dad786d47ff7d66b30c09406eb5080250f8f355b4e1b969dc342b83ec",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:e1bae6e5ef4e89c4604ffb54aa36403e7074b299629ec055e223a7b685ab0879",
                "value": 1
            },
            {
                "key": "currency.balances:e1df68ef8ac03e3c235e3f0d9497774558d0894842c540406a430123d3e4db99",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:e1e5d407146d94701ddea4d31058395a015f7addcadacf56eee7d33a45423d72",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e27ab37c1368fbf7798825eea969dd493b9a804d199e632ac81d7fe4279a8dbe",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e3007eee3b351e288008b37da8ae59d1ea4a15375dce30121465c0302aeddaa0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e35d3b7f54807f123e545399286d509585b38609023f81e29dab101438df0d9f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e39ba5821dc9366eeee38c8cdf34b00f834cbb23640e553011a12f7bb850d519",
                "value": 1
            },
            {
                "key": "currency.balances:e3c79fe52ad368d2d38dae9de9ac7ace7864189c9c2fede7ef112fa7948bdc52",
                "value": {
                    "__fixed__": "101.16"
                }
            },
            {
                "key": "currency.balances:e3d50e1d6122d1d019f703512b6d5e9e4bb6427caf7e18c0dabea0caf073c0c9",
                "value": 1
            },
            {
                "key": "currency.balances:e3dede97726658a91f4a7d2fd39b5a7cd7bc4ce4e72583a97550d0def63d354a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e4152d75199f4ac8b282011a5f5cf8355062b6add9e4237acbbad7fbbc836091",
                "value": 1
            },
            {
                "key": "currency.balances:e44e61b704d3e81feac36675b1cf49579809963d61b1cc2769c2c9d98220c4fd",
                "value": 1
            },
            {
                "key": "currency.balances:e46d50bde84de2f74748b97a80e33da1d724ca91ceeddd9fe677d0e585fe3ec0",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:e47fd583f77c0bde61b537697cfab05ef2e26cbf6aca28ef5aa2a4c2e080d0e0",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e491f2f669c0643670cca202d955a364ae2ff279810b88ae76a514136450bf13",
                "value": 1
            },
            {
                "key": "currency.balances:e49930500dcec26abcd824c31a4458abd7a9a2d0d98af9dac0c0abf95b642df3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e4a30256acfdc7c833474a605b02bb2b218b72ad1f34b76b8c2e075a69c0aeb0",
                "value": {
                    "__fixed__": "0.78"
                }
            },
            {
                "key": "currency.balances:e55d5b7b7f67dcbd89a4322832e4664bb08c710add57a7fb6cbae3226c805b6e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e6404486f324394b0be2eb87d4dda10d4a95ca0737a3b41c30cffefaa1b7efc7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e6b22e83fc9b7d538f451253bef32d0807c10b12653282b2b9672689d33fd2ba",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:e70ac9672baf14013a46cb9935d38ee2613aea3414260cb799c9b64273f79a20",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e72efc88aab20cf7c26e98419aad72fcac922b4f465ed2fc7ebea1e1449d32a2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e734ea6c2b6257de72355e472aa05a4c487e6b463c029ed306df2f01b5636b58",
                "value": {
                    "__fixed__": "100.15"
                }
            },
            {
                "key": "currency.balances:e734ea6c2b6257de72355e472aa05a4c487e6b463c029ed306df2f01b5636b58:con_dextest_006",
                "value": {
                    "__fixed__": "1.1"
                }
            },
            {
                "key": "currency.balances:e77ca85ba1399523b69a18ef0ffed9680f87d768f4a8fc72fa8b35161747c050",
                "value": 1
            },
            {
                "key": "currency.balances:e7a62cde715a789492d3515caddd310a4ee55ae0bffba157345cf6d20ff1e26d",
                "value": 1
            },
            {
                "key": "currency.balances:e7d442da2c3257ca26a57e4c30917a7894b2073c8144e80810b12b32403b3c3b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e7e7333eb02941f7d1ff2d690fd59f84c07ae63f5094df3270ae86bd878952a3",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e81b6d910e9befd9dfb80c95b6e2acc2351f047f8d29f02e5e4e399887873fcf",
                "value": 1
            },
            {
                "key": "currency.balances:e85df37fdbbc86315e9079f1d63892ee3d29ac0514016e03fb5df8d63d76e777",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e86ba24fcf183e87860ec860ff41e7f4ccf34c486b3930e9ccae233d24b76ad4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e881b172afaed01e3eb33014b788cca549343a6c70abf87f04a576176a8e66af",
                "value": 1
            },
            {
                "key": "currency.balances:e888e32c43c4bca31905f731942bb009f48e7cfc869394cd1541b49acb9dea4b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e90e1fa19ec03c79ca1e170660f4b7a93227bf0c14b6011afbb6126904cbdc3b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e96ae72a90592dd2fc3b207b8c1f71d3e3ef1cbbe58d803d888656d611e99994",
                "value": 1
            },
            {
                "key": "currency.balances:e9c11922b052aeecb1c95207c05f46ee98664e74a96de162c6cee844b212e7a8",
                "value": 1
            },
            {
                "key": "currency.balances:e9d508621001857bbfadba285235638810c4982b1e2bd4dc603daf1920482b9b",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": {
                    "__fixed__": "981620.799514054990895930799999999998"
                }
            },
            {
                "key": "currency.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931:burn",
                "value": 2
            },
            {
                "key": "currency.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931:con_dex22",
                "value": {
                    "__fixed__": "3.4E+2"
                }
            },
            {
                "key": "currency.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931:con_dex2test",
                "value": {
                    "__fixed__": "54.9"
                }
            },
            {
                "key": "currency.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931:con_multisend",
                "value": {
                    "__fixed__": "15000899999998399.4365119658409468114"
                }
            },
            {
                "key": "currency.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931:con_multisend_2",
                "value": {
                    "__fixed__": "8000009999984041.261863605199929"
                }
            },
            {
                "key": "currency.balances:ea0f3630b376568fa66f5d5f98358d057fb699671218b2ed480b7b84ddfa7dd5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:eb0906ef7ddde8bb1e8df2527eb714358f3ffa710cebd7305e596d9203b9d478",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:eb235f486847725ca5848e027c30baf469c4c3d2585f6df8d9e7864cdb3b5a6f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:eb3bef7ea1ce12cf375e6416f97a2211189c0d9528f35eb66b3baf5746ef1ee5",
                "value": 100
            },
            {
                "key": "currency.balances:eb4c17d980c91677e204d55b7ac2f5980885281dfbe037546bbcb3b0341cda02",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:eb54256f48209f229633ce181a2021a4085b1f4dc120cd62404d1c9241705390",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:eb8a6063a5396d9e6a6e74453a39320e54c94661c28d34f50c1728fffbe4ef93",
                "value": 1
            },
            {
                "key": "currency.balances:eb9187db8e09c32737e657fd3f666fe395b4806b47aa040015d404226e1308a2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:eb9287c8dc8c655a61db13b1af13b8100944961c8e34a95ef6b26f7970e3cf43",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ebcf6b83fa5fa0cd99db63638265f9f4225f324dca0df3cef251e5afe106f8ac",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ebf556fa72b2394ed70ae0f1e8a8b64a1fad613c6a33c51e59bd3104e547a606",
                "value": 1
            },
            {
                "key": "currency.balances:ec4cc6dec018578d03e9af766ed9a683fa5bf6fbce2118d3cb6e3cf5868c44dc",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ecb3fbf2932fe2df5e86bc921a6268b4a22bbbd04be8f8ef6abfb32e21894829",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ecd852d28ac2ddd86ce93d99218174f294a5793988be3a7d65cf95105b6ea576",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ed2de329f6e6987545a4538fd0b333026dd319fe52ce9fa495415bc70f34bdcd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ed72d192c32f02de68c0e308ca88bbcc18d012f768ba9e0fc8fe909c8af76e90",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:edb6cde6dd18cd6c17e0b97d7391c87d340ed2e58a94d66412338e082a4dd51f",
                "value": 1
            },
            {
                "key": "currency.balances:edf0dcc7cf108385a6c2cf4b46df228157345881209ace0cb4ffd66b19740fcd",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": {
                    "__fixed__": "6.95679748"
                }
            },
            {
                "key": "currency.balances:ee451ab9ea740a83ca94c14d5fca5122f7e9fc5cbd9700020310b78ca938e94b",
                "value": 1
            },
            {
                "key": "currency.balances:eeba5bd863e96ca1214d3f83485da357883b592cdae85f2e088d2356cd82a5d6",
                "value": 1
            },
            {
                "key": "currency.balances:ef0e2de819ea8060e3de26fa322c71e581152dd2f282cbcda6f5655bc64db5d9",
                "value": {
                    "__fixed__": "27.1"
                }
            },
            {
                "key": "currency.balances:ef0e2de819ea8060e3de26fa322c71e581152dd2f282cbcda6f5655bc64db5d9:con_ozark_interface_fake_v2",
                "value": 10
            },
            {
                "key": "currency.balances:ef330e8e70066c02fd954a2928a68cdc07a8af2c95f40af45b8b58793ef3971c",
                "value": 1
            },
            {
                "key": "currency.balances:ef414ac7b6d86bc4d446bdb584763b00eb183fc5e783232afca30d7a24cb4c61",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ef6e12684289fdaded1a86b5aa6c7cb6473d33412abea7c27eed5dbf012ae580",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ef71da0c62aea95ae3ba7f567571edb075439b85cd8daf0077b9ab10ee82a701",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f0018d21c0dd7a98db36122bed7f9bbba4ad8cc1c1e85953ade34e82957243c3",
                "value": 1
            },
            {
                "key": "currency.balances:f01a80841677d137fa63058a358225d8beac65d5a3064b5fef66d8ebbeb47f72",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f0222f00943416a8cacb2160e4af75faff36660b87e99279a045af1f4182dd1f",
                "value": {
                    "__fixed__": "17.34"
                }
            },
            {
                "key": "currency.balances:f0222f00943416a8cacb2160e4af75faff36660b87e99279a045af1f4182dd1f:con_dice3",
                "value": {
                    "__fixed__": "1999999999988"
                }
            },
            {
                "key": "currency.balances:f0222f00943416a8cacb2160e4af75faff36660b87e99279a045af1f4182dd1f:con_dice4",
                "value": {
                    "__fixed__": "1999999999997"
                }
            },
            {
                "key": "currency.balances:f0222f00943416a8cacb2160e4af75faff36660b87e99279a045af1f4182dd1f:con_dice5",
                "value": {
                    "__fixed__": "999999999999"
                }
            },
            {
                "key": "currency.balances:f0222f00943416a8cacb2160e4af75faff36660b87e99279a045af1f4182dd1f:con_dice6",
                "value": {
                    "__fixed__": "999999999985"
                }
            },
            {
                "key": "currency.balances:f03b351c034831e3245af4b6115b7761f8f785cd14f335365d42a57972394517",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:f04567981facc221848b85e5744a872bf3791329f6b6aa05530a975056b31ffa",
                "value": {
                    "__fixed__": "8E+1"
                }
            },
            {
                "key": "currency.balances:f04fe4697975bd694952e828476b201454fcb68048419c09f5b40686d40d6d94",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f065b14bbed5387225e591f561b6b8a628899c6802042fb2b3cb2c2857a892cf",
                "value": {
                    "__fixed__": "0.33955705499999994"
                }
            },
            {
                "key": "currency.balances:f06df3844c2e2914b1eb0a136202b532b8c61ee83ea46ed9b14dd83e37266a6d",
                "value": 1
            },
            {
                "key": "currency.balances:f07b92bc8a75953e843437cc383240a1d79fc8f1fcda12fed3149737d57c5bb7",
                "value": 1
            },
            {
                "key": "currency.balances:f0943187fe4f5a01cf509308f6ef51b5722d8123d01a7ef535463832bb92c5b9",
                "value": {
                    "__fixed__": "4.72"
                }
            },
            {
                "key": "currency.balances:f09a3ef2d493633c43d466c024eef5a41b3438fa11b330fa0905e7ca3fea572d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f09fa5781228dc25f96e70dd73118097417b8268adf2834db746faae16126aea",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f0fbffaba939ccf20c270cfc88d82c467518b8707c280dc60e4bb765aa92720c",
                "value": 1
            },
            {
                "key": "currency.balances:f1228b97b70ffe557e35fac26fca0da3e1f5060a4ea62d8f3137360e201254db",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f16105c7a8418df91df99eb33a59d35303f7124cfd84f83ea4034373e6e38636",
                "value": {
                    "__fixed__": "18.08141318"
                }
            },
            {
                "key": "currency.balances:f1938d26e36ad995a5151a795db0015001de40635f1fbf1d971bae3518846ccd",
                "value": {
                    "__fixed__": "0.78"
                }
            },
            {
                "key": "currency.balances:f1b947b494fe116a169a2dc8ef55a87302a7b18b115ab436193ef42cd3ba409d",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f1f1b1f046d1ce37bfefe02050eb829268916cd752df4d993ac2258174e2042d",
                "value": 1
            },
            {
                "key": "currency.balances:f20fb94c1f2c21d4cd47bf0a48c1db89f0da43c624dbd17a34e00cd2381193ed",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f2390f75c78ef6cb41d4f290ce06861aaff146d83e580413941c4a8771e0319a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f2a944b315fc47474767190cbd6246ea089495ed0a59a54a8a22d086554072ce",
                "value": 1
            },
            {
                "key": "currency.balances:f300ee01dfbb1022bdb61163763a428facb4633a00770bc1dcacbdb4b0f42a84",
                "value": {
                    "__fixed__": "3.961498974"
                }
            },
            {
                "key": "currency.balances:f30a077b26d633299a2659258e10f094746fe152514bab75f6494bcaaa6902f6",
                "value": 1
            },
            {
                "key": "currency.balances:f31835c500828b6dbadc3ba1cbd17b57ffc5122ce421588ebcc711961058690a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f31dc321fd3f087ce72e73aaf432835c73ba79d88d85fb62d9e6404cb19e4dc2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f34430e0c1e6976993e225dd8b6dcba5259196a6dcda3dd03036dbd808170cc2",
                "value": {
                    "__fixed__": "30.22"
                }
            },
            {
                "key": "currency.balances:f36ab12efb37303f44ad9cbb495ef37eb2bca3d351762fce9c3140de377537a1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f3adebf7a7112ebce9684e6d5931baf38071a53f54a2567a2fee915ab182c526",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f3bedcfd6923823b9f6a019983740c991b5ac1dabc961ec39f6d9b126970272e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f408f135b8db9d11daafae6b508c98a0cc79556c921b4fafe5d9ada0d5e3910d",
                "value": {
                    "__fixed__": "0.3802"
                }
            },
            {
                "key": "currency.balances:f4304ff51bccf98aa7f5a8d1e881787fe77f450d8997be99719261c06fdbac0d",
                "value": 5000
            },
            {
                "key": "currency.balances:f4602143a3d066ff8a528fb669592887628eda7a05b251236b0a9e569f2f361e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f4a13de1612d7dc4e2072cb0d669ae772ae2cd1a30e2b062315bc82276211b67",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f4c1d09313698449d68472fccc228376c1f8fe0a5b03d1107e381d753a6e14d6",
                "value": 1
            },
            {
                "key": "currency.balances:f4d0d7bee54dbd6b7c01ef726781e1ed501a0842937f943a7228c4214fef5d5f",
                "value": {
                    "__fixed__": "0.1001"
                }
            },
            {
                "key": "currency.balances:f4e7867f5917f874591818fdb77a13ad773062837eb21f5f1e5833e7b57082fe",
                "value": 1
            },
            {
                "key": "currency.balances:f5334cd8518900b8517899c7db1056789922b0bc025ff83fed406e9080912ea7",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f58e802f298b5b852ea62b961bd8a00b759ab690d5863ced2f36ef0fafaa8280",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f5910a6fec138501fd89d274e5143488d9955b1329a856abec2abff725b924f1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f5bdce0a60d1ea3db3eafd3daf923d27035824aa1d0ec4a179dced3d2be26143",
                "value": {
                    "__fixed__": "46520.5367"
                }
            },
            {
                "key": "currency.balances:f5c58d78d03f6d120966eb4ce620d7d67ef00993734c1469dbe7aabb9bb2d1e1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f5eeeb3ab5e2aaaa18bc216e68bdae7bed4c3d385811f267be185ac5602aad22",
                "value": 1
            },
            {
                "key": "currency.balances:f67c0bea0f7133196f32c88f97015cbea71fb37a2dc25951605d7e3e4eecb3c2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f6a184020d91c3d585e5a228884d22f1d40ba46c9d2adbbf76d9636011a2a12c",
                "value": 1
            },
            {
                "key": "currency.balances:f6dd3ef9829e8f7684f6b79e2bbd581d088cdbd4329ba3a0dd8749b101f7e151",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f6e29a4bc6fe7b81df9318c97b9d9bf1a4b0853ecd2dfe1789b9618486509f9c",
                "value": 1
            },
            {
                "key": "currency.balances:f6f5e390665501dcff39c8e0a081be3ceef29d086e1ae528227bcb23b62d1371",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:f73a9c383e8706f48fefde2344b7d34b4b20f79a4d1bcefb63599ea9634a6bd5",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f762d1004d3fdac41105818c6aae9318a26aa6a3e094ea327afb043dba2b71d5",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:f785ff29aaff263205875ad21ddf30cdc7d9e84a30558e041c6c3e67051bfcd8",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f7a7ad8971556bed8e104ab063bf46de4feaab7eaa657373bec7671421483978",
                "value": 1
            },
            {
                "key": "currency.balances:f7fc7a7e87a66263286110af1efef86457012216d16b7de5b73975209c8bec94",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f831d442d935b7692a0e474de6e1333bc47c25b77f3f3dcd888e594ef4b7e7ad",
                "value": 1
            },
            {
                "key": "currency.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": {
                    "__fixed__": "32313.8274"
                }
            },
            {
                "key": "currency.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce:con_pixel_frames_auction_v0_8_2",
                "value": {
                    "__fixed__": "9.999999E+7"
                }
            },
            {
                "key": "currency.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce:con_pixel_frames_master_v0_3",
                "value": {
                    "__fixed__": "9.999995E+7"
                }
            },
            {
                "key": "currency.balances:f8886fa33fe852136a7e6346c17e5b042bcca66100c55517d87e97cd1e3de896",
                "value": 1
            },
            {
                "key": "currency.balances:f8c13ed52691dafb0f5bfbec52048561933e888c7145c707022daf16e753fae6",
                "value": 1
            },
            {
                "key": "currency.balances:f8e50a34e0ab068450b67f0855763ac9de1db6be2b19e82748dfb9232e915ea5",
                "value": {
                    "__fixed__": "152.9412"
                }
            },
            {
                "key": "currency.balances:f8ecb11a340092b73c9540e90f4a2a38b462ecf4f64420ff29af2f8edaabbdff",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f97ba4ec7b3ca0222ea89ec8e187c72ed71ec526f5594f585f073880733e83a4",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:f9cf56fa2d09182882f264fce09d40cfbb76c72c99675ed8c43a981ea9b2585f",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fa385b9494c81abbccf13a4cfef0ec40e2cbedd92347dc13cc4d5d1b62b25ee2",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fabf7ad6ff649224be5a4c4b98d96627d7cc3adae70b7f8942dd76e29944bf0e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fb133a8209291ec109ddc99861746c51ad279109e1963398b2a847d1c86ef595",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fb484707cb9b899ce939d2b673bcc9c470f6ddabf19050605974e8974c47a3bc",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:fb5b56908ed42238459ef1e7a3ce9e087358732191f9c3e9f61a25174c0aae41",
                "value": 1
            },
            {
                "key": "currency.balances:fb63bf1bf3b32edb8ba68643ae799c5d785c139157570c236cdc37c659fbd644",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fb6acac7d637ed9e8eee654eddf78730b4cd8664dce4432a3fc94a693100292b",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:fb6de1638cf2377cd56ffa7ac531660bd4d6ca634e444d635d24ff847e71163e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fbdfefac57f6773cb085f5527591f08430dfcc59bc24d923d478e728112033b1",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fcac8451d22c7672bcfe78c54cfa1ed278c7debe2c85bb42bb578e6be8878dde",
                "value": 1
            },
            {
                "key": "currency.balances:fccc61c6f445f324cf9eac00e997e0e0545e9a75d8eca8d3f04803eb6bfeff18",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:fcf26e17ea8e18837f115a56359801c356ac6aa0ea3b163301dbe6bd1d426785",
                "value": 1
            },
            {
                "key": "currency.balances:fd0bf6bc9a205ee2f53895f945645b2fda1a7598c8420d52f2d6fa62a24b6e2e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fd8a75812695e66a2ce8c734a58aeecfe9eb53e9c6c2832533b9d165364e77db",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fd97470445292c57180846cf32c17d0c661af9311927e1dea85755467a3213a5",
                "value": {
                    "__fixed__": "752"
                }
            },
            {
                "key": "currency.balances:fda595405fd0b7692c0864a0b38f17c1aaa7993084245f35acfa0596db008286",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fdba528d57673c220b3ccdcc6d5b7b09282885f71052f9962cbcc5117cb87e1e",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fe01544fb76b9a745c1a5c27522c4e075cdaffcd914e3b36a747e3ebc375db8a",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fe0b96656b75708718fc8e4427f4ff037fc597511ca6ba7e221f808bb470e323",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fe778793ec610bef1f7ea888d23d9a41df088049b3612d34167fc38b6b17bfa2",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:fea12833912097a652f2d9f0f9086bccaa597a9f4dbc147e1ef764f5834b0867",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:febb1fd3c637a668d0050df68382ac1f097170c04ddeb1b02a5fe44742c19154",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:fee97a7c5dcd6694ed668fbc15b403c64a331bfefea70a3d374dac8522c25eed",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:feee860b9b553049346a8092f07233842dd1abc7a9a5eaeff95dde7920e36dd4",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:ff69b200e8ad9ed5ba211e5e640da6578ee78ffe49e465da614d299c6afe0fe6",
                "value": 1
            },
            {
                "key": "currency.balances:ff9d743afde13190faa2740268031b3d76a7283a111661e757ca37fe86a9f534",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ffa5342532a3a7c6c62791fdd8d527d7b0bcd2f5089fd2979f6f310d12c958e3",
                "value": 1
            },
            {
                "key": "currency.balances:ffb27289731c3c6cf8226f655ff36475665896e4888e20b6e9269063089cbc11",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:ffc94c4da25745d6595d48348a7e45137102e3529ddf4702e82901d14bf4a973",
                "value": {
                    "__fixed__": "0.00001"
                }
            },
            {
                "key": "currency.balances:me",
                "value": 8
            },
            {
                "key": "currency.balances:nwm",
                "value": {
                    "__fixed__": "0.01"
                }
            },
            {
                "key": "currency.balances:team_lock",
                "value": {
                    "__fixed__": "16656788.18201794647711225"
                }
            },
            {
                "key": "currency.balances:test_address",
                "value": {
                    "__fixed__": "547.48325887999997"
                }
            },
            {
                "key": "currency.balances:test_address_2",
                "value": {
                    "__fixed__": "574.100314959999996"
                }
            },
            {
                "key": "currency.balances:wallet_address",
                "value": 7
            },
            {
                "key": "currency.balances:what",
                "value": 1000000000
            },
            {
                "key": "currency.balances:you",
                "value": 8
            },
            {
                "key": "currency.metadata:operator",
                "value": "team_lock"
            },
            {
                "key": "currency.metadata:token_logo_url",
                "value": "https://xian.org/assets/img/logo.svg"
            },
            {
                "key": "currency.metadata:token_name",
                "value": "XIAN"
            },
            {
                "key": "currency.metadata:token_symbol",
                "value": "XIAN"
            },
            {
                "key": "currency.metadata:token_website",
                "value": "https://xian.org"
            },
            {
                "key": "currency.streams:team_lock:begins",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "currency.streams:team_lock:claimed",
                "value": {
                    "__fixed__": "9878.46798205352288775"
                }
            },
            {
                "key": "currency.streams:team_lock:closes",
                "value": {
                    "__time__": [
                        2029,
                        6,
                        8,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "currency.streams:team_lock:rate",
                "value": {
                    "__fixed__": "0.10575725568804825"
                }
            },
            {
                "key": "currency.streams:team_lock:receiver",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "currency.streams:team_lock:sender",
                "value": "team_lock"
            },
            {
                "key": "currency.streams:team_lock:status",
                "value": "active"
            },
            {
                "key": "dao.__code__",
                "value": "import currency\n\n\n@__export('dao')\ndef transfer_from_dao(args: dict):\n    amount = args.get('amount')\n    to = args.get('to')\n    assert amount > 0, 'Amount must be greater than 0'\n    currency.transfer(amount=amount, to=to)\n\n\n@__export('dao')\ndef balance_dao_stream():\n    currency.balance_stream(stream_id='dao_funding_stream')\n"
            },
            {
                "key": "dao.__developer__",
                "value": "sys"
            },
            {
                "key": "dao.__owner__",
                "value": "masternodes"
            },
            {
                "key": "dao.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "foundation.__code__",
                "value": "import currency\n__owner = Variable(contract='foundation', name='owner')\n\n\ndef ____(vk: str):\n    __owner.set(vk)\n\n\n@__export('foundation')\ndef withdraw(amount: float):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    currency.transfer(amount, ctx.caller)\n\n\n@__export('foundation')\ndef change_owner(vk: str):\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    __owner.set(vk)\n"
            },
            {
                "key": "foundation.__developer__",
                "value": "sys"
            },
            {
                "key": "foundation.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "foundation.owner",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "masternodes.__code__",
                "value": "import dao\nimport rewards\nimport stamp_cost\nimport currency\n__nodes = Variable(contract='masternodes', name='nodes')\n__votes = Hash(default_value=False, contract='masternodes', name='votes')\n__total_votes = Variable(contract='masternodes', name='total_votes')\n__types = Variable(contract='masternodes', name='types')\n__registration_fee = Variable(contract='masternodes', name='registration_fee')\n__pending_registrations = Hash(default_value=False, contract='masternodes',\n    name='pending_registrations')\n__pending_leave = Hash(default_value=False, contract='masternodes', name=\n    'pending_leave')\n__holdings = Hash(default_value=0, contract='masternodes', name='holdings')\nPASS_THRESHOLD = decimal('0.8')\nPROPOSAL_EXPIRY_DAYS = 7\n\n\ndef ____(genesis_nodes: list, genesis_registration_fee: int):\n    __nodes.set(genesis_nodes)\n    __types.set(['add_member', 'remove_member', 'change_registration_fee',\n        'reward_change', 'dao_payout', 'stamp_cost_change', 'change_types'])\n    __total_votes.set(0)\n    __registration_fee.set(genesis_registration_fee)\n\n\n@__export('masternodes')\ndef propose_vote(type_of_vote: str, arg: Any):\n    assert ctx.caller in __nodes.get(), 'Only nodes can propose new votes'\n    if type_of_vote == 'add_member':\n        assert __pending_registrations[arg\n            ] == True, 'Member must have pending registration'\n    assert type_of_vote in __types.get(), 'Invalid type'\n    proposal_id = __total_votes.get() + 1\n    __votes[proposal_id] = {'yes': 1, 'no': 0, 'type': type_of_vote, 'arg':\n        arg, 'voters': [ctx.caller], 'finalized': False, 'expiry': now +\n        datetime.timedelta(days=PROPOSAL_EXPIRY_DAYS)}\n    __total_votes.set(proposal_id)\n    __decide_finalize(proposal_id)\n    return __votes[proposal_id]\n\n\n@__export('masternodes')\ndef vote(proposal_id: int, vote: str):\n    assert ctx.caller in __nodes.get(), 'Only nodes can vote'\n    assert __votes[proposal_id], 'Invalid proposal'\n    assert __votes[proposal_id]['finalized'\n        ] == False, 'Proposal already finalized'\n    assert now < __votes[proposal_id]['expiry'], 'Proposal expired'\n    assert vote in ['yes', 'no'], 'Invalid vote'\n    assert ctx.caller not in __votes[proposal_id]['voters'], 'Already voted'\n    cur_vote = __votes[proposal_id]\n    cur_vote[vote] += 1\n    cur_vote['voters'].append(ctx.caller)\n    __votes[proposal_id] = cur_vote\n    __decide_finalize(proposal_id)\n    return cur_vote\n\n\ndef __decide_finalize(proposal_id: int):\n    cur_vote = __votes[proposal_id]\n    ayes_needed = len(__nodes.get()) * PASS_THRESHOLD\n    ayes = cur_vote['yes']\n    if ayes >= ayes_needed:\n        __finalize_vote(proposal_id)\n\n\ndef __get_yes_vote_pct(proposal_id: int):\n    cur_vote = __votes[proposal_id]\n    return cur_vote['yes'] / (cur_vote['yes'] + cur_vote['no'])\n\n\ndef __finalize_vote(proposal_id: int):\n    cur_vote = __votes[proposal_id]\n    if cur_vote['type'] == 'add_member':\n        assert __pending_registrations[cur_vote['arg']\n            ], 'Member must have pending registration'\n        __nodes.set(__nodes.get() + [cur_vote['arg']])\n    elif cur_vote['type'] == 'remove_member':\n        __nodes.set([node for node in __nodes.get() if node != cur_vote['arg']]\n            )\n        __force_leave(cur_vote['arg'])\n    elif cur_vote['type'] == 'reward_change':\n        rewards.set_value(new_value=cur_vote['arg'])\n    elif cur_vote['type'] == 'dao_payout':\n        dao.transfer_from_dao(args=cur_vote['arg'])\n    elif cur_vote['type'] == 'stamp_cost_change':\n        stamp_cost.set_value(new_value=cur_vote['arg'])\n    elif cur_vote['type'] == 'change_registration_fee':\n        __registration_fee.set(cur_vote['arg'])\n    elif cur_vote['type'] == 'change_types':\n        __types.set(cur_vote['arg'])\n    cur_vote['finalized'] = True\n    __votes[proposal_id] = cur_vote\n    return cur_vote\n\n\n@__export('masternodes')\ndef balance_dao_stream():\n    dao.balance_dao_stream()\n\n\ndef __force_leave(node: str):\n    __pending_leave[node] = now + datetime.timedelta(days=7)\n\n\n@__export('masternodes')\ndef announce_leave():\n    assert ctx.caller in __nodes.get(), 'Not a node'\n    assert __pending_leave[ctx.caller] == False, 'Already pending leave'\n    __pending_leave[ctx.caller] = now + datetime.timedelta(days=7)\n\n\n@__export('masternodes')\ndef leave():\n    assert __pending_leave[ctx.caller], 'Not pending leave'\n    assert __pending_leave[ctx.caller\n        ] < now, 'Leave announcement period not over'\n    if ctx.caller in __nodes.get():\n        __nodes.set([node for node in __nodes.get() if node != ctx.caller])\n    __pending_leave[ctx.caller] = False\n\n\n@__export('masternodes')\ndef register():\n    assert ctx.caller not in __nodes.get(), 'Already a node'\n    assert __pending_registrations[ctx.caller\n        ] == False, 'Already pending registration'\n    currency.transfer_from(amount=__registration_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __holdings[ctx.caller] = __registration_fee.get()\n    __pending_registrations[ctx.caller] = True\n\n\n@__export('masternodes')\ndef unregister():\n    assert ctx.caller not in __nodes.get(\n        ), \"If you're a node already, you can't unregister. You need to leave or be removed.\"\n    assert __pending_registrations[ctx.caller\n        ] == True, 'No pending registration'\n    if __holdings[ctx.caller] > 0:\n        currency.transfer(__holdings[ctx.caller], ctx.caller)\n    __pending_registrations[ctx.caller] = False\n    __holdings[ctx.caller] = 0\n\n\n@__export('masternodes')\ndef balance_stream():\n    dao.balance_dao_stream()\n"
            },
            {
                "key": "masternodes.__developer__",
                "value": "sys"
            },
            {
                "key": "masternodes.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "masternodes.nodes",
                "value": [
                    "13ca9a62d10cbc28d55408e0a85d31f5c059fe3bb49316538e1d03064f3f2c8e"
                ]
            },
            {
                "key": "masternodes.registration_fee",
                "value": 100000
            },
            {
                "key": "masternodes.total_votes",
                "value": 9
            },
            {
                "key": "masternodes.types",
                "value": [
                    "add_member",
                    "remove_member",
                    "change_registration_fee",
                    "reward_change",
                    "dao_payout",
                    "stamp_cost_change",
                    "change_types",
                    "create_stream",
                    "change_close_time",
                    "finalize_stream",
                    "close_balance_finalize",
                    "topic_vote",
                    "some_new_type"
                ]
            },
            {
                "key": "masternodes.votes:1",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.78,
                        0.11,
                        0.01,
                        0.1
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:2",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.45,
                        0.45,
                        0.09,
                        0.01
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:3",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.45,
                        0.01,
                        0.09,
                        0.45
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:4",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "stamp_cost_change",
                    "arg": 50,
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:5",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.49,
                        0.49,
                        0.01,
                        0.01
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:6",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.49,
                        0.01,
                        0.49,
                        0.01
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:7",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.49,
                        0.01,
                        0.01,
                        0.49
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:8",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "dao_payout",
                    "arg": {
                        "amount": 5000000,
                        "to": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e"
                    },
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:9",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "change_types",
                    "arg": [
                        "add_member",
                        "remove_member",
                        "change_registration_fee",
                        "reward_change",
                        "dao_payout",
                        "stamp_cost_change",
                        "change_types",
                        "create_stream",
                        "change_close_time",
                        "finalize_stream",
                        "close_balance_finalize",
                        "topic_vote"
                    ],
                    "voters": [
                        "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6"
                    ],
                    "finalized": false,
                    "expiry": {
                        "__time__": [
                            2025,
                            4,
                            18,
                            9,
                            15,
                            35,
                            0
                        ]
                    }
                }
            },
            {
                "key": "rewards.S:value",
                "value": [
                    0.49,
                    0.01,
                    0.01,
                    0.49
                ]
            },
            {
                "key": "rewards.__code__",
                "value": "__S = Hash(contract='rewards', name='S')\n\n\ndef ____(initial_split: list=[decimal('0.88'), decimal('0.01'), decimal(\n    '0.01'), decimal('0.1')]):\n    __S['value'] = initial_split\n\n\n@__export('rewards')\ndef current_value():\n    return __S['value']\n\n\n@__export('rewards')\ndef set_value(new_value: list):\n    assert len(new_value) == 4, 'New value must be a list of 4 elements'\n    assert sum(new_value) == 1, 'Sum of new value must be 1'\n    __S['value'] = new_value\n"
            },
            {
                "key": "rewards.__developer__",
                "value": "sys"
            },
            {
                "key": "rewards.__owner__",
                "value": "masternodes"
            },
            {
                "key": "rewards.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "stamp_cost.S:value",
                "value": 50
            },
            {
                "key": "stamp_cost.__code__",
                "value": "__S = Hash(contract='stamp_cost', name='S')\n\n\ndef ____(initial_rate: int=100):\n    __S['value'] = initial_rate\n\n\n@__export('stamp_cost')\ndef current_value():\n    return __S['value']\n\n\n@__export('stamp_cost')\ndef set_value(new_value: int):\n    assert new_value > 0, 'New value must be greater than 0'\n    __S['value'] = new_value\n"
            },
            {
                "key": "stamp_cost.__developer__",
                "value": "sys"
            },
            {
                "key": "stamp_cost.__owner__",
                "value": "masternodes"
            },
            {
                "key": "stamp_cost.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "submission.__code__",
                "value": "@__export('submission')\ndef submit_contract(name: str, code: str, owner: Any=None, constructor_args: dict={}):\n    if ctx.caller != 'sys':\n        assert name.startswith('con_'), 'Contract must start with con_!'\n\n    assert ctx.caller == ctx.signer, 'Contract cannot be called from another contract!'\n    assert len(name) <= 64, 'Contract name length exceeds 64 characters!'\n    assert name.islower(), 'Contract name must be lowercase!'\n\n    __Contract().submit(\n        name=name,\n        code=code,\n        owner=owner,\n        constructor_args=constructor_args,\n        developer=ctx.caller\n    )\n\n\n@__export('submission')\ndef change_developer(contract: str, new_developer: str):\n    d = __Contract()._driver.get_var(contract=contract, variable='__developer__')\n    assert ctx.caller == d, 'Sender is not current developer!'\n\n    __Contract()._driver.set_var(\n        contract=contract,\n        variable='__developer__',\n        value=new_developer\n    )\n"
            },
            {
                "key": "submission.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        18,
                        16,
                        32,
                        44,
                        484123
                    ]
                }
            },
            {
                "key": "team_lock.__code__",
                "value": "import currency\n__owners = Hash(contract='team_lock', name='owners')\n__required_signatures = Variable(contract='team_lock', name=\n    'required_signatures')\n__owner_count = Variable(contract='team_lock', name='owner_count')\n__transaction_count = Variable(contract='team_lock', name='transaction_count')\n__stream_id = Variable(contract='team_lock', name='stream_id')\n__transactions = Hash(contract='team_lock', name='transactions')\n\n\ndef ____(initial_owners: str, initial_required_signatures: int, stream: str):\n    \"\"\"\n    Initializes the multisig contract.\n    - initial_owners: Comma-separated string of owner addresses.\n    - initial_required_signatures: Number of required signatures to execute a transaction.\n    \"\"\"\n    owner_list = initial_owners.split(',')\n    for owner in owner_list:\n        __owners[owner.strip()] = True\n    __required_signatures.set(initial_required_signatures)\n    __owner_count.set(len(owner_list))\n    __transaction_count.set(0)\n    __stream_id.set(stream)\n\n\n@__export('team_lock')\ndef submit_transaction(to: str=None, amount: float=None, tx_type: str=\n    'transfer'):\n    \"\"\"\n    Submits a new transaction to the multisig wallet.\n    - to: Recipient address.\n    - amount: Amount of tokens to transfer.\n    - tx_type: Type of transaction ('transfer', 'addOwner', 'removeOwner', 'changeRequirement').\n    \"\"\"\n    assert __owners[ctx.caller], 'Only owners can submit transactions.'\n    tx_id = __transaction_count.get() + 1\n    __transaction_count.set(tx_id)\n    __transactions[tx_id, 'type'] = tx_type\n    __transactions[tx_id, 'to'] = to\n    __transactions[tx_id, 'amount'] = amount\n    __transactions[tx_id, 'executed'] = False\n    __transactions[tx_id, 'approvals'] = 0\n    approve_transaction(tx_id)\n    return f'Transaction {tx_id} submitted.'\n\n\n@__export('team_lock')\ndef approve_transaction(tx_id: int):\n    \"\"\"\n    Approves a pending transaction.\n    - tx_id: The ID of the transaction to approve.\n    \"\"\"\n    assert __owners[ctx.caller], 'Only owners can approve transactions.'\n    assert not __transactions[tx_id, 'executed'\n        ], 'Transaction already executed.'\n    assert __transactions[tx_id, 'type'\n        ] is not None, 'Transaction does not exist.'\n    assert not __transactions[tx_id, 'approvers', ctx.caller\n        ], 'Already approved.'\n    __transactions[tx_id, 'approvers', ctx.caller] = True\n    __transactions[tx_id, 'approvals'] += 1\n    return f'Transaction {tx_id} approved by {ctx.caller}.'\n\n\n@__export('team_lock')\ndef execute_transaction(tx_id: int):\n    \"\"\"\n    Executes a transaction if enough approvals are collected.\n    - tx_id: The ID of the transaction to execute.\n    \"\"\"\n    assert __owners[ctx.caller], 'Only owners can execute transactions.'\n    assert not __transactions[tx_id, 'executed'\n        ], 'Transaction already executed.'\n    assert __transactions[tx_id, 'type'\n        ] is not None, 'Transaction does not exist.'\n    approvals = __transactions[tx_id, 'approvals']\n    required = __required_signatures.get()\n    assert approvals >= required, 'Not enough approvals.'\n    tx_type = __transactions[tx_id, 'type']\n    to = __transactions[tx_id, 'to']\n    amount = __transactions[tx_id, 'amount']\n    if tx_type == 'transfer':\n        currency.transfer(amount=amount, to=to)\n    elif tx_type == 'addOwner':\n        assert to is not None, 'No owner specified to add.'\n        assert not __owners[to], 'Address is already an owner.'\n        __owners[to] = True\n        __owner_count.set(__owner_count.get() + 1)\n    elif tx_type == 'removeOwner':\n        assert to is not None, 'No owner specified to remove.'\n        assert __owners[to], 'Address is not an owner.'\n        __owners[to] = False\n        __owner_count.set(__owner_count.get() - 1)\n        if __required_signatures.get() > __owner_count.get():\n            __required_signatures.set(__owner_count.get())\n    elif tx_type == 'changeRequirement':\n        assert amount is not None, 'No new requirement specified.'\n        new_requirement = int(amount)\n        assert new_requirement > 0, 'Requirement must be greater than zero.'\n        total_owners = __owner_count.get()\n        assert new_requirement <= total_owners, 'Requirement cannot be greater than number of owners.'\n        __required_signatures.set(new_requirement)\n    else:\n        return 'Invalid transaction type.'\n    __transactions[tx_id, 'executed'] = True\n    return f'Transaction {tx_id} executed.'\n\n\n@__export('team_lock')\ndef balance_stream():\n    \"\"\"\n    Executes balance_stream function from currency \n    contract which sends tokens to this contract\n    \"\"\"\n    currency.balance_stream(__stream_id.get())\n\n\n@__export('team_lock')\ndef change_currency_metadata(key: str, value: str):\n    \"\"\"\n    Changes the metadata of the currency contract\n    \"\"\"\n    assert __owners[ctx.caller], 'Only owners can change metadata.'\n    currency.change_metadata(key, value)\n"
            },
            {
                "key": "team_lock.__developer__",
                "value": "sys"
            },
            {
                "key": "team_lock.__submitted__",
                "value": {
                    "__time__": [
                        2025,
                        1,
                        24,
                        16,
                        53,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "team_lock.owner_count",
                "value": 3
            },
            {
                "key": "team_lock.owners:081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": true
            },
            {
                "key": "team_lock.owners:503ccb3dc04eaaed7c72c3ee6d22368e48a7f7e52b8577f4a4a9989eec51a0be",
                "value": true
            },
            {
                "key": "team_lock.owners:6ebd8090a80e5fc629f38fceefd05d66035a5a4d4ba2c223319ec8f9b83cb48a",
                "value": true
            },
            {
                "key": "team_lock.required_signatures",
                "value": 2
            },
            {
                "key": "team_lock.stream_id",
                "value": "team_vesting"
            },
            {
                "key": "team_lock.transaction_count",
                "value": 0
            }
        ],
        "nonces": [
            {
                "key": "0155b1cab2bc9e626b5d05be6354d2972f8223dca5f0872fede68cce7582f535",
                "value": 0
            },
            {
                "key": "07410c69dfccb05c05b415a33d6d61d8c1105aa783b8a154d4d31fe3b2ffc5bb",
                "value": 6
            },
            {
                "key": "0813b6d7d7507c5f735821c32d06cd8f53e6d29807acb7bc92ab0dfe0417386e",
                "value": 57
            },
            {
                "key": "081e233f4e122a5fd79ff3c44f9d58848c3214f7110130936661394403100a9a",
                "value": 94
            },
            {
                "key": "0e1d9bb3404f8160c362505c1a9b3a71d66e2cea69a4ec0e01da1b6ce64df4db",
                "value": 9
            },
            {
                "key": "0f8e2b5f76a54a91cc628dbd5cc3a0b95ab2bfd5a1305da31d011fa3818af868",
                "value": 0
            },
            {
                "key": "1128b58aff9f2a9d7a03365b21d8bac26ad0b3436f0f1399a90e7a198487fa9c",
                "value": 6
            },
            {
                "key": "15628f7ae7bfb16ce1cc9a16af7d349d7e898d5b22a05aeb55817602d0c5350b",
                "value": 9
            },
            {
                "key": "1565ff3ef4e54a73e5782f5c1c30c7106142370f90495ef3bb6dd6c2e17dc158",
                "value": 1
            },
            {
                "key": "17d6962e6ec5f4b180bd108195974cc517f820ce09b03ebb1a97a474cbd2fd26",
                "value": 0
            },
            {
                "key": "1e83c022eb302d79bc3772f990eb6e0c3c70844fdad03f911e75c4294cdf157f",
                "value": 0
            },
            {
                "key": "202aa637bd13ce266d8185c3f634c6a91c1d949133df89b13d36068c20b46960",
                "value": 0
            },
            {
                "key": "20c91ffb518aafdee0e227dc7b8866c51f097292c829d77b82eda081a329fa34",
                "value": 0
            },
            {
                "key": "26dd5d75f34c2b4085fd34e02d5fe2fdb6c7096d522d977a64c64b8f4acf44e5",
                "value": 0
            },
            {
                "key": "2a7b393e3c3225b0e690e59335ec062b586d7e7f2b65c7d452252ef3412ad385",
                "value": 199
            },
            {
                "key": "2ae1d30abfdbd59caad2f1dde63973a76b03b2a714f19b33ef58aa60525d9d61",
                "value": 299
            },
            {
                "key": "2bc83443f9322c2efed1d2266daba228eb8b1f935fa815e0a67907515b052e07",
                "value": 0
            },
            {
                "key": "331348bea47bca63819e524a1e3227cf1dcdbe1161b99d8f6af81d7a39e0a3ae",
                "value": 263
            },
            {
                "key": "3336f3561b99e2cf89f2278d08d360e8e4ab92caae1ce5bb36ac03fa57e55062",
                "value": 9
            },
            {
                "key": "353e39564bd8ed32182fa461baa9598be21cd803f501850f149a6b79819bf51f",
                "value": 4
            },
            {
                "key": "39a982e221a2805a585fad76cc4147daba631ff8e64e640a4ff3815dc780e7f0",
                "value": 434
            },
            {
                "key": "3bc2445f8daa06789b9c932faa6cd5de56b0da7298d1432db677de1dba54bdc6",
                "value": 0
            },
            {
                "key": "3c2161a4dd5beacbaa630d71423b94e466e903ca349149a89c37ea5317ff5677",
                "value": 43
            },
            {
                "key": "3c460e39312bb6fc9f6f53dfb47459214ee5bde97d43e74ed747fdba3fbd5cb0",
                "value": 0
            },
            {
                "key": "3daabc4698f988c1cd72531c46d755587e0e207ed18a38a171a68ad93053fabb",
                "value": 0
            },
            {
                "key": "40f6c713806cc7dd8916fea32b7d22f190f012497658b0d6c19cc1d96261a474",
                "value": 0
            },
            {
                "key": "4118d7e4f02dda6c9e662cfab92ef8b7ec056c26078ef9e6846fe78a6bf057a2",
                "value": 0
            },
            {
                "key": "4140caf74a5f3d8b56b2f661ae27fc2053cac18bae9a5ae388bce8ce41155f17",
                "value": 0
            },
            {
                "key": "44947f4a985daee7ec3d7ea07d4942c6b931d90d4c4b4d06bcf32fc0fe0cb480",
                "value": 0
            },
            {
                "key": "452b46a1c1387a2375db7f1ae86b69b7d046e6030e8a8a8ed1c51e14d73f9875",
                "value": 0
            },
            {
                "key": "464886d002733daf28ed90add04bf2f0d59b96043c3c682c0fafd8e58d78d07f",
                "value": 1
            },
            {
                "key": "48aac788986f398959113542b508fc56da7d3d4eb33e3db8ef3c8457c6fdb2f2",
                "value": 1
            },
            {
                "key": "48cba3959f2734406559553f15c3a286b62d5ff092775d9214ea1713862177d1",
                "value": 135
            },
            {
                "key": "4c056cb9c016aa71d86d172a73de87936825bfacb2955ba610563bcdde38f25b",
                "value": 0
            },
            {
                "key": "4c19914b25692d3f29f39eb8b98233b314602d7a83d61aa76857f232b114e038",
                "value": 0
            },
            {
                "key": "4c4e26764fc3489974f8d70c61ed72cd08dce61682edad4612aa8db05c1b3011",
                "value": 223
            },
            {
                "key": "503ccb3dc04eaaed7c72c3ee6d22368e48a7f7e52b8577f4a4a9989eec51a0be",
                "value": 3
            },
            {
                "key": "503e10f0c38a5f6844306f83f8f78ddd38a0c7977b4295fe1b840bb0d0e0de4b",
                "value": 349
            },
            {
                "key": "51876d20dcf3dbd79bedbf1fd9fc23bbc17a8286d253c95fc41430d6c353e416",
                "value": 1
            },
            {
                "key": "53b38a255cda4e5fa285fa0baa6b2a845c0f11c6df5913fc492821755cac6328",
                "value": 0
            },
            {
                "key": "5565f2b994c96776c16c796ed38aa63084ea688b492b27a24fc8a80920f4c0ec",
                "value": 0
            },
            {
                "key": "614253f8c8c556abdcd0c01c9500e64158bf02d68e2aa265b5d4800986d2df7b",
                "value": 1
            },
            {
                "key": "638de7c076f6f24bb212e7b2f0f5d6bdf2f4fb84fcef2fb2b3de3133d84eabac",
                "value": 0
            },
            {
                "key": "65723da81c38701aa018c2a38d600a18435bd34db363b19f7dddd9e29e8afab8",
                "value": 0
            },
            {
                "key": "6a580f5d286793685169ac121ac48fb1ad019b840a8a194141e1053be4556a2a",
                "value": 22
            },
            {
                "key": "6b8b2257482f54af0d3a19d59b6d5ac688fdf994da29b978a5a2494542da738b",
                "value": 187
            },
            {
                "key": "6da7b964efb6e1e6cdf1d13de5409fa4563e1497485c71dfaa30ac53d654d664",
                "value": 53
            },
            {
                "key": "7067cf020cfeecd001b656b924639713efa3affc71ecd7db6f4a3e99c8b52d05",
                "value": 76
            },
            {
                "key": "74ecefbea782e737d2de34f935955087665bec75ab7dd1f04c4a9e0e5aa597b7",
                "value": 20
            },
            {
                "key": "74eeb854bb1a50a2755a786d67ca6688f222aee9d4387e23e8bc46a2792778c4",
                "value": 0
            },
            {
                "key": "77628b7eeb1e8c9e9d02036541af03c57ba5ee308741e46401769c5ff397d2b7",
                "value": 41
            },
            {
                "key": "7c3aa384cd20aa3bc01fc8783d992d01598258713ffd29eeee621f09f53f45e0",
                "value": 0
            },
            {
                "key": "7cd5614d63c0421bc5de61417827c1f9c2ad3ac76c961a98bb8780850437838c",
                "value": 3
            },
            {
                "key": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": 135
            },
            {
                "key": "7fe83202b3130727ca8af23c25d282ccc0b6e49f1c5d57379175991bad1021f7",
                "value": 0
            },
            {
                "key": "85334b88cfbbe2bd969742cd8db2d0d28f3c893c912f1a309f9973d54c5f56e8",
                "value": 0
            },
            {
                "key": "8a42ab5235903c76b2ff7f8491aa719685f72c26bf996d7040b1a7ab7a5d47d4",
                "value": 7
            },
            {
                "key": "8bf21c7dc3a4ff32996bf56a665e1efe3c9261cc95bbf82552c328585c863829",
                "value": 12
            },
            {
                "key": "8ccd49dd13b332fad9d9af8a7a3089c5f1ad17e79d9ce262fcea8dddce16dac4",
                "value": 0
            },
            {
                "key": "90fbfe3215aea2e6fba1a916dfb0db459d8afada75a4d7d6f548274072e4dcb3",
                "value": 0
            },
            {
                "key": "9146ca8fed18ef9088bc0d556b62ef624a5df6cc060724b9007ce5f8b0d8a2c6",
                "value": 1
            },
            {
                "key": "93a7343925a369e81098f0e20ccc73e917504c6dc55efa1d61152eeb461735dd",
                "value": 0
            },
            {
                "key": "94aa1c41bf458b00194ab8bb6db4674a719923de3b7dd880d3914182cdd6a266",
                "value": 0
            },
            {
                "key": "9a6b40b85125b3e3baa1f9fd0600ad6b01d01c1a7c27f6c6325cbdb6b4947b67",
                "value": 0
            },
            {
                "key": "9e17b6f1303f7f09b10541b6756c03a79ac7742d9fb93223cc16d4e238345d7e",
                "value": 22
            },
            {
                "key": "9fc5902aa67fdea5b55f41fe6a35f7be426f7ffa15ab1fea0451b7eede9dade0",
                "value": 0
            },
            {
                "key": "a3660dad65a58f039f5cd525eef514cdbb7ce6e5970c9cb4741d7e56654b5e3c",
                "value": 0
            },
            {
                "key": "a47807ada30a4aac654e763ccc99aded21149daa5b599e0af20058dfdfa8fe8f",
                "value": 0
            },
            {
                "key": "a9b290de332bcdb147473d7c71a59a4186b1b93a77727b154d7b99c07366ce6b",
                "value": 0
            },
            {
                "key": "aa8399c951b7d9e4ccd23d01524472ef6a2ecffcf5cc24f9ed0e3e34bfd79426",
                "value": 1
            },
            {
                "key": "b23ac476c2d643b46b3d593ae655b434272d186e79ac959c71fe9c3b6972613b",
                "value": 0
            },
            {
                "key": "b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d",
                "value": 0
            },
            {
                "key": "be055b6021a5536761981837db1fe32ff501dbb873bf1e1a0d1fd8c655e6d243",
                "value": 0
            },
            {
                "key": "c0476b987deee6d9d5eddbae604bf80fc442066f32954ef7120549ff4e51dfd9",
                "value": 191
            },
            {
                "key": "c1acc19b7e0832d3ad2ed4ea5b8214433743533fcd7f10504d3b6f8a018f5ce6",
                "value": 0
            },
            {
                "key": "c1ae587308612f65005cbbe47565645ff9d83350ce344a9d454641630c9d482a",
                "value": 0
            },
            {
                "key": "c54a4a8b5c561c683399afaf6c888da91a5d4dbc92222c8a3e96d5b883d914ae",
                "value": 16
            },
            {
                "key": "c8643de2ce266d1d824226f73da0557a5f13a30ff092c2c7af2e7a6af68d3df4",
                "value": 85
            },
            {
                "key": "ca9aeee192854dc55a6d3e211bf858cc3ecd41e8b86a55c07740ece29f349597",
                "value": 10
            },
            {
                "key": "ce924a8bc4ced8a2b9cef2e2cf7709b1a87f87bd84a9d645de96ec46a458a6c9",
                "value": 0
            },
            {
                "key": "cecdf953a3a32c0a4b68bba92abd69cd4f5aa2775f9d8a743a220d2eb17a3b59",
                "value": 0
            },
            {
                "key": "d0261c7789363ad7ce9ae5141e9a741d9a142328a416bb87c9190e3bb22b658a",
                "value": 0
            },
            {
                "key": "d3993f0dbfa0a7ffe019ea5c63bb887f72d9730964a71e9ea0fe5bf76301c7f3",
                "value": 0
            },
            {
                "key": "d64910b048759a11123441851c3e19f2e9019a338cc2a6b2633b0078a673c4ee",
                "value": 12
            },
            {
                "key": "d99d356fe2d208d401c0fa6c0b48c1cc5d56d3a75aae1234d0fa5b94b1eca690",
                "value": 0
            },
            {
                "key": "db4aea82c9238a3153b030418436ff69a19e455e58ac1239f0ac39a9d6147e0c",
                "value": 0
            },
            {
                "key": "dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                "value": 23
            },
            {
                "key": "e3c79fe52ad368d2d38dae9de9ac7ace7864189c9c2fede7ef112fa7948bdc52",
                "value": 2
            },
            {
                "key": "e4a30256acfdc7c833474a605b02bb2b218b72ad1f34b76b8c2e075a69c0aeb0",
                "value": 0
            },
            {
                "key": "e734ea6c2b6257de72355e472aa05a4c487e6b463c029ed306df2f01b5636b58",
                "value": 46
            },
            {
                "key": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 340
            },
            {
                "key": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": 23
            },
            {
                "key": "ef0e2de819ea8060e3de26fa322c71e581152dd2f282cbcda6f5655bc64db5d9",
                "value": 12
            },
            {
                "key": "f0222f00943416a8cacb2160e4af75faff36660b87e99279a045af1f4182dd1f",
                "value": 5
            },
            {
                "key": "f0943187fe4f5a01cf509308f6ef51b5722d8123d01a7ef535463832bb92c5b9",
                "value": 0
            },
            {
                "key": "f1938d26e36ad995a5151a795db0015001de40635f1fbf1d971bae3518846ccd",
                "value": 0
            },
            {
                "key": "f34430e0c1e6976993e225dd8b6dcba5259196a6dcda3dd03036dbd808170cc2",
                "value": 2
            },
            {
                "key": "f408f135b8db9d11daafae6b508c98a0cc79556c921b4fafe5d9ada0d5e3910d",
                "value": 0
            },
            {
                "key": "f4d0d7bee54dbd6b7c01ef726781e1ed501a0842937f943a7228c4214fef5d5f",
                "value": 0
            },
            {
                "key": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": 102
            }
        ]
    }
}
