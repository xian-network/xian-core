import asyncio
import logging
from io import BytesIO
import unittest

from abci.server import ProtocolHandler
from abci.utils import read_messages
from cometbft.abci.v1beta3.types_pb2 import Request, RequestFinalizeBlock, Response

from fixtures.multi_node import (
    setup_multi_node_fixtures,
    teardown_multi_node_fixtures,
    use_node_constants,
)

from xian.xian_abci import Xian

logging.disable(logging.CRITICAL)


async def deserialize(raw: bytes) -> Response:
    resp = next(read_messages(BytesIO(raw), Response))
    return resp


TX_BYTES = (
    b"7b226d65746164617461223a7b227369676e6174757265223a22666233346666376238346562"
    b"353538646436643862326534333032366232626564656536393534666535363161643632633663"
    b"616434616437336632386631346632383264356536656166396666306234316561386564373134"
    b"666231383262626334646338316163656335656662633136346234306432613139383537303922"
    b"7d2c227061796c6f6164223a7b22636861696e5f6964223a227869616e2d746573746e65742d31"
    b"222c22636f6e7472616374223a227375626d697373696f6e222c2266756e6374696f6e223a2273"
    b"75626d69745f636f6e7472616374222c226b7761726773223a7b22636f6465223a225c6e23204c"
    b"53543030315c6e62616c616e636573203d20486173682864656661756c745f76616c75653d3029"
    b"5c6e5c6e23204c53543030325c6e6d65746164617461203d204861736828295c6e5c6e40636f6e"
    b"7374727563745c6e646566207365656428293a5c6e2020202023204c5354303031202d204d494e"
    b"5420535550504c5920746f2077616c6c65742074686174207375626d6974732074686520636f6e"
    b"74726163745c6e2020202062616c616e6365735b6374782e63616c6c65725d203d20315f303030"
    b"5f3030305c6e5c6e2020202023204c53543030325c6e202020206d657461646174615b27746f6b"
    b"656e5f6e616d65275d203d205c22526f636b657473776170205465737420546f6b656e5c225c6e"
    b"202020206d657461646174615b27746f6b656e5f73796d626f6c275d203d205c22525357505c22"
    b"5c6e2020202023206d657461646174615b27746f6b656e5f6c6f676f5f75726c275d203d202768"
    b"747470733a2f2f736f6d652e746f6b656e2e75726c2f746573742d746f6b656e2e706e67275c6e"
    b"202020206d657461646174615b276f70657261746f72275d203d206374782e63616c6c65725c6e"
    b"5c6e23204c53543030325c6e406578706f72745c6e646566206368616e67655f6d657461646174"
    b"61286b65793a207374722c2076616c75653a20416e79293a5c6e20202020617373657274206374"
    b"782e63616c6c6572203d3d206d657461646174615b276f70657261746f72275d2c20274f6e6c79"
    b"206f70657261746f722063616e20736574206d6574616461746121275c6e202020206d65746164"
    b"6174615b6b65795d203d2076616c75655c6e5c6e23204c53543030315c6e406578706f72745c6e"
    b"646566207472616e7366657228616d6f756e743a20666c6f61742c20746f3a20737472293a5c6e"
    b"2020202061737365727420616d6f756e74203e20302c202743616e6e6f742073656e64206e6567"
    b"61746976652062616c616e63657321275c6e202020206173736572742062616c616e6365735b63"
    b"74782e63616c6c65725d203e3d20616d6f756e742c20274e6f7420656e6f75676820636f696e73"
    b"20746f2073656e6421275c6e5c6e2020202062616c616e6365735b6374782e63616c6c65725d20"
    b"2d3d20616d6f756e745c6e2020202062616c616e6365735b746f5d202b3d20616d6f756e745c6e"
    b"5c6e23204c53543030315c6e406578706f72745c6e64656620617070726f766528616d6f756e74"
    b"3a20666c6f61742c20746f3a20737472293a5c6e2020202061737365727420616d6f756e74203e"
    b"20302c202743616e6e6f742073656e64206e656761746976652062616c616e63657321275c6e20"
    b"20202062616c616e6365735b6374782e63616c6c65722c20746f5d202b3d20616d6f756e745c6e"
    b"5c6e23204c53543030315c6e406578706f72745c6e646566207472616e736665725f66726f6d28"
    b"616d6f756e743a20666c6f61742c20746f3a207374722c206d61696e5f6163636f756e743a2073"
    b"7472293a5c6e2020202061737365727420616d6f756e74203e20302c202743616e6e6f74207365"
    b"6e64206e656761746976652062616c616e63657321275c6e202020206173736572742062616c61"
    b"6e6365735b6d61696e5f6163636f756e742c206374782e63616c6c65725d203e3d20616d6f756e"
    b"742c20274e6f7420656e6f75676820636f696e7320617070726f76656420746f2073656e642120"
    b"596f752068617665207b7d20616e642061726520747279696e6720746f207370656e64207b7d27"
    b"202020202020202e666f726d61742862616c616e6365735b6d61696e5f6163636f756e742c2063"
    b"74782e63616c6c65725d2c20616d6f756e74295c6e202020206173736572742062616c616e6365"
    b"735b6d61696e5f6163636f756e745d203e3d20616d6f756e742c20274e6f7420656e6f75676820"
    b"636f696e7320746f2073656e6421275c6e5c6e2020202062616c616e6365735b6d61696e5f6163"
    b"636f756e742c206374782e63616c6c65725d202d3d20616d6f756e745c6e2020202062616c616e"
    b"6365735b6d61696e5f6163636f756e745d202d3d20616d6f756e745c6e2020202062616c616e63"
    b"65735b746f5d202b3d20616d6f756e745c6e222c226e616d65223a22636f6e5f74657374696e67"
    b"5f7375626d697373696f6e5f3836343932393539227d2c226e6f6e6365223a362c2273656e6465"
    b"72223a226539653861616432396365386539346664373764396335353538326535653063353763"
    b"6638316335353262613631633064346533346230646331316664393331222c227374616d70735f"
    b"737570706c696564223a35303030307d7d"
)


def make_finalize_block_request() -> Request:
    return Request(finalize_block=RequestFinalizeBlock(txs=[TX_BYTES]))


class TestMultiNodeAppHash(unittest.IsolatedAsyncioTestCase):
    async def asyncSetUp(self) -> None:
        self.node_dirs = setup_multi_node_fixtures(3)

    async def asyncTearDown(self) -> None:
        teardown_multi_node_fixtures()

    async def _process_request(self, app: Xian, request: Request) -> Response:
        handler = ProtocolHandler(app)
        raw = await handler.process("finalize_block", request)
        return await deserialize(raw)

    async def _run_node(self, node_dir, mutate=None) -> bytes:
        with use_node_constants(node_dir) as node_constants:
            app = await Xian.create(constants=node_constants)
            app.current_block_meta = {"height": 0, "nanos": 0}
            app.client.raw_driver.set("currency.balances:invalid_vk", 100000)

            if mutate is not None:
                maybe_coroutine = mutate(app)
                if asyncio.iscoroutine(maybe_coroutine):
                    await maybe_coroutine

            response = await self._process_request(app, make_finalize_block_request())
            return response.finalize_block.app_hash

    async def test_app_hash_consistency_across_nodes(self):
        hashes = []
        for node_dir in self.node_dirs:
            hashes.append(await self._run_node(node_dir))

        self.assertGreater(len(hashes), 1)
        self.assertTrue(all(h == hashes[0] for h in hashes[1:]))

    async def test_app_hash_divergence_detection(self):
        baseline_hash = await self._run_node(self.node_dirs[0])

        async def mutate(app: Xian) -> None:
            from xian.utils.block import set_latest_block_hash

            set_latest_block_hash(bytes.fromhex("11" * 32))

        divergent_hash = await self._run_node(self.node_dirs[1], mutate=mutate)

        self.assertNotEqual(baseline_hash, divergent_hash)


if __name__ == "__main__":
    unittest.main()
